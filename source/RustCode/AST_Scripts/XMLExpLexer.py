# Generated from XMLExp.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,296,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
        14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
        19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,
        23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
        25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,
        30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
        34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,4,
        36,229,8,36,11,36,12,36,230,1,37,1,37,5,37,235,8,37,10,37,12,37,
        238,9,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
        1,42,5,42,252,8,42,10,42,12,42,255,9,42,1,42,1,42,1,43,1,43,1,44,
        1,44,1,44,1,44,1,45,4,45,266,8,45,11,45,12,45,267,1,45,1,45,1,46,
        1,46,1,46,1,46,5,46,276,8,46,10,46,12,46,279,9,46,1,46,1,46,1,46,
        1,46,1,46,1,47,1,47,1,47,1,47,5,47,290,8,47,10,47,12,47,293,9,47,
        1,47,1,47,2,253,277,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,0,83,0,
        85,41,87,42,89,43,91,44,93,45,95,46,1,0,4,4,0,36,36,65,90,95,95,
        97,122,5,0,36,36,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,
        10,12,13,32,32,300,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
        0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,99,1,0,0,0,5,101,1,0,
        0,0,7,103,1,0,0,0,9,106,1,0,0,0,11,110,1,0,0,0,13,115,1,0,0,0,15,
        118,1,0,0,0,17,121,1,0,0,0,19,123,1,0,0,0,21,128,1,0,0,0,23,131,
        1,0,0,0,25,133,1,0,0,0,27,135,1,0,0,0,29,137,1,0,0,0,31,139,1,0,
        0,0,33,141,1,0,0,0,35,143,1,0,0,0,37,146,1,0,0,0,39,149,1,0,0,0,
        41,151,1,0,0,0,43,154,1,0,0,0,45,157,1,0,0,0,47,162,1,0,0,0,49,167,
        1,0,0,0,51,172,1,0,0,0,53,177,1,0,0,0,55,180,1,0,0,0,57,186,1,0,
        0,0,59,192,1,0,0,0,61,199,1,0,0,0,63,204,1,0,0,0,65,208,1,0,0,0,
        67,211,1,0,0,0,69,215,1,0,0,0,71,221,1,0,0,0,73,228,1,0,0,0,75,232,
        1,0,0,0,77,239,1,0,0,0,79,241,1,0,0,0,81,243,1,0,0,0,83,245,1,0,
        0,0,85,248,1,0,0,0,87,258,1,0,0,0,89,260,1,0,0,0,91,265,1,0,0,0,
        93,271,1,0,0,0,95,285,1,0,0,0,97,98,5,61,0,0,98,2,1,0,0,0,99,100,
        5,39,0,0,100,4,1,0,0,0,101,102,5,62,0,0,102,6,1,0,0,0,103,104,5,
        60,0,0,104,105,5,47,0,0,105,8,1,0,0,0,106,107,5,110,0,0,107,108,
        5,117,0,0,108,109,5,109,0,0,109,10,1,0,0,0,110,111,5,98,0,0,111,
        112,5,111,0,0,112,113,5,111,0,0,113,114,5,108,0,0,114,12,1,0,0,0,
        115,116,5,35,0,0,116,117,5,116,0,0,117,14,1,0,0,0,118,119,5,35,0,
        0,119,120,5,102,0,0,120,16,1,0,0,0,121,122,5,46,0,0,122,18,1,0,0,
        0,123,124,5,82,0,0,124,125,5,81,0,0,125,126,5,70,0,0,126,127,5,84,
        0,0,127,20,1,0,0,0,128,129,5,111,0,0,129,130,5,112,0,0,130,22,1,
        0,0,0,131,132,5,43,0,0,132,24,1,0,0,0,133,134,5,45,0,0,134,26,1,
        0,0,0,135,136,5,42,0,0,136,28,1,0,0,0,137,138,5,47,0,0,138,30,1,
        0,0,0,139,140,5,37,0,0,140,32,1,0,0,0,141,142,5,94,0,0,142,34,1,
        0,0,0,143,144,5,38,0,0,144,145,5,38,0,0,145,36,1,0,0,0,146,147,5,
        124,0,0,147,148,5,124,0,0,148,38,1,0,0,0,149,150,5,60,0,0,150,40,
        1,0,0,0,151,152,5,46,0,0,152,153,5,46,0,0,153,42,1,0,0,0,154,155,
        5,61,0,0,155,156,5,61,0,0,156,44,1,0,0,0,157,158,5,116,0,0,158,159,
        5,121,0,0,159,160,5,112,0,0,160,161,5,101,0,0,161,46,1,0,0,0,162,
        163,5,115,0,0,163,164,5,116,0,0,164,165,5,109,0,0,165,166,5,116,
        0,0,166,48,1,0,0,0,167,168,5,112,0,0,168,169,5,101,0,0,169,170,5,
        120,0,0,170,171,5,112,0,0,171,50,1,0,0,0,172,173,5,118,0,0,173,174,
        5,101,0,0,174,175,5,120,0,0,175,176,5,112,0,0,176,52,1,0,0,0,177,
        178,5,105,0,0,178,179,5,102,0,0,179,54,1,0,0,0,180,181,5,98,0,0,
        181,182,5,108,0,0,182,183,5,111,0,0,183,184,5,99,0,0,184,185,5,107,
        0,0,185,56,1,0,0,0,186,187,5,98,0,0,187,188,5,114,0,0,188,189,5,
        101,0,0,189,190,5,97,0,0,190,191,5,107,0,0,191,58,1,0,0,0,192,193,
        5,114,0,0,193,194,5,101,0,0,194,195,5,116,0,0,195,196,5,117,0,0,
        196,197,5,114,0,0,197,198,5,110,0,0,198,60,1,0,0,0,199,200,5,108,
        0,0,200,201,5,111,0,0,201,202,5,111,0,0,202,203,5,112,0,0,203,62,
        1,0,0,0,204,205,5,102,0,0,205,206,5,111,0,0,206,207,5,114,0,0,207,
        64,1,0,0,0,208,209,5,105,0,0,209,210,5,100,0,0,210,66,1,0,0,0,211,
        212,5,108,0,0,212,213,5,101,0,0,213,214,5,116,0,0,214,68,1,0,0,0,
        215,216,5,118,0,0,216,217,5,97,0,0,217,218,5,108,0,0,218,219,5,117,
        0,0,219,220,5,101,0,0,220,70,1,0,0,0,221,222,5,112,0,0,222,223,5,
        114,0,0,223,224,5,105,0,0,224,225,5,110,0,0,225,226,5,116,0,0,226,
        72,1,0,0,0,227,229,3,81,40,0,228,227,1,0,0,0,229,230,1,0,0,0,230,
        228,1,0,0,0,230,231,1,0,0,0,231,74,1,0,0,0,232,236,3,77,38,0,233,
        235,3,79,39,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,
        237,1,0,0,0,237,76,1,0,0,0,238,236,1,0,0,0,239,240,7,0,0,0,240,78,
        1,0,0,0,241,242,7,1,0,0,242,80,1,0,0,0,243,244,2,48,57,0,244,82,
        1,0,0,0,245,246,5,92,0,0,246,247,5,34,0,0,247,84,1,0,0,0,248,253,
        5,34,0,0,249,252,3,83,41,0,250,252,8,2,0,0,251,249,1,0,0,0,251,250,
        1,0,0,0,252,255,1,0,0,0,253,254,1,0,0,0,253,251,1,0,0,0,254,256,
        1,0,0,0,255,253,1,0,0,0,256,257,5,34,0,0,257,86,1,0,0,0,258,259,
        5,64,0,0,259,88,1,0,0,0,260,261,5,46,0,0,261,262,5,46,0,0,262,263,
        5,46,0,0,263,90,1,0,0,0,264,266,7,3,0,0,265,264,1,0,0,0,266,267,
        1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,270,
        6,45,0,0,270,92,1,0,0,0,271,272,5,47,0,0,272,273,5,42,0,0,273,277,
        1,0,0,0,274,276,9,0,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,278,
        1,0,0,0,277,275,1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,281,
        5,42,0,0,281,282,5,47,0,0,282,283,1,0,0,0,283,284,6,46,0,0,284,94,
        1,0,0,0,285,286,5,47,0,0,286,287,5,47,0,0,287,291,1,0,0,0,288,290,
        8,2,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,
        1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,295,6,47,0,0,295,96,
        1,0,0,0,8,0,230,236,251,253,267,277,291,1,6,0,0
    ]

class XMLExpLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    TrueLiteral = 7
    FalseLiteral = 8
    Dot = 9
    RQFT = 10
    OP = 11
    Plus = 12
    Minus = 13
    Times = 14
    Div = 15
    Mod = 16
    Exp = 17
    And = 18
    Or = 19
    Less = 20
    Range = 21
    Equal = 22
    Type = 23
    STMT = 24
    PEXP = 25
    VEXP = 26
    IF = 27
    Block = 28
    Break = 29
    Return = 30
    Loop = 31
    For = 32
    ID = 33
    Let = 34
    Value = 35
    Print = 36
    Number = 37
    Identifier = 38
    Letter = 39
    LetterOrDigit = 40
    StrLiteral = 41
    AT = 42
    ELLIPSIS = 43
    WS = 44
    Comment = 45
    Line_Comment = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'''", "'>'", "'</'", "'num'", "'bool'", "'#t'", "'#f'", 
            "'.'", "'RQFT'", "'op'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'^'", "'&&'", "'||'", "'<'", "'..'", "'=='", "'type'", "'stmt'", 
            "'pexp'", "'vexp'", "'if'", "'block'", "'break'", "'return'", 
            "'loop'", "'for'", "'id'", "'let'", "'value'", "'print'", "'@'", 
            "'...'" ]

    symbolicNames = [ "<INVALID>",
            "TrueLiteral", "FalseLiteral", "Dot", "RQFT", "OP", "Plus", 
            "Minus", "Times", "Div", "Mod", "Exp", "And", "Or", "Less", 
            "Range", "Equal", "Type", "STMT", "PEXP", "VEXP", "IF", "Block", 
            "Break", "Return", "Loop", "For", "ID", "Let", "Value", "Print", 
            "Number", "Identifier", "Letter", "LetterOrDigit", "StrLiteral", 
            "AT", "ELLIPSIS", "WS", "Comment", "Line_Comment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "TrueLiteral", 
                  "FalseLiteral", "Dot", "RQFT", "OP", "Plus", "Minus", 
                  "Times", "Div", "Mod", "Exp", "And", "Or", "Less", "Range", 
                  "Equal", "Type", "STMT", "PEXP", "VEXP", "IF", "Block", 
                  "Break", "Return", "Loop", "For", "ID", "Let", "Value", 
                  "Print", "Number", "Identifier", "Letter", "LetterOrDigit", 
                  "DIGIT", "ESCQUOTE", "StrLiteral", "AT", "ELLIPSIS", "WS", 
                  "Comment", "Line_Comment" ]

    grammarFileName = "XMLExp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


