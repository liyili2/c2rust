# Generated from XMLExp.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,325,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
        12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,
        17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,
        21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
        26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,
        31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
        34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,4,
        39,254,8,39,11,39,12,39,255,1,40,1,40,1,40,1,40,1,41,1,41,5,41,264,
        8,41,10,41,12,41,267,9,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,
        1,45,1,46,1,46,1,46,5,46,281,8,46,10,46,12,46,284,9,46,1,46,1,46,
        1,47,1,47,1,48,1,48,1,48,1,48,1,49,4,49,295,8,49,11,49,12,49,296,
        1,49,1,49,1,50,1,50,1,50,1,50,5,50,305,8,50,10,50,12,50,308,9,50,
        1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,319,8,51,10,51,
        12,51,322,9,51,1,51,1,51,2,282,306,0,52,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,0,91,0,93,45,95,46,97,47,99,48,101,
        49,103,50,1,0,4,4,0,36,36,65,90,95,95,97,122,5,0,36,36,48,57,65,
        90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,12,13,32,32,329,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
        0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,
        0,0,3,107,1,0,0,0,5,109,1,0,0,0,7,111,1,0,0,0,9,114,1,0,0,0,11,117,
        1,0,0,0,13,120,1,0,0,0,15,122,1,0,0,0,17,127,1,0,0,0,19,130,1,0,
        0,0,21,132,1,0,0,0,23,134,1,0,0,0,25,136,1,0,0,0,27,138,1,0,0,0,
        29,140,1,0,0,0,31,142,1,0,0,0,33,145,1,0,0,0,35,148,1,0,0,0,37,150,
        1,0,0,0,39,153,1,0,0,0,41,156,1,0,0,0,43,161,1,0,0,0,45,166,1,0,
        0,0,47,171,1,0,0,0,49,176,1,0,0,0,51,179,1,0,0,0,53,185,1,0,0,0,
        55,191,1,0,0,0,57,197,1,0,0,0,59,204,1,0,0,0,61,209,1,0,0,0,63,213,
        1,0,0,0,65,216,1,0,0,0,67,220,1,0,0,0,69,224,1,0,0,0,71,228,1,0,
        0,0,73,233,1,0,0,0,75,239,1,0,0,0,77,246,1,0,0,0,79,253,1,0,0,0,
        81,257,1,0,0,0,83,261,1,0,0,0,85,268,1,0,0,0,87,270,1,0,0,0,89,272,
        1,0,0,0,91,274,1,0,0,0,93,277,1,0,0,0,95,287,1,0,0,0,97,289,1,0,
        0,0,99,294,1,0,0,0,101,300,1,0,0,0,103,314,1,0,0,0,105,106,5,61,
        0,0,106,2,1,0,0,0,107,108,5,39,0,0,108,4,1,0,0,0,109,110,5,62,0,
        0,110,6,1,0,0,0,111,112,5,60,0,0,112,113,5,47,0,0,113,8,1,0,0,0,
        114,115,5,35,0,0,115,116,5,116,0,0,116,10,1,0,0,0,117,118,5,35,0,
        0,118,119,5,102,0,0,119,12,1,0,0,0,120,121,5,46,0,0,121,14,1,0,0,
        0,122,123,5,82,0,0,123,124,5,81,0,0,124,125,5,70,0,0,125,126,5,84,
        0,0,126,16,1,0,0,0,127,128,5,111,0,0,128,129,5,112,0,0,129,18,1,
        0,0,0,130,131,5,43,0,0,131,20,1,0,0,0,132,133,5,45,0,0,133,22,1,
        0,0,0,134,135,5,42,0,0,135,24,1,0,0,0,136,137,5,47,0,0,137,26,1,
        0,0,0,138,139,5,37,0,0,139,28,1,0,0,0,140,141,5,94,0,0,141,30,1,
        0,0,0,142,143,5,38,0,0,143,144,5,38,0,0,144,32,1,0,0,0,145,146,5,
        124,0,0,146,147,5,124,0,0,147,34,1,0,0,0,148,149,5,60,0,0,149,36,
        1,0,0,0,150,151,5,46,0,0,151,152,5,46,0,0,152,38,1,0,0,0,153,154,
        5,61,0,0,154,155,5,61,0,0,155,40,1,0,0,0,156,157,5,116,0,0,157,158,
        5,121,0,0,158,159,5,112,0,0,159,160,5,101,0,0,160,42,1,0,0,0,161,
        162,5,115,0,0,162,163,5,116,0,0,163,164,5,109,0,0,164,165,5,116,
        0,0,165,44,1,0,0,0,166,167,5,112,0,0,167,168,5,101,0,0,168,169,5,
        120,0,0,169,170,5,112,0,0,170,46,1,0,0,0,171,172,5,118,0,0,172,173,
        5,101,0,0,173,174,5,120,0,0,174,175,5,112,0,0,175,48,1,0,0,0,176,
        177,5,105,0,0,177,178,5,102,0,0,178,50,1,0,0,0,179,180,5,98,0,0,
        180,181,5,108,0,0,181,182,5,111,0,0,182,183,5,99,0,0,183,184,5,107,
        0,0,184,52,1,0,0,0,185,186,5,98,0,0,186,187,5,114,0,0,187,188,5,
        101,0,0,188,189,5,97,0,0,189,190,5,107,0,0,190,54,1,0,0,0,191,192,
        5,109,0,0,192,193,5,97,0,0,193,194,5,116,0,0,194,195,5,99,0,0,195,
        196,5,104,0,0,196,56,1,0,0,0,197,198,5,114,0,0,198,199,5,101,0,0,
        199,200,5,116,0,0,200,201,5,117,0,0,201,202,5,114,0,0,202,203,5,
        110,0,0,203,58,1,0,0,0,204,205,5,108,0,0,205,206,5,111,0,0,206,207,
        5,111,0,0,207,208,5,112,0,0,208,60,1,0,0,0,209,210,5,102,0,0,210,
        211,5,111,0,0,211,212,5,114,0,0,212,62,1,0,0,0,213,214,5,105,0,0,
        214,215,5,100,0,0,215,64,1,0,0,0,216,217,5,109,0,0,217,218,5,117,
        0,0,218,219,5,116,0,0,219,66,1,0,0,0,220,221,5,108,0,0,221,222,5,
        101,0,0,222,223,5,116,0,0,223,68,1,0,0,0,224,225,5,105,0,0,225,226,
        5,110,0,0,226,227,5,116,0,0,227,70,1,0,0,0,228,229,5,98,0,0,229,
        230,5,111,0,0,230,231,5,111,0,0,231,232,5,108,0,0,232,72,1,0,0,0,
        233,234,5,118,0,0,234,235,5,97,0,0,235,236,5,108,0,0,236,237,5,117,
        0,0,237,238,5,101,0,0,238,74,1,0,0,0,239,240,5,115,0,0,240,241,5,
        116,0,0,241,242,5,114,0,0,242,243,5,105,0,0,243,244,5,110,0,0,244,
        245,5,103,0,0,245,76,1,0,0,0,246,247,5,112,0,0,247,248,5,114,0,0,
        248,249,5,105,0,0,249,250,5,110,0,0,250,251,5,116,0,0,251,78,1,0,
        0,0,252,254,3,89,44,0,253,252,1,0,0,0,254,255,1,0,0,0,255,253,1,
        0,0,0,255,256,1,0,0,0,256,80,1,0,0,0,257,258,5,110,0,0,258,259,5,
        117,0,0,259,260,5,109,0,0,260,82,1,0,0,0,261,265,3,85,42,0,262,264,
        3,87,43,0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,
        1,0,0,0,266,84,1,0,0,0,267,265,1,0,0,0,268,269,7,0,0,0,269,86,1,
        0,0,0,270,271,7,1,0,0,271,88,1,0,0,0,272,273,2,48,57,0,273,90,1,
        0,0,0,274,275,5,92,0,0,275,276,5,34,0,0,276,92,1,0,0,0,277,282,5,
        34,0,0,278,281,3,91,45,0,279,281,8,2,0,0,280,278,1,0,0,0,280,279,
        1,0,0,0,281,284,1,0,0,0,282,283,1,0,0,0,282,280,1,0,0,0,283,285,
        1,0,0,0,284,282,1,0,0,0,285,286,5,34,0,0,286,94,1,0,0,0,287,288,
        5,64,0,0,288,96,1,0,0,0,289,290,5,46,0,0,290,291,5,46,0,0,291,292,
        5,46,0,0,292,98,1,0,0,0,293,295,7,3,0,0,294,293,1,0,0,0,295,296,
        1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,
        6,49,0,0,299,100,1,0,0,0,300,301,5,47,0,0,301,302,5,42,0,0,302,306,
        1,0,0,0,303,305,9,0,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,307,
        1,0,0,0,306,304,1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,0,309,310,
        5,42,0,0,310,311,5,47,0,0,311,312,1,0,0,0,312,313,6,50,0,0,313,102,
        1,0,0,0,314,315,5,47,0,0,315,316,5,47,0,0,316,320,1,0,0,0,317,319,
        8,2,0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,
        1,0,0,0,321,323,1,0,0,0,322,320,1,0,0,0,323,324,6,51,0,0,324,104,
        1,0,0,0,8,0,255,265,280,282,296,306,320,1,6,0,0
    ]

class XMLExpLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    TrueLiteral = 5
    FalseLiteral = 6
    Dot = 7
    RQFT = 8
    OP = 9
    Plus = 10
    Minus = 11
    Times = 12
    Div = 13
    Mod = 14
    Exp = 15
    And = 16
    Or = 17
    Less = 18
    Range = 19
    Equal = 20
    Type = 21
    STMT = 22
    PEXP = 23
    VEXP = 24
    IF = 25
    Block = 26
    Break = 27
    Match = 28
    Return = 29
    Loop = 30
    For = 31
    ID = 32
    Mut = 33
    Let = 34
    Int = 35
    Bool = 36
    Value = 37
    String = 38
    Print = 39
    Number = 40
    NUM = 41
    Identifier = 42
    Letter = 43
    LetterOrDigit = 44
    StrLiteral = 45
    AT = 46
    ELLIPSIS = 47
    WS = 48
    Comment = 49
    Line_Comment = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'''", "'>'", "'</'", "'#t'", "'#f'", "'.'", "'RQFT'", 
            "'op'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&&'", "'||'", 
            "'<'", "'..'", "'=='", "'type'", "'stmt'", "'pexp'", "'vexp'", 
            "'if'", "'block'", "'break'", "'match'", "'return'", "'loop'", 
            "'for'", "'id'", "'mut'", "'let'", "'int'", "'bool'", "'value'", 
            "'string'", "'print'", "'num'", "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>",
            "TrueLiteral", "FalseLiteral", "Dot", "RQFT", "OP", "Plus", 
            "Minus", "Times", "Div", "Mod", "Exp", "And", "Or", "Less", 
            "Range", "Equal", "Type", "STMT", "PEXP", "VEXP", "IF", "Block", 
            "Break", "Match", "Return", "Loop", "For", "ID", "Mut", "Let", 
            "Int", "Bool", "Value", "String", "Print", "Number", "NUM", 
            "Identifier", "Letter", "LetterOrDigit", "StrLiteral", "AT", 
            "ELLIPSIS", "WS", "Comment", "Line_Comment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "TrueLiteral", "FalseLiteral", 
                  "Dot", "RQFT", "OP", "Plus", "Minus", "Times", "Div", 
                  "Mod", "Exp", "And", "Or", "Less", "Range", "Equal", "Type", 
                  "STMT", "PEXP", "VEXP", "IF", "Block", "Break", "Match", 
                  "Return", "Loop", "For", "ID", "Mut", "Let", "Int", "Bool", 
                  "Value", "String", "Print", "Number", "NUM", "Identifier", 
                  "Letter", "LetterOrDigit", "DIGIT", "ESCQUOTE", "StrLiteral", 
                  "AT", "ELLIPSIS", "WS", "Comment", "Line_Comment" ]

    grammarFileName = "XMLExp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


