# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,85,931,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,1,0,5,0,126,8,0,10,0,12,0,129,9,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,140,8,1,1,2,3,2,143,8,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,155,8,3,10,3,12,3,158,9,3,
        1,3,1,3,1,4,3,4,163,8,4,1,4,1,4,1,4,1,4,3,4,169,8,4,1,4,1,4,3,4,
        173,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,181,8,4,1,4,1,4,1,4,1,4,3,4,
        187,8,4,1,4,1,4,1,4,3,4,192,8,4,1,4,3,4,195,8,4,1,5,1,5,1,5,5,5,
        200,8,5,10,5,12,5,203,9,5,1,5,1,5,3,5,207,8,5,1,5,3,5,210,8,5,1,
        6,3,6,213,8,6,1,6,1,6,1,6,3,6,218,8,6,1,7,1,7,1,8,4,8,223,8,8,11,
        8,12,8,224,1,9,1,9,3,9,229,8,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,3,10,244,8,10,1,11,1,11,1,11,5,11,249,
        8,11,10,11,12,11,252,9,11,1,12,1,12,1,12,3,12,257,8,12,1,13,1,13,
        1,14,3,14,262,8,14,1,14,1,14,1,14,1,14,5,14,268,8,14,10,14,12,14,
        271,9,14,1,14,1,14,1,15,3,15,276,8,15,1,15,1,15,1,15,1,15,3,15,282,
        8,15,1,16,3,16,285,8,16,1,16,3,16,288,8,16,1,16,3,16,291,8,16,1,
        16,1,16,1,16,1,16,1,16,3,16,298,8,16,1,16,3,16,301,8,16,1,16,3,16,
        304,8,16,1,16,3,16,307,8,16,1,16,1,16,1,17,1,17,1,18,1,18,3,18,315,
        8,18,1,19,1,19,1,19,5,19,320,8,19,10,19,12,19,323,9,19,1,19,3,19,
        326,8,19,1,20,3,20,329,8,20,1,20,1,20,1,20,1,20,1,21,3,21,336,8,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,3,22,347,8,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,359,8,22,10,
        22,12,22,362,9,22,1,22,3,22,365,8,22,1,23,3,23,368,8,23,1,23,1,23,
        1,23,1,23,3,23,374,8,23,1,24,3,24,377,8,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,3,26,392,8,26,1,27,1,
        27,1,27,3,27,397,8,27,1,27,1,27,1,27,5,27,402,8,27,10,27,12,27,405,
        9,27,3,27,407,8,27,1,28,1,28,1,28,3,28,412,8,28,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,424,8,29,10,29,12,29,427,9,
        29,1,29,1,29,3,29,431,8,29,1,29,1,29,1,29,1,29,1,29,5,29,438,8,29,
        10,29,12,29,441,9,29,1,29,1,29,3,29,445,8,29,1,29,1,29,1,29,3,29,
        450,8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,3,29,464,8,29,1,30,1,30,5,30,468,8,30,10,30,12,30,471,9,30,
        1,30,3,30,474,8,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,4,31,502,8,31,11,31,12,31,503,1,31,1,31,1,31,
        1,31,1,31,5,31,511,8,31,10,31,12,31,514,9,31,1,31,1,31,1,31,3,31,
        519,8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,3,34,529,8,34,1,
        34,1,34,3,34,533,8,34,1,34,1,34,1,34,1,34,3,34,539,8,34,1,34,1,34,
        1,34,1,34,1,35,1,35,3,35,547,8,35,1,36,1,36,1,36,1,36,1,36,1,36,
        1,37,1,37,3,37,557,8,37,1,37,1,37,1,37,3,37,562,8,37,1,37,1,37,1,
        37,1,37,3,37,568,8,37,1,37,1,37,1,37,3,37,573,8,37,3,37,575,8,37,
        1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,
        1,40,1,40,1,40,3,40,593,8,40,1,41,1,41,1,41,1,42,1,42,3,42,600,8,
        42,1,42,1,42,3,42,604,8,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
        44,1,44,1,44,3,44,629,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,4,44,642,8,44,11,44,12,44,643,1,44,1,44,1,44,1,
        44,1,44,3,44,651,8,44,3,44,653,8,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,5,44,677,8,44,10,44,12,44,680,9,44,5,44,682,8,44,
        10,44,12,44,685,9,44,1,45,1,45,5,45,689,8,45,10,45,12,45,692,9,45,
        1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,704,8,47,
        1,47,3,47,707,8,47,1,47,1,47,4,47,711,8,47,11,47,12,47,712,1,47,
        1,47,1,47,1,47,3,47,719,8,47,1,47,1,47,3,47,723,8,47,1,47,1,47,1,
        47,1,47,4,47,729,8,47,11,47,12,47,730,1,48,1,48,1,48,1,48,1,48,1,
        48,3,48,739,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,5,48,751,8,48,10,48,12,48,754,9,48,1,48,3,48,757,8,48,1,48,1,
        48,3,48,761,8,48,1,49,1,49,1,49,1,49,3,49,767,8,49,1,49,1,49,1,49,
        3,49,772,8,49,1,49,3,49,775,8,49,1,49,1,49,1,49,5,49,780,8,49,10,
        49,12,49,783,9,49,1,49,1,49,5,49,787,8,49,10,49,12,49,790,9,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,799,8,49,10,49,12,49,802,9,
        49,1,49,3,49,805,8,49,3,49,807,8,49,1,50,1,50,1,50,1,50,5,50,813,
        8,50,10,50,12,50,816,9,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,
        1,52,5,52,827,8,52,10,52,12,52,830,9,52,1,52,1,52,1,52,1,53,1,53,
        1,54,1,54,3,54,839,8,54,1,54,1,54,1,54,3,54,844,8,54,5,54,846,8,
        54,10,54,12,54,849,9,54,1,54,3,54,852,8,54,1,54,1,54,4,54,856,8,
        54,11,54,12,54,857,1,54,1,54,1,54,1,54,1,54,3,54,865,8,54,3,54,867,
        8,54,1,55,1,55,1,55,1,55,1,56,1,56,3,56,875,8,56,1,56,1,56,1,56,
        3,56,880,8,56,1,56,3,56,883,8,56,1,57,1,57,1,57,3,57,888,8,57,1,
        58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,899,8,58,1,59,1,
        59,1,60,1,60,1,60,1,60,5,60,907,8,60,10,60,12,60,910,9,60,1,60,1,
        60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,920,8,60,1,61,1,61,5,61,924,
        8,61,10,61,12,61,927,9,61,1,61,1,61,1,61,1,925,1,88,62,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,120,122,0,8,2,0,66,66,
        81,81,1,0,65,67,2,0,8,8,15,15,1,0,24,31,2,0,17,18,46,52,3,0,23,23,
        53,56,74,74,2,0,66,67,81,81,1,0,62,63,1046,0,127,1,0,0,0,2,139,1,
        0,0,0,4,142,1,0,0,0,6,150,1,0,0,0,8,194,1,0,0,0,10,209,1,0,0,0,12,
        212,1,0,0,0,14,219,1,0,0,0,16,222,1,0,0,0,18,226,1,0,0,0,20,243,
        1,0,0,0,22,245,1,0,0,0,24,253,1,0,0,0,26,258,1,0,0,0,28,261,1,0,
        0,0,30,275,1,0,0,0,32,284,1,0,0,0,34,310,1,0,0,0,36,312,1,0,0,0,
        38,316,1,0,0,0,40,328,1,0,0,0,42,335,1,0,0,0,44,346,1,0,0,0,46,367,
        1,0,0,0,48,376,1,0,0,0,50,386,1,0,0,0,52,391,1,0,0,0,54,406,1,0,
        0,0,56,408,1,0,0,0,58,463,1,0,0,0,60,465,1,0,0,0,62,518,1,0,0,0,
        64,520,1,0,0,0,66,523,1,0,0,0,68,528,1,0,0,0,70,546,1,0,0,0,72,548,
        1,0,0,0,74,574,1,0,0,0,76,576,1,0,0,0,78,581,1,0,0,0,80,587,1,0,
        0,0,82,594,1,0,0,0,84,603,1,0,0,0,86,605,1,0,0,0,88,652,1,0,0,0,
        90,686,1,0,0,0,92,696,1,0,0,0,94,699,1,0,0,0,96,760,1,0,0,0,98,806,
        1,0,0,0,100,808,1,0,0,0,102,819,1,0,0,0,104,823,1,0,0,0,106,834,
        1,0,0,0,108,866,1,0,0,0,110,868,1,0,0,0,112,882,1,0,0,0,114,884,
        1,0,0,0,116,898,1,0,0,0,118,900,1,0,0,0,120,919,1,0,0,0,122,921,
        1,0,0,0,124,126,3,2,1,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,
        1,0,0,0,127,128,1,0,0,0,128,1,1,0,0,0,129,127,1,0,0,0,130,140,3,
        32,16,0,131,140,3,28,14,0,132,140,3,16,8,0,133,140,3,6,3,0,134,140,
        3,4,2,0,135,140,3,42,21,0,136,140,3,44,22,0,137,140,3,48,24,0,138,
        140,3,68,34,0,139,130,1,0,0,0,139,131,1,0,0,0,139,132,1,0,0,0,139,
        133,1,0,0,0,139,134,1,0,0,0,139,135,1,0,0,0,139,136,1,0,0,0,139,
        137,1,0,0,0,139,138,1,0,0,0,140,3,1,0,0,0,141,143,3,14,7,0,142,141,
        1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,5,1,0,0,145,146,
        5,66,0,0,146,147,5,2,0,0,147,148,3,52,26,0,148,149,5,3,0,0,149,5,
        1,0,0,0,150,151,5,4,0,0,151,152,5,65,0,0,152,156,5,5,0,0,153,155,
        3,8,4,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,
        1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,6,0,0,160,7,1,
        0,0,0,161,163,3,14,7,0,162,161,1,0,0,0,162,163,1,0,0,0,163,164,1,
        0,0,0,164,165,5,1,0,0,165,166,5,66,0,0,166,195,5,3,0,0,167,169,3,
        14,7,0,168,167,1,0,0,0,168,169,1,0,0,0,169,170,1,0,0,0,170,172,5,
        7,0,0,171,173,5,8,0,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,1,
        0,0,0,174,175,5,66,0,0,175,176,5,82,0,0,176,177,3,52,26,0,177,178,
        5,3,0,0,178,195,1,0,0,0,179,181,3,14,7,0,180,179,1,0,0,0,180,181,
        1,0,0,0,181,182,1,0,0,0,182,183,5,9,0,0,183,184,5,66,0,0,184,186,
        5,79,0,0,185,187,3,10,5,0,186,185,1,0,0,0,186,187,1,0,0,0,187,188,
        1,0,0,0,188,191,5,80,0,0,189,190,5,10,0,0,190,192,3,52,26,0,191,
        189,1,0,0,0,191,192,1,0,0,0,192,193,1,0,0,0,193,195,5,3,0,0,194,
        162,1,0,0,0,194,168,1,0,0,0,194,180,1,0,0,0,195,9,1,0,0,0,196,201,
        3,12,6,0,197,198,5,78,0,0,198,200,3,12,6,0,199,197,1,0,0,0,200,203,
        1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,206,1,0,0,0,203,201,
        1,0,0,0,204,205,5,78,0,0,205,207,5,83,0,0,206,204,1,0,0,0,206,207,
        1,0,0,0,207,210,1,0,0,0,208,210,5,83,0,0,209,196,1,0,0,0,209,208,
        1,0,0,0,210,11,1,0,0,0,211,213,7,0,0,0,212,211,1,0,0,0,212,213,1,
        0,0,0,213,214,1,0,0,0,214,217,5,82,0,0,215,218,3,52,26,0,216,218,
        5,83,0,0,217,215,1,0,0,0,217,216,1,0,0,0,218,13,1,0,0,0,219,220,
        5,11,0,0,220,15,1,0,0,0,221,223,3,18,9,0,222,221,1,0,0,0,223,224,
        1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,17,1,0,0,0,226,228,5,
        75,0,0,227,229,5,73,0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,
        1,0,0,0,230,231,5,76,0,0,231,232,3,20,10,0,232,233,5,77,0,0,233,
        19,1,0,0,0,234,244,5,66,0,0,235,236,5,66,0,0,236,237,5,2,0,0,237,
        244,3,26,13,0,238,239,5,66,0,0,239,240,5,79,0,0,240,241,3,22,11,
        0,241,242,5,80,0,0,242,244,1,0,0,0,243,234,1,0,0,0,243,235,1,0,0,
        0,243,238,1,0,0,0,244,21,1,0,0,0,245,250,3,24,12,0,246,247,5,78,
        0,0,247,249,3,24,12,0,248,246,1,0,0,0,249,252,1,0,0,0,250,248,1,
        0,0,0,250,251,1,0,0,0,251,23,1,0,0,0,252,250,1,0,0,0,253,256,5,66,
        0,0,254,255,5,2,0,0,255,257,3,26,13,0,256,254,1,0,0,0,256,257,1,
        0,0,0,257,25,1,0,0,0,258,259,7,1,0,0,259,27,1,0,0,0,260,262,3,14,
        7,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,264,5,12,
        0,0,264,265,5,66,0,0,265,269,5,5,0,0,266,268,3,30,15,0,267,266,1,
        0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,272,1,
        0,0,0,271,269,1,0,0,0,272,273,5,6,0,0,273,29,1,0,0,0,274,276,3,14,
        7,0,275,274,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,278,5,66,
        0,0,278,279,5,82,0,0,279,281,3,52,26,0,280,282,5,78,0,0,281,280,
        1,0,0,0,281,282,1,0,0,0,282,31,1,0,0,0,283,285,3,14,7,0,284,283,
        1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,288,3,34,17,0,287,286,
        1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,291,3,36,18,0,290,289,
        1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,5,9,0,0,293,300,
        5,66,0,0,294,301,5,13,0,0,295,297,5,79,0,0,296,298,3,38,19,0,297,
        296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,5,80,0,0,300,
        294,1,0,0,0,300,295,1,0,0,0,301,303,1,0,0,0,302,304,5,10,0,0,303,
        302,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,0,305,307,3,52,26,0,306,
        305,1,0,0,0,306,307,1,0,0,0,307,308,1,0,0,0,308,309,3,60,30,0,309,
        33,1,0,0,0,310,311,5,14,0,0,311,35,1,0,0,0,312,314,5,4,0,0,313,315,
        5,65,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,37,1,0,0,0,316,321,
        3,40,20,0,317,318,5,78,0,0,318,320,3,40,20,0,319,317,1,0,0,0,320,
        323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,325,1,0,0,0,323,
        321,1,0,0,0,324,326,5,78,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,
        39,1,0,0,0,327,329,5,8,0,0,328,327,1,0,0,0,328,329,1,0,0,0,329,330,
        1,0,0,0,330,331,5,66,0,0,331,332,5,82,0,0,332,333,3,52,26,0,333,
        41,1,0,0,0,334,336,3,14,7,0,335,334,1,0,0,0,335,336,1,0,0,0,336,
        337,1,0,0,0,337,338,5,15,0,0,338,339,5,66,0,0,339,340,5,82,0,0,340,
        341,3,52,26,0,341,342,5,2,0,0,342,343,3,88,44,0,343,344,5,3,0,0,
        344,43,1,0,0,0,345,347,3,14,7,0,346,345,1,0,0,0,346,347,1,0,0,0,
        347,348,1,0,0,0,348,349,5,16,0,0,349,364,5,66,0,0,350,351,5,82,0,
        0,351,352,3,52,26,0,352,353,5,2,0,0,353,354,3,88,44,0,354,355,5,
        3,0,0,355,365,1,0,0,0,356,360,5,5,0,0,357,359,3,46,23,0,358,357,
        1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,363,
        1,0,0,0,362,360,1,0,0,0,363,365,5,6,0,0,364,350,1,0,0,0,364,356,
        1,0,0,0,365,45,1,0,0,0,366,368,3,14,7,0,367,366,1,0,0,0,367,368,
        1,0,0,0,368,369,1,0,0,0,369,370,5,66,0,0,370,371,5,82,0,0,371,373,
        3,52,26,0,372,374,5,78,0,0,373,372,1,0,0,0,373,374,1,0,0,0,374,47,
        1,0,0,0,375,377,3,14,7,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,
        1,0,0,0,378,379,5,14,0,0,379,380,5,66,0,0,380,381,5,82,0,0,381,382,
        3,52,26,0,382,383,5,2,0,0,383,384,3,88,44,0,384,385,5,3,0,0,385,
        49,1,0,0,0,386,387,5,17,0,0,387,388,3,52,26,0,388,51,1,0,0,0,389,
        392,3,58,29,0,390,392,3,56,28,0,391,389,1,0,0,0,391,390,1,0,0,0,
        392,53,1,0,0,0,393,394,5,66,0,0,394,407,5,72,0,0,395,397,5,72,0,
        0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,403,5,66,0,
        0,399,400,5,72,0,0,400,402,5,66,0,0,401,399,1,0,0,0,402,405,1,0,
        0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,407,1,0,0,0,405,403,1,0,
        0,0,406,393,1,0,0,0,406,396,1,0,0,0,407,55,1,0,0,0,408,409,5,18,
        0,0,409,411,7,2,0,0,410,412,3,52,26,0,411,410,1,0,0,0,411,412,1,
        0,0,0,412,57,1,0,0,0,413,464,5,19,0,0,414,464,5,20,0,0,415,464,5,
        21,0,0,416,464,5,22,0,0,417,464,5,13,0,0,418,430,3,54,27,0,419,420,
        5,23,0,0,420,425,3,52,26,0,421,422,5,78,0,0,422,424,3,52,26,0,423,
        421,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,
        428,1,0,0,0,427,425,1,0,0,0,428,429,5,74,0,0,429,431,1,0,0,0,430,
        419,1,0,0,0,430,431,1,0,0,0,431,464,1,0,0,0,432,444,5,66,0,0,433,
        434,5,23,0,0,434,439,3,52,26,0,435,436,5,78,0,0,436,438,3,52,26,
        0,437,435,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,
        0,440,442,1,0,0,0,441,439,1,0,0,0,442,443,5,74,0,0,443,445,1,0,0,
        0,444,433,1,0,0,0,444,445,1,0,0,0,445,464,1,0,0,0,446,447,5,17,0,
        0,447,464,3,52,26,0,448,450,3,54,27,0,449,448,1,0,0,0,449,450,1,
        0,0,0,450,451,1,0,0,0,451,452,5,76,0,0,452,453,3,52,26,0,453,454,
        5,3,0,0,454,455,5,67,0,0,455,456,5,77,0,0,456,464,1,0,0,0,457,464,
        3,54,27,0,458,459,5,76,0,0,459,460,3,52,26,0,460,461,5,77,0,0,461,
        464,1,0,0,0,462,464,5,66,0,0,463,413,1,0,0,0,463,414,1,0,0,0,463,
        415,1,0,0,0,463,416,1,0,0,0,463,417,1,0,0,0,463,418,1,0,0,0,463,
        432,1,0,0,0,463,446,1,0,0,0,463,449,1,0,0,0,463,457,1,0,0,0,463,
        458,1,0,0,0,463,462,1,0,0,0,464,59,1,0,0,0,465,469,5,5,0,0,466,468,
        3,62,31,0,467,466,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,470,
        1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,472,474,3,84,42,0,473,472,
        1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,476,5,6,0,0,476,61,1,
        0,0,0,477,519,3,72,36,0,478,519,3,68,34,0,479,519,3,76,38,0,480,
        481,5,66,0,0,481,519,5,3,0,0,482,483,3,88,44,0,483,484,7,3,0,0,484,
        485,3,88,44,0,485,486,5,3,0,0,486,519,1,0,0,0,487,519,3,78,39,0,
        488,519,3,80,40,0,489,519,3,82,41,0,490,519,3,66,33,0,491,519,3,
        84,42,0,492,519,3,86,43,0,493,494,5,32,0,0,494,519,5,3,0,0,495,496,
        5,33,0,0,496,519,5,3,0,0,497,498,5,34,0,0,498,499,3,88,44,0,499,
        501,5,5,0,0,500,502,3,104,52,0,501,500,1,0,0,0,502,503,1,0,0,0,503,
        501,1,0,0,0,503,504,1,0,0,0,504,505,1,0,0,0,505,506,5,6,0,0,506,
        519,1,0,0,0,507,512,3,98,49,0,508,509,5,35,0,0,509,511,3,98,49,0,
        510,508,1,0,0,0,511,514,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,
        513,515,1,0,0,0,514,512,1,0,0,0,515,516,5,3,0,0,516,519,1,0,0,0,
        517,519,3,64,32,0,518,477,1,0,0,0,518,478,1,0,0,0,518,479,1,0,0,
        0,518,480,1,0,0,0,518,482,1,0,0,0,518,487,1,0,0,0,518,488,1,0,0,
        0,518,489,1,0,0,0,518,490,1,0,0,0,518,491,1,0,0,0,518,492,1,0,0,
        0,518,493,1,0,0,0,518,495,1,0,0,0,518,497,1,0,0,0,518,507,1,0,0,
        0,518,517,1,0,0,0,519,63,1,0,0,0,520,521,5,14,0,0,521,522,3,60,30,
        0,522,65,1,0,0,0,523,524,5,36,0,0,524,525,3,88,44,0,525,526,3,60,
        30,0,526,67,1,0,0,0,527,529,3,14,7,0,528,527,1,0,0,0,528,529,1,0,
        0,0,529,530,1,0,0,0,530,532,5,7,0,0,531,533,5,8,0,0,532,531,1,0,
        0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,5,66,0,0,535,538,5,82,
        0,0,536,539,3,52,26,0,537,539,5,66,0,0,538,536,1,0,0,0,538,537,1,
        0,0,0,539,540,1,0,0,0,540,541,5,2,0,0,541,542,3,70,35,0,542,543,
        5,3,0,0,543,69,1,0,0,0,544,547,3,88,44,0,545,547,3,60,30,0,546,544,
        1,0,0,0,546,545,1,0,0,0,547,71,1,0,0,0,548,549,5,37,0,0,549,550,
        3,74,37,0,550,551,5,2,0,0,551,552,3,88,44,0,552,553,5,3,0,0,553,
        73,1,0,0,0,554,556,5,38,0,0,555,557,5,8,0,0,556,555,1,0,0,0,556,
        557,1,0,0,0,557,558,1,0,0,0,558,561,5,66,0,0,559,560,5,82,0,0,560,
        562,3,52,26,0,561,559,1,0,0,0,561,562,1,0,0,0,562,575,1,0,0,0,563,
        564,5,8,0,0,564,567,5,66,0,0,565,566,5,82,0,0,566,568,3,52,26,0,
        567,565,1,0,0,0,567,568,1,0,0,0,568,575,1,0,0,0,569,572,5,66,0,0,
        570,571,5,82,0,0,571,573,3,52,26,0,572,570,1,0,0,0,572,573,1,0,0,
        0,573,575,1,0,0,0,574,554,1,0,0,0,574,563,1,0,0,0,574,569,1,0,0,
        0,575,75,1,0,0,0,576,577,3,88,44,0,577,578,5,2,0,0,578,579,3,88,
        44,0,579,580,5,3,0,0,580,77,1,0,0,0,581,582,5,39,0,0,582,583,5,66,
        0,0,583,584,5,40,0,0,584,585,3,88,44,0,585,586,3,60,30,0,586,79,
        1,0,0,0,587,588,5,41,0,0,588,589,3,88,44,0,589,592,3,60,30,0,590,
        591,5,42,0,0,591,593,3,60,30,0,592,590,1,0,0,0,592,593,1,0,0,0,593,
        81,1,0,0,0,594,595,3,88,44,0,595,596,5,3,0,0,596,83,1,0,0,0,597,
        599,5,43,0,0,598,600,3,88,44,0,599,598,1,0,0,0,599,600,1,0,0,0,600,
        601,1,0,0,0,601,604,5,3,0,0,602,604,5,66,0,0,603,597,1,0,0,0,603,
        602,1,0,0,0,604,85,1,0,0,0,605,606,5,44,0,0,606,607,3,60,30,0,607,
        87,1,0,0,0,608,609,6,44,-1,0,609,653,3,94,47,0,610,653,3,116,58,
        0,611,653,3,96,48,0,612,613,5,18,0,0,613,653,3,88,44,16,614,653,
        3,110,55,0,615,653,3,92,46,0,616,617,3,54,27,0,617,618,5,72,0,0,
        618,619,5,23,0,0,619,620,3,52,26,0,620,621,5,45,0,0,621,653,1,0,
        0,0,622,623,5,73,0,0,623,653,3,88,44,11,624,625,5,66,0,0,625,626,
        5,73,0,0,626,628,5,79,0,0,627,629,3,108,54,0,628,627,1,0,0,0,628,
        629,1,0,0,0,629,630,1,0,0,0,630,653,5,80,0,0,631,653,3,90,45,0,632,
        633,5,17,0,0,633,634,5,8,0,0,634,653,3,88,44,3,635,636,5,79,0,0,
        636,637,3,88,44,0,637,638,5,80,0,0,638,653,1,0,0,0,639,640,5,72,
        0,0,640,642,5,66,0,0,641,639,1,0,0,0,642,643,1,0,0,0,643,641,1,0,
        0,0,643,644,1,0,0,0,644,650,1,0,0,0,645,651,5,13,0,0,646,647,5,79,
        0,0,647,648,3,108,54,0,648,649,5,80,0,0,649,651,1,0,0,0,650,645,
        1,0,0,0,650,646,1,0,0,0,651,653,1,0,0,0,652,608,1,0,0,0,652,610,
        1,0,0,0,652,611,1,0,0,0,652,612,1,0,0,0,652,614,1,0,0,0,652,615,
        1,0,0,0,652,616,1,0,0,0,652,622,1,0,0,0,652,624,1,0,0,0,652,631,
        1,0,0,0,652,632,1,0,0,0,652,635,1,0,0,0,652,641,1,0,0,0,653,683,
        1,0,0,0,654,655,10,10,0,0,655,656,7,4,0,0,656,682,3,88,44,11,657,
        658,10,9,0,0,658,659,7,5,0,0,659,682,3,88,44,10,660,661,10,8,0,0,
        661,662,5,57,0,0,662,682,3,88,44,9,663,664,10,7,0,0,664,665,7,3,
        0,0,665,682,3,88,44,8,666,667,10,12,0,0,667,668,5,76,0,0,668,669,
        3,88,44,0,669,670,5,77,0,0,670,682,1,0,0,0,671,672,10,5,0,0,672,
        673,5,58,0,0,673,678,3,52,26,0,674,675,5,58,0,0,675,677,3,52,26,
        0,676,674,1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,
        0,679,682,1,0,0,0,680,678,1,0,0,0,681,654,1,0,0,0,681,657,1,0,0,
        0,681,660,1,0,0,0,681,663,1,0,0,0,681,666,1,0,0,0,681,671,1,0,0,
        0,682,685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,89,1,0,0,0,
        685,683,1,0,0,0,686,690,5,5,0,0,687,689,3,62,31,0,688,687,1,0,0,
        0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,
        0,692,690,1,0,0,0,693,694,3,88,44,0,694,695,5,6,0,0,695,91,1,0,0,
        0,696,697,5,17,0,0,697,698,3,88,44,0,698,93,1,0,0,0,699,728,3,96,
        48,0,700,707,5,13,0,0,701,703,5,79,0,0,702,704,3,108,54,0,703,702,
        1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,707,5,80,0,0,706,700,
        1,0,0,0,706,701,1,0,0,0,707,729,1,0,0,0,708,709,5,35,0,0,709,711,
        5,66,0,0,710,708,1,0,0,0,711,712,1,0,0,0,712,710,1,0,0,0,712,713,
        1,0,0,0,713,729,1,0,0,0,714,715,5,35,0,0,715,722,5,66,0,0,716,718,
        5,79,0,0,717,719,3,108,54,0,718,717,1,0,0,0,718,719,1,0,0,0,719,
        720,1,0,0,0,720,723,5,80,0,0,721,723,5,13,0,0,722,716,1,0,0,0,722,
        721,1,0,0,0,723,729,1,0,0,0,724,725,5,76,0,0,725,726,3,88,44,0,726,
        727,5,77,0,0,727,729,1,0,0,0,728,706,1,0,0,0,728,710,1,0,0,0,728,
        714,1,0,0,0,728,724,1,0,0,0,729,730,1,0,0,0,730,728,1,0,0,0,730,
        731,1,0,0,0,731,95,1,0,0,0,732,761,3,116,58,0,733,761,5,66,0,0,734,
        761,3,98,49,0,735,736,5,66,0,0,736,738,5,79,0,0,737,739,3,108,54,
        0,738,737,1,0,0,0,738,739,1,0,0,0,739,740,1,0,0,0,740,761,5,80,0,
        0,741,742,5,79,0,0,742,743,3,88,44,0,743,744,5,80,0,0,744,761,1,
        0,0,0,745,746,5,66,0,0,746,747,5,5,0,0,747,752,3,102,51,0,748,749,
        5,78,0,0,749,751,3,102,51,0,750,748,1,0,0,0,751,754,1,0,0,0,752,
        750,1,0,0,0,752,753,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,755,
        757,5,78,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,
        759,5,6,0,0,759,761,1,0,0,0,760,732,1,0,0,0,760,733,1,0,0,0,760,
        734,1,0,0,0,760,735,1,0,0,0,760,741,1,0,0,0,760,745,1,0,0,0,761,
        97,1,0,0,0,762,763,5,72,0,0,763,764,3,54,27,0,764,766,5,66,0,0,765,
        767,3,100,50,0,766,765,1,0,0,0,766,767,1,0,0,0,767,774,1,0,0,0,768,
        775,5,13,0,0,769,771,5,79,0,0,770,772,3,108,54,0,771,770,1,0,0,0,
        771,772,1,0,0,0,772,773,1,0,0,0,773,775,5,80,0,0,774,768,1,0,0,0,
        774,769,1,0,0,0,775,807,1,0,0,0,776,781,5,66,0,0,777,778,5,35,0,
        0,778,780,5,66,0,0,779,777,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,
        0,781,782,1,0,0,0,782,788,1,0,0,0,783,781,1,0,0,0,784,785,5,72,0,
        0,785,787,5,66,0,0,786,784,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,
        0,788,789,1,0,0,0,789,804,1,0,0,0,790,788,1,0,0,0,791,805,5,13,0,
        0,792,800,5,79,0,0,793,794,5,66,0,0,794,795,5,79,0,0,795,796,5,65,
        0,0,796,799,5,80,0,0,797,799,3,108,54,0,798,793,1,0,0,0,798,797,
        1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,803,
        1,0,0,0,802,800,1,0,0,0,803,805,5,80,0,0,804,791,1,0,0,0,804,792,
        1,0,0,0,805,807,1,0,0,0,806,762,1,0,0,0,806,776,1,0,0,0,807,99,1,
        0,0,0,808,809,5,23,0,0,809,814,3,52,26,0,810,811,5,78,0,0,811,813,
        3,52,26,0,812,810,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,
        1,0,0,0,815,817,1,0,0,0,816,814,1,0,0,0,817,818,5,74,0,0,818,101,
        1,0,0,0,819,820,5,66,0,0,820,821,5,82,0,0,821,822,3,88,44,0,822,
        103,1,0,0,0,823,828,3,106,53,0,824,825,5,59,0,0,825,827,3,106,53,
        0,826,824,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,
        0,829,831,1,0,0,0,830,828,1,0,0,0,831,832,5,60,0,0,832,833,3,60,
        30,0,833,105,1,0,0,0,834,835,7,6,0,0,835,107,1,0,0,0,836,839,3,98,
        49,0,837,839,3,88,44,0,838,836,1,0,0,0,838,837,1,0,0,0,839,847,1,
        0,0,0,840,843,5,78,0,0,841,844,3,98,49,0,842,844,3,88,44,0,843,841,
        1,0,0,0,843,842,1,0,0,0,844,846,1,0,0,0,845,840,1,0,0,0,846,849,
        1,0,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,851,1,0,0,0,849,847,
        1,0,0,0,850,852,5,78,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,867,
        1,0,0,0,853,854,5,72,0,0,854,856,5,66,0,0,855,853,1,0,0,0,856,857,
        1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,864,1,0,0,0,859,865,
        5,13,0,0,860,861,5,79,0,0,861,862,3,108,54,0,862,863,5,80,0,0,863,
        865,1,0,0,0,864,859,1,0,0,0,864,860,1,0,0,0,865,867,1,0,0,0,866,
        838,1,0,0,0,866,855,1,0,0,0,867,109,1,0,0,0,868,869,5,66,0,0,869,
        870,5,73,0,0,870,871,3,112,56,0,871,111,1,0,0,0,872,874,5,76,0,0,
        873,875,3,114,57,0,874,873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,
        0,876,883,5,77,0,0,877,879,5,79,0,0,878,880,3,114,57,0,879,878,1,
        0,0,0,879,880,1,0,0,0,880,881,1,0,0,0,881,883,5,80,0,0,882,872,1,
        0,0,0,882,877,1,0,0,0,883,113,1,0,0,0,884,887,3,88,44,0,885,886,
        5,3,0,0,886,888,3,88,44,0,887,885,1,0,0,0,887,888,1,0,0,0,888,115,
        1,0,0,0,889,899,3,120,60,0,890,899,5,70,0,0,891,899,5,67,0,0,892,
        899,5,68,0,0,893,899,5,69,0,0,894,899,5,64,0,0,895,899,5,65,0,0,
        896,899,3,118,59,0,897,899,5,71,0,0,898,889,1,0,0,0,898,890,1,0,
        0,0,898,891,1,0,0,0,898,892,1,0,0,0,898,893,1,0,0,0,898,894,1,0,
        0,0,898,895,1,0,0,0,898,896,1,0,0,0,898,897,1,0,0,0,899,117,1,0,
        0,0,900,901,7,7,0,0,901,119,1,0,0,0,902,903,5,76,0,0,903,908,3,88,
        44,0,904,905,5,78,0,0,905,907,3,88,44,0,906,904,1,0,0,0,907,910,
        1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,911,1,0,0,0,910,908,
        1,0,0,0,911,912,5,77,0,0,912,920,1,0,0,0,913,914,5,76,0,0,914,915,
        3,88,44,0,915,916,5,3,0,0,916,917,3,88,44,0,917,918,5,77,0,0,918,
        920,1,0,0,0,919,902,1,0,0,0,919,913,1,0,0,0,920,121,1,0,0,0,921,
        925,5,61,0,0,922,924,9,0,0,0,923,922,1,0,0,0,924,927,1,0,0,0,925,
        926,1,0,0,0,925,923,1,0,0,0,926,928,1,0,0,0,927,925,1,0,0,0,928,
        929,5,61,0,0,929,123,1,0,0,0,116,127,139,142,156,162,168,172,180,
        186,191,194,201,206,209,212,217,224,228,243,250,256,261,269,275,
        281,284,287,290,297,300,303,306,314,321,325,328,335,346,360,364,
        367,373,376,391,396,403,406,411,425,430,439,444,449,463,469,473,
        503,512,518,528,532,538,546,556,561,567,572,574,592,599,603,628,
        643,650,652,678,681,683,690,703,706,712,718,722,728,730,738,752,
        756,760,766,771,774,781,788,798,800,804,806,814,828,838,843,847,
        851,857,864,866,874,879,882,887,898,908,919,925
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'extern'", "'{'", 
                     "'}'", "'static'", "'mut'", "'fn'", "'->'", "'pub'", 
                     "'struct'", "'()'", "'unsafe'", "'const'", "'union'", 
                     "'&'", "'*'", "'i32'", "'String'", "'bool'", "'u8'", 
                     "'<'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'break'", "'continue'", "'match'", 
                     "'.'", "'while'", "'let'", "'ref'", "'for'", "'in'", 
                     "'if'", "'else'", "'return'", "'loop'", "'>()'", "'/'", 
                     "'%'", "'+'", "'-'", "'>>'", "'>='", "'<='", "'=='", 
                     "'!='", "'||'", "'&&'", "'..'", "'as'", "'|'", "'=>'", 
                     "'\"'", "'true'", "'false'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'::'", "'!'", "'>'", "'#'", 
                     "'['", "']'", "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "Binary", 
                      "STRING_LITERAL", "Identifier", "Number", "SignedNumber", 
                      "BYTE_STRING_LITERAL", "HexNumber", "CHAR_LITERAL", 
                      "DOUBLE_COLON", "EXCL", "GT", "POUND", "LBRACK", "RBRACK", 
                      "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", "COLON", 
                      "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_typeAlias = 2
    RULE_externBlock = 3
    RULE_externItem = 4
    RULE_externParams = 5
    RULE_externParam = 6
    RULE_visibility = 7
    RULE_attributes = 8
    RULE_innerAttribute = 9
    RULE_attribute = 10
    RULE_attrArgs = 11
    RULE_attrArg = 12
    RULE_attrValue = 13
    RULE_structDef = 14
    RULE_structField = 15
    RULE_functionDef = 16
    RULE_unsafeModifier = 17
    RULE_externAbi = 18
    RULE_paramList = 19
    RULE_param = 20
    RULE_constDef = 21
    RULE_unionDef = 22
    RULE_unionField = 23
    RULE_unsafeDef = 24
    RULE_referenceType = 25
    RULE_type = 26
    RULE_typePath = 27
    RULE_pointerType = 28
    RULE_basicType = 29
    RULE_block = 30
    RULE_statement = 31
    RULE_unsafeBlock = 32
    RULE_whileStmt = 33
    RULE_staticVarDecl = 34
    RULE_initializer = 35
    RULE_letStmt = 36
    RULE_varDef = 37
    RULE_assignStmt = 38
    RULE_forStmt = 39
    RULE_ifStmt = 40
    RULE_exprStmt = 41
    RULE_returnStmt = 42
    RULE_loopStmt = 43
    RULE_expression = 44
    RULE_expressionBlock = 45
    RULE_borrowExpression = 46
    RULE_postfixExpression = 47
    RULE_primaryExpression = 48
    RULE_qualifiedFunctionCall = 49
    RULE_genericArgs = 50
    RULE_structLiteralField = 51
    RULE_matchArm = 52
    RULE_matchPattern = 53
    RULE_argumentList = 54
    RULE_macroCall = 55
    RULE_macroArgs = 56
    RULE_macroInner = 57
    RULE_literal = 58
    RULE_booleanLiteral = 59
    RULE_arrayLiteral = 60
    RULE_stringLiteral = 61

    ruleNames =  [ "program", "topLevelItem", "typeAlias", "externBlock", 
                   "externItem", "externParams", "externParam", "visibility", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "functionDef", 
                   "unsafeModifier", "externAbi", "paramList", "param", 
                   "constDef", "unionDef", "unionField", "unsafeDef", "referenceType", 
                   "type", "typePath", "pointerType", "basicType", "block", 
                   "statement", "unsafeBlock", "whileStmt", "staticVarDecl", 
                   "initializer", "letStmt", "varDef", "assignStmt", "forStmt", 
                   "ifStmt", "exprStmt", "returnStmt", "loopStmt", "expression", 
                   "expressionBlock", "borrowExpression", "postfixExpression", 
                   "primaryExpression", "qualifiedFunctionCall", "genericArgs", 
                   "structLiteralField", "matchArm", "matchPattern", "argumentList", 
                   "macroCall", "macroArgs", "macroInner", "literal", "booleanLiteral", 
                   "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    TRUE=62
    FALSE=63
    Binary=64
    STRING_LITERAL=65
    Identifier=66
    Number=67
    SignedNumber=68
    BYTE_STRING_LITERAL=69
    HexNumber=70
    CHAR_LITERAL=71
    DOUBLE_COLON=72
    EXCL=73
    GT=74
    POUND=75
    LBRACK=76
    RBRACK=77
    COMMA=78
    LPAREN=79
    RPAREN=80
    UNDERSCORE=81
    COLON=82
    ELLIPSIS=83
    WS=84
    COMMENT=85

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 121490) != 0) or _la==75:
                self.state = 124
                self.topLevelItem()
                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 130
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 131
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 132
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 133
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 134
                self.typeAlias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 135
                self.constDef()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 136
                self.unionDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 137
                self.unsafeDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 138
                self.staticVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 141
                self.visibility()


            self.state = 144
            self.match(RustParser.T__0)
            self.state = 145
            self.match(RustParser.Identifier)
            self.state = 146
            self.match(RustParser.T__1)
            self.state = 147
            self.type_()
            self.state = 148
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 150
            self.match(RustParser.T__3)
            self.state = 151
            self.match(RustParser.STRING_LITERAL)
            self.state = 152
            self.match(RustParser.T__4)
            self.state = 156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2690) != 0):
                self.state = 153
                self.externItem()
                self.state = 158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 159
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 161
                    self.visibility()


                self.state = 164
                self.match(RustParser.T__0)
                self.state = 165
                self.match(RustParser.Identifier)
                self.state = 166
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 167
                    self.visibility()


                self.state = 170
                self.match(RustParser.T__6)
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 171
                    self.match(RustParser.T__7)


                self.state = 174
                self.match(RustParser.Identifier)
                self.state = 175
                self.match(RustParser.COLON)
                self.state = 176
                self.type_()
                self.state = 177
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 179
                    self.visibility()


                self.state = 182
                self.match(RustParser.T__8)
                self.state = 183
                self.match(RustParser.Identifier)
                self.state = 184
                self.match(RustParser.LPAREN)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 229377) != 0):
                    self.state = 185
                    self.externParams()


                self.state = 188
                self.match(RustParser.RPAREN)
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 189
                    self.match(RustParser.T__9)
                    self.state = 190
                    self.type_()


                self.state = 193
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 81, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 196
                self.externParam()
                self.state = 201
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 197
                        self.match(RustParser.COMMA)
                        self.state = 198
                        self.externParam() 
                    self.state = 203
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 204
                    self.match(RustParser.COMMA)
                    self.state = 205
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 208
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66 or _la==81:
                self.state = 211
                _la = self._input.LA(1)
                if not(_la==66 or _la==81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 214
            self.match(RustParser.COLON)
            self.state = 217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 18, 19, 20, 21, 22, 66, 72, 76]:
                self.state = 215
                self.type_()
                pass
            elif token in [83]:
                self.state = 216
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.match(RustParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 221
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 224 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(RustParser.POUND)

            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 227
                self.match(RustParser.EXCL)


            self.state = 230
            self.match(RustParser.LBRACK)
            self.state = 231
            self.attribute()
            self.state = 232
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_attribute)
        try:
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 234
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 235
                self.match(RustParser.Identifier)
                self.state = 236
                self.match(RustParser.T__1)
                self.state = 237
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 238
                self.match(RustParser.Identifier)
                self.state = 239
                self.match(RustParser.LPAREN)
                self.state = 240
                self.attrArgs()
                self.state = 241
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.attrArg()
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 246
                self.match(RustParser.COMMA)
                self.state = 247
                self.attrArg()
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(RustParser.Identifier)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 254
                self.match(RustParser.T__1)
                self.state = 255
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 260
                self.visibility()


            self.state = 263
            self.match(RustParser.T__11)
            self.state = 264
            self.match(RustParser.Identifier)
            self.state = 265
            self.match(RustParser.T__4)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==66:
                self.state = 266
                self.structField()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 272
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 274
                self.visibility()


            self.state = 277
            self.match(RustParser.Identifier)
            self.state = 278
            self.match(RustParser.COLON)
            self.state = 279
            self.type_()
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 280
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 283
                self.visibility()


            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 286
                self.unsafeModifier()


            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 289
                self.externAbi()


            self.state = 292
            self.match(RustParser.T__8)
            self.state = 293
            self.match(RustParser.Identifier)
            self.state = 300
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 294
                self.match(RustParser.T__12)
                pass
            elif token in [79]:
                self.state = 295
                self.match(RustParser.LPAREN)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==66:
                    self.state = 296
                    self.paramList()


                self.state = 299
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 302
                self.match(RustParser.T__9)


            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & -8637904085296610319) != 0):
                self.state = 305
                self.type_()


            self.state = 308
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(RustParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(RustParser.T__3)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 313
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.param()
            self.state = 321
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 317
                    self.match(RustParser.COMMA)
                    self.state = 318
                    self.param() 
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 324
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 327
                self.match(RustParser.T__7)


            self.state = 330
            self.match(RustParser.Identifier)
            self.state = 331
            self.match(RustParser.COLON)
            self.state = 332
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 334
                self.visibility()


            self.state = 337
            self.match(RustParser.T__14)
            self.state = 338
            self.match(RustParser.Identifier)
            self.state = 339
            self.match(RustParser.COLON)
            self.state = 340
            self.type_()
            self.state = 341
            self.match(RustParser.T__1)
            self.state = 342
            self.expression(0)
            self.state = 343
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 345
                self.visibility()


            self.state = 348
            self.match(RustParser.T__15)
            self.state = 349
            self.match(RustParser.Identifier)
            self.state = 364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.state = 350
                self.match(RustParser.COLON)
                self.state = 351
                self.type_()
                self.state = 352
                self.match(RustParser.T__1)
                self.state = 353
                self.expression(0)
                self.state = 354
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 356
                self.match(RustParser.T__4)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11 or _la==66:
                    self.state = 357
                    self.unionField()
                    self.state = 362
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 363
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 366
                self.visibility()


            self.state = 369
            self.match(RustParser.Identifier)
            self.state = 370
            self.match(RustParser.COLON)
            self.state = 371
            self.type_()
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 372
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 375
                self.visibility()


            self.state = 378
            self.match(RustParser.T__13)
            self.state = 379
            self.match(RustParser.Identifier)
            self.state = 380
            self.match(RustParser.COLON)
            self.state = 381
            self.type_()
            self.state = 382
            self.match(RustParser.T__1)
            self.state = 383
            self.expression(0)
            self.state = 384
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceType" ):
                return visitor.visitReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def referenceType(self):

        localctx = RustParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_referenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(RustParser.T__16)
            self.state = 387
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_type)
        try:
            self.state = 391
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 19, 20, 21, 22, 66, 72, 76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 389
                self.basicType()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 390
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                self.match(RustParser.Identifier)
                self.state = 394
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 395
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 398
                self.match(RustParser.Identifier)
                self.state = 403
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 399
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 400
                        self.match(RustParser.Identifier) 
                    self.state = 405
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(RustParser.T__17)
            self.state = 409
            _la = self._input.LA(1)
            if not(_la==8 or _la==15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 410
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 413
                self.match(RustParser.T__18)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 414
                self.match(RustParser.T__19)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 415
                self.match(RustParser.T__20)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 416
                self.match(RustParser.T__21)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 417
                self.match(RustParser.T__12)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 418
                self.typePath()
                self.state = 430
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 419
                    self.match(RustParser.T__22)
                    self.state = 420
                    self.type_()
                    self.state = 425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==78:
                        self.state = 421
                        self.match(RustParser.COMMA)
                        self.state = 422
                        self.type_()
                        self.state = 427
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 428
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 432
                self.match(RustParser.Identifier)
                self.state = 444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 433
                    self.match(RustParser.T__22)
                    self.state = 434
                    self.type_()
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==78:
                        self.state = 435
                        self.match(RustParser.COMMA)
                        self.state = 436
                        self.type_()
                        self.state = 441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 442
                    self.match(RustParser.GT)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 446
                self.match(RustParser.T__16)
                self.state = 447
                self.type_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66 or _la==72:
                    self.state = 448
                    self.typePath()


                self.state = 451
                self.match(RustParser.LBRACK)
                self.state = 452
                self.type_()
                self.state = 453
                self.match(RustParser.T__2)
                self.state = 454
                self.match(RustParser.Number)
                self.state = 455
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 457
                self.typePath()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 458
                self.match(RustParser.LBRACK)
                self.state = 459
                self.type_()
                self.state = 460
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 462
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(RustParser.T__4)
            self.state = 469
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 466
                    self.statement() 
                self.state = 471
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43 or _la==66:
                self.state = 472
                self.returnStmt()


            self.state = 475
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def unsafeBlock(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 479
                self.assignStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 480
                self.match(RustParser.Identifier)
                self.state = 481
                self.match(RustParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 482
                self.expression(0)
                self.state = 483
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4278190080) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 484
                self.expression(0)
                self.state = 485
                self.match(RustParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 487
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 488
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 489
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 490
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 491
                self.returnStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 492
                self.loopStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 493
                self.match(RustParser.T__31)
                self.state = 494
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 495
                self.match(RustParser.T__32)
                self.state = 496
                self.match(RustParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 497
                self.match(RustParser.T__33)
                self.state = 498
                self.expression(0)
                self.state = 499
                self.match(RustParser.T__4)
                self.state = 501 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 500
                    self.matchArm()
                    self.state = 503 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32771) != 0)):
                        break

                self.state = 505
                self.match(RustParser.T__5)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 507
                self.qualifiedFunctionCall()
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==35:
                    self.state = 508
                    self.match(RustParser.T__34)
                    self.state = 509
                    self.qualifiedFunctionCall()
                    self.state = 514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 515
                self.match(RustParser.T__2)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 517
                self.unsafeBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(RustParser.T__13)
            self.state = 521
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(RustParser.T__35)
            self.state = 524
            self.expression(0)
            self.state = 525
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 527
                self.visibility()


            self.state = 530
            self.match(RustParser.T__6)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 531
                self.match(RustParser.T__7)


            self.state = 534
            self.match(RustParser.Identifier)
            self.state = 535
            self.match(RustParser.COLON)
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 536
                self.type_()
                pass

            elif la_ == 2:
                self.state = 537
                self.match(RustParser.Identifier)
                pass


            self.state = 540
            self.match(RustParser.T__1)
            self.state = 541
            self.initializer()
            self.state = 542
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_initializer)
        try:
            self.state = 546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 545
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_letStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.match(RustParser.T__36)
            self.state = 549
            self.varDef()
            self.state = 550
            self.match(RustParser.T__1)
            self.state = 551
            self.expression(0)
            self.state = 552
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.match(RustParser.T__37)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 555
                    self.match(RustParser.T__7)


                self.state = 558
                self.match(RustParser.Identifier)
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 559
                    self.match(RustParser.COLON)
                    self.state = 560
                    self.type_()


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 563
                self.match(RustParser.T__7)
                self.state = 564
                self.match(RustParser.Identifier)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 565
                    self.match(RustParser.COLON)
                    self.state = 566
                    self.type_()


                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 569
                self.match(RustParser.Identifier)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 570
                    self.match(RustParser.COLON)
                    self.state = 571
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.expression(0)
            self.state = 577
            self.match(RustParser.T__1)
            self.state = 578
            self.expression(0)
            self.state = 579
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(RustParser.T__38)
            self.state = 582
            self.match(RustParser.Identifier)
            self.state = 583
            self.match(RustParser.T__39)
            self.state = 584
            self.expression(0)
            self.state = 585
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(RustParser.T__40)
            self.state = 588
            self.expression(0)
            self.state = 589
            self.block()
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 590
                self.match(RustParser.T__41)
                self.state = 591
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.expression(0)
            self.state = 595
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 597
                self.match(RustParser.T__42)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 598
                    self.expression(0)


                self.state = 601
                self.match(RustParser.T__2)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(RustParser.T__43)
            self.state = 606
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def macroCall(self):
            return self.getTypedRuleContext(RustParser.MacroCallContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 609
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.state = 610
                self.literal()
                pass

            elif la_ == 3:
                self.state = 611
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 612
                self.match(RustParser.T__17)
                self.state = 613
                self.expression(16)
                pass

            elif la_ == 5:
                self.state = 614
                self.macroCall()
                pass

            elif la_ == 6:
                self.state = 615
                self.borrowExpression()
                pass

            elif la_ == 7:
                self.state = 616
                self.typePath()
                self.state = 617
                self.match(RustParser.DOUBLE_COLON)
                self.state = 618
                self.match(RustParser.T__22)
                self.state = 619
                self.type_()
                self.state = 620
                self.match(RustParser.T__44)
                pass

            elif la_ == 8:
                self.state = 622
                self.match(RustParser.EXCL)
                self.state = 623
                self.expression(11)
                pass

            elif la_ == 9:
                self.state = 624
                self.match(RustParser.Identifier)
                self.state = 625
                self.match(RustParser.EXCL)
                self.state = 626
                self.match(RustParser.LPAREN)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 627
                    self.argumentList()


                self.state = 630
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 10:
                self.state = 631
                self.expressionBlock()
                pass

            elif la_ == 11:
                self.state = 632
                self.match(RustParser.T__16)
                self.state = 633
                self.match(RustParser.T__7)
                self.state = 634
                self.expression(3)
                pass

            elif la_ == 12:
                self.state = 635
                self.match(RustParser.LPAREN)
                self.state = 636
                self.expression(0)
                self.state = 637
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 13:
                self.state = 641 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 639
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 640
                    self.match(RustParser.Identifier)
                    self.state = 643 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==72):
                        break

                self.state = 650
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 645
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 646
                    self.match(RustParser.LPAREN)
                    self.state = 647
                    self.argumentList()
                    self.state = 648
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 683
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 681
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 654
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 655
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8936830510956544) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 656
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 657
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 658
                        _la = self._input.LA(1)
                        if not(((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 2251815919812609) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 659
                        self.expression(10)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 660
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 661
                        self.match(RustParser.T__56)
                        self.state = 662
                        self.expression(9)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 663
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 664
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4278190080) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 665
                        self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 666
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 667
                        self.match(RustParser.LBRACK)
                        self.state = 668
                        self.expression(0)
                        self.state = 669
                        self.match(RustParser.RBRACK)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 671
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 672
                        self.match(RustParser.T__57)
                        self.state = 673
                        self.type_()
                        self.state = 678
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 674
                                self.match(RustParser.T__57)
                                self.state = 675
                                self.type_() 
                            self.state = 680
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                        pass

             
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(RustParser.T__4)
            self.state = 690
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 687
                    self.statement() 
                self.state = 692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 693
            self.expression(0)
            self.state = 694
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(RustParser.T__16)
            self.state = 697
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LBRACK)
            else:
                return self.getToken(RustParser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RBRACK)
            else:
                return self.getToken(RustParser.RBRACK, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.primaryExpression()
            self.state = 728 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 728
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 706
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [13]:
                            self.state = 700
                            self.match(RustParser.T__12)
                            pass
                        elif token in [79]:
                            self.state = 701
                            self.match(RustParser.LPAREN)
                            self.state = 703
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                                self.state = 702
                                self.argumentList()


                            self.state = 705
                            self.match(RustParser.RPAREN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 710 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 708
                                self.match(RustParser.T__34)
                                self.state = 709
                                self.match(RustParser.Identifier)

                            else:
                                raise NoViableAltException(self)
                            self.state = 712 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 714
                        self.match(RustParser.T__34)
                        self.state = 715
                        self.match(RustParser.Identifier)
                        self.state = 722
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [79]:
                            self.state = 716
                            self.match(RustParser.LPAREN)
                            self.state = 718
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                                self.state = 717
                                self.argumentList()


                            self.state = 720
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [13]:
                            self.state = 721
                            self.match(RustParser.T__12)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        self.state = 724
                        self.match(RustParser.LBRACK)
                        self.state = 725
                        self.expression(0)
                        self.state = 726
                        self.match(RustParser.RBRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 730 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def qualifiedFunctionCall(self):
            return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.match(RustParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 734
                self.qualifiedFunctionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 735
                self.match(RustParser.Identifier)
                self.state = 736
                self.match(RustParser.LPAREN)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 737
                    self.argumentList()


                self.state = 740
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 741
                self.match(RustParser.LPAREN)
                self.state = 742
                self.expression(0)
                self.state = 743
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 745
                self.match(RustParser.Identifier)
                self.state = 746
                self.match(RustParser.T__4)
                self.state = 747
                self.structLiteralField()
                self.state = 752
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 748
                        self.match(RustParser.COMMA)
                        self.state = 749
                        self.structLiteralField() 
                    self.state = 754
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 755
                    self.match(RustParser.COMMA)


                self.state = 758
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.STRING_LITERAL)
            else:
                return self.getToken(RustParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.match(RustParser.DOUBLE_COLON)
                self.state = 763
                self.typePath()
                self.state = 764
                self.match(RustParser.Identifier)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 765
                    self.genericArgs()


                self.state = 774
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 768
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 769
                    self.match(RustParser.LPAREN)
                    self.state = 771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                        self.state = 770
                        self.argumentList()


                    self.state = 773
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.match(RustParser.Identifier)
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==35:
                    self.state = 777
                    self.match(RustParser.T__34)
                    self.state = 778
                    self.match(RustParser.Identifier)
                    self.state = 783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==72:
                    self.state = 784
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 785
                    self.match(RustParser.Identifier)
                    self.state = 790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 804
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 791
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 792
                    self.match(RustParser.LPAREN)
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                        self.state = 798
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 793
                            self.match(RustParser.Identifier)
                            self.state = 794
                            self.match(RustParser.LPAREN)
                            self.state = 795
                            self.match(RustParser.STRING_LITERAL)
                            self.state = 796
                            self.match(RustParser.RPAREN)
                            pass

                        elif la_ == 2:
                            self.state = 797
                            self.argumentList()
                            pass


                        self.state = 802
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 803
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(RustParser.T__22)
            self.state = 809
            self.type_()
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 810
                self.match(RustParser.COMMA)
                self.state = 811
                self.type_()
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 817
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_structLiteralField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(RustParser.Identifier)
            self.state = 820
            self.match(RustParser.COLON)
            self.state = 821
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.matchPattern()
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 824
                self.match(RustParser.T__58)
                self.state = 825
                self.matchPattern()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 831
            self.match(RustParser.T__59)
            self.state = 832
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 836
                    self.qualifiedFunctionCall()
                    pass

                elif la_ == 2:
                    self.state = 837
                    self.expression(0)
                    pass


                self.state = 847
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 840
                        self.match(RustParser.COMMA)
                        self.state = 843
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                        if la_ == 1:
                            self.state = 841
                            self.qualifiedFunctionCall()
                            pass

                        elif la_ == 2:
                            self.state = 842
                            self.expression(0)
                            pass

                 
                    self.state = 849
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 850
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 855 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 853
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 854
                    self.match(RustParser.Identifier)
                    self.state = 857 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==72):
                        break

                self.state = 864
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 859
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 860
                    self.match(RustParser.LPAREN)
                    self.state = 861
                    self.argumentList()
                    self.state = 862
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(RustParser.Identifier)
            self.state = 869
            self.match(RustParser.EXCL)
            self.state = 870
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 882
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self.match(RustParser.LBRACK)
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 873
                    self.macroInner()


                self.state = 876
                self.match(RustParser.RBRACK)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 877
                self.match(RustParser.LPAREN)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 878
                    self.macroInner()


                self.state = 881
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.expression(0)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 885
                self.match(RustParser.T__2)
                self.state = 886
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_literal)
        try:
            self.state = 898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.arrayLiteral()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.match(RustParser.HexNumber)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 891
                self.match(RustParser.Number)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 892
                self.match(RustParser.SignedNumber)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 5)
                self.state = 893
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 6)
                self.state = 894
                self.match(RustParser.Binary)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 7)
                self.state = 895
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [62, 63]:
                self.enterOuterAlt(localctx, 8)
                self.state = 896
                self.booleanLiteral()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 9)
                self.state = 897
                self.match(RustParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            _la = self._input.LA(1)
            if not(_la==62 or _la==63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 902
                self.match(RustParser.LBRACK)
                self.state = 903
                self.expression(0)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78:
                    self.state = 904
                    self.match(RustParser.COMMA)
                    self.state = 905
                    self.expression(0)
                    self.state = 910
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 911
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self.match(RustParser.LBRACK)
                self.state = 914
                self.expression(0)
                self.state = 915
                self.match(RustParser.T__2)
                self.state = 916
                self.expression(0)
                self.state = 917
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(RustParser.T__60)
            self.state = 925
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 922
                    self.matchWildcard() 
                self.state = 927
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 928
            self.match(RustParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[44] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         




