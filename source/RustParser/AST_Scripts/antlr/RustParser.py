# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,87,1065,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,5,0,170,
        8,0,10,0,12,0,173,9,0,1,1,1,1,1,1,1,1,1,1,3,1,180,8,1,1,2,1,2,1,
        2,1,2,1,2,1,2,3,2,188,8,2,1,3,3,3,191,8,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,4,4,203,8,4,11,4,12,4,204,1,4,1,4,1,5,1,5,1,5,
        1,5,5,5,213,8,5,10,5,12,5,216,9,5,1,5,1,5,1,6,3,6,221,8,6,1,6,1,
        6,1,6,1,6,3,6,227,8,6,1,6,1,6,3,6,231,8,6,1,6,1,6,1,6,1,6,1,6,1,
        6,3,6,239,8,6,1,6,1,6,1,6,1,6,3,6,245,8,6,1,6,1,6,1,6,3,6,250,8,
        6,1,6,3,6,253,8,6,1,7,1,7,1,7,5,7,258,8,7,10,7,12,7,261,9,7,1,7,
        1,7,3,7,265,8,7,1,7,3,7,268,8,7,1,8,3,8,271,8,8,1,8,1,8,1,8,3,8,
        276,8,8,1,9,1,9,1,10,1,10,1,11,1,11,3,11,284,8,11,1,12,4,12,287,
        8,12,11,12,12,12,288,1,13,1,13,3,13,293,8,13,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,308,8,14,1,15,
        1,15,1,15,5,15,313,8,15,10,15,12,15,316,9,15,1,16,1,16,1,16,3,16,
        321,8,16,1,17,1,17,1,18,3,18,326,8,18,1,18,1,18,1,18,1,18,5,18,332,
        8,18,10,18,12,18,335,9,18,1,18,1,18,1,19,3,19,340,8,19,1,19,1,19,
        1,19,1,19,3,19,346,8,19,1,20,1,20,1,20,5,20,351,8,20,10,20,12,20,
        354,9,20,1,20,1,20,1,21,3,21,359,8,21,1,21,3,21,362,8,21,1,21,3,
        21,365,8,21,1,21,1,21,1,21,1,21,1,21,3,21,372,8,21,1,21,3,21,375,
        8,21,1,21,3,21,378,8,21,1,21,3,21,381,8,21,1,21,1,21,1,22,1,22,1,
        22,5,22,388,8,22,10,22,12,22,391,9,22,1,22,3,22,394,8,22,1,23,3,
        23,397,8,23,1,23,1,23,1,23,1,23,1,24,3,24,404,8,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,25,3,25,415,8,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,5,25,427,8,25,10,25,12,25,430,9,25,
        1,25,3,25,433,8,25,1,26,3,26,436,8,26,1,26,1,26,1,26,1,26,3,26,442,
        8,26,1,27,3,27,445,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,28,1,28,3,28,457,8,28,1,29,1,29,1,29,3,29,462,8,29,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,474,8,30,10,30,12,30,
        477,9,30,1,30,1,30,3,30,481,8,30,1,30,1,30,1,30,1,30,1,30,5,30,488,
        8,30,10,30,12,30,491,9,30,1,30,1,30,3,30,495,8,30,1,30,1,30,1,30,
        3,30,500,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,3,30,513,8,30,1,31,1,31,1,31,3,31,518,8,31,1,31,1,31,1,31,5,
        31,523,8,31,10,31,12,31,526,9,31,3,31,528,8,31,1,32,1,32,5,32,532,
        8,32,10,32,12,32,535,9,32,1,32,3,32,538,8,32,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,564,8,34,10,34,12,34,567,
        9,34,1,34,1,34,3,34,571,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,3,35,581,8,35,1,35,1,35,1,35,1,35,3,35,587,8,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,3,35,597,8,35,1,36,1,36,3,36,601,8,36,
        1,36,1,36,1,36,3,36,606,8,36,1,36,1,36,1,36,1,36,3,36,612,8,36,1,
        36,1,36,1,36,3,36,617,8,36,3,36,619,8,36,1,37,1,37,1,38,1,38,1,38,
        1,38,1,38,1,39,1,39,1,39,1,39,4,39,632,8,39,11,39,12,39,633,1,39,
        1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,3,41,645,8,41,1,42,3,42,
        648,8,42,1,42,1,42,3,42,652,8,42,1,42,1,42,1,42,1,42,3,42,658,8,
        42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,670,8,
        43,10,43,12,43,673,9,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
        1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,3,46,
        695,8,46,1,47,1,47,1,47,1,48,1,48,3,48,702,8,48,1,48,1,48,3,48,706,
        8,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,728,8,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,754,8,50,10,50,
        12,50,757,9,50,1,51,3,51,760,8,51,1,51,1,51,1,51,1,52,3,52,766,8,
        52,1,52,3,52,769,8,52,1,52,1,52,1,52,1,52,3,52,775,8,52,1,52,3,52,
        778,8,52,1,52,1,52,3,52,782,8,52,1,53,1,53,1,53,1,53,5,53,788,8,
        53,10,53,12,53,791,9,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,
        1,58,1,58,1,59,1,59,1,59,1,59,1,59,5,59,808,8,59,10,59,12,59,811,
        9,59,1,59,3,59,814,8,59,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,
        1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,5,65,834,8,65,
        10,65,12,65,837,9,65,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,3,67,
        847,8,67,1,68,1,68,1,68,1,68,1,68,1,68,4,68,855,8,68,11,68,12,68,
        856,3,68,859,8,68,1,69,1,69,1,70,1,70,1,70,1,70,3,70,867,8,70,1,
        70,3,70,870,8,70,1,70,1,70,4,70,874,8,70,11,70,12,70,875,1,70,1,
        70,1,70,1,70,3,70,882,8,70,1,70,1,70,3,70,886,8,70,4,70,888,8,70,
        11,70,12,70,889,1,71,1,71,1,71,1,71,1,71,3,71,897,8,71,1,71,1,71,
        1,71,3,71,902,8,71,1,71,3,71,905,8,71,1,71,1,71,1,71,5,71,910,8,
        71,10,71,12,71,913,9,71,1,71,1,71,5,71,917,8,71,10,71,12,71,920,
        9,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,5,71,929,8,71,10,71,12,71,
        932,9,71,1,71,3,71,935,8,71,3,71,937,8,71,1,72,1,72,1,72,1,72,1,
        73,1,73,3,73,945,8,73,1,73,1,73,1,73,3,73,950,8,73,1,73,3,73,953,
        8,73,1,74,1,74,1,74,3,74,958,8,74,1,75,1,75,1,75,1,75,5,75,964,8,
        75,10,75,12,75,967,9,75,1,75,1,75,1,76,1,76,1,76,3,76,974,8,76,1,
        76,1,76,1,77,1,77,1,77,5,77,981,8,77,10,77,12,77,984,9,77,1,77,1,
        77,1,77,1,78,1,78,1,79,1,79,3,79,993,8,79,1,79,1,79,1,79,3,79,998,
        8,79,5,79,1000,8,79,10,79,12,79,1003,9,79,1,79,3,79,1006,8,79,1,
        79,1,79,4,79,1010,8,79,11,79,12,79,1011,1,79,1,79,1,79,1,79,1,79,
        3,79,1019,8,79,3,79,1021,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,3,80,1033,8,80,1,81,1,81,1,82,1,82,1,82,1,82,5,82,
        1041,8,82,10,82,12,82,1044,9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,3,82,1054,8,82,1,83,1,83,5,83,1058,8,83,10,83,12,83,1061,
        9,83,1,83,1,83,1,83,1,1059,1,100,84,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,0,11,2,0,
        68,68,83,83,1,0,67,69,2,0,9,9,16,16,2,0,2,2,84,84,1,0,30,37,3,0,
        23,23,49,52,76,76,2,0,24,24,53,55,2,0,18,18,56,59,2,0,58,59,75,75,
        2,0,68,69,83,83,1,0,63,64,1164,0,171,1,0,0,0,2,179,1,0,0,0,4,187,
        1,0,0,0,6,190,1,0,0,0,8,198,1,0,0,0,10,208,1,0,0,0,12,252,1,0,0,
        0,14,267,1,0,0,0,16,270,1,0,0,0,18,277,1,0,0,0,20,279,1,0,0,0,22,
        281,1,0,0,0,24,286,1,0,0,0,26,290,1,0,0,0,28,307,1,0,0,0,30,309,
        1,0,0,0,32,317,1,0,0,0,34,322,1,0,0,0,36,325,1,0,0,0,38,339,1,0,
        0,0,40,347,1,0,0,0,42,358,1,0,0,0,44,384,1,0,0,0,46,396,1,0,0,0,
        48,403,1,0,0,0,50,414,1,0,0,0,52,435,1,0,0,0,54,444,1,0,0,0,56,456,
        1,0,0,0,58,458,1,0,0,0,60,512,1,0,0,0,62,527,1,0,0,0,64,529,1,0,
        0,0,66,541,1,0,0,0,68,570,1,0,0,0,70,596,1,0,0,0,72,618,1,0,0,0,
        74,620,1,0,0,0,76,622,1,0,0,0,78,627,1,0,0,0,80,637,1,0,0,0,82,644,
        1,0,0,0,84,647,1,0,0,0,86,663,1,0,0,0,88,678,1,0,0,0,90,683,1,0,
        0,0,92,689,1,0,0,0,94,696,1,0,0,0,96,705,1,0,0,0,98,707,1,0,0,0,
        100,727,1,0,0,0,102,759,1,0,0,0,104,781,1,0,0,0,106,783,1,0,0,0,
        108,792,1,0,0,0,110,794,1,0,0,0,112,796,1,0,0,0,114,798,1,0,0,0,
        116,800,1,0,0,0,118,802,1,0,0,0,120,817,1,0,0,0,122,819,1,0,0,0,
        124,821,1,0,0,0,126,825,1,0,0,0,128,828,1,0,0,0,130,831,1,0,0,0,
        132,841,1,0,0,0,134,846,1,0,0,0,136,858,1,0,0,0,138,860,1,0,0,0,
        140,862,1,0,0,0,142,936,1,0,0,0,144,938,1,0,0,0,146,952,1,0,0,0,
        148,954,1,0,0,0,150,959,1,0,0,0,152,970,1,0,0,0,154,977,1,0,0,0,
        156,988,1,0,0,0,158,1020,1,0,0,0,160,1032,1,0,0,0,162,1034,1,0,0,
        0,164,1053,1,0,0,0,166,1055,1,0,0,0,168,170,3,2,1,0,169,168,1,0,
        0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,1,1,0,0,
        0,173,171,1,0,0,0,174,180,3,4,2,0,175,180,3,84,42,0,176,180,3,24,
        12,0,177,180,3,10,5,0,178,180,3,6,3,0,179,174,1,0,0,0,179,175,1,
        0,0,0,179,176,1,0,0,0,179,177,1,0,0,0,179,178,1,0,0,0,180,3,1,0,
        0,0,181,188,3,42,21,0,182,188,3,36,18,0,183,188,3,8,4,0,184,188,
        3,48,24,0,185,188,3,50,25,0,186,188,3,54,27,0,187,181,1,0,0,0,187,
        182,1,0,0,0,187,183,1,0,0,0,187,184,1,0,0,0,187,185,1,0,0,0,187,
        186,1,0,0,0,188,5,1,0,0,0,189,191,3,18,9,0,190,189,1,0,0,0,190,191,
        1,0,0,0,191,192,1,0,0,0,192,193,5,1,0,0,193,194,5,68,0,0,194,195,
        5,2,0,0,195,196,3,56,28,0,196,197,5,3,0,0,197,7,1,0,0,0,198,199,
        5,4,0,0,199,200,5,68,0,0,200,202,5,5,0,0,201,203,3,42,21,0,202,201,
        1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,206,
        1,0,0,0,206,207,5,6,0,0,207,9,1,0,0,0,208,209,5,7,0,0,209,210,5,
        67,0,0,210,214,5,5,0,0,211,213,3,12,6,0,212,211,1,0,0,0,213,216,
        1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,
        1,0,0,0,217,218,5,6,0,0,218,11,1,0,0,0,219,221,3,18,9,0,220,219,
        1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,5,1,0,0,223,224,
        5,68,0,0,224,253,5,3,0,0,225,227,3,18,9,0,226,225,1,0,0,0,226,227,
        1,0,0,0,227,228,1,0,0,0,228,230,5,8,0,0,229,231,5,9,0,0,230,229,
        1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,233,5,68,0,0,233,234,
        5,84,0,0,234,235,3,56,28,0,235,236,5,3,0,0,236,253,1,0,0,0,237,239,
        3,18,9,0,238,237,1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,241,
        5,10,0,0,241,242,5,68,0,0,242,244,5,81,0,0,243,245,3,14,7,0,244,
        243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,249,5,82,0,0,247,
        248,5,11,0,0,248,250,3,56,28,0,249,247,1,0,0,0,249,250,1,0,0,0,250,
        251,1,0,0,0,251,253,5,3,0,0,252,220,1,0,0,0,252,226,1,0,0,0,252,
        238,1,0,0,0,253,13,1,0,0,0,254,259,3,16,8,0,255,256,5,80,0,0,256,
        258,3,16,8,0,257,255,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,
        260,1,0,0,0,260,264,1,0,0,0,261,259,1,0,0,0,262,263,5,80,0,0,263,
        265,5,85,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,268,1,0,0,0,266,
        268,5,85,0,0,267,254,1,0,0,0,267,266,1,0,0,0,268,15,1,0,0,0,269,
        271,7,0,0,0,270,269,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,
        275,5,84,0,0,273,276,3,56,28,0,274,276,5,85,0,0,275,273,1,0,0,0,
        275,274,1,0,0,0,276,17,1,0,0,0,277,278,5,12,0,0,278,19,1,0,0,0,279,
        280,5,13,0,0,280,21,1,0,0,0,281,283,5,7,0,0,282,284,5,67,0,0,283,
        282,1,0,0,0,283,284,1,0,0,0,284,23,1,0,0,0,285,287,3,26,13,0,286,
        285,1,0,0,0,287,288,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,
        25,1,0,0,0,290,292,5,77,0,0,291,293,5,75,0,0,292,291,1,0,0,0,292,
        293,1,0,0,0,293,294,1,0,0,0,294,295,5,78,0,0,295,296,3,28,14,0,296,
        297,5,79,0,0,297,27,1,0,0,0,298,308,5,68,0,0,299,300,5,68,0,0,300,
        301,5,2,0,0,301,308,3,34,17,0,302,303,5,68,0,0,303,304,5,81,0,0,
        304,305,3,30,15,0,305,306,5,82,0,0,306,308,1,0,0,0,307,298,1,0,0,
        0,307,299,1,0,0,0,307,302,1,0,0,0,308,29,1,0,0,0,309,314,3,32,16,
        0,310,311,5,80,0,0,311,313,3,32,16,0,312,310,1,0,0,0,313,316,1,0,
        0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,31,1,0,0,0,316,314,1,0,0,
        0,317,320,5,68,0,0,318,319,5,2,0,0,319,321,3,34,17,0,320,318,1,0,
        0,0,320,321,1,0,0,0,321,33,1,0,0,0,322,323,7,1,0,0,323,35,1,0,0,
        0,324,326,3,18,9,0,325,324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,
        0,327,328,5,14,0,0,328,329,5,68,0,0,329,333,5,5,0,0,330,332,3,38,
        19,0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,
        0,0,334,336,1,0,0,0,335,333,1,0,0,0,336,337,5,6,0,0,337,37,1,0,0,
        0,338,340,3,18,9,0,339,338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,
        0,341,342,5,68,0,0,342,343,5,84,0,0,343,345,3,56,28,0,344,346,5,
        80,0,0,345,344,1,0,0,0,345,346,1,0,0,0,346,39,1,0,0,0,347,348,5,
        68,0,0,348,352,5,5,0,0,349,351,3,152,76,0,350,349,1,0,0,0,351,354,
        1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,355,1,0,0,0,354,352,
        1,0,0,0,355,356,5,6,0,0,356,41,1,0,0,0,357,359,3,18,9,0,358,357,
        1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,360,362,3,20,10,0,361,360,
        1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,365,3,22,11,0,364,363,
        1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,367,5,10,0,0,367,374,
        5,68,0,0,368,375,5,15,0,0,369,371,5,81,0,0,370,372,3,44,22,0,371,
        370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,375,5,82,0,0,374,
        368,1,0,0,0,374,369,1,0,0,0,375,377,1,0,0,0,376,378,5,11,0,0,377,
        376,1,0,0,0,377,378,1,0,0,0,378,380,1,0,0,0,379,381,3,56,28,0,380,
        379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,3,64,32,0,383,
        43,1,0,0,0,384,389,3,46,23,0,385,386,5,80,0,0,386,388,3,46,23,0,
        387,385,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,
        390,393,1,0,0,0,391,389,1,0,0,0,392,394,5,80,0,0,393,392,1,0,0,0,
        393,394,1,0,0,0,394,45,1,0,0,0,395,397,5,9,0,0,396,395,1,0,0,0,396,
        397,1,0,0,0,397,398,1,0,0,0,398,399,5,68,0,0,399,400,5,84,0,0,400,
        401,3,56,28,0,401,47,1,0,0,0,402,404,3,18,9,0,403,402,1,0,0,0,403,
        404,1,0,0,0,404,405,1,0,0,0,405,406,5,16,0,0,406,407,5,68,0,0,407,
        408,5,84,0,0,408,409,3,56,28,0,409,410,5,2,0,0,410,411,3,100,50,
        0,411,412,5,3,0,0,412,49,1,0,0,0,413,415,3,18,9,0,414,413,1,0,0,
        0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,5,17,0,0,417,432,5,68,
        0,0,418,419,5,84,0,0,419,420,3,56,28,0,420,421,5,2,0,0,421,422,3,
        100,50,0,422,423,5,3,0,0,423,433,1,0,0,0,424,428,5,5,0,0,425,427,
        3,52,26,0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,
        1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,433,5,6,0,0,432,418,
        1,0,0,0,432,424,1,0,0,0,433,51,1,0,0,0,434,436,3,18,9,0,435,434,
        1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,438,5,68,0,0,438,439,
        5,84,0,0,439,441,3,56,28,0,440,442,5,80,0,0,441,440,1,0,0,0,441,
        442,1,0,0,0,442,53,1,0,0,0,443,445,3,18,9,0,444,443,1,0,0,0,444,
        445,1,0,0,0,445,446,1,0,0,0,446,447,5,13,0,0,447,448,5,68,0,0,448,
        449,5,84,0,0,449,450,3,56,28,0,450,451,5,2,0,0,451,452,3,100,50,
        0,452,453,5,3,0,0,453,55,1,0,0,0,454,457,3,60,30,0,455,457,3,58,
        29,0,456,454,1,0,0,0,456,455,1,0,0,0,457,57,1,0,0,0,458,459,5,18,
        0,0,459,461,7,2,0,0,460,462,3,56,28,0,461,460,1,0,0,0,461,462,1,
        0,0,0,462,59,1,0,0,0,463,513,5,19,0,0,464,513,5,20,0,0,465,513,5,
        21,0,0,466,513,5,22,0,0,467,513,5,15,0,0,468,480,3,62,31,0,469,470,
        5,23,0,0,470,475,3,56,28,0,471,472,5,80,0,0,472,474,3,56,28,0,473,
        471,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,
        478,1,0,0,0,477,475,1,0,0,0,478,479,5,76,0,0,479,481,1,0,0,0,480,
        469,1,0,0,0,480,481,1,0,0,0,481,513,1,0,0,0,482,494,5,68,0,0,483,
        484,5,23,0,0,484,489,3,56,28,0,485,486,5,80,0,0,486,488,3,56,28,
        0,487,485,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,489,490,1,0,0,
        0,490,492,1,0,0,0,491,489,1,0,0,0,492,493,5,76,0,0,493,495,1,0,0,
        0,494,483,1,0,0,0,494,495,1,0,0,0,495,513,1,0,0,0,496,497,5,24,0,
        0,497,513,3,56,28,0,498,500,3,62,31,0,499,498,1,0,0,0,499,500,1,
        0,0,0,500,501,1,0,0,0,501,502,5,78,0,0,502,503,3,56,28,0,503,504,
        5,3,0,0,504,505,5,69,0,0,505,506,5,79,0,0,506,513,1,0,0,0,507,508,
        5,78,0,0,508,509,3,56,28,0,509,510,5,79,0,0,510,513,1,0,0,0,511,
        513,5,68,0,0,512,463,1,0,0,0,512,464,1,0,0,0,512,465,1,0,0,0,512,
        466,1,0,0,0,512,467,1,0,0,0,512,468,1,0,0,0,512,482,1,0,0,0,512,
        496,1,0,0,0,512,499,1,0,0,0,512,507,1,0,0,0,512,511,1,0,0,0,513,
        61,1,0,0,0,514,515,5,68,0,0,515,528,5,74,0,0,516,518,5,74,0,0,517,
        516,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,524,5,68,0,0,520,
        521,5,74,0,0,521,523,5,68,0,0,522,520,1,0,0,0,523,526,1,0,0,0,524,
        522,1,0,0,0,524,525,1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,527,
        514,1,0,0,0,527,517,1,0,0,0,528,63,1,0,0,0,529,533,5,5,0,0,530,532,
        3,68,34,0,531,530,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,
        1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,536,538,3,96,48,0,537,536,
        1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,0,539,540,5,6,0,0,540,65,1,
        0,0,0,541,542,5,13,0,0,542,543,3,64,32,0,543,67,1,0,0,0,544,571,
        3,70,35,0,545,571,3,40,20,0,546,571,3,84,42,0,547,571,3,88,44,0,
        548,571,3,76,38,0,549,571,3,90,45,0,550,571,3,92,46,0,551,571,3,
        94,47,0,552,571,3,80,40,0,553,571,3,96,48,0,554,571,3,98,49,0,555,
        556,5,25,0,0,556,571,5,3,0,0,557,558,5,26,0,0,558,571,5,3,0,0,559,
        571,3,78,39,0,560,565,3,142,71,0,561,562,5,27,0,0,562,564,3,142,
        71,0,563,561,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,
        0,0,566,568,1,0,0,0,567,565,1,0,0,0,568,569,5,3,0,0,569,571,1,0,
        0,0,570,544,1,0,0,0,570,545,1,0,0,0,570,546,1,0,0,0,570,547,1,0,
        0,0,570,548,1,0,0,0,570,549,1,0,0,0,570,550,1,0,0,0,570,551,1,0,
        0,0,570,552,1,0,0,0,570,553,1,0,0,0,570,554,1,0,0,0,570,555,1,0,
        0,0,570,557,1,0,0,0,570,559,1,0,0,0,570,560,1,0,0,0,571,69,1,0,0,
        0,572,573,5,28,0,0,573,574,3,72,36,0,574,575,5,2,0,0,575,576,3,100,
        50,0,576,577,5,3,0,0,577,597,1,0,0,0,578,580,5,28,0,0,579,581,5,
        9,0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,583,5,
        68,0,0,583,586,5,84,0,0,584,587,3,56,28,0,585,587,5,68,0,0,586,584,
        1,0,0,0,586,585,1,0,0,0,587,588,1,0,0,0,588,589,5,2,0,0,589,590,
        3,82,41,0,590,591,5,3,0,0,591,597,1,0,0,0,592,593,5,28,0,0,593,594,
        3,72,36,0,594,595,3,86,43,0,595,597,1,0,0,0,596,572,1,0,0,0,596,
        578,1,0,0,0,596,592,1,0,0,0,597,71,1,0,0,0,598,600,5,29,0,0,599,
        601,5,9,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,
        605,5,68,0,0,603,604,5,84,0,0,604,606,3,56,28,0,605,603,1,0,0,0,
        605,606,1,0,0,0,606,619,1,0,0,0,607,608,5,9,0,0,608,611,5,68,0,0,
        609,610,7,3,0,0,610,612,3,56,28,0,611,609,1,0,0,0,611,612,1,0,0,
        0,612,619,1,0,0,0,613,616,5,68,0,0,614,615,5,84,0,0,615,617,3,56,
        28,0,616,614,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,0,618,598,1,0,
        0,0,618,607,1,0,0,0,618,613,1,0,0,0,619,73,1,0,0,0,620,621,7,4,0,
        0,621,75,1,0,0,0,622,623,3,100,50,0,623,624,3,74,37,0,624,625,3,
        100,50,0,625,626,5,3,0,0,626,77,1,0,0,0,627,628,5,38,0,0,628,629,
        3,100,50,0,629,631,5,5,0,0,630,632,3,154,77,0,631,630,1,0,0,0,632,
        633,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,
        636,5,6,0,0,636,79,1,0,0,0,637,638,5,39,0,0,638,639,3,100,50,0,639,
        640,3,64,32,0,640,81,1,0,0,0,641,645,3,86,43,0,642,645,3,64,32,0,
        643,645,3,100,50,0,644,641,1,0,0,0,644,642,1,0,0,0,644,643,1,0,0,
        0,645,83,1,0,0,0,646,648,3,18,9,0,647,646,1,0,0,0,647,648,1,0,0,
        0,648,649,1,0,0,0,649,651,5,8,0,0,650,652,5,9,0,0,651,650,1,0,0,
        0,651,652,1,0,0,0,652,653,1,0,0,0,653,654,5,68,0,0,654,657,5,84,
        0,0,655,658,3,56,28,0,656,658,5,68,0,0,657,655,1,0,0,0,657,656,1,
        0,0,0,658,659,1,0,0,0,659,660,5,2,0,0,660,661,3,82,41,0,661,662,
        5,3,0,0,662,85,1,0,0,0,663,671,5,5,0,0,664,665,5,68,0,0,665,666,
        5,84,0,0,666,667,3,100,50,0,667,668,5,80,0,0,668,670,1,0,0,0,669,
        664,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,
        674,1,0,0,0,673,671,1,0,0,0,674,675,5,6,0,0,675,676,5,3,0,0,676,
        677,3,100,50,0,677,87,1,0,0,0,678,679,3,100,50,0,679,680,5,2,0,0,
        680,681,3,100,50,0,681,682,5,3,0,0,682,89,1,0,0,0,683,684,5,40,0,
        0,684,685,5,68,0,0,685,686,5,41,0,0,686,687,3,100,50,0,687,688,3,
        64,32,0,688,91,1,0,0,0,689,690,5,42,0,0,690,691,3,100,50,0,691,694,
        3,64,32,0,692,693,5,43,0,0,693,695,3,64,32,0,694,692,1,0,0,0,694,
        695,1,0,0,0,695,93,1,0,0,0,696,697,3,100,50,0,697,698,5,3,0,0,698,
        95,1,0,0,0,699,701,5,44,0,0,700,702,3,100,50,0,701,700,1,0,0,0,701,
        702,1,0,0,0,702,703,1,0,0,0,703,706,5,3,0,0,704,706,5,68,0,0,705,
        699,1,0,0,0,705,704,1,0,0,0,706,97,1,0,0,0,707,708,5,45,0,0,708,
        709,3,64,32,0,709,99,1,0,0,0,710,711,6,50,-1,0,711,712,3,102,51,
        0,712,713,3,100,50,17,713,728,1,0,0,0,714,715,3,120,60,0,715,716,
        3,100,50,16,716,728,1,0,0,0,717,728,3,134,67,0,718,728,3,128,64,
        0,719,728,3,124,62,0,720,728,3,118,59,0,721,722,3,122,61,0,722,723,
        3,100,50,11,723,728,1,0,0,0,724,728,3,132,66,0,725,728,3,130,65,
        0,726,728,3,138,69,0,727,710,1,0,0,0,727,714,1,0,0,0,727,717,1,0,
        0,0,727,718,1,0,0,0,727,719,1,0,0,0,727,720,1,0,0,0,727,721,1,0,
        0,0,727,724,1,0,0,0,727,725,1,0,0,0,727,726,1,0,0,0,728,755,1,0,
        0,0,729,730,10,8,0,0,730,731,3,114,57,0,731,732,3,100,50,9,732,754,
        1,0,0,0,733,734,10,7,0,0,734,735,3,116,58,0,735,736,3,100,50,8,736,
        754,1,0,0,0,737,738,10,6,0,0,738,739,3,112,56,0,739,740,3,100,50,
        7,740,754,1,0,0,0,741,742,10,5,0,0,742,743,3,110,55,0,743,744,3,
        100,50,6,744,754,1,0,0,0,745,746,10,4,0,0,746,747,3,108,54,0,747,
        748,3,100,50,5,748,754,1,0,0,0,749,750,10,9,0,0,750,754,3,136,68,
        0,751,752,10,3,0,0,752,754,3,106,53,0,753,729,1,0,0,0,753,733,1,
        0,0,0,753,737,1,0,0,0,753,741,1,0,0,0,753,745,1,0,0,0,753,749,1,
        0,0,0,753,751,1,0,0,0,754,757,1,0,0,0,755,753,1,0,0,0,755,756,1,
        0,0,0,756,101,1,0,0,0,757,755,1,0,0,0,758,760,5,28,0,0,759,758,1,
        0,0,0,759,760,1,0,0,0,760,761,1,0,0,0,761,762,3,104,52,0,762,763,
        5,2,0,0,763,103,1,0,0,0,764,766,5,29,0,0,765,764,1,0,0,0,765,766,
        1,0,0,0,766,768,1,0,0,0,767,769,5,9,0,0,768,767,1,0,0,0,768,769,
        1,0,0,0,769,770,1,0,0,0,770,782,5,68,0,0,771,772,5,46,0,0,772,774,
        5,81,0,0,773,775,5,29,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,777,
        1,0,0,0,776,778,5,9,0,0,777,776,1,0,0,0,777,778,1,0,0,0,778,779,
        1,0,0,0,779,780,5,68,0,0,780,782,5,82,0,0,781,765,1,0,0,0,781,771,
        1,0,0,0,782,105,1,0,0,0,783,784,5,47,0,0,784,789,3,56,28,0,785,786,
        5,47,0,0,786,788,3,56,28,0,787,785,1,0,0,0,788,791,1,0,0,0,789,787,
        1,0,0,0,789,790,1,0,0,0,790,107,1,0,0,0,791,789,1,0,0,0,792,793,
        7,4,0,0,793,109,1,0,0,0,794,795,5,48,0,0,795,111,1,0,0,0,796,797,
        7,5,0,0,797,113,1,0,0,0,798,799,7,6,0,0,799,115,1,0,0,0,800,801,
        7,7,0,0,801,117,1,0,0,0,802,803,5,68,0,0,803,804,5,5,0,0,804,809,
        3,152,76,0,805,806,5,80,0,0,806,808,3,152,76,0,807,805,1,0,0,0,808,
        811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,813,1,0,0,0,811,
        809,1,0,0,0,812,814,5,80,0,0,813,812,1,0,0,0,813,814,1,0,0,0,814,
        815,1,0,0,0,815,816,5,6,0,0,816,119,1,0,0,0,817,818,5,9,0,0,818,
        121,1,0,0,0,819,820,7,8,0,0,820,123,1,0,0,0,821,822,5,81,0,0,822,
        823,3,100,50,0,823,824,5,82,0,0,824,125,1,0,0,0,825,826,5,24,0,0,
        826,827,3,100,50,0,827,127,1,0,0,0,828,829,5,18,0,0,829,830,3,100,
        50,0,830,129,1,0,0,0,831,835,5,5,0,0,832,834,3,68,34,0,833,832,1,
        0,0,0,834,837,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,838,1,
        0,0,0,837,835,1,0,0,0,838,839,3,100,50,0,839,840,5,6,0,0,840,131,
        1,0,0,0,841,842,5,24,0,0,842,843,3,100,50,0,843,133,1,0,0,0,844,
        847,3,160,80,0,845,847,5,68,0,0,846,844,1,0,0,0,846,845,1,0,0,0,
        847,135,1,0,0,0,848,849,5,78,0,0,849,850,3,134,67,0,850,851,5,79,
        0,0,851,859,1,0,0,0,852,853,5,27,0,0,853,855,3,134,67,0,854,852,
        1,0,0,0,855,856,1,0,0,0,856,854,1,0,0,0,856,857,1,0,0,0,857,859,
        1,0,0,0,858,848,1,0,0,0,858,854,1,0,0,0,859,137,1,0,0,0,860,861,
        3,140,70,0,861,139,1,0,0,0,862,887,3,134,67,0,863,870,5,15,0,0,864,
        866,5,81,0,0,865,867,3,158,79,0,866,865,1,0,0,0,866,867,1,0,0,0,
        867,868,1,0,0,0,868,870,5,82,0,0,869,863,1,0,0,0,869,864,1,0,0,0,
        870,888,1,0,0,0,871,872,5,27,0,0,872,874,5,68,0,0,873,871,1,0,0,
        0,874,875,1,0,0,0,875,873,1,0,0,0,875,876,1,0,0,0,876,888,1,0,0,
        0,877,878,5,27,0,0,878,885,5,68,0,0,879,881,5,81,0,0,880,882,3,158,
        79,0,881,880,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,886,5,82,
        0,0,884,886,5,15,0,0,885,879,1,0,0,0,885,884,1,0,0,0,886,888,1,0,
        0,0,887,869,1,0,0,0,887,873,1,0,0,0,887,877,1,0,0,0,888,889,1,0,
        0,0,889,887,1,0,0,0,889,890,1,0,0,0,890,141,1,0,0,0,891,892,5,74,
        0,0,892,893,3,62,31,0,893,894,5,68,0,0,894,896,5,74,0,0,895,897,
        3,150,75,0,896,895,1,0,0,0,896,897,1,0,0,0,897,904,1,0,0,0,898,905,
        5,15,0,0,899,901,5,81,0,0,900,902,3,158,79,0,901,900,1,0,0,0,901,
        902,1,0,0,0,902,903,1,0,0,0,903,905,5,82,0,0,904,898,1,0,0,0,904,
        899,1,0,0,0,905,937,1,0,0,0,906,911,5,68,0,0,907,908,5,27,0,0,908,
        910,5,68,0,0,909,907,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,
        912,1,0,0,0,912,918,1,0,0,0,913,911,1,0,0,0,914,915,5,74,0,0,915,
        917,5,68,0,0,916,914,1,0,0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,
        919,1,0,0,0,919,934,1,0,0,0,920,918,1,0,0,0,921,935,5,15,0,0,922,
        930,5,81,0,0,923,924,5,68,0,0,924,925,5,81,0,0,925,926,5,67,0,0,
        926,929,5,82,0,0,927,929,3,158,79,0,928,923,1,0,0,0,928,927,1,0,
        0,0,929,932,1,0,0,0,930,928,1,0,0,0,930,931,1,0,0,0,931,933,1,0,
        0,0,932,930,1,0,0,0,933,935,5,82,0,0,934,921,1,0,0,0,934,922,1,0,
        0,0,935,937,1,0,0,0,936,891,1,0,0,0,936,906,1,0,0,0,937,143,1,0,
        0,0,938,939,5,68,0,0,939,940,5,75,0,0,940,941,3,146,73,0,941,145,
        1,0,0,0,942,944,5,78,0,0,943,945,3,148,74,0,944,943,1,0,0,0,944,
        945,1,0,0,0,945,946,1,0,0,0,946,953,5,79,0,0,947,949,5,81,0,0,948,
        950,3,148,74,0,949,948,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,
        953,5,82,0,0,952,942,1,0,0,0,952,947,1,0,0,0,953,147,1,0,0,0,954,
        957,3,100,50,0,955,956,5,3,0,0,956,958,3,100,50,0,957,955,1,0,0,
        0,957,958,1,0,0,0,958,149,1,0,0,0,959,960,5,23,0,0,960,965,3,56,
        28,0,961,962,5,80,0,0,962,964,3,56,28,0,963,961,1,0,0,0,964,967,
        1,0,0,0,965,963,1,0,0,0,965,966,1,0,0,0,966,968,1,0,0,0,967,965,
        1,0,0,0,968,969,5,76,0,0,969,151,1,0,0,0,970,973,5,68,0,0,971,972,
        5,84,0,0,972,974,3,100,50,0,973,971,1,0,0,0,973,974,1,0,0,0,974,
        975,1,0,0,0,975,976,5,80,0,0,976,153,1,0,0,0,977,982,3,156,78,0,
        978,979,5,60,0,0,979,981,3,156,78,0,980,978,1,0,0,0,981,984,1,0,
        0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,985,1,0,0,0,984,982,1,0,
        0,0,985,986,5,61,0,0,986,987,3,64,32,0,987,155,1,0,0,0,988,989,7,
        9,0,0,989,157,1,0,0,0,990,993,3,142,71,0,991,993,3,100,50,0,992,
        990,1,0,0,0,992,991,1,0,0,0,993,1001,1,0,0,0,994,997,5,80,0,0,995,
        998,3,142,71,0,996,998,3,100,50,0,997,995,1,0,0,0,997,996,1,0,0,
        0,998,1000,1,0,0,0,999,994,1,0,0,0,1000,1003,1,0,0,0,1001,999,1,
        0,0,0,1001,1002,1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,1004,
        1006,5,80,0,0,1005,1004,1,0,0,0,1005,1006,1,0,0,0,1006,1021,1,0,
        0,0,1007,1008,5,74,0,0,1008,1010,5,68,0,0,1009,1007,1,0,0,0,1010,
        1011,1,0,0,0,1011,1009,1,0,0,0,1011,1012,1,0,0,0,1012,1018,1,0,0,
        0,1013,1019,5,15,0,0,1014,1015,5,81,0,0,1015,1016,3,158,79,0,1016,
        1017,5,82,0,0,1017,1019,1,0,0,0,1018,1013,1,0,0,0,1018,1014,1,0,
        0,0,1019,1021,1,0,0,0,1020,992,1,0,0,0,1020,1009,1,0,0,0,1021,159,
        1,0,0,0,1022,1033,3,164,82,0,1023,1033,5,72,0,0,1024,1033,5,69,0,
        0,1025,1033,5,70,0,0,1026,1033,5,71,0,0,1027,1033,5,66,0,0,1028,
        1033,5,67,0,0,1029,1033,3,162,81,0,1030,1033,5,73,0,0,1031,1033,
        5,65,0,0,1032,1022,1,0,0,0,1032,1023,1,0,0,0,1032,1024,1,0,0,0,1032,
        1025,1,0,0,0,1032,1026,1,0,0,0,1032,1027,1,0,0,0,1032,1028,1,0,0,
        0,1032,1029,1,0,0,0,1032,1030,1,0,0,0,1032,1031,1,0,0,0,1033,161,
        1,0,0,0,1034,1035,7,10,0,0,1035,163,1,0,0,0,1036,1037,5,78,0,0,1037,
        1042,3,100,50,0,1038,1039,5,80,0,0,1039,1041,3,100,50,0,1040,1038,
        1,0,0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,
        1045,1,0,0,0,1044,1042,1,0,0,0,1045,1046,5,79,0,0,1046,1054,1,0,
        0,0,1047,1048,5,78,0,0,1048,1049,3,100,50,0,1049,1050,5,3,0,0,1050,
        1051,3,100,50,0,1051,1052,5,79,0,0,1052,1054,1,0,0,0,1053,1036,1,
        0,0,0,1053,1047,1,0,0,0,1054,165,1,0,0,0,1055,1059,5,62,0,0,1056,
        1058,9,0,0,0,1057,1056,1,0,0,0,1058,1061,1,0,0,0,1059,1060,1,0,0,
        0,1059,1057,1,0,0,0,1060,1062,1,0,0,0,1061,1059,1,0,0,0,1062,1063,
        5,62,0,0,1063,167,1,0,0,0,128,171,179,187,190,204,214,220,226,230,
        238,244,249,252,259,264,267,270,275,283,288,292,307,314,320,325,
        333,339,345,352,358,361,364,371,374,377,380,389,393,396,403,414,
        428,432,435,441,444,456,461,475,480,489,494,499,512,517,524,527,
        533,537,565,570,580,586,596,600,605,611,616,618,633,644,647,651,
        657,671,694,701,705,727,753,755,759,765,768,774,777,781,789,809,
        813,835,846,856,858,866,869,875,881,885,887,889,896,901,904,911,
        918,928,930,934,936,944,949,952,957,965,973,982,992,997,1001,1005,
        1011,1018,1020,1032,1042,1053,1059
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'impl'", "'{'", 
                     "'}'", "'extern'", "'static'", "'mut'", "'fn'", "'->'", 
                     "'pub'", "'unsafe'", "'struct'", "'()'", "'const'", 
                     "'union'", "'*'", "'i32'", "'String'", "'bool'", "'u8'", 
                     "'<'", "'&'", "'break'", "'continue'", "'.'", "'let'", 
                     "'ref'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'match'", "'while'", "'for'", "'in'", 
                     "'if'", "'else'", "'return'", "'loop'", "'Some'", "'as'", 
                     "'..'", "'=='", "'!='", "'||'", "'&&'", "'>>'", "'>='", 
                     "'<='", "'/'", "'%'", "'+'", "'-'", "'|'", "'=>'", 
                     "'\"'", "'true'", "'false'", "'None'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'::'", "'!'", 
                     "'>'", "'#'", "'['", "']'", "','", "'('", "')'", "'_'", 
                     "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "TRUE", "FALSE", 
                      "NONE", "Binary", "STRING_LITERAL", "Identifier", 
                      "Number", "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_topLevelDef = 2
    RULE_typeAlias = 3
    RULE_interfaceDef = 4
    RULE_externBlock = 5
    RULE_externItem = 6
    RULE_externParams = 7
    RULE_externParam = 8
    RULE_visibility = 9
    RULE_unsafeModifier = 10
    RULE_externAbi = 11
    RULE_attributes = 12
    RULE_innerAttribute = 13
    RULE_attribute = 14
    RULE_attrArgs = 15
    RULE_attrArg = 16
    RULE_attrValue = 17
    RULE_structDef = 18
    RULE_structField = 19
    RULE_structLiteral = 20
    RULE_functionDef = 21
    RULE_paramList = 22
    RULE_param = 23
    RULE_constDef = 24
    RULE_unionDef = 25
    RULE_unionField = 26
    RULE_unsafeDef = 27
    RULE_type = 28
    RULE_pointerType = 29
    RULE_basicType = 30
    RULE_typePath = 31
    RULE_block = 32
    RULE_unsafeBlock = 33
    RULE_statement = 34
    RULE_letStmt = 35
    RULE_varDef = 36
    RULE_compoundOp = 37
    RULE_compoundAssignment = 38
    RULE_matchStmt = 39
    RULE_whileStmt = 40
    RULE_initializer = 41
    RULE_staticVarDecl = 42
    RULE_initBlock = 43
    RULE_assignStmt = 44
    RULE_forStmt = 45
    RULE_ifStmt = 46
    RULE_exprStmt = 47
    RULE_returnStmt = 48
    RULE_loopStmt = 49
    RULE_expression = 50
    RULE_patternPrefix = 51
    RULE_pattern = 52
    RULE_castExpressionPostFix = 53
    RULE_compoundOps = 54
    RULE_patternSymbol = 55
    RULE_conditionalOps = 56
    RULE_booleanOps = 57
    RULE_binaryOps = 58
    RULE_structFieldDec = 59
    RULE_mutableExpression = 60
    RULE_unaryOpes = 61
    RULE_parenExpression = 62
    RULE_referenceExpression = 63
    RULE_dereferenceExpression = 64
    RULE_expressionBlock = 65
    RULE_borrowExpression = 66
    RULE_primaryExpression = 67
    RULE_fieldAccessPostFix = 68
    RULE_callExpression = 69
    RULE_postfixExpression = 70
    RULE_qualifiedFunctionCall = 71
    RULE_macroCall = 72
    RULE_macroArgs = 73
    RULE_macroInner = 74
    RULE_genericArgs = 75
    RULE_structLiteralField = 76
    RULE_matchArm = 77
    RULE_matchPattern = 78
    RULE_argumentList = 79
    RULE_literal = 80
    RULE_booleanLiteral = 81
    RULE_arrayLiteral = 82
    RULE_stringLiteral = 83

    ruleNames =  [ "program", "topLevelItem", "topLevelDef", "typeAlias", 
                   "interfaceDef", "externBlock", "externItem", "externParams", 
                   "externParam", "visibility", "unsafeModifier", "externAbi", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "structLiteral", 
                   "functionDef", "paramList", "param", "constDef", "unionDef", 
                   "unionField", "unsafeDef", "type", "pointerType", "basicType", 
                   "typePath", "block", "unsafeBlock", "statement", "letStmt", 
                   "varDef", "compoundOp", "compoundAssignment", "matchStmt", 
                   "whileStmt", "initializer", "staticVarDecl", "initBlock", 
                   "assignStmt", "forStmt", "ifStmt", "exprStmt", "returnStmt", 
                   "loopStmt", "expression", "patternPrefix", "pattern", 
                   "castExpressionPostFix", "compoundOps", "patternSymbol", 
                   "conditionalOps", "booleanOps", "binaryOps", "structFieldDec", 
                   "mutableExpression", "unaryOpes", "parenExpression", 
                   "referenceExpression", "dereferenceExpression", "expressionBlock", 
                   "borrowExpression", "primaryExpression", "fieldAccessPostFix", 
                   "callExpression", "postfixExpression", "qualifiedFunctionCall", 
                   "macroCall", "macroArgs", "macroInner", "genericArgs", 
                   "structLiteralField", "matchArm", "matchPattern", "argumentList", 
                   "literal", "booleanLiteral", "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    TRUE=63
    FALSE=64
    NONE=65
    Binary=66
    STRING_LITERAL=67
    Identifier=68
    Number=69
    SignedNumber=70
    BYTE_STRING_LITERAL=71
    HexNumber=72
    CHAR_LITERAL=73
    DOUBLE_COLON=74
    EXCL=75
    GT=76
    POUND=77
    LBRACK=78
    RBRACK=79
    COMMA=80
    LPAREN=81
    RPAREN=82
    UNDERSCORE=83
    COLON=84
    ELLIPSIS=85
    WS=86
    COMMENT=87

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 226706) != 0) or _la==77:
                self.state = 168
                self.topLevelItem()
                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 174
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 176
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 177
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 178
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelDef" ):
                return visitor.visitTopLevelDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_topLevelDef)
        try:
            self.state = 187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 181
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 182
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 183
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 184
                self.constDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 185
                self.unionDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 186
                self.unsafeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 189
                self.visibility()


            self.state = 192
            self.match(RustParser.T__0)
            self.state = 193
            self.match(RustParser.Identifier)
            self.state = 194
            self.match(RustParser.T__1)
            self.state = 195
            self.type_()
            self.state = 196
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDef" ):
                return visitor.visitInterfaceDef(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(RustParser.T__3)
            self.state = 199
            self.match(RustParser.Identifier)
            self.state = 200
            self.match(RustParser.T__4)
            self.state = 202 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 201
                self.functionDef()
                self.state = 204 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 13440) != 0)):
                    break

            self.state = 206
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(RustParser.T__6)
            self.state = 209
            self.match(RustParser.STRING_LITERAL)
            self.state = 210
            self.match(RustParser.T__4)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5378) != 0):
                self.state = 211
                self.externItem()
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 217
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 219
                    self.visibility()


                self.state = 222
                self.match(RustParser.T__0)
                self.state = 223
                self.match(RustParser.Identifier)
                self.state = 224
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 225
                    self.visibility()


                self.state = 228
                self.match(RustParser.T__7)
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 229
                    self.match(RustParser.T__8)


                self.state = 232
                self.match(RustParser.Identifier)
                self.state = 233
                self.match(RustParser.COLON)
                self.state = 234
                self.type_()
                self.state = 235
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 237
                    self.visibility()


                self.state = 240
                self.match(RustParser.T__9)
                self.state = 241
                self.match(RustParser.Identifier)
                self.state = 242
                self.match(RustParser.LPAREN)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 229377) != 0):
                    self.state = 243
                    self.externParams()


                self.state = 246
                self.match(RustParser.RPAREN)
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 247
                    self.match(RustParser.T__10)
                    self.state = 248
                    self.type_()


                self.state = 251
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 83, 84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.externParam()
                self.state = 259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 255
                        self.match(RustParser.COMMA)
                        self.state = 256
                        self.externParam() 
                    self.state = 261
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 262
                    self.match(RustParser.COMMA)
                    self.state = 263
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 266
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68 or _la==83:
                self.state = 269
                _la = self._input.LA(1)
                if not(_la==68 or _la==83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 272
            self.match(RustParser.COLON)
            self.state = 275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 18, 19, 20, 21, 22, 24, 68, 74, 78]:
                self.state = 273
                self.type_()
                pass
            elif token in [85]:
                self.state = 274
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(RustParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(RustParser.T__6)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 282
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 285
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 288 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(RustParser.POUND)

            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 291
                self.match(RustParser.EXCL)


            self.state = 294
            self.match(RustParser.LBRACK)
            self.state = 295
            self.attribute()
            self.state = 296
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_attribute)
        try:
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 298
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self.match(RustParser.Identifier)
                self.state = 300
                self.match(RustParser.T__1)
                self.state = 301
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 302
                self.match(RustParser.Identifier)
                self.state = 303
                self.match(RustParser.LPAREN)
                self.state = 304
                self.attrArgs()
                self.state = 305
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.attrArg()
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80:
                self.state = 310
                self.match(RustParser.COMMA)
                self.state = 311
                self.attrArg()
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(RustParser.Identifier)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 318
                self.match(RustParser.T__1)
                self.state = 319
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 324
                self.visibility()


            self.state = 327
            self.match(RustParser.T__13)
            self.state = 328
            self.match(RustParser.Identifier)
            self.state = 329
            self.match(RustParser.T__4)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12 or _la==68:
                self.state = 330
                self.structField()
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 336
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 338
                self.visibility()


            self.state = 341
            self.match(RustParser.Identifier)
            self.state = 342
            self.match(RustParser.COLON)
            self.state = 343
            self.type_()
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 344
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteral" ):
                return visitor.visitStructLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self.match(RustParser.Identifier)
            self.state = 348
            self.match(RustParser.T__4)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 349
                self.structLiteralField()
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 355
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 357
                self.visibility()


            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 360
                self.unsafeModifier()


            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 363
                self.externAbi()


            self.state = 366
            self.match(RustParser.T__9)
            self.state = 367
            self.match(RustParser.Identifier)
            self.state = 374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 368
                self.match(RustParser.T__14)
                pass
            elif token in [81]:
                self.state = 369
                self.match(RustParser.LPAREN)
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9 or _la==68:
                    self.state = 370
                    self.paramList()


                self.state = 373
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 376
                self.match(RustParser.T__10)


            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & -8637904085296610567) != 0):
                self.state = 379
                self.type_()


            self.state = 382
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.param()
            self.state = 389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 385
                    self.match(RustParser.COMMA)
                    self.state = 386
                    self.param() 
                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 392
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 395
                self.match(RustParser.T__8)


            self.state = 398
            self.match(RustParser.Identifier)
            self.state = 399
            self.match(RustParser.COLON)
            self.state = 400
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 402
                self.visibility()


            self.state = 405
            self.match(RustParser.T__15)
            self.state = 406
            self.match(RustParser.Identifier)
            self.state = 407
            self.match(RustParser.COLON)
            self.state = 408
            self.type_()
            self.state = 409
            self.match(RustParser.T__1)
            self.state = 410
            self.expression(0)
            self.state = 411
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 413
                self.visibility()


            self.state = 416
            self.match(RustParser.T__16)
            self.state = 417
            self.match(RustParser.Identifier)
            self.state = 432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.state = 418
                self.match(RustParser.COLON)
                self.state = 419
                self.type_()
                self.state = 420
                self.match(RustParser.T__1)
                self.state = 421
                self.expression(0)
                self.state = 422
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 424
                self.match(RustParser.T__4)
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==12 or _la==68:
                    self.state = 425
                    self.unionField()
                    self.state = 430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 431
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 434
                self.visibility()


            self.state = 437
            self.match(RustParser.Identifier)
            self.state = 438
            self.match(RustParser.COLON)
            self.state = 439
            self.type_()
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 440
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 443
                self.visibility()


            self.state = 446
            self.match(RustParser.T__12)
            self.state = 447
            self.match(RustParser.Identifier)
            self.state = 448
            self.match(RustParser.COLON)
            self.state = 449
            self.type_()
            self.state = 450
            self.match(RustParser.T__1)
            self.state = 451
            self.expression(0)
            self.state = 452
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_type)
        try:
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 19, 20, 21, 22, 24, 68, 74, 78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.basicType()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 455
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(RustParser.T__17)
            self.state = 459
            _la = self._input.LA(1)
            if not(_la==9 or _la==16):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 460
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 463
                self.match(RustParser.T__18)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                self.match(RustParser.T__19)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 465
                self.match(RustParser.T__20)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 466
                self.match(RustParser.T__21)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 467
                self.match(RustParser.T__14)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 468
                self.typePath()
                self.state = 480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 469
                    self.match(RustParser.T__22)
                    self.state = 470
                    self.type_()
                    self.state = 475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==80:
                        self.state = 471
                        self.match(RustParser.COMMA)
                        self.state = 472
                        self.type_()
                        self.state = 477
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 478
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 482
                self.match(RustParser.Identifier)
                self.state = 494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 483
                    self.match(RustParser.T__22)
                    self.state = 484
                    self.type_()
                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==80:
                        self.state = 485
                        self.match(RustParser.COMMA)
                        self.state = 486
                        self.type_()
                        self.state = 491
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 492
                    self.match(RustParser.GT)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 496
                self.match(RustParser.T__23)
                self.state = 497
                self.type_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==74:
                    self.state = 498
                    self.typePath()


                self.state = 501
                self.match(RustParser.LBRACK)
                self.state = 502
                self.type_()
                self.state = 503
                self.match(RustParser.T__2)
                self.state = 504
                self.match(RustParser.Number)
                self.state = 505
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 507
                self.match(RustParser.LBRACK)
                self.state = 508
                self.type_()
                self.state = 509
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 511
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                self.match(RustParser.Identifier)
                self.state = 515
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 516
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 519
                self.match(RustParser.Identifier)
                self.state = 524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 520
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 521
                        self.match(RustParser.Identifier) 
                    self.state = 526
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(RustParser.T__4)
            self.state = 533
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 530
                    self.statement() 
                self.state = 535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44 or _la==68:
                self.state = 536
                self.returnStmt()


            self.state = 539
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(RustParser.T__12)
            self.state = 542
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 544
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 545
                self.structLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 546
                self.staticVarDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 547
                self.assignStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 548
                self.compoundAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 549
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 550
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 551
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 552
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 553
                self.returnStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 554
                self.loopStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 555
                self.match(RustParser.T__24)
                self.state = 556
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 557
                self.match(RustParser.T__25)
                self.state = 558
                self.match(RustParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 559
                self.matchStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 560
                self.qualifiedFunctionCall()
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 561
                    self.match(RustParser.T__26)
                    self.state = 562
                    self.qualifiedFunctionCall()
                    self.state = 567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 568
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.match(RustParser.T__27)
                self.state = 573
                self.varDef()
                self.state = 574
                self.match(RustParser.T__1)
                self.state = 575
                self.expression(0)
                self.state = 576
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.match(RustParser.T__27)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 579
                    self.match(RustParser.T__8)


                self.state = 582
                self.match(RustParser.Identifier)
                self.state = 583
                self.match(RustParser.COLON)
                self.state = 586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 584
                    self.type_()
                    pass

                elif la_ == 2:
                    self.state = 585
                    self.match(RustParser.Identifier)
                    pass


                self.state = 588
                self.match(RustParser.T__1)
                self.state = 589
                self.initializer()
                self.state = 590
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 592
                self.match(RustParser.T__27)
                self.state = 593
                self.varDef()
                self.state = 594
                self.initBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.match(RustParser.T__28)
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 599
                    self.match(RustParser.T__8)


                self.state = 602
                self.match(RustParser.Identifier)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 603
                    self.match(RustParser.COLON)
                    self.state = 604
                    self.type_()


                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self.match(RustParser.T__8)
                self.state = 608
                self.match(RustParser.Identifier)
                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 609
                    _la = self._input.LA(1)
                    if not(_la==2 or _la==84):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 610
                    self.type_()


                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 613
                self.match(RustParser.Identifier)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 614
                    self.match(RustParser.COLON)
                    self.state = 615
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 273804165120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.expression(0)
            self.state = 623
            self.compoundOp()
            self.state = 624
            self.expression(0)
            self.state = 625
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(RustParser.T__37)
            self.state = 628
            self.expression(0)
            self.state = 629
            self.match(RustParser.T__4)
            self.state = 631 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 630
                self.matchArm()
                self.state = 633 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 32771) != 0)):
                    break

            self.state = 635
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.match(RustParser.T__38)
            self.state = 638
            self.expression(0)
            self.state = 639
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_initializer)
        try:
            self.state = 644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 642
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 643
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 646
                self.visibility()


            self.state = 649
            self.match(RustParser.T__7)
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 650
                self.match(RustParser.T__8)


            self.state = 653
            self.match(RustParser.Identifier)
            self.state = 654
            self.match(RustParser.COLON)
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 655
                self.type_()
                pass

            elif la_ == 2:
                self.state = 656
                self.match(RustParser.Identifier)
                pass


            self.state = 659
            self.match(RustParser.T__1)
            self.state = 660
            self.initializer()
            self.state = 661
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(RustParser.T__4)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 664
                self.match(RustParser.Identifier)
                self.state = 665
                self.match(RustParser.COLON)
                self.state = 666
                self.expression(0)
                self.state = 667
                self.match(RustParser.COMMA)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 674
            self.match(RustParser.T__5)
            self.state = 675
            self.match(RustParser.T__2)
            self.state = 676
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.expression(0)
            self.state = 679
            self.match(RustParser.T__1)
            self.state = 680
            self.expression(0)
            self.state = 681
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(RustParser.T__39)
            self.state = 684
            self.match(RustParser.Identifier)
            self.state = 685
            self.match(RustParser.T__40)
            self.state = 686
            self.expression(0)
            self.state = 687
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(RustParser.T__41)
            self.state = 690
            self.expression(0)
            self.state = 691
            self.block()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 692
                self.match(RustParser.T__42)
                self.state = 693
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.expression(0)
            self.state = 697
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 705
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.match(RustParser.T__43)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358610538833116640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 150527) != 0):
                    self.state = 700
                    self.expression(0)


                self.state = 703
                self.match(RustParser.T__2)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(RustParser.T__44)
            self.state = 708
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def callExpression(self):
            return self.getTypedRuleContext(RustParser.CallExpressionContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def patternSymbol(self):
            return self.getTypedRuleContext(RustParser.PatternSymbolContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 711
                self.patternPrefix()
                self.state = 712
                self.expression(17)
                pass

            elif la_ == 2:
                self.state = 714
                self.mutableExpression()
                self.state = 715
                self.expression(16)
                pass

            elif la_ == 3:
                self.state = 717
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 718
                self.dereferenceExpression()
                pass

            elif la_ == 5:
                self.state = 719
                self.parenExpression()
                pass

            elif la_ == 6:
                self.state = 720
                self.structFieldDec()
                pass

            elif la_ == 7:
                self.state = 721
                self.unaryOpes()
                self.state = 722
                self.expression(11)
                pass

            elif la_ == 8:
                self.state = 724
                self.borrowExpression()
                pass

            elif la_ == 9:
                self.state = 725
                self.expressionBlock()
                pass

            elif la_ == 10:
                self.state = 726
                self.callExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 755
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 753
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 729
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 730
                        self.booleanOps()
                        self.state = 731
                        self.expression(9)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 733
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 734
                        self.binaryOps()
                        self.state = 735
                        self.expression(8)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 737
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 738
                        self.conditionalOps()
                        self.state = 739
                        self.expression(7)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 741
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 742
                        self.patternSymbol()
                        self.state = 743
                        self.expression(6)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 745
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 746
                        self.compoundOps()
                        self.state = 747
                        self.expression(5)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 749
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 750
                        self.fieldAccessPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 751
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 752
                        self.castExpressionPostFix()
                        pass

             
                self.state = 757
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPrefix" ):
                return visitor.visitPatternPrefix(self)
            else:
                return visitor.visitChildren(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 758
                self.match(RustParser.T__27)


            self.state = 761
            self.pattern()
            self.state = 762
            self.match(RustParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 29, 68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 764
                    self.match(RustParser.T__28)


                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 767
                    self.match(RustParser.T__8)


                self.state = 770
                self.match(RustParser.Identifier)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(RustParser.T__45)
                self.state = 772
                self.match(RustParser.LPAREN)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 773
                    self.match(RustParser.T__28)


                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 776
                    self.match(RustParser.T__8)


                self.state = 779
                self.match(RustParser.Identifier)
                self.state = 780
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpressionPostFix" ):
                return visitor.visitCastExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(RustParser.T__46)
            self.state = 784
            self.type_()
            self.state = 789
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 785
                    self.match(RustParser.T__46)
                    self.state = 786
                    self.type_() 
                self.state = 791
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOps" ):
                return visitor.visitCompoundOps(self)
            else:
                return visitor.visitChildren(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 273804165120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_patternSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternSymbol" ):
                listener.enterPatternSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternSymbol" ):
                listener.exitPatternSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternSymbol" ):
                return visitor.visitPatternSymbol(self)
            else:
                return visitor.visitChildren(self)




    def patternSymbol(self):

        localctx = RustParser.PatternSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_patternSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(RustParser.T__47)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalOps" ):
                return visitor.visitConditionalOps(self)
            else:
                return visitor.visitChildren(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            _la = self._input.LA(1)
            if not(((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 9007200261373953) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOps" ):
                return visitor.visitBooleanOps(self)
            else:
                return visitor.visitChildren(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 63050394799964160) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOps" ):
                return visitor.visitBinaryOps(self)
            else:
                return visitor.visitChildren(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1080863910569181184) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFieldDec" ):
                return visitor.visitStructFieldDec(self)
            else:
                return visitor.visitChildren(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(RustParser.Identifier)
            self.state = 803
            self.match(RustParser.T__4)
            self.state = 804
            self.structLiteralField()
            self.state = 809
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 805
                    self.match(RustParser.COMMA)
                    self.state = 806
                    self.structLiteralField() 
                self.state = 811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 812
                self.match(RustParser.COMMA)


            self.state = 815
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableExpression" ):
                return visitor.visitMutableExpression(self)
            else:
                return visitor.visitChildren(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(RustParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOpes" ):
                return visitor.visitUnaryOpes(self)
            else:
                return visitor.visitChildren(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 131075) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(RustParser.LPAREN)
            self.state = 822
            self.expression(0)
            self.state = 823
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceExpression" ):
                listener.enterReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceExpression" ):
                listener.exitReferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceExpression" ):
                return visitor.visitReferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def referenceExpression(self):

        localctx = RustParser.ReferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_referenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(RustParser.T__23)
            self.state = 826
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(RustParser.T__17)
            self.state = 829
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(RustParser.T__4)
            self.state = 835
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 832
                    self.statement() 
                self.state = 837
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 838
            self.expression(0)
            self.state = 839
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(RustParser.T__23)
            self.state = 842
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_primaryExpression)
        try:
            self.state = 846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.literal()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 845
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldAccessPostFix" ):
                return visitor.visitFieldAccessPostFix(self)
            else:
                return visitor.visitChildren(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_fieldAccessPostFix)
        try:
            self.state = 858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self.match(RustParser.LBRACK)
                self.state = 849
                self.primaryExpression()
                self.state = 850
                self.match(RustParser.RBRACK)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 854 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 852
                        self.match(RustParser.T__26)
                        self.state = 853
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 856 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpression" ):
                listener.enterCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpression" ):
                listener.exitCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpression" ):
                return visitor.visitCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def callExpression(self):

        localctx = RustParser.CallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_callExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.postfixExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.primaryExpression()
            self.state = 887 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 887
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                    if la_ == 1:
                        self.state = 869
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [15]:
                            self.state = 863
                            self.match(RustParser.T__14)
                            pass
                        elif token in [81]:
                            self.state = 864
                            self.match(RustParser.LPAREN)
                            self.state = 866
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358610538833116640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 151551) != 0):
                                self.state = 865
                                self.argumentList()


                            self.state = 868
                            self.match(RustParser.RPAREN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 873 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 871
                                self.match(RustParser.T__26)
                                self.state = 872
                                self.match(RustParser.Identifier)

                            else:
                                raise NoViableAltException(self)
                            self.state = 875 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 877
                        self.match(RustParser.T__26)
                        self.state = 878
                        self.match(RustParser.Identifier)
                        self.state = 885
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [81]:
                            self.state = 879
                            self.match(RustParser.LPAREN)
                            self.state = 881
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358610538833116640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 151551) != 0):
                                self.state = 880
                                self.argumentList()


                            self.state = 883
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [15]:
                            self.state = 884
                            self.match(RustParser.T__14)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 889 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.STRING_LITERAL)
            else:
                return self.getToken(RustParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.match(RustParser.DOUBLE_COLON)
                self.state = 892
                self.typePath()
                self.state = 893
                self.match(RustParser.Identifier)
                self.state = 894
                self.match(RustParser.DOUBLE_COLON)
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 895
                    self.genericArgs()


                self.state = 904
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 898
                    self.match(RustParser.T__14)
                    pass
                elif token in [81]:
                    self.state = 899
                    self.match(RustParser.LPAREN)
                    self.state = 901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358610538833116640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 151551) != 0):
                        self.state = 900
                        self.argumentList()


                    self.state = 903
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self.match(RustParser.Identifier)
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 907
                    self.match(RustParser.T__26)
                    self.state = 908
                    self.match(RustParser.Identifier)
                    self.state = 913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==74:
                    self.state = 914
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 915
                    self.match(RustParser.Identifier)
                    self.state = 920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 934
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 921
                    self.match(RustParser.T__14)
                    pass
                elif token in [81]:
                    self.state = 922
                    self.match(RustParser.LPAREN)
                    self.state = 930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358610538833116640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 151551) != 0):
                        self.state = 928
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                        if la_ == 1:
                            self.state = 923
                            self.match(RustParser.Identifier)
                            self.state = 924
                            self.match(RustParser.LPAREN)
                            self.state = 925
                            self.match(RustParser.STRING_LITERAL)
                            self.state = 926
                            self.match(RustParser.RPAREN)
                            pass

                        elif la_ == 2:
                            self.state = 927
                            self.argumentList()
                            pass


                        self.state = 932
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 933
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(RustParser.Identifier)
            self.state = 939
            self.match(RustParser.EXCL)
            self.state = 940
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 952
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.match(RustParser.LBRACK)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358610538833116640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 150527) != 0):
                    self.state = 943
                    self.macroInner()


                self.state = 946
                self.match(RustParser.RBRACK)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.match(RustParser.LPAREN)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358610538833116640) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 150527) != 0):
                    self.state = 948
                    self.macroInner()


                self.state = 951
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.expression(0)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 955
                self.match(RustParser.T__2)
                self.state = 956
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(RustParser.T__22)
            self.state = 960
            self.type_()
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80:
                self.state = 961
                self.match(RustParser.COMMA)
                self.state = 962
                self.type_()
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 968
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(RustParser.Identifier)
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 971
                self.match(RustParser.COLON)
                self.state = 972
                self.expression(0)


            self.state = 975
            self.match(RustParser.COMMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.matchPattern()
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 978
                self.match(RustParser.T__59)
                self.state = 979
                self.matchPattern()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 985
            self.match(RustParser.T__60)
            self.state = 986
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 1020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 992
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 990
                    self.qualifiedFunctionCall()
                    pass

                elif la_ == 2:
                    self.state = 991
                    self.expression(0)
                    pass


                self.state = 1001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 994
                        self.match(RustParser.COMMA)
                        self.state = 997
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                        if la_ == 1:
                            self.state = 995
                            self.qualifiedFunctionCall()
                            pass

                        elif la_ == 2:
                            self.state = 996
                            self.expression(0)
                            pass

                 
                    self.state = 1003
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 1004
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1007
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 1008
                    self.match(RustParser.Identifier)
                    self.state = 1011 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==74):
                        break

                self.state = 1018
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 1013
                    self.match(RustParser.T__14)
                    pass
                elif token in [81]:
                    self.state = 1014
                    self.match(RustParser.LPAREN)
                    self.state = 1015
                    self.argumentList()
                    self.state = 1016
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_literal)
        try:
            self.state = 1032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1022
                self.arrayLiteral()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023
                self.match(RustParser.HexNumber)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1024
                self.match(RustParser.Number)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1025
                self.match(RustParser.SignedNumber)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1026
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1027
                self.match(RustParser.Binary)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1028
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [63, 64]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1029
                self.booleanLiteral()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1030
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1031
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            _la = self._input.LA(1)
            if not(_la==63 or _la==64):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1036
                self.match(RustParser.LBRACK)
                self.state = 1037
                self.expression(0)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 1038
                    self.match(RustParser.COMMA)
                    self.state = 1039
                    self.expression(0)
                    self.state = 1044
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1045
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1047
                self.match(RustParser.LBRACK)
                self.state = 1048
                self.expression(0)
                self.state = 1049
                self.match(RustParser.T__2)
                self.state = 1050
                self.expression(0)
                self.state = 1051
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(RustParser.T__61)
            self.state = 1059
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1056
                    self.matchWildcard() 
                self.state = 1061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 1062
            self.match(RustParser.T__61)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[50] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         




