# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,98,1125,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,1,0,5,0,186,8,0,10,0,12,0,189,9,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,
        197,8,1,1,2,1,2,1,2,1,2,3,2,203,8,2,1,2,1,2,3,2,207,8,2,5,2,209,
        8,2,10,2,12,2,212,9,2,1,2,1,2,5,2,216,8,2,10,2,12,2,219,9,2,1,2,
        1,2,1,3,1,3,1,3,1,3,3,3,227,8,3,1,4,3,4,230,8,4,1,4,3,4,233,8,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,244,8,4,10,4,12,4,247,9,
        4,1,4,3,4,250,8,4,1,5,1,5,1,6,3,6,255,8,6,1,6,1,6,1,6,1,6,3,6,261,
        8,6,1,7,3,7,264,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,4,8,
        276,8,8,11,8,12,8,277,1,8,1,8,1,9,1,9,1,9,1,9,5,9,286,8,9,10,9,12,
        9,289,9,9,1,9,1,9,1,10,3,10,294,8,10,1,10,1,10,1,10,1,10,3,10,300,
        8,10,1,10,1,10,3,10,304,8,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
        312,8,10,1,10,1,10,1,10,1,10,3,10,318,8,10,1,10,1,10,1,10,3,10,323,
        8,10,1,10,3,10,326,8,10,1,11,1,11,1,11,5,11,331,8,11,10,11,12,11,
        334,9,11,1,11,1,11,3,11,338,8,11,1,11,3,11,341,8,11,1,12,3,12,344,
        8,12,1,12,1,12,1,12,3,12,349,8,12,1,13,1,13,1,14,1,14,1,15,1,15,
        3,15,357,8,15,1,16,4,16,360,8,16,11,16,12,16,361,1,17,1,17,3,17,
        366,8,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,3,18,381,8,18,1,19,1,19,1,19,5,19,386,8,19,10,19,12,19,
        389,9,19,1,20,1,20,1,20,3,20,394,8,20,1,21,1,21,1,22,3,22,399,8,
        22,1,22,1,22,1,22,1,22,5,22,405,8,22,10,22,12,22,408,9,22,1,22,1,
        22,1,23,3,23,413,8,23,1,23,1,23,1,23,1,23,3,23,419,8,23,1,24,1,24,
        1,24,5,24,424,8,24,10,24,12,24,427,9,24,1,24,1,24,1,25,1,25,1,25,
        3,25,434,8,25,1,25,3,25,437,8,25,1,26,3,26,440,8,26,1,26,3,26,443,
        8,26,1,26,3,26,446,8,26,1,26,1,26,1,26,1,26,1,26,3,26,453,8,26,1,
        26,3,26,456,8,26,1,26,3,26,459,8,26,1,26,3,26,462,8,26,1,26,1,26,
        1,27,1,27,1,27,5,27,469,8,27,10,27,12,27,472,9,27,1,27,3,27,475,
        8,27,1,28,3,28,478,8,28,1,28,3,28,481,8,28,1,28,1,28,1,28,3,28,486,
        8,28,1,29,1,29,3,29,490,8,29,1,30,1,30,1,30,3,30,495,8,30,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,507,8,31,1,31,1,
        31,1,31,1,31,5,31,513,8,31,10,31,12,31,516,9,31,1,31,1,31,3,31,520,
        8,31,1,31,1,31,1,31,1,31,1,31,5,31,527,8,31,10,31,12,31,530,9,31,
        1,31,1,31,3,31,534,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,3,31,548,8,31,1,32,1,32,1,32,1,32,1,32,3,32,
        555,8,32,1,33,1,33,1,33,3,33,560,8,33,1,33,1,33,1,33,5,33,565,8,
        33,10,33,12,33,568,9,33,3,33,570,8,33,1,34,1,34,1,34,1,34,1,34,1,
        34,1,35,3,35,579,8,35,1,35,1,35,5,35,583,8,35,10,35,12,35,586,9,
        35,1,35,3,35,589,8,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,3,36,614,8,36,1,37,3,37,617,8,37,1,37,1,37,3,37,621,8,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,3,38,640,8,38,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,656,8,39,5,39,658,8,
        39,10,39,12,39,661,9,39,1,39,1,39,1,39,1,39,1,39,3,39,668,8,39,5,
        39,670,8,39,10,39,12,39,673,9,39,1,39,1,39,3,39,677,8,39,1,40,3,
        40,680,8,40,1,40,3,40,683,8,40,1,40,1,40,1,40,3,40,688,8,40,1,41,
        1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,4,43,701,8,43,
        11,43,12,43,702,1,43,1,43,1,44,1,44,1,44,5,44,710,8,44,10,44,12,
        44,713,9,44,1,44,1,44,1,44,1,44,3,44,719,8,44,3,44,721,8,44,1,45,
        1,45,1,45,1,45,3,45,727,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,
        3,47,736,8,47,1,48,3,48,739,8,48,1,48,1,48,3,48,743,8,48,1,48,1,
        48,1,48,1,48,3,48,749,8,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,
        49,1,49,1,49,5,49,761,8,49,10,49,12,49,764,9,49,1,49,1,49,1,49,1,
        49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,5,52,788,8,52,10,52,12,52,791,9,52,1,
        52,1,52,3,52,795,8,52,1,53,1,53,1,53,1,54,1,54,3,54,802,8,54,1,54,
        1,54,3,54,806,8,54,1,55,1,55,1,55,1,56,1,56,3,56,813,8,56,1,56,1,
        56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,58,1,58,3,58,826,8,58,1,
        59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,3,60,855,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
        60,1,60,1,60,1,60,1,60,1,60,5,60,885,8,60,10,60,12,60,888,9,60,1,
        61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,
        64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,3,66,913,8,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,4,67,923,8,67,11,67,12,67,
        924,1,68,3,68,928,8,68,1,68,1,68,1,68,1,69,3,69,934,8,69,1,69,3,
        69,937,8,69,1,69,1,69,1,69,1,69,3,69,943,8,69,1,69,3,69,946,8,69,
        1,69,1,69,3,69,950,8,69,1,70,1,70,1,70,1,70,5,70,956,8,70,10,70,
        12,70,959,9,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,
        1,76,1,76,1,76,1,76,1,76,5,76,976,8,76,10,76,12,76,979,9,76,1,76,
        3,76,982,8,76,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,79,1,79,
        1,80,1,80,1,80,1,81,1,81,5,81,999,8,81,10,81,12,81,1002,9,81,1,81,
        1,81,1,81,1,82,1,82,1,82,1,83,1,83,3,83,1012,8,83,1,84,1,84,1,84,
        1,84,1,84,1,84,4,84,1020,8,84,11,84,12,84,1021,3,84,1024,8,84,1,
        85,1,85,3,85,1028,8,85,1,85,3,85,1031,8,85,1,85,1,85,1,86,1,86,1,
        86,1,86,1,86,5,86,1040,8,86,10,86,12,86,1043,9,86,1,86,1,86,3,86,
        1047,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        3,87,1060,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,3,88,1073,8,88,1,89,1,89,1,90,3,90,1078,8,90,1,90,3,90,1081,
        8,90,1,90,1,90,1,90,1,90,5,90,1087,8,90,10,90,12,90,1090,9,90,1,
        90,1,90,1,90,3,90,1095,8,90,1,90,3,90,1098,8,90,1,90,1,90,1,90,1,
        90,1,90,1,90,1,90,3,90,1107,8,90,1,90,3,90,1110,8,90,1,90,1,90,3,
        90,1114,8,90,1,91,1,91,5,91,1118,8,91,10,91,12,91,1121,9,91,1,91,
        1,91,1,91,1,1119,1,120,92,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,0,10,1,0,6,8,2,0,79,79,94,94,1,0,78,80,2,0,6,6,13,13,
        1,0,34,41,3,0,25,25,56,59,87,87,3,0,19,19,27,27,60,61,2,0,20,20,
        62,65,2,0,64,65,86,86,1,0,74,75,1237,0,187,1,0,0,0,2,196,1,0,0,0,
        4,198,1,0,0,0,6,226,1,0,0,0,8,229,1,0,0,0,10,251,1,0,0,0,12,254,
        1,0,0,0,14,263,1,0,0,0,16,271,1,0,0,0,18,281,1,0,0,0,20,325,1,0,
        0,0,22,340,1,0,0,0,24,343,1,0,0,0,26,350,1,0,0,0,28,352,1,0,0,0,
        30,354,1,0,0,0,32,359,1,0,0,0,34,363,1,0,0,0,36,380,1,0,0,0,38,382,
        1,0,0,0,40,390,1,0,0,0,42,395,1,0,0,0,44,398,1,0,0,0,46,412,1,0,
        0,0,48,420,1,0,0,0,50,430,1,0,0,0,52,439,1,0,0,0,54,465,1,0,0,0,
        56,477,1,0,0,0,58,489,1,0,0,0,60,491,1,0,0,0,62,547,1,0,0,0,64,549,
        1,0,0,0,66,569,1,0,0,0,68,571,1,0,0,0,70,578,1,0,0,0,72,613,1,0,
        0,0,74,616,1,0,0,0,76,639,1,0,0,0,78,676,1,0,0,0,80,679,1,0,0,0,
        82,689,1,0,0,0,84,691,1,0,0,0,86,696,1,0,0,0,88,706,1,0,0,0,90,726,
        1,0,0,0,92,728,1,0,0,0,94,735,1,0,0,0,96,738,1,0,0,0,98,754,1,0,
        0,0,100,769,1,0,0,0,102,774,1,0,0,0,104,780,1,0,0,0,106,796,1,0,
        0,0,108,805,1,0,0,0,110,807,1,0,0,0,112,810,1,0,0,0,114,818,1,0,
        0,0,116,823,1,0,0,0,118,827,1,0,0,0,120,854,1,0,0,0,122,889,1,0,
        0,0,124,892,1,0,0,0,126,897,1,0,0,0,128,901,1,0,0,0,130,903,1,0,
        0,0,132,910,1,0,0,0,134,922,1,0,0,0,136,927,1,0,0,0,138,949,1,0,
        0,0,140,951,1,0,0,0,142,960,1,0,0,0,144,962,1,0,0,0,146,964,1,0,
        0,0,148,966,1,0,0,0,150,968,1,0,0,0,152,970,1,0,0,0,154,985,1,0,
        0,0,156,987,1,0,0,0,158,989,1,0,0,0,160,993,1,0,0,0,162,996,1,0,
        0,0,164,1006,1,0,0,0,166,1011,1,0,0,0,168,1023,1,0,0,0,170,1027,
        1,0,0,0,172,1046,1,0,0,0,174,1059,1,0,0,0,176,1072,1,0,0,0,178,1074,
        1,0,0,0,180,1113,1,0,0,0,182,1115,1,0,0,0,184,186,3,2,1,0,185,184,
        1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,1,1,
        0,0,0,189,187,1,0,0,0,190,197,3,6,3,0,191,197,3,96,48,0,192,197,
        3,32,16,0,193,197,3,18,9,0,194,197,3,4,2,0,195,197,3,14,7,0,196,
        190,1,0,0,0,196,191,1,0,0,0,196,192,1,0,0,0,196,193,1,0,0,0,196,
        194,1,0,0,0,196,195,1,0,0,0,197,3,1,0,0,0,198,199,5,1,0,0,199,217,
        3,66,33,0,200,210,5,2,0,0,201,203,3,66,33,0,202,201,1,0,0,0,202,
        203,1,0,0,0,203,204,1,0,0,0,204,206,5,79,0,0,205,207,5,91,0,0,206,
        205,1,0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,202,1,0,0,0,209,
        212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,
        210,1,0,0,0,213,214,5,3,0,0,214,216,5,91,0,0,215,200,1,0,0,0,216,
        219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,
        217,1,0,0,0,220,221,5,4,0,0,221,5,1,0,0,0,222,227,3,52,26,0,223,
        227,3,44,22,0,224,227,3,16,8,0,225,227,3,8,4,0,226,222,1,0,0,0,226,
        223,1,0,0,0,226,224,1,0,0,0,226,225,1,0,0,0,227,7,1,0,0,0,228,230,
        3,26,13,0,229,228,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,233,
        3,10,5,0,232,231,1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,249,
        5,79,0,0,235,236,5,95,0,0,236,237,3,58,29,0,237,238,5,5,0,0,238,
        239,3,120,60,0,239,240,5,4,0,0,240,250,1,0,0,0,241,245,5,2,0,0,242,
        244,3,12,6,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,
        246,1,0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,250,5,3,0,0,249,
        235,1,0,0,0,249,241,1,0,0,0,250,9,1,0,0,0,251,252,7,0,0,0,252,11,
        1,0,0,0,253,255,3,26,13,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,
        1,0,0,0,256,257,5,79,0,0,257,258,5,95,0,0,258,260,3,58,29,0,259,
        261,5,91,0,0,260,259,1,0,0,0,260,261,1,0,0,0,261,13,1,0,0,0,262,
        264,3,26,13,0,263,262,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,
        266,5,9,0,0,266,267,5,79,0,0,267,268,5,5,0,0,268,269,3,58,29,0,269,
        270,5,4,0,0,270,15,1,0,0,0,271,272,5,10,0,0,272,273,5,79,0,0,273,
        275,5,2,0,0,274,276,3,52,26,0,275,274,1,0,0,0,276,277,1,0,0,0,277,
        275,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,280,5,3,0,0,280,
        17,1,0,0,0,281,282,5,11,0,0,282,283,5,78,0,0,283,287,5,2,0,0,284,
        286,3,20,10,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,
        288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,5,3,0,0,291,
        19,1,0,0,0,292,294,3,26,13,0,293,292,1,0,0,0,293,294,1,0,0,0,294,
        295,1,0,0,0,295,296,5,9,0,0,296,297,5,79,0,0,297,326,5,4,0,0,298,
        300,3,26,13,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,
        303,5,12,0,0,302,304,5,13,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,
        305,1,0,0,0,305,306,5,79,0,0,306,307,5,95,0,0,307,308,3,58,29,0,
        308,309,5,4,0,0,309,326,1,0,0,0,310,312,3,26,13,0,311,310,1,0,0,
        0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,5,14,0,0,314,315,5,79,
        0,0,315,317,5,92,0,0,316,318,3,22,11,0,317,316,1,0,0,0,317,318,1,
        0,0,0,318,319,1,0,0,0,319,322,5,93,0,0,320,321,5,15,0,0,321,323,
        3,58,29,0,322,320,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,326,
        5,4,0,0,325,293,1,0,0,0,325,299,1,0,0,0,325,311,1,0,0,0,326,21,1,
        0,0,0,327,332,3,24,12,0,328,329,5,91,0,0,329,331,3,24,12,0,330,328,
        1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,337,
        1,0,0,0,334,332,1,0,0,0,335,336,5,91,0,0,336,338,5,96,0,0,337,335,
        1,0,0,0,337,338,1,0,0,0,338,341,1,0,0,0,339,341,5,96,0,0,340,327,
        1,0,0,0,340,339,1,0,0,0,341,23,1,0,0,0,342,344,7,1,0,0,343,342,1,
        0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,348,5,95,0,0,346,349,3,
        58,29,0,347,349,5,96,0,0,348,346,1,0,0,0,348,347,1,0,0,0,349,25,
        1,0,0,0,350,351,5,16,0,0,351,27,1,0,0,0,352,353,5,8,0,0,353,29,1,
        0,0,0,354,356,5,11,0,0,355,357,5,78,0,0,356,355,1,0,0,0,356,357,
        1,0,0,0,357,31,1,0,0,0,358,360,3,34,17,0,359,358,1,0,0,0,360,361,
        1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,33,1,0,0,0,363,365,5,
        88,0,0,364,366,5,86,0,0,365,364,1,0,0,0,365,366,1,0,0,0,366,367,
        1,0,0,0,367,368,5,89,0,0,368,369,3,36,18,0,369,370,5,90,0,0,370,
        35,1,0,0,0,371,381,5,79,0,0,372,373,5,79,0,0,373,374,5,5,0,0,374,
        381,3,42,21,0,375,376,5,79,0,0,376,377,5,92,0,0,377,378,3,38,19,
        0,378,379,5,93,0,0,379,381,1,0,0,0,380,371,1,0,0,0,380,372,1,0,0,
        0,380,375,1,0,0,0,381,37,1,0,0,0,382,387,3,40,20,0,383,384,5,91,
        0,0,384,386,3,40,20,0,385,383,1,0,0,0,386,389,1,0,0,0,387,385,1,
        0,0,0,387,388,1,0,0,0,388,39,1,0,0,0,389,387,1,0,0,0,390,393,5,79,
        0,0,391,392,5,5,0,0,392,394,3,42,21,0,393,391,1,0,0,0,393,394,1,
        0,0,0,394,41,1,0,0,0,395,396,7,2,0,0,396,43,1,0,0,0,397,399,3,26,
        13,0,398,397,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,401,5,17,
        0,0,401,402,5,79,0,0,402,406,5,2,0,0,403,405,3,46,23,0,404,403,1,
        0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,409,1,
        0,0,0,408,406,1,0,0,0,409,410,5,3,0,0,410,45,1,0,0,0,411,413,3,26,
        13,0,412,411,1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,415,5,79,
        0,0,415,416,5,95,0,0,416,418,3,58,29,0,417,419,5,91,0,0,418,417,
        1,0,0,0,418,419,1,0,0,0,419,47,1,0,0,0,420,421,5,79,0,0,421,425,
        5,2,0,0,422,424,3,50,25,0,423,422,1,0,0,0,424,427,1,0,0,0,425,423,
        1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,429,
        5,3,0,0,429,49,1,0,0,0,430,433,5,79,0,0,431,432,5,95,0,0,432,434,
        3,120,60,0,433,431,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,437,
        5,91,0,0,436,435,1,0,0,0,436,437,1,0,0,0,437,51,1,0,0,0,438,440,
        3,26,13,0,439,438,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,443,
        3,28,14,0,442,441,1,0,0,0,442,443,1,0,0,0,443,445,1,0,0,0,444,446,
        3,30,15,0,445,444,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,448,
        5,14,0,0,448,455,5,79,0,0,449,456,5,18,0,0,450,452,5,92,0,0,451,
        453,3,54,27,0,452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,
        456,5,93,0,0,455,449,1,0,0,0,455,450,1,0,0,0,456,458,1,0,0,0,457,
        459,5,15,0,0,458,457,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,
        462,3,58,29,0,461,460,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,
        464,3,70,35,0,464,53,1,0,0,0,465,470,3,56,28,0,466,467,5,91,0,0,
        467,469,3,56,28,0,468,466,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,
        0,470,471,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,473,475,5,91,0,
        0,474,473,1,0,0,0,474,475,1,0,0,0,475,55,1,0,0,0,476,478,5,19,0,
        0,477,476,1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,481,5,13,0,
        0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,485,5,79,0,
        0,483,484,5,95,0,0,484,486,3,58,29,0,485,483,1,0,0,0,485,486,1,0,
        0,0,486,57,1,0,0,0,487,490,3,62,31,0,488,490,3,60,30,0,489,487,1,
        0,0,0,489,488,1,0,0,0,490,59,1,0,0,0,491,492,5,20,0,0,492,494,7,
        3,0,0,493,495,3,58,29,0,494,493,1,0,0,0,494,495,1,0,0,0,495,61,1,
        0,0,0,496,548,5,21,0,0,497,548,3,64,32,0,498,548,5,22,0,0,499,548,
        5,23,0,0,500,548,5,24,0,0,501,548,3,68,34,0,502,503,3,66,33,0,503,
        504,3,62,31,0,504,548,1,0,0,0,505,507,5,85,0,0,506,505,1,0,0,0,506,
        507,1,0,0,0,507,508,1,0,0,0,508,509,5,25,0,0,509,514,3,58,29,0,510,
        511,5,91,0,0,511,513,3,58,29,0,512,510,1,0,0,0,513,516,1,0,0,0,514,
        512,1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,514,1,0,0,0,517,
        519,5,87,0,0,518,520,5,18,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,
        548,1,0,0,0,521,533,5,79,0,0,522,523,5,25,0,0,523,528,3,58,29,0,
        524,525,5,91,0,0,525,527,3,58,29,0,526,524,1,0,0,0,527,530,1,0,0,
        0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,
        0,531,532,5,87,0,0,532,534,1,0,0,0,533,522,1,0,0,0,533,534,1,0,0,
        0,534,548,1,0,0,0,535,536,5,79,0,0,536,537,5,25,0,0,537,538,3,58,
        29,0,538,539,5,87,0,0,539,548,1,0,0,0,540,541,5,19,0,0,541,548,3,
        58,29,0,542,543,5,89,0,0,543,544,3,58,29,0,544,545,5,90,0,0,545,
        548,1,0,0,0,546,548,5,79,0,0,547,496,1,0,0,0,547,497,1,0,0,0,547,
        498,1,0,0,0,547,499,1,0,0,0,547,500,1,0,0,0,547,501,1,0,0,0,547,
        502,1,0,0,0,547,506,1,0,0,0,547,521,1,0,0,0,547,535,1,0,0,0,547,
        540,1,0,0,0,547,542,1,0,0,0,547,546,1,0,0,0,548,63,1,0,0,0,549,550,
        5,26,0,0,550,554,3,58,29,0,551,555,5,27,0,0,552,553,5,87,0,0,553,
        555,5,87,0,0,554,551,1,0,0,0,554,552,1,0,0,0,555,65,1,0,0,0,556,
        557,5,79,0,0,557,570,5,85,0,0,558,560,5,85,0,0,559,558,1,0,0,0,559,
        560,1,0,0,0,560,561,1,0,0,0,561,566,5,79,0,0,562,563,5,85,0,0,563,
        565,5,79,0,0,564,562,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,
        567,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,569,556,1,0,0,0,569,
        559,1,0,0,0,570,67,1,0,0,0,571,572,5,89,0,0,572,573,3,62,31,0,573,
        574,5,4,0,0,574,575,5,80,0,0,575,576,5,90,0,0,576,69,1,0,0,0,577,
        579,3,28,14,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,
        584,5,2,0,0,581,583,3,72,36,0,582,581,1,0,0,0,583,586,1,0,0,0,584,
        582,1,0,0,0,584,585,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,587,
        589,3,108,54,0,588,587,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,
        591,5,3,0,0,591,71,1,0,0,0,592,614,3,70,35,0,593,614,3,78,39,0,594,
        614,3,74,37,0,595,614,3,48,24,0,596,614,3,44,22,0,597,614,3,96,48,
        0,598,614,3,114,57,0,599,614,3,100,50,0,600,614,3,84,42,0,601,614,
        3,102,51,0,602,614,3,104,52,0,603,614,3,76,38,0,604,614,3,106,53,
        0,605,614,3,92,46,0,606,614,3,108,54,0,607,614,3,110,55,0,608,609,
        5,28,0,0,609,614,5,4,0,0,610,611,5,29,0,0,611,614,5,4,0,0,612,614,
        3,86,43,0,613,592,1,0,0,0,613,593,1,0,0,0,613,594,1,0,0,0,613,595,
        1,0,0,0,613,596,1,0,0,0,613,597,1,0,0,0,613,598,1,0,0,0,613,599,
        1,0,0,0,613,600,1,0,0,0,613,601,1,0,0,0,613,602,1,0,0,0,613,603,
        1,0,0,0,613,604,1,0,0,0,613,605,1,0,0,0,613,606,1,0,0,0,613,607,
        1,0,0,0,613,608,1,0,0,0,613,610,1,0,0,0,613,612,1,0,0,0,614,73,1,
        0,0,0,615,617,5,30,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,620,1,
        0,0,0,618,621,3,114,57,0,619,621,3,120,60,0,620,618,1,0,0,0,620,
        619,1,0,0,0,621,622,1,0,0,0,622,623,5,5,0,0,623,624,3,120,60,0,624,
        625,5,31,0,0,625,626,3,70,35,0,626,627,5,4,0,0,627,75,1,0,0,0,628,
        629,3,120,60,0,629,630,5,32,0,0,630,631,3,120,60,0,631,632,1,0,0,
        0,632,633,3,170,85,0,633,634,5,4,0,0,634,640,1,0,0,0,635,636,3,120,
        60,0,636,637,3,170,85,0,637,638,5,4,0,0,638,640,1,0,0,0,639,628,
        1,0,0,0,639,635,1,0,0,0,640,77,1,0,0,0,641,642,5,30,0,0,642,643,
        3,80,40,0,643,644,5,5,0,0,644,645,3,120,60,0,645,646,5,4,0,0,646,
        677,1,0,0,0,647,648,5,30,0,0,648,649,3,80,40,0,649,650,3,98,49,0,
        650,677,1,0,0,0,651,652,5,30,0,0,652,659,5,92,0,0,653,655,3,80,40,
        0,654,656,5,91,0,0,655,654,1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,
        0,657,653,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,
        0,660,662,1,0,0,0,661,659,1,0,0,0,662,663,5,93,0,0,663,664,5,5,0,
        0,664,671,5,92,0,0,665,667,3,120,60,0,666,668,5,91,0,0,667,666,1,
        0,0,0,667,668,1,0,0,0,668,670,1,0,0,0,669,665,1,0,0,0,670,673,1,
        0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,671,1,
        0,0,0,674,675,5,93,0,0,675,677,5,4,0,0,676,641,1,0,0,0,676,647,1,
        0,0,0,676,651,1,0,0,0,677,79,1,0,0,0,678,680,5,33,0,0,679,678,1,
        0,0,0,679,680,1,0,0,0,680,682,1,0,0,0,681,683,5,13,0,0,682,681,1,
        0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,687,5,79,0,0,685,686,5,
        95,0,0,686,688,3,58,29,0,687,685,1,0,0,0,687,688,1,0,0,0,688,81,
        1,0,0,0,689,690,7,4,0,0,690,83,1,0,0,0,691,692,3,120,60,0,692,693,
        3,82,41,0,693,694,3,120,60,0,694,695,5,4,0,0,695,85,1,0,0,0,696,
        697,5,42,0,0,697,698,3,120,60,0,698,700,5,2,0,0,699,701,3,88,44,
        0,700,699,1,0,0,0,701,702,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,
        0,703,704,1,0,0,0,704,705,5,3,0,0,705,87,1,0,0,0,706,711,3,90,45,
        0,707,708,5,43,0,0,708,710,3,90,45,0,709,707,1,0,0,0,710,713,1,0,
        0,0,711,709,1,0,0,0,711,712,1,0,0,0,712,714,1,0,0,0,713,711,1,0,
        0,0,714,720,5,44,0,0,715,721,3,70,35,0,716,718,5,45,0,0,717,719,
        3,120,60,0,718,717,1,0,0,0,718,719,1,0,0,0,719,721,1,0,0,0,720,715,
        1,0,0,0,720,716,1,0,0,0,721,89,1,0,0,0,722,727,3,176,88,0,723,727,
        5,80,0,0,724,727,5,94,0,0,725,727,5,79,0,0,726,722,1,0,0,0,726,723,
        1,0,0,0,726,724,1,0,0,0,726,725,1,0,0,0,727,91,1,0,0,0,728,729,5,
        46,0,0,729,730,3,120,60,0,730,731,3,70,35,0,731,93,1,0,0,0,732,736,
        3,98,49,0,733,736,3,70,35,0,734,736,3,120,60,0,735,732,1,0,0,0,735,
        733,1,0,0,0,735,734,1,0,0,0,736,95,1,0,0,0,737,739,3,26,13,0,738,
        737,1,0,0,0,738,739,1,0,0,0,739,740,1,0,0,0,740,742,5,12,0,0,741,
        743,5,13,0,0,742,741,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,
        745,5,79,0,0,745,748,5,95,0,0,746,749,3,58,29,0,747,749,5,79,0,0,
        748,746,1,0,0,0,748,747,1,0,0,0,749,750,1,0,0,0,750,751,5,5,0,0,
        751,752,3,94,47,0,752,753,5,4,0,0,753,97,1,0,0,0,754,762,5,2,0,0,
        755,756,5,79,0,0,756,757,5,95,0,0,757,758,3,120,60,0,758,759,5,91,
        0,0,759,761,1,0,0,0,760,755,1,0,0,0,761,764,1,0,0,0,762,760,1,0,
        0,0,762,763,1,0,0,0,763,765,1,0,0,0,764,762,1,0,0,0,765,766,5,3,
        0,0,766,767,5,4,0,0,767,768,3,120,60,0,768,99,1,0,0,0,769,770,3,
        120,60,0,770,771,5,5,0,0,771,772,3,120,60,0,772,773,5,4,0,0,773,
        101,1,0,0,0,774,775,5,47,0,0,775,776,5,79,0,0,776,777,5,48,0,0,777,
        778,3,120,60,0,778,779,3,70,35,0,779,103,1,0,0,0,780,781,5,49,0,
        0,781,782,3,120,60,0,782,789,3,70,35,0,783,784,5,50,0,0,784,785,
        3,120,60,0,785,786,3,70,35,0,786,788,1,0,0,0,787,783,1,0,0,0,788,
        791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,794,1,0,0,0,791,
        789,1,0,0,0,792,793,5,31,0,0,793,795,3,70,35,0,794,792,1,0,0,0,794,
        795,1,0,0,0,795,105,1,0,0,0,796,797,3,166,83,0,797,798,5,4,0,0,798,
        107,1,0,0,0,799,801,5,45,0,0,800,802,3,120,60,0,801,800,1,0,0,0,
        801,802,1,0,0,0,802,803,1,0,0,0,803,806,5,4,0,0,804,806,5,79,0,0,
        805,799,1,0,0,0,805,804,1,0,0,0,806,109,1,0,0,0,807,808,5,51,0,0,
        808,809,3,70,35,0,809,111,1,0,0,0,810,812,5,52,0,0,811,813,3,58,
        29,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,815,5,92,
        0,0,815,816,3,120,60,0,816,817,5,93,0,0,817,113,1,0,0,0,818,819,
        5,53,0,0,819,820,5,92,0,0,820,821,3,120,60,0,821,822,5,93,0,0,822,
        115,1,0,0,0,823,825,5,52,0,0,824,826,3,58,29,0,825,824,1,0,0,0,825,
        826,1,0,0,0,826,117,1,0,0,0,827,828,5,53,0,0,828,119,1,0,0,0,829,
        830,6,60,-1,0,830,831,3,154,77,0,831,832,3,120,60,25,832,855,1,0,
        0,0,833,855,3,166,83,0,834,855,3,48,24,0,835,836,3,134,67,0,836,
        837,3,120,60,20,837,855,1,0,0,0,838,855,3,158,79,0,839,855,3,152,
        76,0,840,855,3,130,65,0,841,842,3,156,78,0,842,843,3,120,60,16,843,
        855,1,0,0,0,844,855,3,164,82,0,845,855,3,124,62,0,846,855,3,122,
        61,0,847,855,3,160,80,0,848,855,3,162,81,0,849,855,3,126,63,0,850,
        851,3,136,68,0,851,852,3,120,60,3,852,855,1,0,0,0,853,855,3,132,
        66,0,854,829,1,0,0,0,854,833,1,0,0,0,854,834,1,0,0,0,854,835,1,0,
        0,0,854,838,1,0,0,0,854,839,1,0,0,0,854,840,1,0,0,0,854,841,1,0,
        0,0,854,844,1,0,0,0,854,845,1,0,0,0,854,846,1,0,0,0,854,847,1,0,
        0,0,854,848,1,0,0,0,854,849,1,0,0,0,854,850,1,0,0,0,854,853,1,0,
        0,0,855,886,1,0,0,0,856,857,10,23,0,0,857,858,3,150,75,0,858,859,
        3,120,60,24,859,885,1,0,0,0,860,861,10,10,0,0,861,862,3,144,72,0,
        862,863,3,120,60,11,863,885,1,0,0,0,864,865,10,9,0,0,865,866,3,148,
        74,0,866,867,3,120,60,10,867,885,1,0,0,0,868,869,10,8,0,0,869,870,
        3,146,73,0,870,871,3,120,60,9,871,885,1,0,0,0,872,873,10,6,0,0,873,
        874,3,142,71,0,874,875,3,120,60,7,875,885,1,0,0,0,876,877,10,21,
        0,0,877,885,3,140,70,0,878,879,10,13,0,0,879,885,3,170,85,0,880,
        881,10,12,0,0,881,885,3,128,64,0,882,883,10,1,0,0,883,885,3,168,
        84,0,884,856,1,0,0,0,884,860,1,0,0,0,884,864,1,0,0,0,884,868,1,0,
        0,0,884,872,1,0,0,0,884,876,1,0,0,0,884,878,1,0,0,0,884,880,1,0,
        0,0,884,882,1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,
        0,0,887,121,1,0,0,0,888,886,1,0,0,0,889,890,3,58,29,0,890,891,3,
        66,33,0,891,123,1,0,0,0,892,893,5,8,0,0,893,894,5,2,0,0,894,895,
        3,120,60,0,895,896,5,3,0,0,896,125,1,0,0,0,897,898,5,25,0,0,898,
        899,3,120,60,0,899,900,5,87,0,0,900,127,1,0,0,0,901,902,3,58,29,
        0,902,129,1,0,0,0,903,904,5,79,0,0,904,905,5,5,0,0,905,906,5,2,0,
        0,906,907,3,120,60,0,907,908,5,3,0,0,908,909,5,4,0,0,909,131,1,0,
        0,0,910,912,5,79,0,0,911,913,5,86,0,0,912,911,1,0,0,0,912,913,1,
        0,0,0,913,914,1,0,0,0,914,915,5,89,0,0,915,916,5,80,0,0,916,917,
        5,4,0,0,917,918,3,120,60,0,918,919,5,90,0,0,919,133,1,0,0,0,920,
        921,5,79,0,0,921,923,5,85,0,0,922,920,1,0,0,0,923,924,1,0,0,0,924,
        922,1,0,0,0,924,925,1,0,0,0,925,135,1,0,0,0,926,928,5,30,0,0,927,
        926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,930,3,138,69,0,930,
        931,5,5,0,0,931,137,1,0,0,0,932,934,5,33,0,0,933,932,1,0,0,0,933,
        934,1,0,0,0,934,936,1,0,0,0,935,937,5,13,0,0,936,935,1,0,0,0,936,
        937,1,0,0,0,937,938,1,0,0,0,938,950,5,79,0,0,939,940,5,79,0,0,940,
        942,5,92,0,0,941,943,5,33,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,
        945,1,0,0,0,944,946,5,13,0,0,945,944,1,0,0,0,945,946,1,0,0,0,946,
        947,1,0,0,0,947,948,5,79,0,0,948,950,5,93,0,0,949,933,1,0,0,0,949,
        939,1,0,0,0,950,139,1,0,0,0,951,952,5,54,0,0,952,957,3,58,29,0,953,
        954,5,54,0,0,954,956,3,58,29,0,955,953,1,0,0,0,956,959,1,0,0,0,957,
        955,1,0,0,0,957,958,1,0,0,0,958,141,1,0,0,0,959,957,1,0,0,0,960,
        961,7,4,0,0,961,143,1,0,0,0,962,963,5,55,0,0,963,145,1,0,0,0,964,
        965,7,5,0,0,965,147,1,0,0,0,966,967,7,6,0,0,967,149,1,0,0,0,968,
        969,7,7,0,0,969,151,1,0,0,0,970,971,5,79,0,0,971,972,5,2,0,0,972,
        977,3,50,25,0,973,974,5,91,0,0,974,976,3,50,25,0,975,973,1,0,0,0,
        976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,978,981,1,0,0,0,
        979,977,1,0,0,0,980,982,5,91,0,0,981,980,1,0,0,0,981,982,1,0,0,0,
        982,983,1,0,0,0,983,984,5,3,0,0,984,153,1,0,0,0,985,986,5,13,0,0,
        986,155,1,0,0,0,987,988,7,8,0,0,988,157,1,0,0,0,989,990,5,92,0,0,
        990,991,3,120,60,0,991,992,5,93,0,0,992,159,1,0,0,0,993,994,5,20,
        0,0,994,995,3,120,60,0,995,161,1,0,0,0,996,1000,5,2,0,0,997,999,
        3,72,36,0,998,997,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,
        1001,1,0,0,0,1001,1003,1,0,0,0,1002,1000,1,0,0,0,1003,1004,3,120,
        60,0,1004,1005,5,3,0,0,1005,163,1,0,0,0,1006,1007,5,19,0,0,1007,
        1008,3,120,60,0,1008,165,1,0,0,0,1009,1012,3,174,87,0,1010,1012,
        5,79,0,0,1011,1009,1,0,0,0,1011,1010,1,0,0,0,1012,167,1,0,0,0,1013,
        1014,5,89,0,0,1014,1015,3,166,83,0,1015,1016,5,90,0,0,1016,1024,
        1,0,0,0,1017,1018,5,32,0,0,1018,1020,3,166,83,0,1019,1017,1,0,0,
        0,1020,1021,1,0,0,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1024,
        1,0,0,0,1023,1013,1,0,0,0,1023,1019,1,0,0,0,1024,169,1,0,0,0,1025,
        1026,5,32,0,0,1026,1028,3,120,60,0,1027,1025,1,0,0,0,1027,1028,1,
        0,0,0,1028,1030,1,0,0,0,1029,1031,5,86,0,0,1030,1029,1,0,0,0,1030,
        1031,1,0,0,0,1031,1032,1,0,0,0,1032,1033,3,172,86,0,1033,171,1,0,
        0,0,1034,1047,5,18,0,0,1035,1036,5,92,0,0,1036,1041,3,120,60,0,1037,
        1038,5,91,0,0,1038,1040,3,120,60,0,1039,1037,1,0,0,0,1040,1043,1,
        0,0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,1044,1,0,0,0,1043,
        1041,1,0,0,0,1044,1045,5,93,0,0,1045,1047,1,0,0,0,1046,1034,1,0,
        0,0,1046,1035,1,0,0,0,1047,173,1,0,0,0,1048,1060,3,180,90,0,1049,
        1060,5,83,0,0,1050,1060,5,80,0,0,1051,1060,5,81,0,0,1052,1060,5,
        82,0,0,1053,1060,5,77,0,0,1054,1060,5,78,0,0,1055,1060,3,178,89,
        0,1056,1060,5,84,0,0,1057,1060,3,176,88,0,1058,1060,5,76,0,0,1059,
        1048,1,0,0,0,1059,1049,1,0,0,0,1059,1050,1,0,0,0,1059,1051,1,0,0,
        0,1059,1052,1,0,0,0,1059,1053,1,0,0,0,1059,1054,1,0,0,0,1059,1055,
        1,0,0,0,1059,1056,1,0,0,0,1059,1057,1,0,0,0,1059,1058,1,0,0,0,1060,
        175,1,0,0,0,1061,1073,5,66,0,0,1062,1073,5,67,0,0,1063,1073,5,68,
        0,0,1064,1065,5,69,0,0,1065,1066,5,92,0,0,1066,1073,5,70,0,0,1067,
        1068,5,69,0,0,1068,1069,5,93,0,0,1069,1073,5,70,0,0,1070,1073,5,
        71,0,0,1071,1073,5,72,0,0,1072,1061,1,0,0,0,1072,1062,1,0,0,0,1072,
        1063,1,0,0,0,1072,1064,1,0,0,0,1072,1067,1,0,0,0,1072,1070,1,0,0,
        0,1072,1071,1,0,0,0,1073,177,1,0,0,0,1074,1075,7,9,0,0,1075,179,
        1,0,0,0,1076,1078,5,79,0,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,
        1080,1,0,0,0,1079,1081,5,86,0,0,1080,1079,1,0,0,0,1080,1081,1,0,
        0,0,1081,1082,1,0,0,0,1082,1083,5,89,0,0,1083,1088,3,120,60,0,1084,
        1085,5,91,0,0,1085,1087,3,120,60,0,1086,1084,1,0,0,0,1087,1090,1,
        0,0,0,1088,1086,1,0,0,0,1088,1089,1,0,0,0,1089,1091,1,0,0,0,1090,
        1088,1,0,0,0,1091,1092,5,90,0,0,1092,1114,1,0,0,0,1093,1095,5,79,
        0,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,1097,1,0,0,0,1096,1098,
        5,86,0,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,0,0,1099,
        1100,5,89,0,0,1100,1101,3,120,60,0,1101,1102,5,4,0,0,1102,1103,3,
        120,60,0,1103,1104,5,90,0,0,1104,1114,1,0,0,0,1105,1107,5,79,0,0,
        1106,1105,1,0,0,0,1106,1107,1,0,0,0,1107,1109,1,0,0,0,1108,1110,
        5,86,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,
        1112,5,89,0,0,1112,1114,5,90,0,0,1113,1077,1,0,0,0,1113,1094,1,0,
        0,0,1113,1106,1,0,0,0,1114,181,1,0,0,0,1115,1119,5,73,0,0,1116,1118,
        9,0,0,0,1117,1116,1,0,0,0,1118,1121,1,0,0,0,1119,1120,1,0,0,0,1119,
        1117,1,0,0,0,1120,1122,1,0,0,0,1121,1119,1,0,0,0,1122,1123,5,73,
        0,0,1123,183,1,0,0,0,129,187,196,202,206,210,217,226,229,232,245,
        249,254,260,263,277,287,293,299,303,311,317,322,325,332,337,340,
        343,348,356,361,365,380,387,393,398,406,412,418,425,433,436,439,
        442,445,452,455,458,461,470,474,477,480,485,489,494,506,514,519,
        528,533,547,554,559,566,569,578,584,588,613,616,620,639,655,659,
        667,671,676,679,682,687,702,711,718,720,726,735,738,742,748,762,
        789,794,801,805,812,825,854,884,886,912,924,927,933,936,942,945,
        949,957,977,981,1000,1011,1021,1023,1027,1030,1041,1046,1059,1072,
        1077,1080,1088,1094,1097,1106,1109,1113,1119
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'use'", "'{'", "'}'", "';'", "'='", "'const'", 
                     "'union'", "'unsafe'", "'type'", "'impl'", "'extern'", 
                     "'static'", "'mut'", "'fn'", "'->'", "'pub'", "'struct'", 
                     "'()'", "'&'", "'*'", "'i32'", "'String'", "'bool'", 
                     "'u8'", "'<'", "'Option<NonNull<'", "'>>'", "'break'", 
                     "'continue'", "'let'", "'else'", "'.'", "'ref'", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'match'", "'|'", "'=>'", "'return'", "'while'", "'for'", 
                     "'in'", "'if'", "'else if'", "'loop'", "'Box'", "'Some'", 
                     "'as'", "'..'", "'=='", "'!='", "'||'", "'&&'", "'>='", 
                     "'<='", "'/'", "'%'", "'+'", "'-'", "'b'.''", "'b'|''", 
                     "'b'*''", "'b''", "'''", "'b'+''", "'b'?''", "'\"'", 
                     "'true'", "'false'", "'None'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'::'", "'!'", "'>'", "'#'", 
                     "'['", "']'", "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "NONE", 
                      "Binary", "STRING_LITERAL", "Identifier", "Number", 
                      "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_useDecl = 2
    RULE_topLevelDef = 3
    RULE_topLevelVarDef = 4
    RULE_defKind = 5
    RULE_varDefField = 6
    RULE_typeAlias = 7
    RULE_interfaceDef = 8
    RULE_externBlock = 9
    RULE_externItem = 10
    RULE_externParams = 11
    RULE_externParam = 12
    RULE_visibility = 13
    RULE_unsafeModifier = 14
    RULE_externAbi = 15
    RULE_attributes = 16
    RULE_innerAttribute = 17
    RULE_attribute = 18
    RULE_attrArgs = 19
    RULE_attrArg = 20
    RULE_attrValue = 21
    RULE_structDef = 22
    RULE_structField = 23
    RULE_structLiteral = 24
    RULE_structLiteralField = 25
    RULE_functionDef = 26
    RULE_paramList = 27
    RULE_param = 28
    RULE_typeExpr = 29
    RULE_pointerType = 30
    RULE_basicType = 31
    RULE_safeNonNullWrapper = 32
    RULE_typePath = 33
    RULE_arrayType = 34
    RULE_block = 35
    RULE_statement = 36
    RULE_conditionalAssignmentStmt = 37
    RULE_callStmt = 38
    RULE_letStmt = 39
    RULE_varDef = 40
    RULE_compoundOp = 41
    RULE_compoundAssignment = 42
    RULE_matchStmt = 43
    RULE_matchArm = 44
    RULE_matchPattern = 45
    RULE_whileStmt = 46
    RULE_initializer = 47
    RULE_staticVarDecl = 48
    RULE_initBlock = 49
    RULE_assignStmt = 50
    RULE_forStmt = 51
    RULE_ifStmt = 52
    RULE_exprStmt = 53
    RULE_returnStmt = 54
    RULE_loopStmt = 55
    RULE_boxWrappwer = 56
    RULE_typeWrapper = 57
    RULE_boxWrapperPrefix = 58
    RULE_typeWrapperPrefix = 59
    RULE_expression = 60
    RULE_basicTypeCastExpr = 61
    RULE_unsafeExpression = 62
    RULE_qualifiedExpression = 63
    RULE_typeAccessPostfix = 64
    RULE_structDefInit = 65
    RULE_arrayDeclaration = 66
    RULE_typePathExpression = 67
    RULE_patternPrefix = 68
    RULE_pattern = 69
    RULE_castExpressionPostFix = 70
    RULE_compoundOps = 71
    RULE_rangeSymbol = 72
    RULE_conditionalOps = 73
    RULE_booleanOps = 74
    RULE_binaryOps = 75
    RULE_structFieldDec = 76
    RULE_mutableExpression = 77
    RULE_unaryOpes = 78
    RULE_parenExpression = 79
    RULE_dereferenceExpression = 80
    RULE_expressionBlock = 81
    RULE_borrowExpression = 82
    RULE_primaryExpression = 83
    RULE_fieldAccessPostFix = 84
    RULE_callExpressionPostFix = 85
    RULE_functionCallArgs = 86
    RULE_literal = 87
    RULE_byteLiteral = 88
    RULE_booleanLiteral = 89
    RULE_arrayLiteral = 90
    RULE_stringLiteral = 91

    ruleNames =  [ "program", "topLevelItem", "useDecl", "topLevelDef", 
                   "topLevelVarDef", "defKind", "varDefField", "typeAlias", 
                   "interfaceDef", "externBlock", "externItem", "externParams", 
                   "externParam", "visibility", "unsafeModifier", "externAbi", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "structLiteral", 
                   "structLiteralField", "functionDef", "paramList", "param", 
                   "typeExpr", "pointerType", "basicType", "safeNonNullWrapper", 
                   "typePath", "arrayType", "block", "statement", "conditionalAssignmentStmt", 
                   "callStmt", "letStmt", "varDef", "compoundOp", "compoundAssignment", 
                   "matchStmt", "matchArm", "matchPattern", "whileStmt", 
                   "initializer", "staticVarDecl", "initBlock", "assignStmt", 
                   "forStmt", "ifStmt", "exprStmt", "returnStmt", "loopStmt", 
                   "boxWrappwer", "typeWrapper", "boxWrapperPrefix", "typeWrapperPrefix", 
                   "expression", "basicTypeCastExpr", "unsafeExpression", 
                   "qualifiedExpression", "typeAccessPostfix", "structDefInit", 
                   "arrayDeclaration", "typePathExpression", "patternPrefix", 
                   "pattern", "castExpressionPostFix", "compoundOps", "rangeSymbol", 
                   "conditionalOps", "booleanOps", "binaryOps", "structFieldDec", 
                   "mutableExpression", "unaryOpes", "parenExpression", 
                   "dereferenceExpression", "expressionBlock", "borrowExpression", 
                   "primaryExpression", "fieldAccessPostFix", "callExpressionPostFix", 
                   "functionCallArgs", "literal", "byteLiteral", "booleanLiteral", 
                   "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    TRUE=74
    FALSE=75
    NONE=76
    Binary=77
    STRING_LITERAL=78
    Identifier=79
    Number=80
    SignedNumber=81
    BYTE_STRING_LITERAL=82
    HexNumber=83
    CHAR_LITERAL=84
    DOUBLE_COLON=85
    EXCL=86
    GT=87
    POUND=88
    LBRACK=89
    RBRACK=90
    COMMA=91
    LPAREN=92
    RPAREN=93
    UNDERSCORE=94
    COLON=95
    ELLIPSIS=96
    WS=97
    COMMENT=98

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 221122) != 0) or _la==79 or _la==88:
                self.state = 184
                self.topLevelItem()
                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def useDecl(self):
            return self.getTypedRuleContext(RustParser.UseDeclContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 190
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 191
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 192
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 193
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 194
                self.useDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 195
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypePathContext)
            else:
                return self.getTypedRuleContext(RustParser.TypePathContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_useDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDecl" ):
                listener.enterUseDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDecl" ):
                listener.exitUseDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDecl" ):
                return visitor.visitUseDecl(self)
            else:
                return visitor.visitChildren(self)




    def useDecl(self):

        localctx = RustParser.UseDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_useDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(RustParser.T__0)
            self.state = 199
            self.typePath()
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 200
                self.match(RustParser.T__1)
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==79 or _la==85:
                    self.state = 202
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 201
                        self.typePath()


                    self.state = 204
                    self.match(RustParser.Identifier)
                    self.state = 206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 205
                        self.match(RustParser.COMMA)


                    self.state = 212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 213
                self.match(RustParser.T__2)
                self.state = 214
                self.match(RustParser.COMMA)
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 220
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def topLevelVarDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelVarDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelDef" ):
                return visitor.visitTopLevelDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_topLevelDef)
        try:
            self.state = 226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 222
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 223
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 224
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 225
                self.topLevelVarDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelVarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def defKind(self):
            return self.getTypedRuleContext(RustParser.DefKindContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def varDefField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelVarDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelVarDef" ):
                listener.enterTopLevelVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelVarDef" ):
                listener.exitTopLevelVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelVarDef" ):
                return visitor.visitTopLevelVarDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelVarDef(self):

        localctx = RustParser.TopLevelVarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_topLevelVarDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 228
                self.visibility()


            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0):
                self.state = 231
                self.defKind()


            self.state = 234
            self.match(RustParser.Identifier)
            self.state = 249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.state = 235
                self.match(RustParser.COLON)
                self.state = 236
                self.typeExpr()
                self.state = 237
                self.match(RustParser.T__4)
                self.state = 238
                self.expression(0)
                self.state = 239
                self.match(RustParser.T__3)
                pass
            elif token in [2]:
                self.state = 241
                self.match(RustParser.T__1)
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16 or _la==79:
                    self.state = 242
                    self.varDefField()
                    self.state = 247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 248
                self.match(RustParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_defKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefKind" ):
                listener.enterDefKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefKind" ):
                listener.exitDefKind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefKind" ):
                return visitor.visitDefKind(self)
            else:
                return visitor.visitChildren(self)




    def defKind(self):

        localctx = RustParser.DefKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_defKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_varDefField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDefField" ):
                listener.enterVarDefField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDefField" ):
                listener.exitVarDefField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDefField" ):
                return visitor.visitVarDefField(self)
            else:
                return visitor.visitChildren(self)




    def varDefField(self):

        localctx = RustParser.VarDefFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_varDefField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 253
                self.visibility()


            self.state = 256
            self.match(RustParser.Identifier)
            self.state = 257
            self.match(RustParser.COLON)
            self.state = 258
            self.typeExpr()
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 259
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 262
                self.visibility()


            self.state = 265
            self.match(RustParser.T__8)
            self.state = 266
            self.match(RustParser.Identifier)
            self.state = 267
            self.match(RustParser.T__4)
            self.state = 268
            self.typeExpr()
            self.state = 269
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDef" ):
                return visitor.visitInterfaceDef(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(RustParser.T__9)
            self.state = 272
            self.match(RustParser.Identifier)
            self.state = 273
            self.match(RustParser.T__1)
            self.state = 275 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 274
                self.functionDef()
                self.state = 277 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 84224) != 0)):
                    break

            self.state = 279
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(RustParser.T__10)
            self.state = 282
            self.match(RustParser.STRING_LITERAL)
            self.state = 283
            self.match(RustParser.T__1)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 86528) != 0):
                self.state = 284
                self.externItem()
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 290
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 325
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 292
                    self.visibility()


                self.state = 295
                self.match(RustParser.T__8)
                self.state = 296
                self.match(RustParser.Identifier)
                self.state = 297
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 298
                    self.visibility()


                self.state = 301
                self.match(RustParser.T__11)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 302
                    self.match(RustParser.T__12)


                self.state = 305
                self.match(RustParser.Identifier)
                self.state = 306
                self.match(RustParser.COLON)
                self.state = 307
                self.typeExpr()
                self.state = 308
                self.match(RustParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 310
                    self.visibility()


                self.state = 313
                self.match(RustParser.T__13)
                self.state = 314
                self.match(RustParser.Identifier)
                self.state = 315
                self.match(RustParser.LPAREN)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 229377) != 0):
                    self.state = 316
                    self.externParams()


                self.state = 319
                self.match(RustParser.RPAREN)
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 320
                    self.match(RustParser.T__14)
                    self.state = 321
                    self.typeExpr()


                self.state = 324
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 340
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79, 94, 95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 327
                self.externParam()
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 328
                        self.match(RustParser.COMMA)
                        self.state = 329
                        self.externParam() 
                    self.state = 334
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 335
                    self.match(RustParser.COMMA)
                    self.state = 336
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79 or _la==94:
                self.state = 342
                _la = self._input.LA(1)
                if not(_la==79 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 345
            self.match(RustParser.COLON)
            self.state = 348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 22, 23, 24, 25, 26, 79, 85, 89]:
                self.state = 346
                self.typeExpr()
                pass
            elif token in [96]:
                self.state = 347
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(RustParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(RustParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(RustParser.T__10)
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 355
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 358
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 361 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(RustParser.POUND)

            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 364
                self.match(RustParser.EXCL)


            self.state = 367
            self.match(RustParser.LBRACK)
            self.state = 368
            self.attribute()
            self.state = 369
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attribute)
        try:
            self.state = 380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 371
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 372
                self.match(RustParser.Identifier)
                self.state = 373
                self.match(RustParser.T__4)
                self.state = 374
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 375
                self.match(RustParser.Identifier)
                self.state = 376
                self.match(RustParser.LPAREN)
                self.state = 377
                self.attrArgs()
                self.state = 378
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.attrArg()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==91:
                self.state = 383
                self.match(RustParser.COMMA)
                self.state = 384
                self.attrArg()
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(RustParser.Identifier)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 391
                self.match(RustParser.T__4)
                self.state = 392
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 397
                self.visibility()


            self.state = 400
            self.match(RustParser.T__16)
            self.state = 401
            self.match(RustParser.Identifier)
            self.state = 402
            self.match(RustParser.T__1)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16 or _la==79:
                self.state = 403
                self.structField()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 409
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 411
                self.visibility()


            self.state = 414
            self.match(RustParser.Identifier)
            self.state = 415
            self.match(RustParser.COLON)
            self.state = 416
            self.typeExpr()
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 417
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteral" ):
                return visitor.visitStructLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.match(RustParser.Identifier)
            self.state = 421
            self.match(RustParser.T__1)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 422
                self.structLiteralField()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 428
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(RustParser.Identifier)
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 431
                self.match(RustParser.COLON)
                self.state = 432
                self.expression(0)


            self.state = 436
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 435
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 438
                self.visibility()


            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 441
                self.unsafeModifier()


            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 444
                self.externAbi()


            self.state = 447
            self.match(RustParser.T__13)
            self.state = 448
            self.match(RustParser.Identifier)
            self.state = 455
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.state = 449
                self.match(RustParser.T__17)
                pass
            elif token in [92]:
                self.state = 450
                self.match(RustParser.LPAREN)
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==19 or _la==79:
                    self.state = 451
                    self.paramList()


                self.state = 454
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 457
                self.match(RustParser.T__14)


            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 460
                self.typeExpr()


            self.state = 463
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.param()
            self.state = 470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 466
                    self.match(RustParser.COMMA)
                    self.state = 467
                    self.param() 
                self.state = 472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 473
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 476
                self.match(RustParser.T__18)


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 479
                self.match(RustParser.T__12)


            self.state = 482
            self.match(RustParser.Identifier)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 483
                self.match(RustParser.COLON)
                self.state = 484
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpr" ):
                listener.enterTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpr" ):
                listener.exitTypeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpr" ):
                return visitor.visitTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def typeExpr(self):

        localctx = RustParser.TypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_typeExpr)
        try:
            self.state = 489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 21, 22, 23, 24, 25, 26, 79, 85, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.basicType()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(RustParser.T__19)
            self.state = 492
            _la = self._input.LA(1)
            if not(_la==6 or _la==13):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 493
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def safeNonNullWrapper(self):
            return self.getTypedRuleContext(RustParser.SafeNonNullWrapperContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(RustParser.ArrayTypeContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 496
                self.match(RustParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 497
                self.safeNonNullWrapper()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 498
                self.match(RustParser.T__21)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 499
                self.match(RustParser.T__22)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 500
                self.match(RustParser.T__23)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 501
                self.arrayType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 502
                self.typePath()
                self.state = 503
                self.basicType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 505
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 508
                self.match(RustParser.T__24)
                self.state = 509
                self.typeExpr()
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 510
                    self.match(RustParser.COMMA)
                    self.state = 511
                    self.typeExpr()
                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 517
                self.match(RustParser.GT)
                self.state = 519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 518
                    self.match(RustParser.T__17)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 521
                self.match(RustParser.Identifier)
                self.state = 533
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 522
                    self.match(RustParser.T__24)
                    self.state = 523
                    self.typeExpr()
                    self.state = 528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==91:
                        self.state = 524
                        self.match(RustParser.COMMA)
                        self.state = 525
                        self.typeExpr()
                        self.state = 530
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 531
                    self.match(RustParser.GT)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 535
                self.match(RustParser.Identifier)
                self.state = 536
                self.match(RustParser.T__24)
                self.state = 537
                self.typeExpr()
                self.state = 538
                self.match(RustParser.GT)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 540
                self.match(RustParser.T__18)
                self.state = 541
                self.typeExpr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 542
                self.match(RustParser.LBRACK)
                self.state = 543
                self.typeExpr()
                self.state = 544
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 546
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SafeNonNullWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.GT)
            else:
                return self.getToken(RustParser.GT, i)

        def getRuleIndex(self):
            return RustParser.RULE_safeNonNullWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafeNonNullWrapper" ):
                listener.enterSafeNonNullWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafeNonNullWrapper" ):
                listener.exitSafeNonNullWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSafeNonNullWrapper" ):
                return visitor.visitSafeNonNullWrapper(self)
            else:
                return visitor.visitChildren(self)




    def safeNonNullWrapper(self):

        localctx = RustParser.SafeNonNullWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_safeNonNullWrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(RustParser.T__25)
            self.state = 550
            self.typeExpr()
            self.state = 554
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 551
                self.match(RustParser.T__26)
                pass
            elif token in [87]:
                self.state = 552
                self.match(RustParser.GT)
                self.state = 553
                self.match(RustParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 556
                self.match(RustParser.Identifier)
                self.state = 557
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 558
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 561
                self.match(RustParser.Identifier)
                self.state = 566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 562
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 563
                        self.match(RustParser.Identifier) 
                    self.state = 568
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = RustParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(RustParser.LBRACK)
            self.state = 572
            self.basicType()
            self.state = 573
            self.match(RustParser.T__3)
            self.state = 574
            self.match(RustParser.Number)
            self.state = 575
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 577
                self.unsafeModifier()


            self.state = 580
            self.match(RustParser.T__1)
            self.state = 584
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 581
                    self.statement() 
                self.state = 586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==79:
                self.state = 587
                self.returnStmt()


            self.state = 590
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def conditionalAssignmentStmt(self):
            return self.getTypedRuleContext(RustParser.ConditionalAssignmentStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def callStmt(self):
            return self.getTypedRuleContext(RustParser.CallStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_statement)
        try:
            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.letStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 594
                self.conditionalAssignmentStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 595
                self.structLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 596
                self.structDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 597
                self.staticVarDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 598
                self.typeWrapper()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 599
                self.assignStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 600
                self.compoundAssignment()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 601
                self.forStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 602
                self.ifStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 603
                self.callStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 604
                self.exprStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 605
                self.whileStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 606
                self.returnStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 607
                self.loopStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 608
                self.match(RustParser.T__27)
                self.state = 609
                self.match(RustParser.T__3)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 610
                self.match(RustParser.T__28)
                self.state = 611
                self.match(RustParser.T__3)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 612
                self.matchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalAssignmentStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_conditionalAssignmentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAssignmentStmt" ):
                listener.enterConditionalAssignmentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAssignmentStmt" ):
                listener.exitConditionalAssignmentStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalAssignmentStmt" ):
                return visitor.visitConditionalAssignmentStmt(self)
            else:
                return visitor.visitChildren(self)




    def conditionalAssignmentStmt(self):

        localctx = RustParser.ConditionalAssignmentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_conditionalAssignmentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 615
                self.match(RustParser.T__29)


            self.state = 620
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 618
                self.typeWrapper()
                pass
            elif token in [2, 8, 13, 19, 20, 21, 22, 23, 24, 25, 26, 30, 33, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 92]:
                self.state = 619
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 622
            self.match(RustParser.T__4)
            self.state = 623
            self.expression(0)
            self.state = 624
            self.match(RustParser.T__30)
            self.state = 625
            self.block()
            self.state = 626
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStmt" ):
                listener.enterCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStmt" ):
                listener.exitCallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStmt" ):
                return visitor.visitCallStmt(self)
            else:
                return visitor.visitChildren(self)




    def callStmt(self):

        localctx = RustParser.CallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_callStmt)
        try:
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 628
                self.expression(0)

                self.state = 629
                self.match(RustParser.T__31)
                self.state = 630
                self.expression(0)
                self.state = 632
                self.callExpressionPostFix()
                self.state = 633
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self.expression(0)
                self.state = 636
                self.callExpressionPostFix()
                self.state = 637
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 676
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self.match(RustParser.T__29)
                self.state = 642
                self.varDef()
                self.state = 643
                self.match(RustParser.T__4)
                self.state = 644
                self.expression(0)
                self.state = 645
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.match(RustParser.T__29)
                self.state = 648
                self.varDef()
                self.state = 649
                self.initBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 651
                self.match(RustParser.T__29)
                self.state = 652
                self.match(RustParser.LPAREN)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13 or _la==33 or _la==79:
                    self.state = 653
                    self.varDef()
                    self.state = 655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 654
                        self.match(RustParser.COMMA)


                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 662
                self.match(RustParser.RPAREN)
                self.state = 663
                self.match(RustParser.T__4)
                self.state = 664
                self.match(RustParser.LPAREN)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9797378308) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 310377919) != 0):
                    self.state = 665
                    self.expression(0)
                    self.state = 667
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 666
                        self.match(RustParser.COMMA)


                    self.state = 673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 674
                self.match(RustParser.RPAREN)
                self.state = 675
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 678
                self.match(RustParser.T__32)


            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 681
                self.match(RustParser.T__12)


            self.state = 684
            self.match(RustParser.Identifier)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 685
                self.match(RustParser.COLON)
                self.state = 686
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4380866641920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.expression(0)
            self.state = 692
            self.compoundOp()
            self.state = 693
            self.expression(0)
            self.state = 694
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(RustParser.T__41)
            self.state = 697
            self.expression(0)
            self.state = 698
            self.match(RustParser.T__1)
            self.state = 700 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 699
                self.matchArm()
                self.state = 702 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 268460143) != 0)):
                    break

            self.state = 704
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.matchPattern()
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 707
                self.match(RustParser.T__42)
                self.state = 708
                self.matchPattern()
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 714
            self.match(RustParser.T__43)
            self.state = 720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 8]:
                self.state = 715
                self.block()
                pass
            elif token in [45]:
                self.state = 716
                self.match(RustParser.T__44)
                self.state = 718
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                if la_ == 1:
                    self.state = 717
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_matchPattern)
        try:
            self.state = 726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 67, 68, 69, 71, 72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 722
                self.byteLiteral()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 723
                self.match(RustParser.Number)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 3)
                self.state = 724
                self.match(RustParser.UNDERSCORE)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 4)
                self.state = 725
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(RustParser.T__45)
            self.state = 729
            self.expression(0)
            self.state = 730
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_initializer)
        try:
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 734
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 737
                self.visibility()


            self.state = 740
            self.match(RustParser.T__11)
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 741
                self.match(RustParser.T__12)


            self.state = 744
            self.match(RustParser.Identifier)
            self.state = 745
            self.match(RustParser.COLON)
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 746
                self.typeExpr()
                pass

            elif la_ == 2:
                self.state = 747
                self.match(RustParser.Identifier)
                pass


            self.state = 750
            self.match(RustParser.T__4)
            self.state = 751
            self.initializer()
            self.state = 752
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(RustParser.T__1)
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 755
                self.match(RustParser.Identifier)
                self.state = 756
                self.match(RustParser.COLON)
                self.state = 757
                self.expression(0)
                self.state = 758
                self.match(RustParser.COMMA)
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 765
            self.match(RustParser.T__2)
            self.state = 766
            self.match(RustParser.T__3)
            self.state = 767
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.expression(0)
            self.state = 770
            self.match(RustParser.T__4)
            self.state = 771
            self.expression(0)
            self.state = 772
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(RustParser.T__46)
            self.state = 775
            self.match(RustParser.Identifier)
            self.state = 776
            self.match(RustParser.T__47)
            self.state = 777
            self.expression(0)
            self.state = 778
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(RustParser.T__48)
            self.state = 781
            self.expression(0)
            self.state = 782
            self.block()
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50:
                self.state = 783
                self.match(RustParser.T__49)
                self.state = 784
                self.expression(0)
                self.state = 785
                self.block()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 792
                self.match(RustParser.T__30)
                self.state = 793
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.primaryExpression()
            self.state = 797
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                self.match(RustParser.T__44)
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9797378308) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 310377919) != 0):
                    self.state = 800
                    self.expression(0)


                self.state = 803
                self.match(RustParser.T__3)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(RustParser.T__50)
            self.state = 808
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrappwerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrappwer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrappwer" ):
                listener.enterBoxWrappwer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrappwer" ):
                listener.exitBoxWrappwer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWrappwer" ):
                return visitor.visitBoxWrappwer(self)
            else:
                return visitor.visitChildren(self)




    def boxWrappwer(self):

        localctx = RustParser.BoxWrappwerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_boxWrappwer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(RustParser.T__51)
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 811
                self.typeExpr()


            self.state = 814
            self.match(RustParser.LPAREN)
            self.state = 815
            self.expression(0)
            self.state = 816
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_typeWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapper" ):
                listener.enterTypeWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapper" ):
                listener.exitTypeWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWrapper" ):
                return visitor.visitTypeWrapper(self)
            else:
                return visitor.visitChildren(self)




    def typeWrapper(self):

        localctx = RustParser.TypeWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_typeWrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(RustParser.T__52)
            self.state = 819
            self.match(RustParser.LPAREN)
            self.state = 820
            self.expression(0)
            self.state = 821
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrapperPrefix" ):
                listener.enterBoxWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrapperPrefix" ):
                listener.exitBoxWrapperPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWrapperPrefix" ):
                return visitor.visitBoxWrapperPrefix(self)
            else:
                return visitor.visitChildren(self)




    def boxWrapperPrefix(self):

        localctx = RustParser.BoxWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_boxWrapperPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(RustParser.T__51)
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 824
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_typeWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapperPrefix" ):
                listener.enterTypeWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapperPrefix" ):
                listener.exitTypeWrapperPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWrapperPrefix" ):
                return visitor.visitTypeWrapperPrefix(self)
            else:
                return visitor.visitChildren(self)




    def typeWrapperPrefix(self):

        localctx = RustParser.TypeWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typeWrapperPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(RustParser.T__52)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def typePathExpression(self):
            return self.getTypedRuleContext(RustParser.TypePathExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def structDefInit(self):
            return self.getTypedRuleContext(RustParser.StructDefInitContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def unsafeExpression(self):
            return self.getTypedRuleContext(RustParser.UnsafeExpressionContext,0)


        def basicTypeCastExpr(self):
            return self.getTypedRuleContext(RustParser.BasicTypeCastExprContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def qualifiedExpression(self):
            return self.getTypedRuleContext(RustParser.QualifiedExpressionContext,0)


        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(RustParser.ArrayDeclarationContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def rangeSymbol(self):
            return self.getTypedRuleContext(RustParser.RangeSymbolContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def typeAccessPostfix(self):
            return self.getTypedRuleContext(RustParser.TypeAccessPostfixContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 830
                self.mutableExpression()
                self.state = 831
                self.expression(25)
                pass

            elif la_ == 2:
                self.state = 833
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.state = 834
                self.structLiteral()
                pass

            elif la_ == 4:
                self.state = 835
                self.typePathExpression()
                self.state = 836
                self.expression(20)
                pass

            elif la_ == 5:
                self.state = 838
                self.parenExpression()
                pass

            elif la_ == 6:
                self.state = 839
                self.structFieldDec()
                pass

            elif la_ == 7:
                self.state = 840
                self.structDefInit()
                pass

            elif la_ == 8:
                self.state = 841
                self.unaryOpes()
                self.state = 842
                self.expression(16)
                pass

            elif la_ == 9:
                self.state = 844
                self.borrowExpression()
                pass

            elif la_ == 10:
                self.state = 845
                self.unsafeExpression()
                pass

            elif la_ == 11:
                self.state = 846
                self.basicTypeCastExpr()
                pass

            elif la_ == 12:
                self.state = 847
                self.dereferenceExpression()
                pass

            elif la_ == 13:
                self.state = 848
                self.expressionBlock()
                pass

            elif la_ == 14:
                self.state = 849
                self.qualifiedExpression()
                pass

            elif la_ == 15:
                self.state = 850
                self.patternPrefix()
                self.state = 851
                self.expression(3)
                pass

            elif la_ == 16:
                self.state = 853
                self.arrayDeclaration()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 886
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 884
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 856
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 857
                        self.binaryOps()
                        self.state = 858
                        self.expression(24)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 860
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 861
                        self.rangeSymbol()
                        self.state = 862
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 864
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 865
                        self.booleanOps()
                        self.state = 866
                        self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 868
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 869
                        self.conditionalOps()
                        self.state = 870
                        self.expression(9)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 872
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 873
                        self.compoundOps()
                        self.state = 874
                        self.expression(7)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 876
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 877
                        self.castExpressionPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 878
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 879
                        self.callExpressionPostFix()
                        pass

                    elif la_ == 8:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 880
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 881
                        self.typeAccessPostfix()
                        pass

                    elif la_ == 9:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 882
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 883
                        self.fieldAccessPostFix()
                        pass

             
                self.state = 888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasicTypeCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_basicTypeCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicTypeCastExpr" ):
                listener.enterBasicTypeCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicTypeCastExpr" ):
                listener.exitBasicTypeCastExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicTypeCastExpr" ):
                return visitor.visitBasicTypeCastExpr(self)
            else:
                return visitor.visitChildren(self)




    def basicTypeCastExpr(self):

        localctx = RustParser.BasicTypeCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_basicTypeCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.typeExpr()
            self.state = 890
            self.typePath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeExpression" ):
                listener.enterUnsafeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeExpression" ):
                listener.exitUnsafeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeExpression" ):
                return visitor.visitUnsafeExpression(self)
            else:
                return visitor.visitChildren(self)




    def unsafeExpression(self):

        localctx = RustParser.UnsafeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_unsafeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(RustParser.T__7)
            self.state = 893
            self.match(RustParser.T__1)
            self.state = 894
            self.expression(0)
            self.state = 895
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedExpression" ):
                listener.enterQualifiedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedExpression" ):
                listener.exitQualifiedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedExpression" ):
                return visitor.visitQualifiedExpression(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedExpression(self):

        localctx = RustParser.QualifiedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_qualifiedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(RustParser.T__24)
            self.state = 898
            self.expression(0)
            self.state = 899
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAccessPostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAccessPostfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAccessPostfix" ):
                listener.enterTypeAccessPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAccessPostfix" ):
                listener.exitTypeAccessPostfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAccessPostfix" ):
                return visitor.visitTypeAccessPostfix(self)
            else:
                return visitor.visitChildren(self)




    def typeAccessPostfix(self):

        localctx = RustParser.TypeAccessPostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typeAccessPostfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.typeExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structDefInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefInit" ):
                listener.enterStructDefInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefInit" ):
                listener.exitStructDefInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefInit" ):
                return visitor.visitStructDefInit(self)
            else:
                return visitor.visitChildren(self)




    def structDefInit(self):

        localctx = RustParser.StructDefInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_structDefInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(RustParser.Identifier)
            self.state = 904
            self.match(RustParser.T__4)
            self.state = 905
            self.match(RustParser.T__1)
            self.state = 906
            self.expression(0)
            self.state = 907
            self.match(RustParser.T__2)
            self.state = 908
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = RustParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(RustParser.Identifier)
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 911
                self.match(RustParser.EXCL)


            self.state = 914
            self.match(RustParser.LBRACK)
            self.state = 915
            self.match(RustParser.Number)
            self.state = 916
            self.match(RustParser.T__3)
            self.state = 917
            self.expression(0)
            self.state = 918
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathExpression" ):
                listener.enterTypePathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathExpression" ):
                listener.exitTypePathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePathExpression" ):
                return visitor.visitTypePathExpression(self)
            else:
                return visitor.visitChildren(self)




    def typePathExpression(self):

        localctx = RustParser.TypePathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_typePathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 920
                    self.match(RustParser.Identifier)
                    self.state = 921
                    self.match(RustParser.DOUBLE_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 924 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPrefix" ):
                return visitor.visitPatternPrefix(self)
            else:
                return visitor.visitChildren(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 926
                self.match(RustParser.T__29)


            self.state = 929
            self.pattern()
            self.state = 930
            self.match(RustParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 932
                    self.match(RustParser.T__32)


                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 935
                    self.match(RustParser.T__12)


                self.state = 938
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 939
                self.match(RustParser.Identifier)
                self.state = 940
                self.match(RustParser.LPAREN)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 941
                    self.match(RustParser.T__32)


                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 944
                    self.match(RustParser.T__12)


                self.state = 947
                self.match(RustParser.Identifier)
                self.state = 948
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpressionPostFix" ):
                return visitor.visitCastExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(RustParser.T__53)
            self.state = 952
            self.typeExpr()
            self.state = 957
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 953
                    self.match(RustParser.T__53)
                    self.state = 954
                    self.typeExpr() 
                self.state = 959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOps" ):
                return visitor.visitCompoundOps(self)
            else:
                return visitor.visitChildren(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4380866641920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeSymbol" ):
                listener.enterRangeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeSymbol" ):
                listener.exitRangeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeSymbol" ):
                return visitor.visitRangeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def rangeSymbol(self):

        localctx = RustParser.RangeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_rangeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(RustParser.T__54)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalOps" ):
                return visitor.visitConditionalOps(self)
            else:
                return visitor.visitChildren(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 4611686050639642625) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOps" ):
                return visitor.visitBooleanOps(self)
            else:
                return visitor.visitChildren(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3458764513955282944) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOps" ):
                return visitor.visitBinaryOps(self)
            else:
                return visitor.visitChildren(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            _la = self._input.LA(1)
            if not(((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 65970697666561) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFieldDec" ):
                return visitor.visitStructFieldDec(self)
            else:
                return visitor.visitChildren(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(RustParser.Identifier)
            self.state = 971
            self.match(RustParser.T__1)
            self.state = 972
            self.structLiteralField()
            self.state = 977
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 973
                    self.match(RustParser.COMMA)
                    self.state = 974
                    self.structLiteralField() 
                self.state = 979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 980
                self.match(RustParser.COMMA)


            self.state = 983
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableExpression" ):
                return visitor.visitMutableExpression(self)
            else:
                return visitor.visitChildren(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOpes" ):
                return visitor.visitUnaryOpes(self)
            else:
                return visitor.visitChildren(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4194307) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(RustParser.LPAREN)
            self.state = 990
            self.expression(0)
            self.state = 991
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(RustParser.T__19)
            self.state = 994
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(RustParser.T__1)
            self.state = 1000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 997
                    self.statement() 
                self.state = 1002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 1003
            self.expression(0)
            self.state = 1004
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.match(RustParser.T__18)
            self.state = 1007
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_primaryExpression)
        try:
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1009
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1010
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldAccessPostFix" ):
                return visitor.visitFieldAccessPostFix(self)
            else:
                return visitor.visitChildren(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_fieldAccessPostFix)
        try:
            self.state = 1023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1013
                self.match(RustParser.LBRACK)
                self.state = 1014
                self.primaryExpression()
                self.state = 1015
                self.match(RustParser.RBRACK)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1019 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1017
                        self.match(RustParser.T__31)
                        self.state = 1018
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1021 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallArgs(self):
            return self.getTypedRuleContext(RustParser.FunctionCallArgsContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_callExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpressionPostFix" ):
                listener.enterCallExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpressionPostFix" ):
                listener.exitCallExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpressionPostFix" ):
                return visitor.visitCallExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def callExpressionPostFix(self):

        localctx = RustParser.CallExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_callExpressionPostFix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 1025
                self.match(RustParser.T__31)
                self.state = 1026
                self.expression(0)


            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1029
                self.match(RustParser.EXCL)


            self.state = 1032
            self.functionCallArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_functionCallArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArgs" ):
                listener.enterFunctionCallArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArgs" ):
                listener.exitFunctionCallArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArgs" ):
                return visitor.visitFunctionCallArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArgs(self):

        localctx = RustParser.FunctionCallArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_functionCallArgs)
        self._la = 0 # Token type
        try:
            self.state = 1046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.match(RustParser.T__17)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(RustParser.LPAREN)
                self.state = 1036
                self.expression(0)
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 1037
                    self.match(RustParser.COMMA)
                    self.state = 1038
                    self.expression(0)
                    self.state = 1043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1044
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_literal)
        try:
            self.state = 1059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79, 86, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.arrayLiteral()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.match(RustParser.HexNumber)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1050
                self.match(RustParser.Number)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1051
                self.match(RustParser.SignedNumber)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1052
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1053
                self.match(RustParser.Binary)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1054
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [74, 75]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1055
                self.booleanLiteral()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1056
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [66, 67, 68, 69, 71, 72]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1057
                self.byteLiteral()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1058
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_byteLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteLiteral" ):
                listener.enterByteLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteLiteral" ):
                listener.exitByteLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteLiteral" ):
                return visitor.visitByteLiteral(self)
            else:
                return visitor.visitChildren(self)




    def byteLiteral(self):

        localctx = RustParser.ByteLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_byteLiteral)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                self.match(RustParser.T__65)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.match(RustParser.T__66)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1063
                self.match(RustParser.T__67)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1064
                self.match(RustParser.T__68)
                self.state = 1065
                self.match(RustParser.LPAREN)
                self.state = 1066
                self.match(RustParser.T__69)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1067
                self.match(RustParser.T__68)
                self.state = 1068
                self.match(RustParser.RPAREN)
                self.state = 1069
                self.match(RustParser.T__69)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1070
                self.match(RustParser.T__70)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1071
                self.match(RustParser.T__71)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            _la = self._input.LA(1)
            if not(_la==74 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1076
                    self.match(RustParser.Identifier)


                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1079
                    self.match(RustParser.EXCL)


                self.state = 1082
                self.match(RustParser.LBRACK)
                self.state = 1083
                self.expression(0)
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 1084
                    self.match(RustParser.COMMA)
                    self.state = 1085
                    self.expression(0)
                    self.state = 1090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1091
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1093
                    self.match(RustParser.Identifier)


                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1096
                    self.match(RustParser.EXCL)


                self.state = 1099
                self.match(RustParser.LBRACK)
                self.state = 1100
                self.expression(0)
                self.state = 1101
                self.match(RustParser.T__3)
                self.state = 1102
                self.expression(0)
                self.state = 1103
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1105
                    self.match(RustParser.Identifier)


                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1108
                    self.match(RustParser.EXCL)


                self.state = 1111
                self.match(RustParser.LBRACK)
                self.state = 1112
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(RustParser.T__72)
            self.state = 1119
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1116
                    self.matchWildcard() 
                self.state = 1121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 1122
            self.match(RustParser.T__72)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[60] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         




