# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,87,1136,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,1,0,5,0,178,8,0,10,0,12,0,181,9,0,1,
        1,1,1,1,1,1,1,1,1,3,1,188,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,196,8,
        2,1,3,3,3,199,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,4,4,211,
        8,4,11,4,12,4,212,1,4,1,4,1,5,1,5,1,5,1,5,5,5,221,8,5,10,5,12,5,
        224,9,5,1,5,1,5,1,6,3,6,229,8,6,1,6,1,6,1,6,1,6,3,6,235,8,6,1,6,
        1,6,3,6,239,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,247,8,6,1,6,1,6,1,6,
        1,6,3,6,253,8,6,1,6,1,6,1,6,3,6,258,8,6,1,6,3,6,261,8,6,1,7,1,7,
        1,7,5,7,266,8,7,10,7,12,7,269,9,7,1,7,1,7,3,7,273,8,7,1,7,3,7,276,
        8,7,1,8,3,8,279,8,8,1,8,1,8,1,8,3,8,284,8,8,1,9,1,9,1,10,1,10,1,
        11,1,11,3,11,292,8,11,1,12,4,12,295,8,12,11,12,12,12,296,1,13,1,
        13,3,13,301,8,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,3,14,316,8,14,1,15,1,15,1,15,5,15,321,8,15,10,
        15,12,15,324,9,15,1,16,1,16,1,16,3,16,329,8,16,1,17,1,17,1,18,3,
        18,334,8,18,1,18,1,18,1,18,1,18,5,18,340,8,18,10,18,12,18,343,9,
        18,1,18,1,18,1,19,3,19,348,8,19,1,19,1,19,1,19,1,19,3,19,354,8,19,
        1,20,1,20,1,20,5,20,359,8,20,10,20,12,20,362,9,20,1,20,1,20,1,21,
        3,21,367,8,21,1,21,3,21,370,8,21,1,21,3,21,373,8,21,1,21,1,21,1,
        21,1,21,1,21,3,21,380,8,21,1,21,3,21,383,8,21,1,21,3,21,386,8,21,
        1,21,3,21,389,8,21,1,21,1,21,1,22,1,22,1,22,5,22,396,8,22,10,22,
        12,22,399,9,22,1,22,3,22,402,8,22,1,23,3,23,405,8,23,1,23,3,23,408,
        8,23,1,23,1,23,1,23,3,23,413,8,23,1,24,3,24,416,8,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,25,3,25,427,8,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,439,8,25,10,25,12,25,442,9,
        25,1,25,3,25,445,8,25,1,26,3,26,448,8,26,1,26,1,26,1,26,1,26,3,26,
        454,8,26,1,27,3,27,457,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,28,1,28,3,28,469,8,28,1,29,1,29,1,29,3,29,474,8,29,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,486,8,30,10,30,12,30,
        489,9,30,1,30,1,30,3,30,493,8,30,1,30,1,30,1,30,1,30,1,30,5,30,500,
        8,30,10,30,12,30,503,9,30,1,30,1,30,3,30,507,8,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,3,30,517,8,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,3,30,530,8,30,1,31,1,31,1,31,3,31,
        535,8,31,1,31,1,31,1,31,5,31,540,8,31,10,31,12,31,543,9,31,3,31,
        545,8,31,1,32,1,32,5,32,549,8,32,10,32,12,32,552,9,32,1,32,3,32,
        555,8,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,5,34,582,8,34,10,34,12,34,585,9,34,1,34,1,34,3,34,589,8,34,
        1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,
        603,8,36,1,36,1,36,1,36,1,36,3,36,609,8,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,3,36,619,8,36,1,37,1,37,1,37,3,37,624,8,37,1,37,
        1,37,3,37,628,8,37,1,37,1,37,1,37,3,37,633,8,37,1,37,1,37,1,37,1,
        37,3,37,639,8,37,3,37,641,8,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
        1,40,1,40,1,40,1,40,4,40,654,8,40,11,40,12,40,655,1,40,1,40,1,41,
        1,41,1,41,1,41,1,42,1,42,1,42,3,42,667,8,42,1,43,3,43,670,8,43,1,
        43,1,43,3,43,674,8,43,1,43,1,43,1,43,1,43,3,43,680,8,43,1,43,1,43,
        1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,692,8,44,10,44,12,44,
        695,9,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,
        1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,719,
        8,47,10,47,12,47,722,9,47,1,47,1,47,3,47,726,8,47,1,48,1,48,1,48,
        1,49,1,49,3,49,733,8,49,1,49,1,49,3,49,737,8,49,1,50,1,50,1,50,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,762,8,51,1,51,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,790,8,51,10,
        51,12,51,793,9,51,1,52,1,52,3,52,797,8,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,53,1,53,4,53,807,8,53,11,53,12,53,808,1,54,3,54,812,8,
        54,1,54,1,54,1,54,1,55,3,55,818,8,55,1,55,3,55,821,8,55,1,55,1,55,
        1,55,1,55,3,55,827,8,55,1,55,3,55,830,8,55,1,55,1,55,3,55,834,8,
        55,1,56,1,56,1,56,1,56,5,56,840,8,56,10,56,12,56,843,9,56,1,57,1,
        57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,1,
        62,5,62,860,8,62,10,62,12,62,863,9,62,1,62,3,62,866,8,62,1,62,1,
        62,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,
        67,1,67,1,68,1,68,5,68,886,8,68,10,68,12,68,889,9,68,1,68,1,68,1,
        68,1,69,1,69,1,69,1,70,1,70,3,70,899,8,70,1,71,1,71,1,71,1,71,1,
        71,1,71,4,71,907,8,71,11,71,12,71,908,3,71,911,8,71,1,72,3,72,914,
        8,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,5,73,923,8,73,10,73,12,73,
        926,9,73,1,73,1,73,3,73,930,8,73,1,74,1,74,1,74,1,74,3,74,936,8,
        74,1,74,3,74,939,8,74,1,74,1,74,4,74,943,8,74,11,74,12,74,944,1,
        74,1,74,1,74,1,74,3,74,951,8,74,1,74,1,74,3,74,955,8,74,4,74,957,
        8,74,11,74,12,74,958,1,75,1,75,1,75,1,75,1,75,3,75,966,8,75,1,75,
        1,75,1,75,3,75,971,8,75,1,75,3,75,974,8,75,1,75,1,75,1,75,5,75,979,
        8,75,10,75,12,75,982,9,75,1,75,1,75,5,75,986,8,75,10,75,12,75,989,
        9,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,998,8,75,10,75,12,75,
        1001,9,75,1,75,3,75,1004,8,75,3,75,1006,8,75,1,76,1,76,1,76,1,76,
        1,77,1,77,3,77,1014,8,77,1,77,1,77,1,77,3,77,1019,8,77,1,77,3,77,
        1022,8,77,1,78,1,78,1,78,3,78,1027,8,78,1,79,1,79,1,79,1,79,5,79,
        1033,8,79,10,79,12,79,1036,9,79,1,79,1,79,1,80,1,80,1,80,3,80,1043,
        8,80,1,80,1,80,1,81,1,81,1,81,5,81,1050,8,81,10,81,12,81,1053,9,
        81,1,81,1,81,1,81,1,82,1,82,1,83,1,83,3,83,1062,8,83,1,83,1,83,1,
        83,3,83,1067,8,83,5,83,1069,8,83,10,83,12,83,1072,9,83,1,83,3,83,
        1075,8,83,1,83,1,83,4,83,1079,8,83,11,83,12,83,1080,1,83,1,83,1,
        83,1,83,1,83,3,83,1088,8,83,3,83,1090,8,83,1,84,1,84,1,84,1,84,1,
        84,1,84,1,84,1,84,1,84,1,84,3,84,1102,8,84,1,85,1,85,1,86,1,86,1,
        86,1,86,1,86,5,86,1111,8,86,10,86,12,86,1114,9,86,1,86,1,86,1,86,
        1,86,1,86,1,86,1,86,1,86,1,86,3,86,1125,8,86,1,87,1,87,5,87,1129,
        8,87,10,87,12,87,1132,9,87,1,87,1,87,1,87,1,1130,1,102,88,0,2,4,
        6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,0,11,2,0,68,68,83,83,1,0,67,69,2,
        0,9,9,17,17,2,0,2,2,84,84,1,0,30,37,3,0,24,24,49,52,76,76,2,0,16,
        16,53,55,2,0,19,19,56,59,2,0,58,59,75,75,2,0,68,69,83,83,1,0,63,
        64,1243,0,179,1,0,0,0,2,187,1,0,0,0,4,195,1,0,0,0,6,198,1,0,0,0,
        8,206,1,0,0,0,10,216,1,0,0,0,12,260,1,0,0,0,14,275,1,0,0,0,16,278,
        1,0,0,0,18,285,1,0,0,0,20,287,1,0,0,0,22,289,1,0,0,0,24,294,1,0,
        0,0,26,298,1,0,0,0,28,315,1,0,0,0,30,317,1,0,0,0,32,325,1,0,0,0,
        34,330,1,0,0,0,36,333,1,0,0,0,38,347,1,0,0,0,40,355,1,0,0,0,42,366,
        1,0,0,0,44,392,1,0,0,0,46,404,1,0,0,0,48,415,1,0,0,0,50,426,1,0,
        0,0,52,447,1,0,0,0,54,456,1,0,0,0,56,468,1,0,0,0,58,470,1,0,0,0,
        60,529,1,0,0,0,62,544,1,0,0,0,64,546,1,0,0,0,66,558,1,0,0,0,68,588,
        1,0,0,0,70,590,1,0,0,0,72,618,1,0,0,0,74,640,1,0,0,0,76,642,1,0,
        0,0,78,644,1,0,0,0,80,649,1,0,0,0,82,659,1,0,0,0,84,666,1,0,0,0,
        86,669,1,0,0,0,88,685,1,0,0,0,90,700,1,0,0,0,92,705,1,0,0,0,94,711,
        1,0,0,0,96,727,1,0,0,0,98,736,1,0,0,0,100,738,1,0,0,0,102,761,1,
        0,0,0,104,794,1,0,0,0,106,806,1,0,0,0,108,811,1,0,0,0,110,833,1,
        0,0,0,112,835,1,0,0,0,114,844,1,0,0,0,116,846,1,0,0,0,118,848,1,
        0,0,0,120,850,1,0,0,0,122,852,1,0,0,0,124,854,1,0,0,0,126,869,1,
        0,0,0,128,871,1,0,0,0,130,873,1,0,0,0,132,877,1,0,0,0,134,880,1,
        0,0,0,136,883,1,0,0,0,138,893,1,0,0,0,140,898,1,0,0,0,142,910,1,
        0,0,0,144,913,1,0,0,0,146,929,1,0,0,0,148,931,1,0,0,0,150,1005,1,
        0,0,0,152,1007,1,0,0,0,154,1021,1,0,0,0,156,1023,1,0,0,0,158,1028,
        1,0,0,0,160,1039,1,0,0,0,162,1046,1,0,0,0,164,1057,1,0,0,0,166,1089,
        1,0,0,0,168,1101,1,0,0,0,170,1103,1,0,0,0,172,1124,1,0,0,0,174,1126,
        1,0,0,0,176,178,3,2,1,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,
        1,0,0,0,179,180,1,0,0,0,180,1,1,0,0,0,181,179,1,0,0,0,182,188,3,
        4,2,0,183,188,3,86,43,0,184,188,3,24,12,0,185,188,3,10,5,0,186,188,
        3,6,3,0,187,182,1,0,0,0,187,183,1,0,0,0,187,184,1,0,0,0,187,185,
        1,0,0,0,187,186,1,0,0,0,188,3,1,0,0,0,189,196,3,42,21,0,190,196,
        3,36,18,0,191,196,3,8,4,0,192,196,3,48,24,0,193,196,3,50,25,0,194,
        196,3,54,27,0,195,189,1,0,0,0,195,190,1,0,0,0,195,191,1,0,0,0,195,
        192,1,0,0,0,195,193,1,0,0,0,195,194,1,0,0,0,196,5,1,0,0,0,197,199,
        3,18,9,0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,201,
        5,1,0,0,201,202,5,68,0,0,202,203,5,2,0,0,203,204,3,56,28,0,204,205,
        5,3,0,0,205,7,1,0,0,0,206,207,5,4,0,0,207,208,5,68,0,0,208,210,5,
        5,0,0,209,211,3,42,21,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,
        1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,215,5,6,0,0,215,9,1,
        0,0,0,216,217,5,7,0,0,217,218,5,67,0,0,218,222,5,5,0,0,219,221,3,
        12,6,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,
        0,0,0,223,225,1,0,0,0,224,222,1,0,0,0,225,226,5,6,0,0,226,11,1,0,
        0,0,227,229,3,18,9,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,
        0,0,230,231,5,1,0,0,231,232,5,68,0,0,232,261,5,3,0,0,233,235,3,18,
        9,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,238,5,8,
        0,0,237,239,5,9,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,240,1,0,
        0,0,240,241,5,68,0,0,241,242,5,84,0,0,242,243,3,56,28,0,243,244,
        5,3,0,0,244,261,1,0,0,0,245,247,3,18,9,0,246,245,1,0,0,0,246,247,
        1,0,0,0,247,248,1,0,0,0,248,249,5,10,0,0,249,250,5,68,0,0,250,252,
        5,81,0,0,251,253,3,14,7,0,252,251,1,0,0,0,252,253,1,0,0,0,253,254,
        1,0,0,0,254,257,5,82,0,0,255,256,5,11,0,0,256,258,3,56,28,0,257,
        255,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,261,5,3,0,0,260,
        228,1,0,0,0,260,234,1,0,0,0,260,246,1,0,0,0,261,13,1,0,0,0,262,267,
        3,16,8,0,263,264,5,80,0,0,264,266,3,16,8,0,265,263,1,0,0,0,266,269,
        1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,272,1,0,0,0,269,267,
        1,0,0,0,270,271,5,80,0,0,271,273,5,85,0,0,272,270,1,0,0,0,272,273,
        1,0,0,0,273,276,1,0,0,0,274,276,5,85,0,0,275,262,1,0,0,0,275,274,
        1,0,0,0,276,15,1,0,0,0,277,279,7,0,0,0,278,277,1,0,0,0,278,279,1,
        0,0,0,279,280,1,0,0,0,280,283,5,84,0,0,281,284,3,56,28,0,282,284,
        5,85,0,0,283,281,1,0,0,0,283,282,1,0,0,0,284,17,1,0,0,0,285,286,
        5,12,0,0,286,19,1,0,0,0,287,288,5,13,0,0,288,21,1,0,0,0,289,291,
        5,7,0,0,290,292,5,67,0,0,291,290,1,0,0,0,291,292,1,0,0,0,292,23,
        1,0,0,0,293,295,3,26,13,0,294,293,1,0,0,0,295,296,1,0,0,0,296,294,
        1,0,0,0,296,297,1,0,0,0,297,25,1,0,0,0,298,300,5,77,0,0,299,301,
        5,75,0,0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,303,
        5,78,0,0,303,304,3,28,14,0,304,305,5,79,0,0,305,27,1,0,0,0,306,316,
        5,68,0,0,307,308,5,68,0,0,308,309,5,2,0,0,309,316,3,34,17,0,310,
        311,5,68,0,0,311,312,5,81,0,0,312,313,3,30,15,0,313,314,5,82,0,0,
        314,316,1,0,0,0,315,306,1,0,0,0,315,307,1,0,0,0,315,310,1,0,0,0,
        316,29,1,0,0,0,317,322,3,32,16,0,318,319,5,80,0,0,319,321,3,32,16,
        0,320,318,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,
        0,323,31,1,0,0,0,324,322,1,0,0,0,325,328,5,68,0,0,326,327,5,2,0,
        0,327,329,3,34,17,0,328,326,1,0,0,0,328,329,1,0,0,0,329,33,1,0,0,
        0,330,331,7,1,0,0,331,35,1,0,0,0,332,334,3,18,9,0,333,332,1,0,0,
        0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,5,14,0,0,336,337,5,68,
        0,0,337,341,5,5,0,0,338,340,3,38,19,0,339,338,1,0,0,0,340,343,1,
        0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,344,1,0,0,0,343,341,1,
        0,0,0,344,345,5,6,0,0,345,37,1,0,0,0,346,348,3,18,9,0,347,346,1,
        0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,350,5,68,0,0,350,351,5,
        84,0,0,351,353,3,56,28,0,352,354,5,80,0,0,353,352,1,0,0,0,353,354,
        1,0,0,0,354,39,1,0,0,0,355,356,5,68,0,0,356,360,5,5,0,0,357,359,
        3,160,80,0,358,357,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,
        1,0,0,0,361,363,1,0,0,0,362,360,1,0,0,0,363,364,5,6,0,0,364,41,1,
        0,0,0,365,367,3,18,9,0,366,365,1,0,0,0,366,367,1,0,0,0,367,369,1,
        0,0,0,368,370,3,20,10,0,369,368,1,0,0,0,369,370,1,0,0,0,370,372,
        1,0,0,0,371,373,3,22,11,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,
        1,0,0,0,374,375,5,10,0,0,375,382,5,68,0,0,376,383,5,15,0,0,377,379,
        5,81,0,0,378,380,3,44,22,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,
        1,0,0,0,381,383,5,82,0,0,382,376,1,0,0,0,382,377,1,0,0,0,383,385,
        1,0,0,0,384,386,5,11,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,388,
        1,0,0,0,387,389,3,56,28,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,
        1,0,0,0,390,391,3,64,32,0,391,43,1,0,0,0,392,397,3,46,23,0,393,394,
        5,80,0,0,394,396,3,46,23,0,395,393,1,0,0,0,396,399,1,0,0,0,397,395,
        1,0,0,0,397,398,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,400,402,
        5,80,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,45,1,0,0,0,403,405,
        5,16,0,0,404,403,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,408,
        5,9,0,0,407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,412,
        5,68,0,0,410,411,5,84,0,0,411,413,3,56,28,0,412,410,1,0,0,0,412,
        413,1,0,0,0,413,47,1,0,0,0,414,416,3,18,9,0,415,414,1,0,0,0,415,
        416,1,0,0,0,416,417,1,0,0,0,417,418,5,17,0,0,418,419,5,68,0,0,419,
        420,5,84,0,0,420,421,3,56,28,0,421,422,5,2,0,0,422,423,3,102,51,
        0,423,424,5,3,0,0,424,49,1,0,0,0,425,427,3,18,9,0,426,425,1,0,0,
        0,426,427,1,0,0,0,427,428,1,0,0,0,428,429,5,18,0,0,429,444,5,68,
        0,0,430,431,5,84,0,0,431,432,3,56,28,0,432,433,5,2,0,0,433,434,3,
        102,51,0,434,435,5,3,0,0,435,445,1,0,0,0,436,440,5,5,0,0,437,439,
        3,52,26,0,438,437,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,
        1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,445,5,6,0,0,444,430,
        1,0,0,0,444,436,1,0,0,0,445,51,1,0,0,0,446,448,3,18,9,0,447,446,
        1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,450,5,68,0,0,450,451,
        5,84,0,0,451,453,3,56,28,0,452,454,5,80,0,0,453,452,1,0,0,0,453,
        454,1,0,0,0,454,53,1,0,0,0,455,457,3,18,9,0,456,455,1,0,0,0,456,
        457,1,0,0,0,457,458,1,0,0,0,458,459,5,13,0,0,459,460,5,68,0,0,460,
        461,5,84,0,0,461,462,3,56,28,0,462,463,5,2,0,0,463,464,3,102,51,
        0,464,465,5,3,0,0,465,55,1,0,0,0,466,469,3,60,30,0,467,469,3,58,
        29,0,468,466,1,0,0,0,468,467,1,0,0,0,469,57,1,0,0,0,470,471,5,19,
        0,0,471,473,7,2,0,0,472,474,3,56,28,0,473,472,1,0,0,0,473,474,1,
        0,0,0,474,59,1,0,0,0,475,530,5,20,0,0,476,530,5,21,0,0,477,530,5,
        22,0,0,478,530,5,23,0,0,479,530,5,15,0,0,480,492,3,62,31,0,481,482,
        5,24,0,0,482,487,3,56,28,0,483,484,5,80,0,0,484,486,3,56,28,0,485,
        483,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,
        490,1,0,0,0,489,487,1,0,0,0,490,491,5,76,0,0,491,493,1,0,0,0,492,
        481,1,0,0,0,492,493,1,0,0,0,493,530,1,0,0,0,494,506,5,68,0,0,495,
        496,5,24,0,0,496,501,3,56,28,0,497,498,5,80,0,0,498,500,3,56,28,
        0,499,497,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,
        0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,5,76,0,0,505,507,1,0,0,
        0,506,495,1,0,0,0,506,507,1,0,0,0,507,530,1,0,0,0,508,509,5,68,0,
        0,509,510,5,24,0,0,510,511,3,56,28,0,511,512,5,76,0,0,512,530,1,
        0,0,0,513,514,5,16,0,0,514,530,3,56,28,0,515,517,3,62,31,0,516,515,
        1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,519,5,78,0,0,519,520,
        3,56,28,0,520,521,5,3,0,0,521,522,5,69,0,0,522,523,5,79,0,0,523,
        530,1,0,0,0,524,525,5,78,0,0,525,526,3,56,28,0,526,527,5,79,0,0,
        527,530,1,0,0,0,528,530,5,68,0,0,529,475,1,0,0,0,529,476,1,0,0,0,
        529,477,1,0,0,0,529,478,1,0,0,0,529,479,1,0,0,0,529,480,1,0,0,0,
        529,494,1,0,0,0,529,508,1,0,0,0,529,513,1,0,0,0,529,516,1,0,0,0,
        529,524,1,0,0,0,529,528,1,0,0,0,530,61,1,0,0,0,531,532,5,68,0,0,
        532,545,5,74,0,0,533,535,5,74,0,0,534,533,1,0,0,0,534,535,1,0,0,
        0,535,536,1,0,0,0,536,541,5,68,0,0,537,538,5,74,0,0,538,540,5,68,
        0,0,539,537,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,
        0,0,542,545,1,0,0,0,543,541,1,0,0,0,544,531,1,0,0,0,544,534,1,0,
        0,0,545,63,1,0,0,0,546,550,5,5,0,0,547,549,3,68,34,0,548,547,1,0,
        0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,554,1,0,
        0,0,552,550,1,0,0,0,553,555,3,98,49,0,554,553,1,0,0,0,554,555,1,
        0,0,0,555,556,1,0,0,0,556,557,5,6,0,0,557,65,1,0,0,0,558,559,5,13,
        0,0,559,560,3,64,32,0,560,67,1,0,0,0,561,589,3,72,36,0,562,589,3,
        70,35,0,563,589,3,40,20,0,564,589,3,86,43,0,565,589,3,90,45,0,566,
        589,3,78,39,0,567,589,3,92,46,0,568,589,3,94,47,0,569,589,3,96,48,
        0,570,589,3,82,41,0,571,589,3,98,49,0,572,589,3,100,50,0,573,574,
        5,25,0,0,574,589,5,3,0,0,575,576,5,26,0,0,576,589,5,3,0,0,577,589,
        3,80,40,0,578,583,3,150,75,0,579,580,5,27,0,0,580,582,3,150,75,0,
        581,579,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,
        584,586,1,0,0,0,585,583,1,0,0,0,586,587,5,3,0,0,587,589,1,0,0,0,
        588,561,1,0,0,0,588,562,1,0,0,0,588,563,1,0,0,0,588,564,1,0,0,0,
        588,565,1,0,0,0,588,566,1,0,0,0,588,567,1,0,0,0,588,568,1,0,0,0,
        588,569,1,0,0,0,588,570,1,0,0,0,588,571,1,0,0,0,588,572,1,0,0,0,
        588,573,1,0,0,0,588,575,1,0,0,0,588,577,1,0,0,0,588,578,1,0,0,0,
        589,69,1,0,0,0,590,591,3,102,51,0,591,592,3,144,72,0,592,593,5,3,
        0,0,593,71,1,0,0,0,594,595,5,28,0,0,595,596,3,74,37,0,596,597,5,
        2,0,0,597,598,3,102,51,0,598,599,5,3,0,0,599,619,1,0,0,0,600,602,
        5,28,0,0,601,603,5,9,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,
        1,0,0,0,604,605,5,68,0,0,605,608,5,84,0,0,606,609,3,56,28,0,607,
        609,5,68,0,0,608,606,1,0,0,0,608,607,1,0,0,0,609,610,1,0,0,0,610,
        611,5,2,0,0,611,612,3,84,42,0,612,613,5,3,0,0,613,619,1,0,0,0,614,
        615,5,28,0,0,615,616,3,74,37,0,616,617,3,88,44,0,617,619,1,0,0,0,
        618,594,1,0,0,0,618,600,1,0,0,0,618,614,1,0,0,0,619,73,1,0,0,0,620,
        623,5,68,0,0,621,622,5,84,0,0,622,624,3,56,28,0,623,621,1,0,0,0,
        623,624,1,0,0,0,624,641,1,0,0,0,625,627,5,29,0,0,626,628,5,9,0,0,
        627,626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,632,5,68,0,0,
        630,631,5,84,0,0,631,633,3,56,28,0,632,630,1,0,0,0,632,633,1,0,0,
        0,633,641,1,0,0,0,634,635,5,9,0,0,635,638,5,68,0,0,636,637,7,3,0,
        0,637,639,3,56,28,0,638,636,1,0,0,0,638,639,1,0,0,0,639,641,1,0,
        0,0,640,620,1,0,0,0,640,625,1,0,0,0,640,634,1,0,0,0,641,75,1,0,0,
        0,642,643,7,4,0,0,643,77,1,0,0,0,644,645,3,102,51,0,645,646,3,76,
        38,0,646,647,3,102,51,0,647,648,5,3,0,0,648,79,1,0,0,0,649,650,5,
        38,0,0,650,651,3,102,51,0,651,653,5,5,0,0,652,654,3,162,81,0,653,
        652,1,0,0,0,654,655,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,
        657,1,0,0,0,657,658,5,6,0,0,658,81,1,0,0,0,659,660,5,39,0,0,660,
        661,3,102,51,0,661,662,3,64,32,0,662,83,1,0,0,0,663,667,3,88,44,
        0,664,667,3,64,32,0,665,667,3,102,51,0,666,663,1,0,0,0,666,664,1,
        0,0,0,666,665,1,0,0,0,667,85,1,0,0,0,668,670,3,18,9,0,669,668,1,
        0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,673,5,8,0,0,672,674,5,
        9,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,676,5,
        68,0,0,676,679,5,84,0,0,677,680,3,56,28,0,678,680,5,68,0,0,679,677,
        1,0,0,0,679,678,1,0,0,0,680,681,1,0,0,0,681,682,5,2,0,0,682,683,
        3,84,42,0,683,684,5,3,0,0,684,87,1,0,0,0,685,693,5,5,0,0,686,687,
        5,68,0,0,687,688,5,84,0,0,688,689,3,102,51,0,689,690,5,80,0,0,690,
        692,1,0,0,0,691,686,1,0,0,0,692,695,1,0,0,0,693,691,1,0,0,0,693,
        694,1,0,0,0,694,696,1,0,0,0,695,693,1,0,0,0,696,697,5,6,0,0,697,
        698,5,3,0,0,698,699,3,102,51,0,699,89,1,0,0,0,700,701,3,102,51,0,
        701,702,5,2,0,0,702,703,3,102,51,0,703,704,5,3,0,0,704,91,1,0,0,
        0,705,706,5,40,0,0,706,707,5,68,0,0,707,708,5,41,0,0,708,709,3,102,
        51,0,709,710,3,64,32,0,710,93,1,0,0,0,711,712,5,42,0,0,712,713,3,
        102,51,0,713,720,3,64,32,0,714,715,5,43,0,0,715,716,3,102,51,0,716,
        717,3,64,32,0,717,719,1,0,0,0,718,714,1,0,0,0,719,722,1,0,0,0,720,
        718,1,0,0,0,720,721,1,0,0,0,721,725,1,0,0,0,722,720,1,0,0,0,723,
        724,5,44,0,0,724,726,3,64,32,0,725,723,1,0,0,0,725,726,1,0,0,0,726,
        95,1,0,0,0,727,728,3,102,51,0,728,729,5,3,0,0,729,97,1,0,0,0,730,
        732,5,45,0,0,731,733,3,102,51,0,732,731,1,0,0,0,732,733,1,0,0,0,
        733,734,1,0,0,0,734,737,5,3,0,0,735,737,5,68,0,0,736,730,1,0,0,0,
        736,735,1,0,0,0,737,99,1,0,0,0,738,739,5,46,0,0,739,740,3,64,32,
        0,740,101,1,0,0,0,741,742,6,51,-1,0,742,743,3,126,63,0,743,744,3,
        102,51,19,744,762,1,0,0,0,745,762,3,140,70,0,746,762,3,134,67,0,
        747,748,3,106,53,0,748,749,3,102,51,16,749,762,1,0,0,0,750,762,3,
        130,65,0,751,762,3,124,62,0,752,753,3,128,64,0,753,754,3,102,51,
        13,754,762,1,0,0,0,755,762,3,138,69,0,756,762,3,136,68,0,757,758,
        3,108,54,0,758,759,3,102,51,2,759,762,1,0,0,0,760,762,3,104,52,0,
        761,741,1,0,0,0,761,745,1,0,0,0,761,746,1,0,0,0,761,747,1,0,0,0,
        761,750,1,0,0,0,761,751,1,0,0,0,761,752,1,0,0,0,761,755,1,0,0,0,
        761,756,1,0,0,0,761,757,1,0,0,0,761,760,1,0,0,0,762,791,1,0,0,0,
        763,764,10,10,0,0,764,765,3,116,58,0,765,766,3,102,51,11,766,790,
        1,0,0,0,767,768,10,9,0,0,768,769,3,120,60,0,769,770,3,102,51,10,
        770,790,1,0,0,0,771,772,10,8,0,0,772,773,3,122,61,0,773,774,3,102,
        51,9,774,790,1,0,0,0,775,776,10,7,0,0,776,777,3,118,59,0,777,778,
        3,102,51,8,778,790,1,0,0,0,779,780,10,6,0,0,780,781,3,114,57,0,781,
        782,3,102,51,7,782,790,1,0,0,0,783,784,10,11,0,0,784,790,3,142,71,
        0,785,786,10,5,0,0,786,790,3,112,56,0,787,788,10,3,0,0,788,790,3,
        144,72,0,789,763,1,0,0,0,789,767,1,0,0,0,789,771,1,0,0,0,789,775,
        1,0,0,0,789,779,1,0,0,0,789,783,1,0,0,0,789,785,1,0,0,0,789,787,
        1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,103,
        1,0,0,0,793,791,1,0,0,0,794,796,5,68,0,0,795,797,5,75,0,0,796,795,
        1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,799,5,78,0,0,799,800,
        5,69,0,0,800,801,5,3,0,0,801,802,3,102,51,0,802,803,5,79,0,0,803,
        105,1,0,0,0,804,805,5,68,0,0,805,807,5,74,0,0,806,804,1,0,0,0,807,
        808,1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,0,809,107,1,0,0,0,810,
        812,5,28,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,
        814,3,110,55,0,814,815,5,2,0,0,815,109,1,0,0,0,816,818,5,29,0,0,
        817,816,1,0,0,0,817,818,1,0,0,0,818,820,1,0,0,0,819,821,5,9,0,0,
        820,819,1,0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,834,5,68,0,0,
        823,824,5,68,0,0,824,826,5,81,0,0,825,827,5,29,0,0,826,825,1,0,0,
        0,826,827,1,0,0,0,827,829,1,0,0,0,828,830,5,9,0,0,829,828,1,0,0,
        0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,5,68,0,0,832,834,5,82,
        0,0,833,817,1,0,0,0,833,823,1,0,0,0,834,111,1,0,0,0,835,836,5,47,
        0,0,836,841,3,56,28,0,837,838,5,47,0,0,838,840,3,56,28,0,839,837,
        1,0,0,0,840,843,1,0,0,0,841,839,1,0,0,0,841,842,1,0,0,0,842,113,
        1,0,0,0,843,841,1,0,0,0,844,845,7,4,0,0,845,115,1,0,0,0,846,847,
        5,48,0,0,847,117,1,0,0,0,848,849,7,5,0,0,849,119,1,0,0,0,850,851,
        7,6,0,0,851,121,1,0,0,0,852,853,7,7,0,0,853,123,1,0,0,0,854,855,
        5,68,0,0,855,856,5,5,0,0,856,861,3,160,80,0,857,858,5,80,0,0,858,
        860,3,160,80,0,859,857,1,0,0,0,860,863,1,0,0,0,861,859,1,0,0,0,861,
        862,1,0,0,0,862,865,1,0,0,0,863,861,1,0,0,0,864,866,5,80,0,0,865,
        864,1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,868,5,6,0,0,868,
        125,1,0,0,0,869,870,5,9,0,0,870,127,1,0,0,0,871,872,7,8,0,0,872,
        129,1,0,0,0,873,874,5,81,0,0,874,875,3,102,51,0,875,876,5,82,0,0,
        876,131,1,0,0,0,877,878,5,16,0,0,878,879,3,102,51,0,879,133,1,0,
        0,0,880,881,5,19,0,0,881,882,3,102,51,0,882,135,1,0,0,0,883,887,
        5,5,0,0,884,886,3,68,34,0,885,884,1,0,0,0,886,889,1,0,0,0,887,885,
        1,0,0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,887,1,0,0,0,890,891,
        3,102,51,0,891,892,5,6,0,0,892,137,1,0,0,0,893,894,5,16,0,0,894,
        895,3,102,51,0,895,139,1,0,0,0,896,899,3,168,84,0,897,899,5,68,0,
        0,898,896,1,0,0,0,898,897,1,0,0,0,899,141,1,0,0,0,900,901,5,78,0,
        0,901,902,3,140,70,0,902,903,5,79,0,0,903,911,1,0,0,0,904,905,5,
        27,0,0,905,907,3,140,70,0,906,904,1,0,0,0,907,908,1,0,0,0,908,906,
        1,0,0,0,908,909,1,0,0,0,909,911,1,0,0,0,910,900,1,0,0,0,910,906,
        1,0,0,0,911,143,1,0,0,0,912,914,5,75,0,0,913,912,1,0,0,0,913,914,
        1,0,0,0,914,915,1,0,0,0,915,916,3,146,73,0,916,145,1,0,0,0,917,930,
        5,15,0,0,918,919,5,81,0,0,919,924,3,102,51,0,920,921,5,80,0,0,921,
        923,3,102,51,0,922,920,1,0,0,0,923,926,1,0,0,0,924,922,1,0,0,0,924,
        925,1,0,0,0,925,927,1,0,0,0,926,924,1,0,0,0,927,928,5,82,0,0,928,
        930,1,0,0,0,929,917,1,0,0,0,929,918,1,0,0,0,930,147,1,0,0,0,931,
        956,3,140,70,0,932,939,5,15,0,0,933,935,5,81,0,0,934,936,3,166,83,
        0,935,934,1,0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,939,5,82,0,
        0,938,932,1,0,0,0,938,933,1,0,0,0,939,957,1,0,0,0,940,941,5,27,0,
        0,941,943,5,68,0,0,942,940,1,0,0,0,943,944,1,0,0,0,944,942,1,0,0,
        0,944,945,1,0,0,0,945,957,1,0,0,0,946,947,5,27,0,0,947,954,5,68,
        0,0,948,950,5,81,0,0,949,951,3,166,83,0,950,949,1,0,0,0,950,951,
        1,0,0,0,951,952,1,0,0,0,952,955,5,82,0,0,953,955,5,15,0,0,954,948,
        1,0,0,0,954,953,1,0,0,0,955,957,1,0,0,0,956,938,1,0,0,0,956,942,
        1,0,0,0,956,946,1,0,0,0,957,958,1,0,0,0,958,956,1,0,0,0,958,959,
        1,0,0,0,959,149,1,0,0,0,960,961,5,74,0,0,961,962,3,62,31,0,962,963,
        5,68,0,0,963,965,5,74,0,0,964,966,3,158,79,0,965,964,1,0,0,0,965,
        966,1,0,0,0,966,973,1,0,0,0,967,974,5,15,0,0,968,970,5,81,0,0,969,
        971,3,166,83,0,970,969,1,0,0,0,970,971,1,0,0,0,971,972,1,0,0,0,972,
        974,5,82,0,0,973,967,1,0,0,0,973,968,1,0,0,0,974,1006,1,0,0,0,975,
        980,5,68,0,0,976,977,5,27,0,0,977,979,5,68,0,0,978,976,1,0,0,0,979,
        982,1,0,0,0,980,978,1,0,0,0,980,981,1,0,0,0,981,987,1,0,0,0,982,
        980,1,0,0,0,983,984,5,74,0,0,984,986,5,68,0,0,985,983,1,0,0,0,986,
        989,1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,1003,1,0,0,0,989,
        987,1,0,0,0,990,1004,5,15,0,0,991,999,5,81,0,0,992,993,5,68,0,0,
        993,994,5,81,0,0,994,995,5,67,0,0,995,998,5,82,0,0,996,998,3,166,
        83,0,997,992,1,0,0,0,997,996,1,0,0,0,998,1001,1,0,0,0,999,997,1,
        0,0,0,999,1000,1,0,0,0,1000,1002,1,0,0,0,1001,999,1,0,0,0,1002,1004,
        5,82,0,0,1003,990,1,0,0,0,1003,991,1,0,0,0,1004,1006,1,0,0,0,1005,
        960,1,0,0,0,1005,975,1,0,0,0,1006,151,1,0,0,0,1007,1008,5,68,0,0,
        1008,1009,5,75,0,0,1009,1010,3,154,77,0,1010,153,1,0,0,0,1011,1013,
        5,78,0,0,1012,1014,3,156,78,0,1013,1012,1,0,0,0,1013,1014,1,0,0,
        0,1014,1015,1,0,0,0,1015,1022,5,79,0,0,1016,1018,5,81,0,0,1017,1019,
        3,156,78,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,
        1020,1022,5,82,0,0,1021,1011,1,0,0,0,1021,1016,1,0,0,0,1022,155,
        1,0,0,0,1023,1026,3,102,51,0,1024,1025,5,3,0,0,1025,1027,3,102,51,
        0,1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,157,1,0,0,0,1028,1029,
        5,24,0,0,1029,1034,3,56,28,0,1030,1031,5,80,0,0,1031,1033,3,56,28,
        0,1032,1030,1,0,0,0,1033,1036,1,0,0,0,1034,1032,1,0,0,0,1034,1035,
        1,0,0,0,1035,1037,1,0,0,0,1036,1034,1,0,0,0,1037,1038,5,76,0,0,1038,
        159,1,0,0,0,1039,1042,5,68,0,0,1040,1041,5,84,0,0,1041,1043,3,102,
        51,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,
        1045,5,80,0,0,1045,161,1,0,0,0,1046,1051,3,164,82,0,1047,1048,5,
        60,0,0,1048,1050,3,164,82,0,1049,1047,1,0,0,0,1050,1053,1,0,0,0,
        1051,1049,1,0,0,0,1051,1052,1,0,0,0,1052,1054,1,0,0,0,1053,1051,
        1,0,0,0,1054,1055,5,61,0,0,1055,1056,3,64,32,0,1056,163,1,0,0,0,
        1057,1058,7,9,0,0,1058,165,1,0,0,0,1059,1062,3,150,75,0,1060,1062,
        3,102,51,0,1061,1059,1,0,0,0,1061,1060,1,0,0,0,1062,1070,1,0,0,0,
        1063,1066,5,80,0,0,1064,1067,3,150,75,0,1065,1067,3,102,51,0,1066,
        1064,1,0,0,0,1066,1065,1,0,0,0,1067,1069,1,0,0,0,1068,1063,1,0,0,
        0,1069,1072,1,0,0,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1074,
        1,0,0,0,1072,1070,1,0,0,0,1073,1075,5,80,0,0,1074,1073,1,0,0,0,1074,
        1075,1,0,0,0,1075,1090,1,0,0,0,1076,1077,5,74,0,0,1077,1079,5,68,
        0,0,1078,1076,1,0,0,0,1079,1080,1,0,0,0,1080,1078,1,0,0,0,1080,1081,
        1,0,0,0,1081,1087,1,0,0,0,1082,1088,5,15,0,0,1083,1084,5,81,0,0,
        1084,1085,3,166,83,0,1085,1086,5,82,0,0,1086,1088,1,0,0,0,1087,1082,
        1,0,0,0,1087,1083,1,0,0,0,1088,1090,1,0,0,0,1089,1061,1,0,0,0,1089,
        1078,1,0,0,0,1090,167,1,0,0,0,1091,1102,3,172,86,0,1092,1102,5,72,
        0,0,1093,1102,5,69,0,0,1094,1102,5,70,0,0,1095,1102,5,71,0,0,1096,
        1102,5,66,0,0,1097,1102,5,67,0,0,1098,1102,3,170,85,0,1099,1102,
        5,73,0,0,1100,1102,5,65,0,0,1101,1091,1,0,0,0,1101,1092,1,0,0,0,
        1101,1093,1,0,0,0,1101,1094,1,0,0,0,1101,1095,1,0,0,0,1101,1096,
        1,0,0,0,1101,1097,1,0,0,0,1101,1098,1,0,0,0,1101,1099,1,0,0,0,1101,
        1100,1,0,0,0,1102,169,1,0,0,0,1103,1104,7,10,0,0,1104,171,1,0,0,
        0,1105,1106,5,68,0,0,1106,1107,5,78,0,0,1107,1112,3,102,51,0,1108,
        1109,5,80,0,0,1109,1111,3,102,51,0,1110,1108,1,0,0,0,1111,1114,1,
        0,0,0,1112,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1115,1,0,0,0,1114,
        1112,1,0,0,0,1115,1116,5,79,0,0,1116,1125,1,0,0,0,1117,1118,5,68,
        0,0,1118,1119,5,78,0,0,1119,1120,3,102,51,0,1120,1121,5,3,0,0,1121,
        1122,3,102,51,0,1122,1123,5,79,0,0,1123,1125,1,0,0,0,1124,1105,1,
        0,0,0,1124,1117,1,0,0,0,1125,173,1,0,0,0,1126,1130,5,62,0,0,1127,
        1129,9,0,0,0,1128,1127,1,0,0,0,1129,1132,1,0,0,0,1130,1131,1,0,0,
        0,1130,1128,1,0,0,0,1131,1133,1,0,0,0,1132,1130,1,0,0,0,1133,1134,
        5,62,0,0,1134,175,1,0,0,0,136,179,187,195,198,212,222,228,234,238,
        246,252,257,260,267,272,275,278,283,291,296,300,315,322,328,333,
        341,347,353,360,366,369,372,379,382,385,388,397,401,404,407,412,
        415,426,440,444,447,453,456,468,473,487,492,501,506,516,529,534,
        541,544,550,554,583,588,602,608,618,623,627,632,638,640,655,666,
        669,673,679,693,720,725,732,736,761,789,791,796,808,811,817,820,
        826,829,833,841,861,865,887,898,908,910,913,924,929,935,938,944,
        950,954,956,958,965,970,973,980,987,997,999,1003,1005,1013,1018,
        1021,1026,1034,1042,1051,1061,1066,1070,1074,1080,1087,1089,1101,
        1112,1124,1130
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'impl'", "'{'", 
                     "'}'", "'extern'", "'static'", "'mut'", "'fn'", "'->'", 
                     "'pub'", "'unsafe'", "'struct'", "'()'", "'&'", "'const'", 
                     "'union'", "'*'", "'i32'", "'String'", "'bool'", "'u8'", 
                     "'<'", "'break'", "'continue'", "'.'", "'let'", "'ref'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'match'", "'while'", "'for'", "'in'", "'if'", 
                     "'else if'", "'else'", "'return'", "'loop'", "'as'", 
                     "'..'", "'=='", "'!='", "'||'", "'&&'", "'>>'", "'>='", 
                     "'<='", "'/'", "'%'", "'+'", "'-'", "'|'", "'=>'", 
                     "'\"'", "'true'", "'false'", "'None'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'::'", "'!'", 
                     "'>'", "'#'", "'['", "']'", "','", "'('", "')'", "'_'", 
                     "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "TRUE", "FALSE", 
                      "NONE", "Binary", "STRING_LITERAL", "Identifier", 
                      "Number", "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_topLevelDef = 2
    RULE_typeAlias = 3
    RULE_interfaceDef = 4
    RULE_externBlock = 5
    RULE_externItem = 6
    RULE_externParams = 7
    RULE_externParam = 8
    RULE_visibility = 9
    RULE_unsafeModifier = 10
    RULE_externAbi = 11
    RULE_attributes = 12
    RULE_innerAttribute = 13
    RULE_attribute = 14
    RULE_attrArgs = 15
    RULE_attrArg = 16
    RULE_attrValue = 17
    RULE_structDef = 18
    RULE_structField = 19
    RULE_structLiteral = 20
    RULE_functionDef = 21
    RULE_paramList = 22
    RULE_param = 23
    RULE_constDef = 24
    RULE_unionDef = 25
    RULE_unionField = 26
    RULE_unsafeDef = 27
    RULE_type = 28
    RULE_pointerType = 29
    RULE_basicType = 30
    RULE_typePath = 31
    RULE_block = 32
    RULE_unsafeBlock = 33
    RULE_statement = 34
    RULE_callStmt = 35
    RULE_letStmt = 36
    RULE_varDef = 37
    RULE_compoundOp = 38
    RULE_compoundAssignment = 39
    RULE_matchStmt = 40
    RULE_whileStmt = 41
    RULE_initializer = 42
    RULE_staticVarDecl = 43
    RULE_initBlock = 44
    RULE_assignStmt = 45
    RULE_forStmt = 46
    RULE_ifStmt = 47
    RULE_exprStmt = 48
    RULE_returnStmt = 49
    RULE_loopStmt = 50
    RULE_expression = 51
    RULE_arrayDeclaration = 52
    RULE_typePathExpression = 53
    RULE_patternPrefix = 54
    RULE_pattern = 55
    RULE_castExpressionPostFix = 56
    RULE_compoundOps = 57
    RULE_rangeSymbol = 58
    RULE_conditionalOps = 59
    RULE_booleanOps = 60
    RULE_binaryOps = 61
    RULE_structFieldDec = 62
    RULE_mutableExpression = 63
    RULE_unaryOpes = 64
    RULE_parenExpression = 65
    RULE_referenceExpression = 66
    RULE_dereferenceExpression = 67
    RULE_expressionBlock = 68
    RULE_borrowExpression = 69
    RULE_primaryExpression = 70
    RULE_fieldAccessPostFix = 71
    RULE_callExpressionPostFix = 72
    RULE_functionCallArgs = 73
    RULE_postfixExpression = 74
    RULE_qualifiedFunctionCall = 75
    RULE_macroCall = 76
    RULE_macroArgs = 77
    RULE_macroInner = 78
    RULE_genericArgs = 79
    RULE_structLiteralField = 80
    RULE_matchArm = 81
    RULE_matchPattern = 82
    RULE_argumentList = 83
    RULE_literal = 84
    RULE_booleanLiteral = 85
    RULE_arrayLiteral = 86
    RULE_stringLiteral = 87

    ruleNames =  [ "program", "topLevelItem", "topLevelDef", "typeAlias", 
                   "interfaceDef", "externBlock", "externItem", "externParams", 
                   "externParam", "visibility", "unsafeModifier", "externAbi", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "structLiteral", 
                   "functionDef", "paramList", "param", "constDef", "unionDef", 
                   "unionField", "unsafeDef", "type", "pointerType", "basicType", 
                   "typePath", "block", "unsafeBlock", "statement", "callStmt", 
                   "letStmt", "varDef", "compoundOp", "compoundAssignment", 
                   "matchStmt", "whileStmt", "initializer", "staticVarDecl", 
                   "initBlock", "assignStmt", "forStmt", "ifStmt", "exprStmt", 
                   "returnStmt", "loopStmt", "expression", "arrayDeclaration", 
                   "typePathExpression", "patternPrefix", "pattern", "castExpressionPostFix", 
                   "compoundOps", "rangeSymbol", "conditionalOps", "booleanOps", 
                   "binaryOps", "structFieldDec", "mutableExpression", "unaryOpes", 
                   "parenExpression", "referenceExpression", "dereferenceExpression", 
                   "expressionBlock", "borrowExpression", "primaryExpression", 
                   "fieldAccessPostFix", "callExpressionPostFix", "functionCallArgs", 
                   "postfixExpression", "qualifiedFunctionCall", "macroCall", 
                   "macroArgs", "macroInner", "genericArgs", "structLiteralField", 
                   "matchArm", "matchPattern", "argumentList", "literal", 
                   "booleanLiteral", "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    TRUE=63
    FALSE=64
    NONE=65
    Binary=66
    STRING_LITERAL=67
    Identifier=68
    Number=69
    SignedNumber=70
    BYTE_STRING_LITERAL=71
    HexNumber=72
    CHAR_LITERAL=73
    DOUBLE_COLON=74
    EXCL=75
    GT=76
    POUND=77
    LBRACK=78
    RBRACK=79
    COMMA=80
    LPAREN=81
    RPAREN=82
    UNDERSCORE=83
    COLON=84
    ELLIPSIS=85
    WS=86
    COMMENT=87

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 423314) != 0) or _la==77:
                self.state = 176
                self.topLevelItem()
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 183
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 184
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 185
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 186
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelDef" ):
                return visitor.visitTopLevelDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_topLevelDef)
        try:
            self.state = 195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 189
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 190
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 191
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 192
                self.constDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 193
                self.unionDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 194
                self.unsafeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 197
                self.visibility()


            self.state = 200
            self.match(RustParser.T__0)
            self.state = 201
            self.match(RustParser.Identifier)
            self.state = 202
            self.match(RustParser.T__1)
            self.state = 203
            self.type_()
            self.state = 204
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDef" ):
                return visitor.visitInterfaceDef(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(RustParser.T__3)
            self.state = 207
            self.match(RustParser.Identifier)
            self.state = 208
            self.match(RustParser.T__4)
            self.state = 210 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 209
                self.functionDef()
                self.state = 212 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 13440) != 0)):
                    break

            self.state = 214
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(RustParser.T__6)
            self.state = 217
            self.match(RustParser.STRING_LITERAL)
            self.state = 218
            self.match(RustParser.T__4)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5378) != 0):
                self.state = 219
                self.externItem()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 227
                    self.visibility()


                self.state = 230
                self.match(RustParser.T__0)
                self.state = 231
                self.match(RustParser.Identifier)
                self.state = 232
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 233
                    self.visibility()


                self.state = 236
                self.match(RustParser.T__7)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 237
                    self.match(RustParser.T__8)


                self.state = 240
                self.match(RustParser.Identifier)
                self.state = 241
                self.match(RustParser.COLON)
                self.state = 242
                self.type_()
                self.state = 243
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 245
                    self.visibility()


                self.state = 248
                self.match(RustParser.T__9)
                self.state = 249
                self.match(RustParser.Identifier)
                self.state = 250
                self.match(RustParser.LPAREN)
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 229377) != 0):
                    self.state = 251
                    self.externParams()


                self.state = 254
                self.match(RustParser.RPAREN)
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 255
                    self.match(RustParser.T__10)
                    self.state = 256
                    self.type_()


                self.state = 259
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 83, 84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 262
                self.externParam()
                self.state = 267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 263
                        self.match(RustParser.COMMA)
                        self.state = 264
                        self.externParam() 
                    self.state = 269
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 270
                    self.match(RustParser.COMMA)
                    self.state = 271
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 274
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68 or _la==83:
                self.state = 277
                _la = self._input.LA(1)
                if not(_la==68 or _la==83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 280
            self.match(RustParser.COLON)
            self.state = 283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 16, 19, 20, 21, 22, 23, 68, 74, 78]:
                self.state = 281
                self.type_()
                pass
            elif token in [85]:
                self.state = 282
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(RustParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(RustParser.T__6)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 290
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 293
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 296 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(RustParser.POUND)

            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 299
                self.match(RustParser.EXCL)


            self.state = 302
            self.match(RustParser.LBRACK)
            self.state = 303
            self.attribute()
            self.state = 304
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_attribute)
        try:
            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 306
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 307
                self.match(RustParser.Identifier)
                self.state = 308
                self.match(RustParser.T__1)
                self.state = 309
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 310
                self.match(RustParser.Identifier)
                self.state = 311
                self.match(RustParser.LPAREN)
                self.state = 312
                self.attrArgs()
                self.state = 313
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.attrArg()
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80:
                self.state = 318
                self.match(RustParser.COMMA)
                self.state = 319
                self.attrArg()
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(RustParser.Identifier)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 326
                self.match(RustParser.T__1)
                self.state = 327
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 332
                self.visibility()


            self.state = 335
            self.match(RustParser.T__13)
            self.state = 336
            self.match(RustParser.Identifier)
            self.state = 337
            self.match(RustParser.T__4)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12 or _la==68:
                self.state = 338
                self.structField()
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 344
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 346
                self.visibility()


            self.state = 349
            self.match(RustParser.Identifier)
            self.state = 350
            self.match(RustParser.COLON)
            self.state = 351
            self.type_()
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 352
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteral" ):
                return visitor.visitStructLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(RustParser.Identifier)
            self.state = 356
            self.match(RustParser.T__4)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 357
                self.structLiteralField()
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 363
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 365
                self.visibility()


            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 368
                self.unsafeModifier()


            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 371
                self.externAbi()


            self.state = 374
            self.match(RustParser.T__9)
            self.state = 375
            self.match(RustParser.Identifier)
            self.state = 382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 376
                self.match(RustParser.T__14)
                pass
            elif token in [81]:
                self.state = 377
                self.match(RustParser.LPAREN)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & 576460752303423617) != 0):
                    self.state = 378
                    self.paramList()


                self.state = 381
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 384
                self.match(RustParser.T__10)


            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & -8637904085296610829) != 0):
                self.state = 387
                self.type_()


            self.state = 390
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.param()
            self.state = 397
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 393
                    self.match(RustParser.COMMA)
                    self.state = 394
                    self.param() 
                self.state = 399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 400
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 403
                self.match(RustParser.T__15)


            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 406
                self.match(RustParser.T__8)


            self.state = 409
            self.match(RustParser.Identifier)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 410
                self.match(RustParser.COLON)
                self.state = 411
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 414
                self.visibility()


            self.state = 417
            self.match(RustParser.T__16)
            self.state = 418
            self.match(RustParser.Identifier)
            self.state = 419
            self.match(RustParser.COLON)
            self.state = 420
            self.type_()
            self.state = 421
            self.match(RustParser.T__1)
            self.state = 422
            self.expression(0)
            self.state = 423
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 425
                self.visibility()


            self.state = 428
            self.match(RustParser.T__17)
            self.state = 429
            self.match(RustParser.Identifier)
            self.state = 444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.state = 430
                self.match(RustParser.COLON)
                self.state = 431
                self.type_()
                self.state = 432
                self.match(RustParser.T__1)
                self.state = 433
                self.expression(0)
                self.state = 434
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 436
                self.match(RustParser.T__4)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==12 or _la==68:
                    self.state = 437
                    self.unionField()
                    self.state = 442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 443
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 446
                self.visibility()


            self.state = 449
            self.match(RustParser.Identifier)
            self.state = 450
            self.match(RustParser.COLON)
            self.state = 451
            self.type_()
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 452
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 455
                self.visibility()


            self.state = 458
            self.match(RustParser.T__12)
            self.state = 459
            self.match(RustParser.Identifier)
            self.state = 460
            self.match(RustParser.COLON)
            self.state = 461
            self.type_()
            self.state = 462
            self.match(RustParser.T__1)
            self.state = 463
            self.expression(0)
            self.state = 464
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_type)
        try:
            self.state = 468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 16, 20, 21, 22, 23, 68, 74, 78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 466
                self.basicType()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(RustParser.T__18)
            self.state = 471
            _la = self._input.LA(1)
            if not(_la==9 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 472
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 475
                self.match(RustParser.T__19)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.match(RustParser.T__20)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 477
                self.match(RustParser.T__21)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 478
                self.match(RustParser.T__22)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 479
                self.match(RustParser.T__14)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 480
                self.typePath()
                self.state = 492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 481
                    self.match(RustParser.T__23)
                    self.state = 482
                    self.type_()
                    self.state = 487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==80:
                        self.state = 483
                        self.match(RustParser.COMMA)
                        self.state = 484
                        self.type_()
                        self.state = 489
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 490
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 494
                self.match(RustParser.Identifier)
                self.state = 506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 495
                    self.match(RustParser.T__23)
                    self.state = 496
                    self.type_()
                    self.state = 501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==80:
                        self.state = 497
                        self.match(RustParser.COMMA)
                        self.state = 498
                        self.type_()
                        self.state = 503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 504
                    self.match(RustParser.GT)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 508
                self.match(RustParser.Identifier)
                self.state = 509
                self.match(RustParser.T__23)
                self.state = 510
                self.type_()
                self.state = 511
                self.match(RustParser.GT)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 513
                self.match(RustParser.T__15)
                self.state = 514
                self.type_()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68 or _la==74:
                    self.state = 515
                    self.typePath()


                self.state = 518
                self.match(RustParser.LBRACK)
                self.state = 519
                self.type_()
                self.state = 520
                self.match(RustParser.T__2)
                self.state = 521
                self.match(RustParser.Number)
                self.state = 522
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 524
                self.match(RustParser.LBRACK)
                self.state = 525
                self.type_()
                self.state = 526
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 528
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.match(RustParser.Identifier)
                self.state = 532
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 533
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 536
                self.match(RustParser.Identifier)
                self.state = 541
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 537
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 538
                        self.match(RustParser.Identifier) 
                    self.state = 543
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(RustParser.T__4)
            self.state = 550
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 547
                    self.statement() 
                self.state = 552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==68:
                self.state = 553
                self.returnStmt()


            self.state = 556
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(RustParser.T__12)
            self.state = 559
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def callStmt(self):
            return self.getTypedRuleContext(RustParser.CallStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 561
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.callStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 563
                self.structLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 564
                self.staticVarDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 565
                self.assignStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 566
                self.compoundAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 567
                self.forStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 568
                self.ifStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 569
                self.exprStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 570
                self.whileStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 571
                self.returnStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 572
                self.loopStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 573
                self.match(RustParser.T__24)
                self.state = 574
                self.match(RustParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 575
                self.match(RustParser.T__25)
                self.state = 576
                self.match(RustParser.T__2)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 577
                self.matchStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 578
                self.qualifiedFunctionCall()
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 579
                    self.match(RustParser.T__26)
                    self.state = 580
                    self.qualifiedFunctionCall()
                    self.state = 585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 586
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStmt" ):
                listener.enterCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStmt" ):
                listener.exitCallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStmt" ):
                return visitor.visitCallStmt(self)
            else:
                return visitor.visitChildren(self)




    def callStmt(self):

        localctx = RustParser.CallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_callStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.expression(0)
            self.state = 591
            self.callExpressionPostFix()
            self.state = 592
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.match(RustParser.T__27)
                self.state = 595
                self.varDef()
                self.state = 596
                self.match(RustParser.T__1)
                self.state = 597
                self.expression(0)
                self.state = 598
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self.match(RustParser.T__27)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 601
                    self.match(RustParser.T__8)


                self.state = 604
                self.match(RustParser.Identifier)
                self.state = 605
                self.match(RustParser.COLON)
                self.state = 608
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 606
                    self.type_()
                    pass

                elif la_ == 2:
                    self.state = 607
                    self.match(RustParser.Identifier)
                    pass


                self.state = 610
                self.match(RustParser.T__1)
                self.state = 611
                self.initializer()
                self.state = 612
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 614
                self.match(RustParser.T__27)
                self.state = 615
                self.varDef()
                self.state = 616
                self.initBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 620
                self.match(RustParser.Identifier)
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 621
                    self.match(RustParser.COLON)
                    self.state = 622
                    self.type_()


                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.match(RustParser.T__28)
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 626
                    self.match(RustParser.T__8)


                self.state = 629
                self.match(RustParser.Identifier)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 630
                    self.match(RustParser.COLON)
                    self.state = 631
                    self.type_()


                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 634
                self.match(RustParser.T__8)
                self.state = 635
                self.match(RustParser.Identifier)
                self.state = 638
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 636
                    _la = self._input.LA(1)
                    if not(_la==2 or _la==84):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 637
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 273804165120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.expression(0)
            self.state = 645
            self.compoundOp()
            self.state = 646
            self.expression(0)
            self.state = 647
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(RustParser.T__37)
            self.state = 650
            self.expression(0)
            self.state = 651
            self.match(RustParser.T__4)
            self.state = 653 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 652
                self.matchArm()
                self.state = 655 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 32771) != 0)):
                    break

            self.state = 657
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(RustParser.T__38)
            self.state = 660
            self.expression(0)
            self.state = 661
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_initializer)
        try:
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 663
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 664
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 665
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 668
                self.visibility()


            self.state = 671
            self.match(RustParser.T__7)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 672
                self.match(RustParser.T__8)


            self.state = 675
            self.match(RustParser.Identifier)
            self.state = 676
            self.match(RustParser.COLON)
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 677
                self.type_()
                pass

            elif la_ == 2:
                self.state = 678
                self.match(RustParser.Identifier)
                pass


            self.state = 681
            self.match(RustParser.T__1)
            self.state = 682
            self.initializer()
            self.state = 683
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(RustParser.T__4)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 686
                self.match(RustParser.Identifier)
                self.state = 687
                self.match(RustParser.COLON)
                self.state = 688
                self.expression(0)
                self.state = 689
                self.match(RustParser.COMMA)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 696
            self.match(RustParser.T__5)
            self.state = 697
            self.match(RustParser.T__2)
            self.state = 698
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.expression(0)
            self.state = 701
            self.match(RustParser.T__1)
            self.state = 702
            self.expression(0)
            self.state = 703
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(RustParser.T__39)
            self.state = 706
            self.match(RustParser.Identifier)
            self.state = 707
            self.match(RustParser.T__40)
            self.state = 708
            self.expression(0)
            self.state = 709
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(RustParser.T__41)
            self.state = 712
            self.expression(0)
            self.state = 713
            self.block()
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 714
                self.match(RustParser.T__42)
                self.state = 715
                self.expression(0)
                self.state = 716
                self.block()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 723
                self.match(RustParser.T__43)
                self.state = 724
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.expression(0)
            self.state = 728
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.match(RustParser.T__44)
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 134143) != 0):
                    self.state = 731
                    self.expression(0)


                self.state = 734
                self.match(RustParser.T__2)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(RustParser.T__45)
            self.state = 739
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def typePathExpression(self):
            return self.getTypedRuleContext(RustParser.TypePathExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(RustParser.ArrayDeclarationContext,0)


        def rangeSymbol(self):
            return self.getTypedRuleContext(RustParser.RangeSymbolContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 742
                self.mutableExpression()
                self.state = 743
                self.expression(19)
                pass

            elif la_ == 2:
                self.state = 745
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.state = 746
                self.dereferenceExpression()
                pass

            elif la_ == 4:
                self.state = 747
                self.typePathExpression()
                self.state = 748
                self.expression(16)
                pass

            elif la_ == 5:
                self.state = 750
                self.parenExpression()
                pass

            elif la_ == 6:
                self.state = 751
                self.structFieldDec()
                pass

            elif la_ == 7:
                self.state = 752
                self.unaryOpes()
                self.state = 753
                self.expression(13)
                pass

            elif la_ == 8:
                self.state = 755
                self.borrowExpression()
                pass

            elif la_ == 9:
                self.state = 756
                self.expressionBlock()
                pass

            elif la_ == 10:
                self.state = 757
                self.patternPrefix()
                self.state = 758
                self.expression(2)
                pass

            elif la_ == 11:
                self.state = 760
                self.arrayDeclaration()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 791
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 789
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 763
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 764
                        self.rangeSymbol()
                        self.state = 765
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 767
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 768
                        self.booleanOps()
                        self.state = 769
                        self.expression(10)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 771
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 772
                        self.binaryOps()
                        self.state = 773
                        self.expression(9)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 775
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 776
                        self.conditionalOps()
                        self.state = 777
                        self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 779
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 780
                        self.compoundOps()
                        self.state = 781
                        self.expression(7)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 783
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 784
                        self.fieldAccessPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 785
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 786
                        self.castExpressionPostFix()
                        pass

                    elif la_ == 8:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 787
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 788
                        self.callExpressionPostFix()
                        pass

             
                self.state = 793
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = RustParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(RustParser.Identifier)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 795
                self.match(RustParser.EXCL)


            self.state = 798
            self.match(RustParser.LBRACK)
            self.state = 799
            self.match(RustParser.Number)
            self.state = 800
            self.match(RustParser.T__2)
            self.state = 801
            self.expression(0)
            self.state = 802
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathExpression" ):
                listener.enterTypePathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathExpression" ):
                listener.exitTypePathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePathExpression" ):
                return visitor.visitTypePathExpression(self)
            else:
                return visitor.visitChildren(self)




    def typePathExpression(self):

        localctx = RustParser.TypePathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_typePathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 804
                    self.match(RustParser.Identifier)
                    self.state = 805
                    self.match(RustParser.DOUBLE_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 808 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPrefix" ):
                return visitor.visitPatternPrefix(self)
            else:
                return visitor.visitChildren(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 810
                self.match(RustParser.T__27)


            self.state = 813
            self.pattern()
            self.state = 814
            self.match(RustParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 816
                    self.match(RustParser.T__28)


                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 819
                    self.match(RustParser.T__8)


                self.state = 822
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.match(RustParser.Identifier)
                self.state = 824
                self.match(RustParser.LPAREN)
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 825
                    self.match(RustParser.T__28)


                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 828
                    self.match(RustParser.T__8)


                self.state = 831
                self.match(RustParser.Identifier)
                self.state = 832
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpressionPostFix" ):
                return visitor.visitCastExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(RustParser.T__46)
            self.state = 836
            self.type_()
            self.state = 841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 837
                    self.match(RustParser.T__46)
                    self.state = 838
                    self.type_() 
                self.state = 843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOps" ):
                return visitor.visitCompoundOps(self)
            else:
                return visitor.visitChildren(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 273804165120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeSymbol" ):
                listener.enterRangeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeSymbol" ):
                listener.exitRangeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeSymbol" ):
                return visitor.visitRangeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def rangeSymbol(self):

        localctx = RustParser.RangeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_rangeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(RustParser.T__47)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalOps" ):
                return visitor.visitConditionalOps(self)
            else:
                return visitor.visitChildren(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            _la = self._input.LA(1)
            if not(((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & 4503600130686977) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOps" ):
                return visitor.visitBooleanOps(self)
            else:
                return visitor.visitChildren(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 63050394783252480) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOps" ):
                return visitor.visitBinaryOps(self)
            else:
                return visitor.visitChildren(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1080863910569443328) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFieldDec" ):
                return visitor.visitStructFieldDec(self)
            else:
                return visitor.visitChildren(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(RustParser.Identifier)
            self.state = 855
            self.match(RustParser.T__4)
            self.state = 856
            self.structLiteralField()
            self.state = 861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 857
                    self.match(RustParser.COMMA)
                    self.state = 858
                    self.structLiteralField() 
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 864
                self.match(RustParser.COMMA)


            self.state = 867
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableExpression" ):
                return visitor.visitMutableExpression(self)
            else:
                return visitor.visitChildren(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(RustParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOpes" ):
                return visitor.visitUnaryOpes(self)
            else:
                return visitor.visitChildren(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 131075) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(RustParser.LPAREN)
            self.state = 874
            self.expression(0)
            self.state = 875
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceExpression" ):
                listener.enterReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceExpression" ):
                listener.exitReferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceExpression" ):
                return visitor.visitReferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def referenceExpression(self):

        localctx = RustParser.ReferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_referenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(RustParser.T__15)
            self.state = 878
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(RustParser.T__18)
            self.state = 881
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(RustParser.T__4)
            self.state = 887
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 884
                    self.statement() 
                self.state = 889
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 890
            self.expression(0)
            self.state = 891
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(RustParser.T__15)
            self.state = 894
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_primaryExpression)
        try:
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldAccessPostFix" ):
                return visitor.visitFieldAccessPostFix(self)
            else:
                return visitor.visitChildren(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_fieldAccessPostFix)
        try:
            self.state = 910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.match(RustParser.LBRACK)
                self.state = 901
                self.primaryExpression()
                self.state = 902
                self.match(RustParser.RBRACK)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 906 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 904
                        self.match(RustParser.T__26)
                        self.state = 905
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 908 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallArgs(self):
            return self.getTypedRuleContext(RustParser.FunctionCallArgsContext,0)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_callExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpressionPostFix" ):
                listener.enterCallExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpressionPostFix" ):
                listener.exitCallExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpressionPostFix" ):
                return visitor.visitCallExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def callExpressionPostFix(self):

        localctx = RustParser.CallExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_callExpressionPostFix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 912
                self.match(RustParser.EXCL)


            self.state = 915
            self.functionCallArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_functionCallArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArgs" ):
                listener.enterFunctionCallArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArgs" ):
                listener.exitFunctionCallArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArgs" ):
                return visitor.visitFunctionCallArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArgs(self):

        localctx = RustParser.FunctionCallArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_functionCallArgs)
        self._la = 0 # Token type
        try:
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.match(RustParser.T__14)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.match(RustParser.LPAREN)
                self.state = 919
                self.expression(0)
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 920
                    self.match(RustParser.COMMA)
                    self.state = 921
                    self.expression(0)
                    self.state = 926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 927
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.primaryExpression()
            self.state = 956 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 938
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [15]:
                        self.state = 932
                        self.match(RustParser.T__14)
                        pass
                    elif token in [81]:
                        self.state = 933
                        self.match(RustParser.LPAREN)
                        self.state = 935
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 135167) != 0):
                            self.state = 934
                            self.argumentList()


                        self.state = 937
                        self.match(RustParser.RPAREN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 942 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 940
                            self.match(RustParser.T__26)
                            self.state = 941
                            self.match(RustParser.Identifier)

                        else:
                            raise NoViableAltException(self)
                        self.state = 944 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                    pass

                elif la_ == 3:
                    self.state = 946
                    self.match(RustParser.T__26)
                    self.state = 947
                    self.match(RustParser.Identifier)
                    self.state = 954
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [81]:
                        self.state = 948
                        self.match(RustParser.LPAREN)
                        self.state = 950
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 135167) != 0):
                            self.state = 949
                            self.argumentList()


                        self.state = 952
                        self.match(RustParser.RPAREN)
                        pass
                    elif token in [15]:
                        self.state = 953
                        self.match(RustParser.T__14)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 958 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==15 or _la==27 or _la==81):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.STRING_LITERAL)
            else:
                return self.getToken(RustParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 1005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.match(RustParser.DOUBLE_COLON)
                self.state = 961
                self.typePath()
                self.state = 962
                self.match(RustParser.Identifier)
                self.state = 963
                self.match(RustParser.DOUBLE_COLON)
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 964
                    self.genericArgs()


                self.state = 973
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 967
                    self.match(RustParser.T__14)
                    pass
                elif token in [81]:
                    self.state = 968
                    self.match(RustParser.LPAREN)
                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 135167) != 0):
                        self.state = 969
                        self.argumentList()


                    self.state = 972
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.match(RustParser.Identifier)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 976
                    self.match(RustParser.T__26)
                    self.state = 977
                    self.match(RustParser.Identifier)
                    self.state = 982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==74:
                    self.state = 983
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 984
                    self.match(RustParser.Identifier)
                    self.state = 989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1003
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 990
                    self.match(RustParser.T__14)
                    pass
                elif token in [81]:
                    self.state = 991
                    self.match(RustParser.LPAREN)
                    self.state = 999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 135167) != 0):
                        self.state = 997
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                        if la_ == 1:
                            self.state = 992
                            self.match(RustParser.Identifier)
                            self.state = 993
                            self.match(RustParser.LPAREN)
                            self.state = 994
                            self.match(RustParser.STRING_LITERAL)
                            self.state = 995
                            self.match(RustParser.RPAREN)
                            pass

                        elif la_ == 2:
                            self.state = 996
                            self.argumentList()
                            pass


                        self.state = 1001
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1002
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(RustParser.Identifier)
            self.state = 1008
            self.match(RustParser.EXCL)
            self.state = 1009
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 1021
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1011
                self.match(RustParser.LBRACK)
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 134143) != 0):
                    self.state = 1012
                    self.macroInner()


                self.state = 1015
                self.match(RustParser.RBRACK)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.match(RustParser.LPAREN)
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 134143) != 0):
                    self.state = 1017
                    self.macroInner()


                self.state = 1020
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.expression(0)
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 1024
                self.match(RustParser.T__2)
                self.state = 1025
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(RustParser.T__23)
            self.state = 1029
            self.type_()
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80:
                self.state = 1030
                self.match(RustParser.COMMA)
                self.state = 1031
                self.type_()
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1037
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(RustParser.Identifier)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 1040
                self.match(RustParser.COLON)
                self.state = 1041
                self.expression(0)


            self.state = 1044
            self.match(RustParser.COMMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.matchPattern()
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 1047
                self.match(RustParser.T__59)
                self.state = 1048
                self.matchPattern()
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1054
            self.match(RustParser.T__60)
            self.state = 1055
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 1089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1059
                    self.qualifiedFunctionCall()
                    pass

                elif la_ == 2:
                    self.state = 1060
                    self.expression(0)
                    pass


                self.state = 1070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1063
                        self.match(RustParser.COMMA)
                        self.state = 1066
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                        if la_ == 1:
                            self.state = 1064
                            self.qualifiedFunctionCall()
                            pass

                        elif la_ == 2:
                            self.state = 1065
                            self.expression(0)
                            pass

                 
                    self.state = 1072
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 1073
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1076
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 1077
                    self.match(RustParser.Identifier)
                    self.state = 1080 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==74):
                        break

                self.state = 1087
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 1082
                    self.match(RustParser.T__14)
                    pass
                elif token in [81]:
                    self.state = 1083
                    self.match(RustParser.LPAREN)
                    self.state = 1084
                    self.argumentList()
                    self.state = 1085
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_literal)
        try:
            self.state = 1101
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.arrayLiteral()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.match(RustParser.HexNumber)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1093
                self.match(RustParser.Number)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1094
                self.match(RustParser.SignedNumber)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1095
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1096
                self.match(RustParser.Binary)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1097
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [63, 64]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1098
                self.booleanLiteral()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1099
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1100
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            _la = self._input.LA(1)
            if not(_la==63 or _la==64):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.match(RustParser.Identifier)
                self.state = 1106
                self.match(RustParser.LBRACK)
                self.state = 1107
                self.expression(0)
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 1108
                    self.match(RustParser.COMMA)
                    self.state = 1109
                    self.expression(0)
                    self.state = 1114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1115
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1117
                self.match(RustParser.Identifier)
                self.state = 1118
                self.match(RustParser.LBRACK)
                self.state = 1119
                self.expression(0)
                self.state = 1120
                self.match(RustParser.T__2)
                self.state = 1121
                self.expression(0)
                self.state = 1122
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.match(RustParser.T__61)
            self.state = 1130
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1127
                    self.matchWildcard() 
                self.state = 1132
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 1133
            self.match(RustParser.T__61)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         




