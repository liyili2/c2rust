# Generated from Rust.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,79,800,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,1,0,5,0,126,8,0,10,0,12,0,129,9,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,140,8,1,1,2,3,2,143,8,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,155,8,3,10,3,12,3,158,9,3,
        1,3,1,3,1,4,3,4,163,8,4,1,4,1,4,1,4,1,4,3,4,169,8,4,1,4,1,4,3,4,
        173,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,181,8,4,1,4,1,4,1,4,1,4,3,4,
        187,8,4,1,4,1,4,1,4,3,4,192,8,4,1,4,3,4,195,8,4,1,5,1,5,1,5,5,5,
        200,8,5,10,5,12,5,203,9,5,1,5,1,5,3,5,207,8,5,1,5,3,5,210,8,5,1,
        6,3,6,213,8,6,1,6,1,6,1,6,3,6,218,8,6,1,7,1,7,1,8,4,8,223,8,8,11,
        8,12,8,224,1,9,1,9,3,9,229,8,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,3,10,240,8,10,1,11,1,11,1,11,5,11,245,8,11,10,11,12,11,248,
        9,11,1,12,1,12,1,13,3,13,253,8,13,1,13,1,13,1,13,1,13,5,13,259,8,
        13,10,13,12,13,262,9,13,1,13,1,13,1,14,3,14,267,8,14,1,14,1,14,1,
        14,1,14,3,14,273,8,14,1,15,3,15,276,8,15,1,15,3,15,279,8,15,1,15,
        3,15,282,8,15,1,15,1,15,1,15,1,15,3,15,288,8,15,1,15,1,15,3,15,292,
        8,15,1,15,3,15,295,8,15,1,15,1,15,1,16,1,16,1,17,1,17,3,17,303,8,
        17,1,18,1,18,1,18,5,18,308,8,18,10,18,12,18,311,9,18,1,18,3,18,314,
        8,18,1,19,3,19,317,8,19,1,19,1,19,1,19,1,19,1,20,3,20,324,8,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,3,21,335,8,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,347,8,21,10,21,12,
        21,350,9,21,1,21,3,21,353,8,21,1,22,3,22,356,8,22,1,22,1,22,1,22,
        1,22,3,22,362,8,22,1,23,3,23,365,8,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,3,25,380,8,25,1,26,3,26,383,
        8,26,1,26,1,26,1,26,5,26,388,8,26,10,26,12,26,391,9,26,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,406,
        8,28,10,28,12,28,409,9,28,1,28,1,28,3,28,413,8,28,1,28,1,28,1,28,
        1,28,1,28,5,28,420,8,28,10,28,12,28,423,9,28,1,28,1,28,3,28,427,
        8,28,1,28,1,28,1,28,3,28,432,8,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,3,28,446,8,28,1,29,1,29,5,29,450,8,
        29,10,29,12,29,453,9,29,1,29,3,29,456,8,29,1,29,1,29,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,4,30,483,8,30,11,30,12,30,
        484,1,30,1,30,3,30,489,8,30,1,31,1,31,1,31,1,31,1,32,3,32,496,8,
        32,1,32,1,32,3,32,500,8,32,1,32,1,32,1,32,1,32,3,32,506,8,32,1,32,
        1,32,1,32,1,32,1,33,1,33,3,33,514,8,33,1,34,1,34,1,34,1,34,1,34,
        1,34,1,35,1,35,3,35,524,8,35,1,36,1,36,1,36,3,36,529,8,36,1,37,1,
        37,1,37,1,37,3,37,535,8,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,
        39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,553,8,40,1,41,1,
        41,1,41,1,42,1,42,1,42,1,42,1,42,3,42,563,8,42,1,43,1,43,1,43,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,588,8,44,1,44,1,44,3,44,592,
        8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,616,8,44,
        10,44,12,44,619,9,44,5,44,621,8,44,10,44,12,44,624,9,44,1,45,1,45,
        5,45,628,8,45,10,45,12,45,631,9,45,1,45,1,45,1,45,1,46,1,46,1,46,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,646,8,47,1,47,1,47,3,47,
        650,8,47,1,47,1,47,1,47,1,47,5,47,656,8,47,10,47,12,47,659,9,47,
        1,48,1,48,1,48,1,48,1,48,1,48,3,48,667,8,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,5,48,679,8,48,10,48,12,48,682,9,48,
        1,48,3,48,685,8,48,1,48,1,48,3,48,689,8,48,1,49,1,49,1,49,1,49,1,
        49,3,49,696,8,49,1,49,1,49,3,49,700,8,49,1,49,1,49,1,50,1,50,1,50,
        1,50,5,50,708,8,50,10,50,12,50,711,9,50,1,50,1,50,1,51,1,51,1,51,
        1,51,1,52,1,52,1,52,5,52,722,8,52,10,52,12,52,725,9,52,1,52,1,52,
        1,52,1,53,1,53,1,54,1,54,1,54,5,54,735,8,54,10,54,12,54,738,9,54,
        1,55,1,55,1,55,1,55,1,56,1,56,3,56,746,8,56,1,56,1,56,1,56,3,56,
        751,8,56,1,56,3,56,754,8,56,1,57,1,57,1,57,3,57,759,8,57,1,58,1,
        58,1,58,1,58,1,58,1,58,1,58,3,58,768,8,58,1,59,1,59,1,60,1,60,1,
        60,1,60,5,60,776,8,60,10,60,12,60,779,9,60,1,60,1,60,1,60,1,60,1,
        60,1,60,1,60,1,60,3,60,789,8,60,1,61,1,61,5,61,793,8,61,10,61,12,
        61,796,9,61,1,61,1,61,1,61,1,794,1,88,62,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,0,7,2,0,61,61,74,74,2,0,8,8,
        14,14,1,0,23,30,2,0,16,17,43,49,3,0,22,22,50,51,67,67,2,0,61,62,
        74,74,1,0,58,59,877,0,127,1,0,0,0,2,139,1,0,0,0,4,142,1,0,0,0,6,
        150,1,0,0,0,8,194,1,0,0,0,10,209,1,0,0,0,12,212,1,0,0,0,14,219,1,
        0,0,0,16,222,1,0,0,0,18,226,1,0,0,0,20,234,1,0,0,0,22,241,1,0,0,
        0,24,249,1,0,0,0,26,252,1,0,0,0,28,266,1,0,0,0,30,275,1,0,0,0,32,
        298,1,0,0,0,34,300,1,0,0,0,36,304,1,0,0,0,38,316,1,0,0,0,40,323,
        1,0,0,0,42,334,1,0,0,0,44,355,1,0,0,0,46,364,1,0,0,0,48,374,1,0,
        0,0,50,379,1,0,0,0,52,382,1,0,0,0,54,392,1,0,0,0,56,445,1,0,0,0,
        58,447,1,0,0,0,60,488,1,0,0,0,62,490,1,0,0,0,64,495,1,0,0,0,66,513,
        1,0,0,0,68,515,1,0,0,0,70,523,1,0,0,0,72,525,1,0,0,0,74,530,1,0,
        0,0,76,536,1,0,0,0,78,541,1,0,0,0,80,547,1,0,0,0,82,554,1,0,0,0,
        84,562,1,0,0,0,86,564,1,0,0,0,88,591,1,0,0,0,90,625,1,0,0,0,92,635,
        1,0,0,0,94,638,1,0,0,0,96,688,1,0,0,0,98,690,1,0,0,0,100,703,1,0,
        0,0,102,714,1,0,0,0,104,718,1,0,0,0,106,729,1,0,0,0,108,731,1,0,
        0,0,110,739,1,0,0,0,112,753,1,0,0,0,114,755,1,0,0,0,116,767,1,0,
        0,0,118,769,1,0,0,0,120,788,1,0,0,0,122,790,1,0,0,0,124,126,3,2,
        1,0,125,124,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,
        0,0,128,1,1,0,0,0,129,127,1,0,0,0,130,140,3,30,15,0,131,140,3,26,
        13,0,132,140,3,16,8,0,133,140,3,6,3,0,134,140,3,4,2,0,135,140,3,
        40,20,0,136,140,3,42,21,0,137,140,3,46,23,0,138,140,3,64,32,0,139,
        130,1,0,0,0,139,131,1,0,0,0,139,132,1,0,0,0,139,133,1,0,0,0,139,
        134,1,0,0,0,139,135,1,0,0,0,139,136,1,0,0,0,139,137,1,0,0,0,139,
        138,1,0,0,0,140,3,1,0,0,0,141,143,3,14,7,0,142,141,1,0,0,0,142,143,
        1,0,0,0,143,144,1,0,0,0,144,145,5,1,0,0,145,146,5,61,0,0,146,147,
        5,2,0,0,147,148,3,50,25,0,148,149,5,3,0,0,149,5,1,0,0,0,150,151,
        5,4,0,0,151,152,5,76,0,0,152,156,5,5,0,0,153,155,3,8,4,0,154,153,
        1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,
        1,0,0,0,158,156,1,0,0,0,159,160,5,6,0,0,160,7,1,0,0,0,161,163,3,
        14,7,0,162,161,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,5,
        1,0,0,165,166,5,61,0,0,166,195,5,3,0,0,167,169,3,14,7,0,168,167,
        1,0,0,0,168,169,1,0,0,0,169,170,1,0,0,0,170,172,5,7,0,0,171,173,
        5,8,0,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,
        5,61,0,0,175,176,5,75,0,0,176,177,3,50,25,0,177,178,5,3,0,0,178,
        195,1,0,0,0,179,181,3,14,7,0,180,179,1,0,0,0,180,181,1,0,0,0,181,
        182,1,0,0,0,182,183,5,9,0,0,183,184,5,61,0,0,184,186,5,72,0,0,185,
        187,3,10,5,0,186,185,1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,
        191,5,73,0,0,189,190,5,10,0,0,190,192,3,50,25,0,191,189,1,0,0,0,
        191,192,1,0,0,0,192,193,1,0,0,0,193,195,5,3,0,0,194,162,1,0,0,0,
        194,168,1,0,0,0,194,180,1,0,0,0,195,9,1,0,0,0,196,201,3,12,6,0,197,
        198,5,71,0,0,198,200,3,12,6,0,199,197,1,0,0,0,200,203,1,0,0,0,201,
        199,1,0,0,0,201,202,1,0,0,0,202,206,1,0,0,0,203,201,1,0,0,0,204,
        205,5,71,0,0,205,207,5,77,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,
        210,1,0,0,0,208,210,5,77,0,0,209,196,1,0,0,0,209,208,1,0,0,0,210,
        11,1,0,0,0,211,213,7,0,0,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,
        1,0,0,0,214,217,5,75,0,0,215,218,3,50,25,0,216,218,5,77,0,0,217,
        215,1,0,0,0,217,216,1,0,0,0,218,13,1,0,0,0,219,220,5,11,0,0,220,
        15,1,0,0,0,221,223,3,18,9,0,222,221,1,0,0,0,223,224,1,0,0,0,224,
        222,1,0,0,0,224,225,1,0,0,0,225,17,1,0,0,0,226,228,5,68,0,0,227,
        229,5,66,0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,
        231,5,69,0,0,231,232,3,20,10,0,232,233,5,70,0,0,233,19,1,0,0,0,234,
        239,5,61,0,0,235,236,5,72,0,0,236,237,3,22,11,0,237,238,5,73,0,0,
        238,240,1,0,0,0,239,235,1,0,0,0,239,240,1,0,0,0,240,21,1,0,0,0,241,
        246,3,24,12,0,242,243,5,71,0,0,243,245,3,24,12,0,244,242,1,0,0,0,
        245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,23,1,0,0,0,248,
        246,1,0,0,0,249,250,5,61,0,0,250,25,1,0,0,0,251,253,3,14,7,0,252,
        251,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,255,5,12,0,0,255,
        256,5,61,0,0,256,260,5,5,0,0,257,259,3,28,14,0,258,257,1,0,0,0,259,
        262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,263,1,0,0,0,262,
        260,1,0,0,0,263,264,5,6,0,0,264,27,1,0,0,0,265,267,3,14,7,0,266,
        265,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,5,61,0,0,269,
        270,5,75,0,0,270,272,3,50,25,0,271,273,5,71,0,0,272,271,1,0,0,0,
        272,273,1,0,0,0,273,29,1,0,0,0,274,276,3,14,7,0,275,274,1,0,0,0,
        275,276,1,0,0,0,276,278,1,0,0,0,277,279,3,32,16,0,278,277,1,0,0,
        0,278,279,1,0,0,0,279,281,1,0,0,0,280,282,3,34,17,0,281,280,1,0,
        0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,284,5,9,0,0,284,285,5,61,
        0,0,285,287,5,72,0,0,286,288,3,36,18,0,287,286,1,0,0,0,287,288,1,
        0,0,0,288,289,1,0,0,0,289,291,5,73,0,0,290,292,5,10,0,0,291,290,
        1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,295,3,50,25,0,294,293,
        1,0,0,0,294,295,1,0,0,0,295,296,1,0,0,0,296,297,3,58,29,0,297,31,
        1,0,0,0,298,299,5,13,0,0,299,33,1,0,0,0,300,302,5,4,0,0,301,303,
        5,76,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,35,1,0,0,0,304,309,
        3,38,19,0,305,306,5,71,0,0,306,308,3,38,19,0,307,305,1,0,0,0,308,
        311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,313,1,0,0,0,311,
        309,1,0,0,0,312,314,5,71,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,
        37,1,0,0,0,315,317,5,8,0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,
        1,0,0,0,318,319,5,61,0,0,319,320,5,75,0,0,320,321,3,50,25,0,321,
        39,1,0,0,0,322,324,3,14,7,0,323,322,1,0,0,0,323,324,1,0,0,0,324,
        325,1,0,0,0,325,326,5,14,0,0,326,327,5,61,0,0,327,328,5,75,0,0,328,
        329,3,50,25,0,329,330,5,2,0,0,330,331,3,88,44,0,331,332,5,3,0,0,
        332,41,1,0,0,0,333,335,3,14,7,0,334,333,1,0,0,0,334,335,1,0,0,0,
        335,336,1,0,0,0,336,337,5,15,0,0,337,352,5,61,0,0,338,339,5,75,0,
        0,339,340,3,50,25,0,340,341,5,2,0,0,341,342,3,88,44,0,342,343,5,
        3,0,0,343,353,1,0,0,0,344,348,5,5,0,0,345,347,3,44,22,0,346,345,
        1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,351,
        1,0,0,0,350,348,1,0,0,0,351,353,5,6,0,0,352,338,1,0,0,0,352,344,
        1,0,0,0,353,43,1,0,0,0,354,356,3,14,7,0,355,354,1,0,0,0,355,356,
        1,0,0,0,356,357,1,0,0,0,357,358,5,61,0,0,358,359,5,75,0,0,359,361,
        3,50,25,0,360,362,5,71,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,45,
        1,0,0,0,363,365,3,14,7,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,
        1,0,0,0,366,367,5,13,0,0,367,368,5,61,0,0,368,369,5,75,0,0,369,370,
        3,50,25,0,370,371,5,2,0,0,371,372,3,88,44,0,372,373,5,3,0,0,373,
        47,1,0,0,0,374,375,5,16,0,0,375,376,3,50,25,0,376,49,1,0,0,0,377,
        380,3,56,28,0,378,380,3,54,27,0,379,377,1,0,0,0,379,378,1,0,0,0,
        380,51,1,0,0,0,381,383,5,65,0,0,382,381,1,0,0,0,382,383,1,0,0,0,
        383,384,1,0,0,0,384,389,5,61,0,0,385,386,5,65,0,0,386,388,5,61,0,
        0,387,385,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,
        0,390,53,1,0,0,0,391,389,1,0,0,0,392,393,5,17,0,0,393,394,7,1,0,
        0,394,395,3,50,25,0,395,55,1,0,0,0,396,446,5,18,0,0,397,446,5,19,
        0,0,398,446,5,20,0,0,399,446,5,21,0,0,400,412,3,52,26,0,401,402,
        5,22,0,0,402,407,3,50,25,0,403,404,5,71,0,0,404,406,3,50,25,0,405,
        403,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,
        410,1,0,0,0,409,407,1,0,0,0,410,411,5,67,0,0,411,413,1,0,0,0,412,
        401,1,0,0,0,412,413,1,0,0,0,413,446,1,0,0,0,414,426,5,61,0,0,415,
        416,5,22,0,0,416,421,3,50,25,0,417,418,5,71,0,0,418,420,3,50,25,
        0,419,417,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,
        0,422,424,1,0,0,0,423,421,1,0,0,0,424,425,5,67,0,0,425,427,1,0,0,
        0,426,415,1,0,0,0,426,427,1,0,0,0,427,446,1,0,0,0,428,429,5,16,0,
        0,429,446,3,50,25,0,430,432,3,52,26,0,431,430,1,0,0,0,431,432,1,
        0,0,0,432,433,1,0,0,0,433,434,5,69,0,0,434,435,3,50,25,0,435,436,
        5,3,0,0,436,437,5,62,0,0,437,438,5,70,0,0,438,446,1,0,0,0,439,446,
        3,52,26,0,440,441,5,69,0,0,441,442,3,50,25,0,442,443,5,70,0,0,443,
        446,1,0,0,0,444,446,5,61,0,0,445,396,1,0,0,0,445,397,1,0,0,0,445,
        398,1,0,0,0,445,399,1,0,0,0,445,400,1,0,0,0,445,414,1,0,0,0,445,
        428,1,0,0,0,445,431,1,0,0,0,445,439,1,0,0,0,445,440,1,0,0,0,445,
        444,1,0,0,0,446,57,1,0,0,0,447,451,5,5,0,0,448,450,3,60,30,0,449,
        448,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,
        455,1,0,0,0,453,451,1,0,0,0,454,456,3,84,42,0,455,454,1,0,0,0,455,
        456,1,0,0,0,456,457,1,0,0,0,457,458,5,6,0,0,458,59,1,0,0,0,459,489,
        3,68,34,0,460,489,3,64,32,0,461,489,3,76,38,0,462,463,5,61,0,0,463,
        489,5,3,0,0,464,465,3,88,44,0,465,466,7,2,0,0,466,467,3,88,44,0,
        467,468,5,3,0,0,468,489,1,0,0,0,469,489,3,78,39,0,470,489,3,80,40,
        0,471,489,3,82,41,0,472,489,3,62,31,0,473,489,3,86,43,0,474,475,
        5,31,0,0,475,489,5,3,0,0,476,477,5,32,0,0,477,489,5,3,0,0,478,479,
        5,33,0,0,479,480,3,88,44,0,480,482,5,5,0,0,481,483,3,104,52,0,482,
        481,1,0,0,0,483,484,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,
        486,1,0,0,0,486,487,5,6,0,0,487,489,1,0,0,0,488,459,1,0,0,0,488,
        460,1,0,0,0,488,461,1,0,0,0,488,462,1,0,0,0,488,464,1,0,0,0,488,
        469,1,0,0,0,488,470,1,0,0,0,488,471,1,0,0,0,488,472,1,0,0,0,488,
        473,1,0,0,0,488,474,1,0,0,0,488,476,1,0,0,0,488,478,1,0,0,0,489,
        61,1,0,0,0,490,491,5,34,0,0,491,492,3,88,44,0,492,493,3,58,29,0,
        493,63,1,0,0,0,494,496,3,14,7,0,495,494,1,0,0,0,495,496,1,0,0,0,
        496,497,1,0,0,0,497,499,5,7,0,0,498,500,5,8,0,0,499,498,1,0,0,0,
        499,500,1,0,0,0,500,501,1,0,0,0,501,502,5,61,0,0,502,505,5,75,0,
        0,503,506,3,50,25,0,504,506,5,61,0,0,505,503,1,0,0,0,505,504,1,0,
        0,0,506,507,1,0,0,0,507,508,5,2,0,0,508,509,3,66,33,0,509,510,5,
        3,0,0,510,65,1,0,0,0,511,514,3,88,44,0,512,514,3,58,29,0,513,511,
        1,0,0,0,513,512,1,0,0,0,514,67,1,0,0,0,515,516,5,35,0,0,516,517,
        3,70,35,0,517,518,5,2,0,0,518,519,3,88,44,0,519,520,5,3,0,0,520,
        69,1,0,0,0,521,524,3,74,37,0,522,524,3,72,36,0,523,521,1,0,0,0,523,
        522,1,0,0,0,524,71,1,0,0,0,525,528,5,61,0,0,526,527,5,75,0,0,527,
        529,3,50,25,0,528,526,1,0,0,0,528,529,1,0,0,0,529,73,1,0,0,0,530,
        531,5,8,0,0,531,534,5,61,0,0,532,533,5,75,0,0,533,535,3,50,25,0,
        534,532,1,0,0,0,534,535,1,0,0,0,535,75,1,0,0,0,536,537,3,88,44,0,
        537,538,5,2,0,0,538,539,3,88,44,0,539,540,5,3,0,0,540,77,1,0,0,0,
        541,542,5,36,0,0,542,543,5,61,0,0,543,544,5,37,0,0,544,545,3,88,
        44,0,545,546,3,58,29,0,546,79,1,0,0,0,547,548,5,38,0,0,548,549,3,
        88,44,0,549,552,3,58,29,0,550,551,5,39,0,0,551,553,3,58,29,0,552,
        550,1,0,0,0,552,553,1,0,0,0,553,81,1,0,0,0,554,555,3,88,44,0,555,
        556,5,3,0,0,556,83,1,0,0,0,557,558,5,40,0,0,558,559,3,88,44,0,559,
        560,5,3,0,0,560,563,1,0,0,0,561,563,3,88,44,0,562,557,1,0,0,0,562,
        561,1,0,0,0,563,85,1,0,0,0,564,565,5,41,0,0,565,566,3,58,29,0,566,
        87,1,0,0,0,567,568,6,44,-1,0,568,592,3,94,47,0,569,592,3,116,58,
        0,570,592,3,96,48,0,571,572,5,17,0,0,572,592,5,61,0,0,573,592,3,
        110,55,0,574,592,3,92,46,0,575,576,3,52,26,0,576,577,5,65,0,0,577,
        578,5,22,0,0,578,579,3,50,25,0,579,580,5,42,0,0,580,592,1,0,0,0,
        581,582,5,66,0,0,582,592,3,88,44,8,583,584,5,61,0,0,584,585,5,66,
        0,0,585,587,5,72,0,0,586,588,3,108,54,0,587,586,1,0,0,0,587,588,
        1,0,0,0,588,589,1,0,0,0,589,592,5,73,0,0,590,592,3,90,45,0,591,567,
        1,0,0,0,591,569,1,0,0,0,591,570,1,0,0,0,591,571,1,0,0,0,591,573,
        1,0,0,0,591,574,1,0,0,0,591,575,1,0,0,0,591,581,1,0,0,0,591,583,
        1,0,0,0,591,590,1,0,0,0,592,622,1,0,0,0,593,594,10,7,0,0,594,595,
        7,3,0,0,595,621,3,88,44,8,596,597,10,6,0,0,597,598,7,4,0,0,598,621,
        3,88,44,7,599,600,10,5,0,0,600,601,5,52,0,0,601,621,3,88,44,6,602,
        603,10,4,0,0,603,604,7,2,0,0,604,621,3,88,44,5,605,606,10,9,0,0,
        606,607,5,69,0,0,607,608,3,88,44,0,608,609,5,70,0,0,609,621,1,0,
        0,0,610,611,10,2,0,0,611,612,5,53,0,0,612,617,3,50,25,0,613,614,
        5,53,0,0,614,616,3,50,25,0,615,613,1,0,0,0,616,619,1,0,0,0,617,615,
        1,0,0,0,617,618,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,620,593,
        1,0,0,0,620,596,1,0,0,0,620,599,1,0,0,0,620,602,1,0,0,0,620,605,
        1,0,0,0,620,610,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,
        1,0,0,0,623,89,1,0,0,0,624,622,1,0,0,0,625,629,5,5,0,0,626,628,3,
        60,30,0,627,626,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,
        1,0,0,0,630,632,1,0,0,0,631,629,1,0,0,0,632,633,3,88,44,0,633,634,
        5,6,0,0,634,91,1,0,0,0,635,636,5,16,0,0,636,637,3,88,44,0,637,93,
        1,0,0,0,638,657,3,96,48,0,639,640,5,54,0,0,640,656,5,61,0,0,641,
        642,5,54,0,0,642,649,5,61,0,0,643,645,5,72,0,0,644,646,3,108,54,
        0,645,644,1,0,0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,650,5,73,0,
        0,648,650,5,21,0,0,649,643,1,0,0,0,649,648,1,0,0,0,650,656,1,0,0,
        0,651,652,5,69,0,0,652,653,3,88,44,0,653,654,5,70,0,0,654,656,1,
        0,0,0,655,639,1,0,0,0,655,641,1,0,0,0,655,651,1,0,0,0,656,659,1,
        0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,95,1,0,0,0,659,657,1,0,
        0,0,660,689,3,116,58,0,661,689,5,61,0,0,662,689,3,98,49,0,663,664,
        5,61,0,0,664,666,5,72,0,0,665,667,3,108,54,0,666,665,1,0,0,0,666,
        667,1,0,0,0,667,668,1,0,0,0,668,689,5,73,0,0,669,670,5,72,0,0,670,
        671,3,88,44,0,671,672,5,73,0,0,672,689,1,0,0,0,673,674,5,61,0,0,
        674,675,5,5,0,0,675,680,3,102,51,0,676,677,5,71,0,0,677,679,3,102,
        51,0,678,676,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,
        0,0,681,684,1,0,0,0,682,680,1,0,0,0,683,685,5,71,0,0,684,683,1,0,
        0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,687,5,6,0,0,687,689,1,0,
        0,0,688,660,1,0,0,0,688,661,1,0,0,0,688,662,1,0,0,0,688,663,1,0,
        0,0,688,669,1,0,0,0,688,673,1,0,0,0,689,97,1,0,0,0,690,691,5,65,
        0,0,691,692,3,52,26,0,692,693,5,65,0,0,693,695,5,61,0,0,694,696,
        3,100,50,0,695,694,1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,699,
        5,72,0,0,698,700,3,108,54,0,699,698,1,0,0,0,699,700,1,0,0,0,700,
        701,1,0,0,0,701,702,5,73,0,0,702,99,1,0,0,0,703,704,5,22,0,0,704,
        709,3,50,25,0,705,706,5,71,0,0,706,708,3,50,25,0,707,705,1,0,0,0,
        708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,0,0,710,712,1,0,0,0,
        711,709,1,0,0,0,712,713,5,67,0,0,713,101,1,0,0,0,714,715,5,61,0,
        0,715,716,5,75,0,0,716,717,3,88,44,0,717,103,1,0,0,0,718,723,3,106,
        53,0,719,720,5,55,0,0,720,722,3,106,53,0,721,719,1,0,0,0,722,725,
        1,0,0,0,723,721,1,0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,723,
        1,0,0,0,726,727,5,56,0,0,727,728,3,58,29,0,728,105,1,0,0,0,729,730,
        7,5,0,0,730,107,1,0,0,0,731,736,3,88,44,0,732,733,5,71,0,0,733,735,
        3,88,44,0,734,732,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,
        1,0,0,0,737,109,1,0,0,0,738,736,1,0,0,0,739,740,5,61,0,0,740,741,
        5,66,0,0,741,742,3,112,56,0,742,111,1,0,0,0,743,745,5,69,0,0,744,
        746,3,114,57,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,
        754,5,70,0,0,748,750,5,72,0,0,749,751,3,114,57,0,750,749,1,0,0,0,
        750,751,1,0,0,0,751,752,1,0,0,0,752,754,5,73,0,0,753,743,1,0,0,0,
        753,748,1,0,0,0,754,113,1,0,0,0,755,758,3,88,44,0,756,757,5,3,0,
        0,757,759,3,88,44,0,758,756,1,0,0,0,758,759,1,0,0,0,759,115,1,0,
        0,0,760,768,3,120,60,0,761,768,5,62,0,0,762,768,5,63,0,0,763,768,
        5,60,0,0,764,768,3,122,61,0,765,768,3,118,59,0,766,768,5,64,0,0,
        767,760,1,0,0,0,767,761,1,0,0,0,767,762,1,0,0,0,767,763,1,0,0,0,
        767,764,1,0,0,0,767,765,1,0,0,0,767,766,1,0,0,0,768,117,1,0,0,0,
        769,770,7,6,0,0,770,119,1,0,0,0,771,772,5,69,0,0,772,777,3,88,44,
        0,773,774,5,71,0,0,774,776,3,88,44,0,775,773,1,0,0,0,776,779,1,0,
        0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,777,1,0,
        0,0,780,781,5,70,0,0,781,789,1,0,0,0,782,783,5,69,0,0,783,784,3,
        88,44,0,784,785,5,3,0,0,785,786,3,88,44,0,786,787,5,70,0,0,787,789,
        1,0,0,0,788,771,1,0,0,0,788,782,1,0,0,0,789,121,1,0,0,0,790,794,
        5,57,0,0,791,793,9,0,0,0,792,791,1,0,0,0,793,796,1,0,0,0,794,795,
        1,0,0,0,794,792,1,0,0,0,795,797,1,0,0,0,796,794,1,0,0,0,797,798,
        5,57,0,0,798,123,1,0,0,0,90,127,139,142,156,162,168,172,180,186,
        191,194,201,206,209,212,217,224,228,239,246,252,260,266,272,275,
        278,281,287,291,294,302,309,313,316,323,334,348,352,355,361,364,
        379,382,389,407,412,421,426,431,445,451,455,484,488,495,499,505,
        513,523,528,534,552,562,587,591,617,620,622,629,645,649,655,657,
        666,680,684,688,695,699,709,723,736,745,750,753,758,767,777,788,
        794
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'extern'", "'{'", 
                     "'}'", "'static'", "'mut'", "'fn'", "'->'", "'pub'", 
                     "'struct'", "'unsafe'", "'const'", "'union'", "'&'", 
                     "'*'", "'i32'", "'String'", "'bool'", "'()'", "'<'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'break'", "'continue'", "'match'", "'while'", 
                     "'let'", "'for'", "'in'", "'if'", "'else'", "'return'", 
                     "'loop'", "'>()'", "'/'", "'%'", "'+'", "'-'", "'>>'", 
                     "'>='", "'<='", "'=='", "'!='", "'..'", "'as'", "'.'", 
                     "'|'", "'=>'", "'\"'", "'true'", "'false'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'::'", "'!'", "'>'", "'#'", "'['", "']'", "','", "'('", 
                     "')'", "'_'", "':'", "<INVALID>", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "Binary", 
                      "Identifier", "Number", "SignedNumber", "CHAR_LITERAL", 
                      "DOUBLE_COLON", "EXCL", "GT", "POUND", "LBRACK", "RBRACK", 
                      "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", "COLON", 
                      "STRING_LITERAL", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_typeAlias = 2
    RULE_externBlock = 3
    RULE_externItem = 4
    RULE_externParams = 5
    RULE_externParam = 6
    RULE_visibility = 7
    RULE_attributes = 8
    RULE_innerAttribute = 9
    RULE_attribute = 10
    RULE_attrArgs = 11
    RULE_attrArg = 12
    RULE_structDef = 13
    RULE_structField = 14
    RULE_functionDef = 15
    RULE_unsafeModifier = 16
    RULE_externAbi = 17
    RULE_paramList = 18
    RULE_param = 19
    RULE_constDef = 20
    RULE_unionDef = 21
    RULE_unionField = 22
    RULE_unsafeDef = 23
    RULE_referenceType = 24
    RULE_type = 25
    RULE_typePath = 26
    RULE_pointerType = 27
    RULE_basicType = 28
    RULE_block = 29
    RULE_statement = 30
    RULE_whileStmt = 31
    RULE_staticVarDecl = 32
    RULE_initializer = 33
    RULE_letStmt = 34
    RULE_varDef = 35
    RULE_immutableDef = 36
    RULE_mutableDef = 37
    RULE_assignStmt = 38
    RULE_forStmt = 39
    RULE_ifStmt = 40
    RULE_exprStmt = 41
    RULE_returnStmt = 42
    RULE_loopStmt = 43
    RULE_expression = 44
    RULE_expressionBlock = 45
    RULE_borrowExpression = 46
    RULE_postfixExpression = 47
    RULE_primaryExpression = 48
    RULE_qualifiedFunctionCall = 49
    RULE_genericArgs = 50
    RULE_structLiteralField = 51
    RULE_matchArm = 52
    RULE_matchPattern = 53
    RULE_argumentList = 54
    RULE_macroCall = 55
    RULE_macroArgs = 56
    RULE_macroInner = 57
    RULE_literal = 58
    RULE_booleanLiteral = 59
    RULE_arrayLiteral = 60
    RULE_stringLiteral = 61

    ruleNames =  [ "program", "topLevelItem", "typeAlias", "externBlock", 
                   "externItem", "externParams", "externParam", "visibility", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "structDef", "structField", "functionDef", 
                   "unsafeModifier", "externAbi", "paramList", "param", 
                   "constDef", "unionDef", "unionField", "unsafeDef", "referenceType", 
                   "type", "typePath", "pointerType", "basicType", "block", 
                   "statement", "whileStmt", "staticVarDecl", "initializer", 
                   "letStmt", "varDef", "immutableDef", "mutableDef", "assignStmt", 
                   "forStmt", "ifStmt", "exprStmt", "returnStmt", "loopStmt", 
                   "expression", "expressionBlock", "borrowExpression", 
                   "postfixExpression", "primaryExpression", "qualifiedFunctionCall", 
                   "genericArgs", "structLiteralField", "matchArm", "matchPattern", 
                   "argumentList", "macroCall", "macroArgs", "macroInner", 
                   "literal", "booleanLiteral", "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    TRUE=58
    FALSE=59
    Binary=60
    Identifier=61
    Number=62
    SignedNumber=63
    CHAR_LITERAL=64
    DOUBLE_COLON=65
    EXCL=66
    GT=67
    POUND=68
    LBRACK=69
    RBRACK=70
    COMMA=71
    LPAREN=72
    RPAREN=73
    UNDERSCORE=74
    COLON=75
    STRING_LITERAL=76
    ELLIPSIS=77
    WS=78
    COMMENT=79

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 64146) != 0) or _la==68:
                self.state = 124
                self.topLevelItem()
                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 130
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 131
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 132
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 133
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 134
                self.typeAlias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 135
                self.constDef()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 136
                self.unionDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 137
                self.unsafeDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 138
                self.staticVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 141
                self.visibility()


            self.state = 144
            self.match(RustParser.T__0)
            self.state = 145
            self.match(RustParser.Identifier)
            self.state = 146
            self.match(RustParser.T__1)
            self.state = 147
            self.type_()
            self.state = 148
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 150
            self.match(RustParser.T__3)
            self.state = 151
            self.match(RustParser.STRING_LITERAL)
            self.state = 152
            self.match(RustParser.T__4)
            self.state = 156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2690) != 0):
                self.state = 153
                self.externItem()
                self.state = 158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 159
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 161
                    self.visibility()


                self.state = 164
                self.match(RustParser.T__0)
                self.state = 165
                self.match(RustParser.Identifier)
                self.state = 166
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 167
                    self.visibility()


                self.state = 170
                self.match(RustParser.T__6)
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 171
                    self.match(RustParser.T__7)


                self.state = 174
                self.match(RustParser.Identifier)
                self.state = 175
                self.match(RustParser.COLON)
                self.state = 176
                self.type_()
                self.state = 177
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 179
                    self.visibility()


                self.state = 182
                self.match(RustParser.T__8)
                self.state = 183
                self.match(RustParser.Identifier)
                self.state = 184
                self.match(RustParser.LPAREN)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & 90113) != 0):
                    self.state = 185
                    self.externParams()


                self.state = 188
                self.match(RustParser.RPAREN)
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 189
                    self.match(RustParser.T__9)
                    self.state = 190
                    self.type_()


                self.state = 193
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61, 74, 75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 196
                self.externParam()
                self.state = 201
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 197
                        self.match(RustParser.COMMA)
                        self.state = 198
                        self.externParam() 
                    self.state = 203
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 204
                    self.match(RustParser.COMMA)
                    self.state = 205
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 208
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61 or _la==74:
                self.state = 211
                _la = self._input.LA(1)
                if not(_la==61 or _la==74):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 214
            self.match(RustParser.COLON)
            self.state = 217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 17, 18, 19, 20, 21, 61, 65, 69]:
                self.state = 215
                self.type_()
                pass
            elif token in [77]:
                self.state = 216
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.match(RustParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 221
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 224 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(RustParser.POUND)

            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 227
                self.match(RustParser.EXCL)


            self.state = 230
            self.match(RustParser.LBRACK)
            self.state = 231
            self.attribute()
            self.state = 232
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(RustParser.Identifier)
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 235
                self.match(RustParser.LPAREN)
                self.state = 236
                self.attrArgs()
                self.state = 237
                self.match(RustParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.attrArg()
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==71:
                self.state = 242
                self.match(RustParser.COMMA)
                self.state = 243
                self.attrArg()
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attrArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(RustParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 251
                self.visibility()


            self.state = 254
            self.match(RustParser.T__11)
            self.state = 255
            self.match(RustParser.Identifier)
            self.state = 256
            self.match(RustParser.T__4)
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==61:
                self.state = 257
                self.structField()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 263
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 265
                self.visibility()


            self.state = 268
            self.match(RustParser.Identifier)
            self.state = 269
            self.match(RustParser.COLON)
            self.state = 270
            self.type_()
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 271
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 274
                self.visibility()


            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 277
                self.unsafeModifier()


            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 280
                self.externAbi()


            self.state = 283
            self.match(RustParser.T__8)
            self.state = 284
            self.match(RustParser.Identifier)
            self.state = 285
            self.match(RustParser.LPAREN)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==61:
                self.state = 286
                self.paramList()


            self.state = 289
            self.match(RustParser.RPAREN)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 290
                self.match(RustParser.T__9)


            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 9605333580251199) != 0):
                self.state = 293
                self.type_()


            self.state = 296
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(RustParser.T__3)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 301
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.param()
            self.state = 309
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 305
                    self.match(RustParser.COMMA)
                    self.state = 306
                    self.param() 
                self.state = 311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 312
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 315
                self.match(RustParser.T__7)


            self.state = 318
            self.match(RustParser.Identifier)
            self.state = 319
            self.match(RustParser.COLON)
            self.state = 320
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 322
                self.visibility()


            self.state = 325
            self.match(RustParser.T__13)
            self.state = 326
            self.match(RustParser.Identifier)
            self.state = 327
            self.match(RustParser.COLON)
            self.state = 328
            self.type_()
            self.state = 329
            self.match(RustParser.T__1)
            self.state = 330
            self.expression(0)
            self.state = 331
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 333
                self.visibility()


            self.state = 336
            self.match(RustParser.T__14)
            self.state = 337
            self.match(RustParser.Identifier)
            self.state = 352
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [75]:
                self.state = 338
                self.match(RustParser.COLON)
                self.state = 339
                self.type_()
                self.state = 340
                self.match(RustParser.T__1)
                self.state = 341
                self.expression(0)
                self.state = 342
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 344
                self.match(RustParser.T__4)
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11 or _la==61:
                    self.state = 345
                    self.unionField()
                    self.state = 350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 351
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 354
                self.visibility()


            self.state = 357
            self.match(RustParser.Identifier)
            self.state = 358
            self.match(RustParser.COLON)
            self.state = 359
            self.type_()
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 360
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 363
                self.visibility()


            self.state = 366
            self.match(RustParser.T__12)
            self.state = 367
            self.match(RustParser.Identifier)
            self.state = 368
            self.match(RustParser.COLON)
            self.state = 369
            self.type_()
            self.state = 370
            self.match(RustParser.T__1)
            self.state = 371
            self.expression(0)
            self.state = 372
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceType" ):
                return visitor.visitReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def referenceType(self):

        localctx = RustParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_referenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(RustParser.T__15)
            self.state = 375
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_type)
        try:
            self.state = 379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 18, 19, 20, 21, 61, 65, 69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 377
                self.basicType()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 378
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 381
                self.match(RustParser.DOUBLE_COLON)


            self.state = 384
            self.match(RustParser.Identifier)
            self.state = 389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 385
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 386
                    self.match(RustParser.Identifier) 
                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(RustParser.T__16)
            self.state = 393
            _la = self._input.LA(1)
            if not(_la==8 or _la==14):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 394
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 396
                self.match(RustParser.T__17)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 397
                self.match(RustParser.T__18)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 398
                self.match(RustParser.T__19)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 399
                self.match(RustParser.T__20)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 400
                self.typePath()
                self.state = 412
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 401
                    self.match(RustParser.T__21)
                    self.state = 402
                    self.type_()
                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==71:
                        self.state = 403
                        self.match(RustParser.COMMA)
                        self.state = 404
                        self.type_()
                        self.state = 409
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 410
                    self.match(RustParser.GT)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 414
                self.match(RustParser.Identifier)
                self.state = 426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 415
                    self.match(RustParser.T__21)
                    self.state = 416
                    self.type_()
                    self.state = 421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==71:
                        self.state = 417
                        self.match(RustParser.COMMA)
                        self.state = 418
                        self.type_()
                        self.state = 423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 424
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 428
                self.match(RustParser.T__15)
                self.state = 429
                self.type_()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==61 or _la==65:
                    self.state = 430
                    self.typePath()


                self.state = 433
                self.match(RustParser.LBRACK)
                self.state = 434
                self.type_()
                self.state = 435
                self.match(RustParser.T__2)
                self.state = 436
                self.match(RustParser.Number)
                self.state = 437
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 439
                self.typePath()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 440
                self.match(RustParser.LBRACK)
                self.state = 441
                self.type_()
                self.state = 442
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 444
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(RustParser.T__4)
            self.state = 451
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 448
                    self.statement() 
                self.state = 453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144114088564031456) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 295) != 0):
                self.state = 454
                self.returnStmt()


            self.state = 457
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.assignStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 462
                self.match(RustParser.Identifier)
                self.state = 463
                self.match(RustParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 464
                self.expression(0)
                self.state = 465
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2139095040) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 466
                self.expression(0)
                self.state = 467
                self.match(RustParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 469
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 470
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 471
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 472
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 473
                self.loopStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 474
                self.match(RustParser.T__30)
                self.state = 475
                self.match(RustParser.T__2)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 476
                self.match(RustParser.T__31)
                self.state = 477
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 478
                self.match(RustParser.T__32)
                self.state = 479
                self.expression(0)
                self.state = 480
                self.match(RustParser.T__4)
                self.state = 482 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 481
                    self.matchArm()
                    self.state = 484 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & 8195) != 0)):
                        break

                self.state = 486
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(RustParser.T__33)
            self.state = 491
            self.expression(0)
            self.state = 492
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 494
                self.visibility()


            self.state = 497
            self.match(RustParser.T__6)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 498
                self.match(RustParser.T__7)


            self.state = 501
            self.match(RustParser.Identifier)
            self.state = 502
            self.match(RustParser.COLON)
            self.state = 505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 503
                self.type_()
                pass

            elif la_ == 2:
                self.state = 504
                self.match(RustParser.Identifier)
                pass


            self.state = 507
            self.match(RustParser.T__1)
            self.state = 508
            self.initializer()
            self.state = 509
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_initializer)
        try:
            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 511
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 512
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_letStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(RustParser.T__34)
            self.state = 516
            self.varDef()
            self.state = 517
            self.match(RustParser.T__1)
            self.state = 518
            self.expression(0)
            self.state = 519
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableDef(self):
            return self.getTypedRuleContext(RustParser.MutableDefContext,0)


        def immutableDef(self):
            return self.getTypedRuleContext(RustParser.ImmutableDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_varDef)
        try:
            self.state = 523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.mutableDef()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 522
                self.immutableDef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImmutableDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_immutableDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImmutableDef" ):
                listener.enterImmutableDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImmutableDef" ):
                listener.exitImmutableDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImmutableDef" ):
                return visitor.visitImmutableDef(self)
            else:
                return visitor.visitChildren(self)




    def immutableDef(self):

        localctx = RustParser.ImmutableDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_immutableDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(RustParser.Identifier)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 526
                self.match(RustParser.COLON)
                self.state = 527
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_mutableDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableDef" ):
                listener.enterMutableDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableDef" ):
                listener.exitMutableDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableDef" ):
                return visitor.visitMutableDef(self)
            else:
                return visitor.visitChildren(self)




    def mutableDef(self):

        localctx = RustParser.MutableDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_mutableDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(RustParser.T__7)
            self.state = 531
            self.match(RustParser.Identifier)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 532
                self.match(RustParser.COLON)
                self.state = 533
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.expression(0)
            self.state = 537
            self.match(RustParser.T__1)
            self.state = 538
            self.expression(0)
            self.state = 539
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(RustParser.T__35)
            self.state = 542
            self.match(RustParser.Identifier)
            self.state = 543
            self.match(RustParser.T__36)
            self.state = 544
            self.expression(0)
            self.state = 545
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(RustParser.T__37)
            self.state = 548
            self.expression(0)
            self.state = 549
            self.block()
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 550
                self.match(RustParser.T__38)
                self.state = 551
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.expression(0)
            self.state = 555
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_returnStmt)
        try:
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.match(RustParser.T__39)
                self.state = 558
                self.expression(0)
                self.state = 559
                self.match(RustParser.T__2)
                pass
            elif token in [5, 16, 17, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(RustParser.T__40)
            self.state = 565
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def macroCall(self):
            return self.getTypedRuleContext(RustParser.MacroCallContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 568
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.state = 569
                self.literal()
                pass

            elif la_ == 3:
                self.state = 570
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 571
                self.match(RustParser.T__16)
                self.state = 572
                self.match(RustParser.Identifier)
                pass

            elif la_ == 5:
                self.state = 573
                self.macroCall()
                pass

            elif la_ == 6:
                self.state = 574
                self.borrowExpression()
                pass

            elif la_ == 7:
                self.state = 575
                self.typePath()
                self.state = 576
                self.match(RustParser.DOUBLE_COLON)
                self.state = 577
                self.match(RustParser.T__21)
                self.state = 578
                self.type_()
                self.state = 579
                self.match(RustParser.T__41)
                pass

            elif la_ == 8:
                self.state = 581
                self.match(RustParser.EXCL)
                self.state = 582
                self.expression(8)
                pass

            elif la_ == 9:
                self.state = 583
                self.match(RustParser.Identifier)
                self.state = 584
                self.match(RustParser.EXCL)
                self.state = 585
                self.match(RustParser.LPAREN)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144115188075659232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 295) != 0):
                    self.state = 586
                    self.argumentList()


                self.state = 589
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 10:
                self.state = 590
                self.expressionBlock()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 622
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 620
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 593
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 594
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1117103814017024) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 595
                        self.expression(8)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 596
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 597
                        _la = self._input.LA(1)
                        if not(((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & 35185177395201) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 598
                        self.expression(7)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 599
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 600
                        self.match(RustParser.T__51)
                        self.state = 601
                        self.expression(6)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 602
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 603
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2139095040) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 604
                        self.expression(5)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 605
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 606
                        self.match(RustParser.LBRACK)
                        self.state = 607
                        self.expression(0)
                        self.state = 608
                        self.match(RustParser.RBRACK)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 610
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 611
                        self.match(RustParser.T__52)
                        self.state = 612
                        self.type_()
                        self.state = 617
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 613
                                self.match(RustParser.T__52)
                                self.state = 614
                                self.type_() 
                            self.state = 619
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                        pass

             
                self.state = 624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(RustParser.T__4)
            self.state = 629
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 626
                    self.statement() 
                self.state = 631
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

            self.state = 632
            self.expression(0)
            self.state = 633
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self.match(RustParser.T__15)
            self.state = 636
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LBRACK)
            else:
                return self.getToken(RustParser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RBRACK)
            else:
                return self.getToken(RustParser.RBRACK, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.primaryExpression()
            self.state = 657
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 655
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                    if la_ == 1:
                        self.state = 639
                        self.match(RustParser.T__53)
                        self.state = 640
                        self.match(RustParser.Identifier)
                        pass

                    elif la_ == 2:
                        self.state = 641
                        self.match(RustParser.T__53)
                        self.state = 642
                        self.match(RustParser.Identifier)
                        self.state = 649
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [72]:
                            self.state = 643
                            self.match(RustParser.LPAREN)
                            self.state = 645
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144115188075659232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 295) != 0):
                                self.state = 644
                                self.argumentList()


                            self.state = 647
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [21]:
                            self.state = 648
                            self.match(RustParser.T__20)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 3:
                        self.state = 651
                        self.match(RustParser.LBRACK)
                        self.state = 652
                        self.expression(0)
                        self.state = 653
                        self.match(RustParser.RBRACK)
                        pass

             
                self.state = 659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def qualifiedFunctionCall(self):
            return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 661
                self.match(RustParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 662
                self.qualifiedFunctionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 663
                self.match(RustParser.Identifier)
                self.state = 664
                self.match(RustParser.LPAREN)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144115188075659232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 295) != 0):
                    self.state = 665
                    self.argumentList()


                self.state = 668
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 669
                self.match(RustParser.LPAREN)
                self.state = 670
                self.expression(0)
                self.state = 671
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 673
                self.match(RustParser.Identifier)
                self.state = 674
                self.match(RustParser.T__4)
                self.state = 675
                self.structLiteralField()
                self.state = 680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 676
                        self.match(RustParser.COMMA)
                        self.state = 677
                        self.structLiteralField() 
                    self.state = 682
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 683
                    self.match(RustParser.COMMA)


                self.state = 686
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(RustParser.DOUBLE_COLON)
            self.state = 691
            self.typePath()
            self.state = 692
            self.match(RustParser.DOUBLE_COLON)
            self.state = 693
            self.match(RustParser.Identifier)
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 694
                self.genericArgs()


            self.state = 697
            self.match(RustParser.LPAREN)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144115188075659232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 295) != 0):
                self.state = 698
                self.argumentList()


            self.state = 701
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(RustParser.T__21)
            self.state = 704
            self.type_()
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==71:
                self.state = 705
                self.match(RustParser.COMMA)
                self.state = 706
                self.type_()
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 712
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_structLiteralField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(RustParser.Identifier)
            self.state = 715
            self.match(RustParser.COLON)
            self.state = 716
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.matchPattern()
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==55:
                self.state = 719
                self.match(RustParser.T__54)
                self.state = 720
                self.matchPattern()
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 726
            self.match(RustParser.T__55)
            self.state = 727
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            _la = self._input.LA(1)
            if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & 8195) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.expression(0)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==71:
                self.state = 732
                self.match(RustParser.COMMA)
                self.state = 733
                self.expression(0)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(RustParser.Identifier)
            self.state = 740
            self.match(RustParser.EXCL)
            self.state = 741
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.match(RustParser.LBRACK)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144115188075659232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 295) != 0):
                    self.state = 744
                    self.macroInner()


                self.state = 747
                self.match(RustParser.RBRACK)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.match(RustParser.LPAREN)
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144115188075659232) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 295) != 0):
                    self.state = 749
                    self.macroInner()


                self.state = 752
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.expression(0)
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 756
                self.match(RustParser.T__2)
                self.state = 757
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(RustParser.StringLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_literal)
        try:
            self.state = 767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 760
                self.arrayLiteral()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 761
                self.match(RustParser.Number)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 762
                self.match(RustParser.SignedNumber)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 763
                self.match(RustParser.Binary)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 5)
                self.state = 764
                self.stringLiteral()
                pass
            elif token in [58, 59]:
                self.enterOuterAlt(localctx, 6)
                self.state = 765
                self.booleanLiteral()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 7)
                self.state = 766
                self.match(RustParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            _la = self._input.LA(1)
            if not(_la==58 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.match(RustParser.LBRACK)
                self.state = 772
                self.expression(0)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==71:
                    self.state = 773
                    self.match(RustParser.COMMA)
                    self.state = 774
                    self.expression(0)
                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 780
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.match(RustParser.LBRACK)
                self.state = 783
                self.expression(0)
                self.state = 784
                self.match(RustParser.T__2)
                self.state = 785
                self.expression(0)
                self.state = 786
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(RustParser.T__56)
            self.state = 794
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 791
                    self.matchWildcard() 
                self.state = 796
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 797
            self.match(RustParser.T__56)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[44] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         




