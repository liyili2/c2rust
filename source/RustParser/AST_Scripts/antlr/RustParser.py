# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,97,1102,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,5,
        0,184,8,0,10,0,12,0,187,9,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,195,8,1,
        1,2,1,2,1,2,1,2,3,2,201,8,2,1,2,1,2,3,2,205,8,2,5,2,207,8,2,10,2,
        12,2,210,9,2,1,2,1,2,5,2,214,8,2,10,2,12,2,217,9,2,1,2,1,2,1,3,1,
        3,1,3,1,3,3,3,225,8,3,1,4,3,4,228,8,4,1,4,3,4,231,8,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,242,8,4,10,4,12,4,245,9,4,1,4,3,4,
        248,8,4,1,5,1,5,1,6,3,6,253,8,6,1,6,1,6,1,6,1,6,3,6,259,8,6,1,7,
        3,7,262,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,4,8,274,8,8,
        11,8,12,8,275,1,8,1,8,1,9,1,9,1,9,1,9,5,9,284,8,9,10,9,12,9,287,
        9,9,1,9,1,9,1,10,3,10,292,8,10,1,10,1,10,1,10,1,10,3,10,298,8,10,
        1,10,1,10,3,10,302,8,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,310,8,
        10,1,10,1,10,1,10,1,10,3,10,316,8,10,1,10,1,10,1,10,3,10,321,8,10,
        1,10,3,10,324,8,10,1,11,1,11,1,11,5,11,329,8,11,10,11,12,11,332,
        9,11,1,11,1,11,3,11,336,8,11,1,11,3,11,339,8,11,1,12,3,12,342,8,
        12,1,12,1,12,1,12,3,12,347,8,12,1,13,1,13,1,14,1,14,1,15,1,15,3,
        15,355,8,15,1,16,4,16,358,8,16,11,16,12,16,359,1,17,1,17,3,17,364,
        8,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,3,18,379,8,18,1,19,1,19,1,19,5,19,384,8,19,10,19,12,19,387,
        9,19,1,20,1,20,1,20,3,20,392,8,20,1,21,1,21,1,22,3,22,397,8,22,1,
        22,1,22,1,22,1,22,5,22,403,8,22,10,22,12,22,406,9,22,1,22,1,22,1,
        23,3,23,411,8,23,1,23,1,23,1,23,1,23,3,23,417,8,23,1,24,1,24,1,24,
        5,24,422,8,24,10,24,12,24,425,9,24,1,24,1,24,1,25,1,25,1,25,3,25,
        432,8,25,1,25,3,25,435,8,25,1,26,3,26,438,8,26,1,26,3,26,441,8,26,
        1,26,3,26,444,8,26,1,26,1,26,1,26,1,26,1,26,3,26,451,8,26,1,26,3,
        26,454,8,26,1,26,3,26,457,8,26,1,26,3,26,460,8,26,1,26,1,26,1,27,
        1,27,1,27,5,27,467,8,27,10,27,12,27,470,9,27,1,27,3,27,473,8,27,
        1,28,3,28,476,8,28,1,28,3,28,479,8,28,1,28,1,28,1,28,3,28,484,8,
        28,1,29,1,29,3,29,488,8,29,1,30,1,30,1,30,3,30,493,8,30,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,504,8,31,1,31,1,31,1,31,
        1,31,5,31,510,8,31,10,31,12,31,513,9,31,1,31,1,31,3,31,517,8,31,
        1,31,1,31,1,31,1,31,1,31,5,31,524,8,31,10,31,12,31,527,9,31,1,31,
        1,31,3,31,531,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,3,31,545,8,31,1,32,1,32,1,32,3,32,550,8,32,1,32,1,
        32,1,32,5,32,555,8,32,10,32,12,32,558,9,32,3,32,560,8,32,1,33,1,
        33,1,33,1,33,1,33,1,33,1,34,3,34,569,8,34,1,34,1,34,5,34,573,8,34,
        10,34,12,34,576,9,34,1,34,3,34,579,8,34,1,34,1,34,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,3,35,604,8,35,1,36,3,36,607,8,36,1,36,1,
        36,3,36,611,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,
        37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,3,38,637,8,38,5,38,639,8,38,10,38,12,38,642,9,38,1,38,1,
        38,1,38,1,38,1,38,3,38,649,8,38,5,38,651,8,38,10,38,12,38,654,9,
        38,1,38,1,38,3,38,658,8,38,1,39,3,39,661,8,39,1,39,3,39,664,8,39,
        1,39,1,39,1,39,3,39,669,8,39,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
        1,42,1,42,1,42,1,42,4,42,682,8,42,11,42,12,42,683,1,42,1,42,1,43,
        1,43,1,43,5,43,691,8,43,10,43,12,43,694,9,43,1,43,1,43,1,43,1,43,
        3,43,700,8,43,3,43,702,8,43,1,44,1,44,1,44,1,44,3,44,708,8,44,1,
        45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,717,8,46,1,47,3,47,720,8,47,
        1,47,1,47,3,47,724,8,47,1,47,1,47,1,47,1,47,3,47,730,8,47,1,47,1,
        47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,5,48,742,8,48,10,48,12,
        48,745,9,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,
        50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,769,
        8,51,10,51,12,51,772,9,51,1,51,1,51,3,51,776,8,51,1,52,1,52,1,52,
        1,53,1,53,3,53,783,8,53,1,53,1,53,3,53,787,8,53,1,54,1,54,1,54,1,
        55,1,55,3,55,794,8,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,
        56,1,57,1,57,3,57,807,8,57,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,836,8,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,866,
        8,59,10,59,12,59,869,9,59,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
        1,62,1,62,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
        1,65,1,65,3,65,894,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,
        4,66,904,8,66,11,66,12,66,905,1,67,3,67,909,8,67,1,67,1,67,1,67,
        1,68,3,68,915,8,68,1,68,3,68,918,8,68,1,68,1,68,1,68,1,68,3,68,924,
        8,68,1,68,3,68,927,8,68,1,68,1,68,3,68,931,8,68,1,69,1,69,1,69,1,
        69,5,69,937,8,69,10,69,12,69,940,9,69,1,70,1,70,1,71,1,71,1,72,1,
        72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,1,75,5,75,957,8,75,10,
        75,12,75,960,9,75,1,75,3,75,963,8,75,1,75,1,75,1,76,1,76,1,77,1,
        77,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,5,80,980,8,80,10,
        80,12,80,983,9,80,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,3,82,993,
        8,82,1,83,1,83,1,83,1,83,1,83,1,83,4,83,1001,8,83,11,83,12,83,1002,
        3,83,1005,8,83,1,84,3,84,1008,8,84,1,84,1,84,1,85,1,85,1,85,1,85,
        1,85,5,85,1017,8,85,10,85,12,85,1020,9,85,1,85,1,85,3,85,1024,8,
        85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1037,
        8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,
        1050,8,87,1,88,1,88,1,89,3,89,1055,8,89,1,89,3,89,1058,8,89,1,89,
        1,89,1,89,1,89,5,89,1064,8,89,10,89,12,89,1067,9,89,1,89,1,89,1,
        89,3,89,1072,8,89,1,89,3,89,1075,8,89,1,89,1,89,1,89,1,89,1,89,1,
        89,1,89,3,89,1084,8,89,1,89,3,89,1087,8,89,1,89,1,89,3,89,1091,8,
        89,1,90,1,90,5,90,1095,8,90,10,90,12,90,1098,9,90,1,90,1,90,1,90,
        1,1096,1,118,91,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
        150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
        0,10,1,0,6,8,2,0,78,78,93,93,1,0,77,79,2,0,6,6,13,13,1,0,31,38,3,
        0,25,25,53,56,86,86,2,0,19,19,57,59,2,0,20,20,60,63,2,0,62,63,85,
        85,1,0,73,74,1211,0,185,1,0,0,0,2,194,1,0,0,0,4,196,1,0,0,0,6,224,
        1,0,0,0,8,227,1,0,0,0,10,249,1,0,0,0,12,252,1,0,0,0,14,261,1,0,0,
        0,16,269,1,0,0,0,18,279,1,0,0,0,20,323,1,0,0,0,22,338,1,0,0,0,24,
        341,1,0,0,0,26,348,1,0,0,0,28,350,1,0,0,0,30,352,1,0,0,0,32,357,
        1,0,0,0,34,361,1,0,0,0,36,378,1,0,0,0,38,380,1,0,0,0,40,388,1,0,
        0,0,42,393,1,0,0,0,44,396,1,0,0,0,46,410,1,0,0,0,48,418,1,0,0,0,
        50,428,1,0,0,0,52,437,1,0,0,0,54,463,1,0,0,0,56,475,1,0,0,0,58,487,
        1,0,0,0,60,489,1,0,0,0,62,544,1,0,0,0,64,559,1,0,0,0,66,561,1,0,
        0,0,68,568,1,0,0,0,70,603,1,0,0,0,72,606,1,0,0,0,74,618,1,0,0,0,
        76,657,1,0,0,0,78,660,1,0,0,0,80,670,1,0,0,0,82,672,1,0,0,0,84,677,
        1,0,0,0,86,687,1,0,0,0,88,707,1,0,0,0,90,709,1,0,0,0,92,716,1,0,
        0,0,94,719,1,0,0,0,96,735,1,0,0,0,98,750,1,0,0,0,100,755,1,0,0,0,
        102,761,1,0,0,0,104,777,1,0,0,0,106,786,1,0,0,0,108,788,1,0,0,0,
        110,791,1,0,0,0,112,799,1,0,0,0,114,804,1,0,0,0,116,808,1,0,0,0,
        118,835,1,0,0,0,120,870,1,0,0,0,122,873,1,0,0,0,124,878,1,0,0,0,
        126,882,1,0,0,0,128,884,1,0,0,0,130,891,1,0,0,0,132,903,1,0,0,0,
        134,908,1,0,0,0,136,930,1,0,0,0,138,932,1,0,0,0,140,941,1,0,0,0,
        142,943,1,0,0,0,144,945,1,0,0,0,146,947,1,0,0,0,148,949,1,0,0,0,
        150,951,1,0,0,0,152,966,1,0,0,0,154,968,1,0,0,0,156,970,1,0,0,0,
        158,974,1,0,0,0,160,977,1,0,0,0,162,987,1,0,0,0,164,992,1,0,0,0,
        166,1004,1,0,0,0,168,1007,1,0,0,0,170,1023,1,0,0,0,172,1036,1,0,
        0,0,174,1049,1,0,0,0,176,1051,1,0,0,0,178,1090,1,0,0,0,180,1092,
        1,0,0,0,182,184,3,2,1,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,
        1,0,0,0,185,186,1,0,0,0,186,1,1,0,0,0,187,185,1,0,0,0,188,195,3,
        6,3,0,189,195,3,94,47,0,190,195,3,32,16,0,191,195,3,18,9,0,192,195,
        3,4,2,0,193,195,3,14,7,0,194,188,1,0,0,0,194,189,1,0,0,0,194,190,
        1,0,0,0,194,191,1,0,0,0,194,192,1,0,0,0,194,193,1,0,0,0,195,3,1,
        0,0,0,196,197,5,1,0,0,197,215,3,64,32,0,198,208,5,2,0,0,199,201,
        3,64,32,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,204,
        5,78,0,0,203,205,5,90,0,0,204,203,1,0,0,0,204,205,1,0,0,0,205,207,
        1,0,0,0,206,200,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,
        1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,5,3,0,0,212,214,
        5,90,0,0,213,198,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,
        1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,219,5,4,0,0,219,5,1,
        0,0,0,220,225,3,52,26,0,221,225,3,44,22,0,222,225,3,16,8,0,223,225,
        3,8,4,0,224,220,1,0,0,0,224,221,1,0,0,0,224,222,1,0,0,0,224,223,
        1,0,0,0,225,7,1,0,0,0,226,228,3,26,13,0,227,226,1,0,0,0,227,228,
        1,0,0,0,228,230,1,0,0,0,229,231,3,10,5,0,230,229,1,0,0,0,230,231,
        1,0,0,0,231,232,1,0,0,0,232,247,5,78,0,0,233,234,5,94,0,0,234,235,
        3,58,29,0,235,236,5,5,0,0,236,237,3,118,59,0,237,238,5,4,0,0,238,
        248,1,0,0,0,239,243,5,2,0,0,240,242,3,12,6,0,241,240,1,0,0,0,242,
        245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,
        243,1,0,0,0,246,248,5,3,0,0,247,233,1,0,0,0,247,239,1,0,0,0,248,
        9,1,0,0,0,249,250,7,0,0,0,250,11,1,0,0,0,251,253,3,26,13,0,252,251,
        1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,255,5,78,0,0,255,256,
        5,94,0,0,256,258,3,58,29,0,257,259,5,90,0,0,258,257,1,0,0,0,258,
        259,1,0,0,0,259,13,1,0,0,0,260,262,3,26,13,0,261,260,1,0,0,0,261,
        262,1,0,0,0,262,263,1,0,0,0,263,264,5,9,0,0,264,265,5,78,0,0,265,
        266,5,5,0,0,266,267,3,58,29,0,267,268,5,4,0,0,268,15,1,0,0,0,269,
        270,5,10,0,0,270,271,5,78,0,0,271,273,5,2,0,0,272,274,3,52,26,0,
        273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,
        276,277,1,0,0,0,277,278,5,3,0,0,278,17,1,0,0,0,279,280,5,11,0,0,
        280,281,5,77,0,0,281,285,5,2,0,0,282,284,3,20,10,0,283,282,1,0,0,
        0,284,287,1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,
        0,287,285,1,0,0,0,288,289,5,3,0,0,289,19,1,0,0,0,290,292,3,26,13,
        0,291,290,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,294,5,9,0,
        0,294,295,5,78,0,0,295,324,5,4,0,0,296,298,3,26,13,0,297,296,1,0,
        0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,5,12,0,0,300,302,5,13,
        0,0,301,300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,304,5,78,
        0,0,304,305,5,94,0,0,305,306,3,58,29,0,306,307,5,4,0,0,307,324,1,
        0,0,0,308,310,3,26,13,0,309,308,1,0,0,0,309,310,1,0,0,0,310,311,
        1,0,0,0,311,312,5,14,0,0,312,313,5,78,0,0,313,315,5,91,0,0,314,316,
        3,22,11,0,315,314,1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,320,
        5,92,0,0,318,319,5,15,0,0,319,321,3,58,29,0,320,318,1,0,0,0,320,
        321,1,0,0,0,321,322,1,0,0,0,322,324,5,4,0,0,323,291,1,0,0,0,323,
        297,1,0,0,0,323,309,1,0,0,0,324,21,1,0,0,0,325,330,3,24,12,0,326,
        327,5,90,0,0,327,329,3,24,12,0,328,326,1,0,0,0,329,332,1,0,0,0,330,
        328,1,0,0,0,330,331,1,0,0,0,331,335,1,0,0,0,332,330,1,0,0,0,333,
        334,5,90,0,0,334,336,5,95,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,
        339,1,0,0,0,337,339,5,95,0,0,338,325,1,0,0,0,338,337,1,0,0,0,339,
        23,1,0,0,0,340,342,7,1,0,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,
        1,0,0,0,343,346,5,94,0,0,344,347,3,58,29,0,345,347,5,95,0,0,346,
        344,1,0,0,0,346,345,1,0,0,0,347,25,1,0,0,0,348,349,5,16,0,0,349,
        27,1,0,0,0,350,351,5,8,0,0,351,29,1,0,0,0,352,354,5,11,0,0,353,355,
        5,77,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,31,1,0,0,0,356,358,
        3,34,17,0,357,356,1,0,0,0,358,359,1,0,0,0,359,357,1,0,0,0,359,360,
        1,0,0,0,360,33,1,0,0,0,361,363,5,87,0,0,362,364,5,85,0,0,363,362,
        1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,5,88,0,0,366,367,
        3,36,18,0,367,368,5,89,0,0,368,35,1,0,0,0,369,379,5,78,0,0,370,371,
        5,78,0,0,371,372,5,5,0,0,372,379,3,42,21,0,373,374,5,78,0,0,374,
        375,5,91,0,0,375,376,3,38,19,0,376,377,5,92,0,0,377,379,1,0,0,0,
        378,369,1,0,0,0,378,370,1,0,0,0,378,373,1,0,0,0,379,37,1,0,0,0,380,
        385,3,40,20,0,381,382,5,90,0,0,382,384,3,40,20,0,383,381,1,0,0,0,
        384,387,1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,39,1,0,0,0,387,
        385,1,0,0,0,388,391,5,78,0,0,389,390,5,5,0,0,390,392,3,42,21,0,391,
        389,1,0,0,0,391,392,1,0,0,0,392,41,1,0,0,0,393,394,7,2,0,0,394,43,
        1,0,0,0,395,397,3,26,13,0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,
        1,0,0,0,398,399,5,17,0,0,399,400,5,78,0,0,400,404,5,2,0,0,401,403,
        3,46,23,0,402,401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,
        1,0,0,0,405,407,1,0,0,0,406,404,1,0,0,0,407,408,5,3,0,0,408,45,1,
        0,0,0,409,411,3,26,13,0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,
        1,0,0,0,412,413,5,78,0,0,413,414,5,94,0,0,414,416,3,58,29,0,415,
        417,5,90,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,47,1,0,0,0,418,
        419,5,78,0,0,419,423,5,2,0,0,420,422,3,50,25,0,421,420,1,0,0,0,422,
        425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,
        423,1,0,0,0,426,427,5,3,0,0,427,49,1,0,0,0,428,431,5,78,0,0,429,
        430,5,94,0,0,430,432,3,118,59,0,431,429,1,0,0,0,431,432,1,0,0,0,
        432,434,1,0,0,0,433,435,5,90,0,0,434,433,1,0,0,0,434,435,1,0,0,0,
        435,51,1,0,0,0,436,438,3,26,13,0,437,436,1,0,0,0,437,438,1,0,0,0,
        438,440,1,0,0,0,439,441,3,28,14,0,440,439,1,0,0,0,440,441,1,0,0,
        0,441,443,1,0,0,0,442,444,3,30,15,0,443,442,1,0,0,0,443,444,1,0,
        0,0,444,445,1,0,0,0,445,446,5,14,0,0,446,453,5,78,0,0,447,454,5,
        18,0,0,448,450,5,91,0,0,449,451,3,54,27,0,450,449,1,0,0,0,450,451,
        1,0,0,0,451,452,1,0,0,0,452,454,5,92,0,0,453,447,1,0,0,0,453,448,
        1,0,0,0,454,456,1,0,0,0,455,457,5,15,0,0,456,455,1,0,0,0,456,457,
        1,0,0,0,457,459,1,0,0,0,458,460,3,58,29,0,459,458,1,0,0,0,459,460,
        1,0,0,0,460,461,1,0,0,0,461,462,3,68,34,0,462,53,1,0,0,0,463,468,
        3,56,28,0,464,465,5,90,0,0,465,467,3,56,28,0,466,464,1,0,0,0,467,
        470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,472,1,0,0,0,470,
        468,1,0,0,0,471,473,5,90,0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,
        55,1,0,0,0,474,476,5,19,0,0,475,474,1,0,0,0,475,476,1,0,0,0,476,
        478,1,0,0,0,477,479,5,13,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,
        480,1,0,0,0,480,483,5,78,0,0,481,482,5,94,0,0,482,484,3,58,29,0,
        483,481,1,0,0,0,483,484,1,0,0,0,484,57,1,0,0,0,485,488,3,62,31,0,
        486,488,3,60,30,0,487,485,1,0,0,0,487,486,1,0,0,0,488,59,1,0,0,0,
        489,490,5,20,0,0,490,492,7,3,0,0,491,493,3,58,29,0,492,491,1,0,0,
        0,492,493,1,0,0,0,493,61,1,0,0,0,494,545,5,21,0,0,495,545,5,22,0,
        0,496,545,5,23,0,0,497,545,5,24,0,0,498,545,3,66,33,0,499,500,3,
        64,32,0,500,501,3,62,31,0,501,545,1,0,0,0,502,504,5,84,0,0,503,502,
        1,0,0,0,503,504,1,0,0,0,504,505,1,0,0,0,505,506,5,25,0,0,506,511,
        3,58,29,0,507,508,5,90,0,0,508,510,3,58,29,0,509,507,1,0,0,0,510,
        513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,514,1,0,0,0,513,
        511,1,0,0,0,514,516,5,86,0,0,515,517,5,18,0,0,516,515,1,0,0,0,516,
        517,1,0,0,0,517,545,1,0,0,0,518,530,5,78,0,0,519,520,5,25,0,0,520,
        525,3,58,29,0,521,522,5,90,0,0,522,524,3,58,29,0,523,521,1,0,0,0,
        524,527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,
        527,525,1,0,0,0,528,529,5,86,0,0,529,531,1,0,0,0,530,519,1,0,0,0,
        530,531,1,0,0,0,531,545,1,0,0,0,532,533,5,78,0,0,533,534,5,25,0,
        0,534,535,3,58,29,0,535,536,5,86,0,0,536,545,1,0,0,0,537,538,5,19,
        0,0,538,545,3,58,29,0,539,540,5,88,0,0,540,541,3,58,29,0,541,542,
        5,89,0,0,542,545,1,0,0,0,543,545,5,78,0,0,544,494,1,0,0,0,544,495,
        1,0,0,0,544,496,1,0,0,0,544,497,1,0,0,0,544,498,1,0,0,0,544,499,
        1,0,0,0,544,503,1,0,0,0,544,518,1,0,0,0,544,532,1,0,0,0,544,537,
        1,0,0,0,544,539,1,0,0,0,544,543,1,0,0,0,545,63,1,0,0,0,546,547,5,
        78,0,0,547,560,5,84,0,0,548,550,5,84,0,0,549,548,1,0,0,0,549,550,
        1,0,0,0,550,551,1,0,0,0,551,556,5,78,0,0,552,553,5,84,0,0,553,555,
        5,78,0,0,554,552,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,
        1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,559,546,1,0,0,0,559,549,
        1,0,0,0,560,65,1,0,0,0,561,562,5,88,0,0,562,563,3,62,31,0,563,564,
        5,4,0,0,564,565,5,79,0,0,565,566,5,89,0,0,566,67,1,0,0,0,567,569,
        3,28,14,0,568,567,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,574,
        5,2,0,0,571,573,3,70,35,0,572,571,1,0,0,0,573,576,1,0,0,0,574,572,
        1,0,0,0,574,575,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,577,579,
        3,106,53,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,581,
        5,3,0,0,581,69,1,0,0,0,582,604,3,68,34,0,583,604,3,76,38,0,584,604,
        3,72,36,0,585,604,3,48,24,0,586,604,3,44,22,0,587,604,3,94,47,0,
        588,604,3,112,56,0,589,604,3,98,49,0,590,604,3,82,41,0,591,604,3,
        100,50,0,592,604,3,102,51,0,593,604,3,74,37,0,594,604,3,104,52,0,
        595,604,3,90,45,0,596,604,3,106,53,0,597,604,3,108,54,0,598,599,
        5,26,0,0,599,604,5,4,0,0,600,601,5,27,0,0,601,604,5,4,0,0,602,604,
        3,84,42,0,603,582,1,0,0,0,603,583,1,0,0,0,603,584,1,0,0,0,603,585,
        1,0,0,0,603,586,1,0,0,0,603,587,1,0,0,0,603,588,1,0,0,0,603,589,
        1,0,0,0,603,590,1,0,0,0,603,591,1,0,0,0,603,592,1,0,0,0,603,593,
        1,0,0,0,603,594,1,0,0,0,603,595,1,0,0,0,603,596,1,0,0,0,603,597,
        1,0,0,0,603,598,1,0,0,0,603,600,1,0,0,0,603,602,1,0,0,0,604,71,1,
        0,0,0,605,607,5,28,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,610,1,
        0,0,0,608,611,3,112,56,0,609,611,3,118,59,0,610,608,1,0,0,0,610,
        609,1,0,0,0,611,612,1,0,0,0,612,613,5,5,0,0,613,614,3,118,59,0,614,
        615,5,29,0,0,615,616,3,68,34,0,616,617,5,4,0,0,617,73,1,0,0,0,618,
        619,3,118,59,0,619,620,3,168,84,0,620,621,5,4,0,0,621,75,1,0,0,0,
        622,623,5,28,0,0,623,624,3,78,39,0,624,625,5,5,0,0,625,626,3,118,
        59,0,626,627,5,4,0,0,627,658,1,0,0,0,628,629,5,28,0,0,629,630,3,
        78,39,0,630,631,3,96,48,0,631,658,1,0,0,0,632,633,5,28,0,0,633,640,
        5,91,0,0,634,636,3,78,39,0,635,637,5,90,0,0,636,635,1,0,0,0,636,
        637,1,0,0,0,637,639,1,0,0,0,638,634,1,0,0,0,639,642,1,0,0,0,640,
        638,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,0,642,640,1,0,0,0,643,
        644,5,92,0,0,644,645,5,5,0,0,645,652,5,91,0,0,646,648,3,118,59,0,
        647,649,5,90,0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,651,1,0,0,0,
        650,646,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,
        653,655,1,0,0,0,654,652,1,0,0,0,655,656,5,92,0,0,656,658,5,4,0,0,
        657,622,1,0,0,0,657,628,1,0,0,0,657,632,1,0,0,0,658,77,1,0,0,0,659,
        661,5,30,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,
        664,5,13,0,0,663,662,1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,665,
        668,5,78,0,0,666,667,5,94,0,0,667,669,3,58,29,0,668,666,1,0,0,0,
        668,669,1,0,0,0,669,79,1,0,0,0,670,671,7,4,0,0,671,81,1,0,0,0,672,
        673,3,118,59,0,673,674,3,80,40,0,674,675,3,118,59,0,675,676,5,4,
        0,0,676,83,1,0,0,0,677,678,5,39,0,0,678,679,3,118,59,0,679,681,5,
        2,0,0,680,682,3,86,43,0,681,680,1,0,0,0,682,683,1,0,0,0,683,681,
        1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,3,0,0,686,85,1,
        0,0,0,687,692,3,88,44,0,688,689,5,40,0,0,689,691,3,88,44,0,690,688,
        1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,695,
        1,0,0,0,694,692,1,0,0,0,695,701,5,41,0,0,696,702,3,68,34,0,697,699,
        5,42,0,0,698,700,3,118,59,0,699,698,1,0,0,0,699,700,1,0,0,0,700,
        702,1,0,0,0,701,696,1,0,0,0,701,697,1,0,0,0,702,87,1,0,0,0,703,708,
        3,174,87,0,704,708,5,79,0,0,705,708,5,93,0,0,706,708,5,78,0,0,707,
        703,1,0,0,0,707,704,1,0,0,0,707,705,1,0,0,0,707,706,1,0,0,0,708,
        89,1,0,0,0,709,710,5,43,0,0,710,711,3,118,59,0,711,712,3,68,34,0,
        712,91,1,0,0,0,713,717,3,96,48,0,714,717,3,68,34,0,715,717,3,118,
        59,0,716,713,1,0,0,0,716,714,1,0,0,0,716,715,1,0,0,0,717,93,1,0,
        0,0,718,720,3,26,13,0,719,718,1,0,0,0,719,720,1,0,0,0,720,721,1,
        0,0,0,721,723,5,12,0,0,722,724,5,13,0,0,723,722,1,0,0,0,723,724,
        1,0,0,0,724,725,1,0,0,0,725,726,5,78,0,0,726,729,5,94,0,0,727,730,
        3,58,29,0,728,730,5,78,0,0,729,727,1,0,0,0,729,728,1,0,0,0,730,731,
        1,0,0,0,731,732,5,5,0,0,732,733,3,92,46,0,733,734,5,4,0,0,734,95,
        1,0,0,0,735,743,5,2,0,0,736,737,5,78,0,0,737,738,5,94,0,0,738,739,
        3,118,59,0,739,740,5,90,0,0,740,742,1,0,0,0,741,736,1,0,0,0,742,
        745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,
        743,1,0,0,0,746,747,5,3,0,0,747,748,5,4,0,0,748,749,3,118,59,0,749,
        97,1,0,0,0,750,751,3,118,59,0,751,752,5,5,0,0,752,753,3,118,59,0,
        753,754,5,4,0,0,754,99,1,0,0,0,755,756,5,44,0,0,756,757,5,78,0,0,
        757,758,5,45,0,0,758,759,3,118,59,0,759,760,3,68,34,0,760,101,1,
        0,0,0,761,762,5,46,0,0,762,763,3,118,59,0,763,770,3,68,34,0,764,
        765,5,47,0,0,765,766,3,118,59,0,766,767,3,68,34,0,767,769,1,0,0,
        0,768,764,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,
        0,771,775,1,0,0,0,772,770,1,0,0,0,773,774,5,29,0,0,774,776,3,68,
        34,0,775,773,1,0,0,0,775,776,1,0,0,0,776,103,1,0,0,0,777,778,3,118,
        59,0,778,779,5,4,0,0,779,105,1,0,0,0,780,782,5,42,0,0,781,783,3,
        118,59,0,782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,787,
        5,4,0,0,785,787,5,78,0,0,786,780,1,0,0,0,786,785,1,0,0,0,787,107,
        1,0,0,0,788,789,5,48,0,0,789,790,3,68,34,0,790,109,1,0,0,0,791,793,
        5,49,0,0,792,794,3,58,29,0,793,792,1,0,0,0,793,794,1,0,0,0,794,795,
        1,0,0,0,795,796,5,91,0,0,796,797,3,118,59,0,797,798,5,92,0,0,798,
        111,1,0,0,0,799,800,5,50,0,0,800,801,5,91,0,0,801,802,3,118,59,0,
        802,803,5,92,0,0,803,113,1,0,0,0,804,806,5,49,0,0,805,807,3,58,29,
        0,806,805,1,0,0,0,806,807,1,0,0,0,807,115,1,0,0,0,808,809,5,50,0,
        0,809,117,1,0,0,0,810,811,6,59,-1,0,811,812,3,152,76,0,812,813,3,
        118,59,25,813,836,1,0,0,0,814,836,3,164,82,0,815,836,3,48,24,0,816,
        817,3,132,66,0,817,818,3,118,59,21,818,836,1,0,0,0,819,836,3,156,
        78,0,820,836,3,150,75,0,821,836,3,128,64,0,822,823,3,154,77,0,823,
        824,3,118,59,17,824,836,1,0,0,0,825,836,3,162,81,0,826,836,3,122,
        61,0,827,836,3,120,60,0,828,836,3,160,80,0,829,836,3,124,62,0,830,
        831,3,134,67,0,831,832,3,118,59,3,832,836,1,0,0,0,833,836,3,130,
        65,0,834,836,3,158,79,0,835,810,1,0,0,0,835,814,1,0,0,0,835,815,
        1,0,0,0,835,816,1,0,0,0,835,819,1,0,0,0,835,820,1,0,0,0,835,821,
        1,0,0,0,835,822,1,0,0,0,835,825,1,0,0,0,835,826,1,0,0,0,835,827,
        1,0,0,0,835,828,1,0,0,0,835,829,1,0,0,0,835,830,1,0,0,0,835,833,
        1,0,0,0,835,834,1,0,0,0,836,867,1,0,0,0,837,838,10,11,0,0,838,839,
        3,142,71,0,839,840,3,118,59,12,840,866,1,0,0,0,841,842,10,10,0,0,
        842,843,3,146,73,0,843,844,3,118,59,11,844,866,1,0,0,0,845,846,10,
        9,0,0,846,847,3,148,74,0,847,848,3,118,59,10,848,866,1,0,0,0,849,
        850,10,8,0,0,850,851,3,144,72,0,851,852,3,118,59,9,852,866,1,0,0,
        0,853,854,10,7,0,0,854,855,3,140,70,0,855,856,3,118,59,8,856,866,
        1,0,0,0,857,858,10,22,0,0,858,866,3,138,69,0,859,860,10,14,0,0,860,
        866,3,166,83,0,861,862,10,13,0,0,862,866,3,126,63,0,863,864,10,4,
        0,0,864,866,3,168,84,0,865,837,1,0,0,0,865,841,1,0,0,0,865,845,1,
        0,0,0,865,849,1,0,0,0,865,853,1,0,0,0,865,857,1,0,0,0,865,859,1,
        0,0,0,865,861,1,0,0,0,865,863,1,0,0,0,866,869,1,0,0,0,867,865,1,
        0,0,0,867,868,1,0,0,0,868,119,1,0,0,0,869,867,1,0,0,0,870,871,3,
        58,29,0,871,872,3,64,32,0,872,121,1,0,0,0,873,874,5,8,0,0,874,875,
        5,2,0,0,875,876,3,118,59,0,876,877,5,3,0,0,877,123,1,0,0,0,878,879,
        5,25,0,0,879,880,3,118,59,0,880,881,5,86,0,0,881,125,1,0,0,0,882,
        883,3,58,29,0,883,127,1,0,0,0,884,885,5,78,0,0,885,886,5,5,0,0,886,
        887,5,2,0,0,887,888,3,118,59,0,888,889,5,3,0,0,889,890,5,4,0,0,890,
        129,1,0,0,0,891,893,5,78,0,0,892,894,5,85,0,0,893,892,1,0,0,0,893,
        894,1,0,0,0,894,895,1,0,0,0,895,896,5,88,0,0,896,897,5,79,0,0,897,
        898,5,4,0,0,898,899,3,118,59,0,899,900,5,89,0,0,900,131,1,0,0,0,
        901,902,5,78,0,0,902,904,5,84,0,0,903,901,1,0,0,0,904,905,1,0,0,
        0,905,903,1,0,0,0,905,906,1,0,0,0,906,133,1,0,0,0,907,909,5,28,0,
        0,908,907,1,0,0,0,908,909,1,0,0,0,909,910,1,0,0,0,910,911,3,136,
        68,0,911,912,5,5,0,0,912,135,1,0,0,0,913,915,5,30,0,0,914,913,1,
        0,0,0,914,915,1,0,0,0,915,917,1,0,0,0,916,918,5,13,0,0,917,916,1,
        0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,919,931,5,78,0,0,920,921,5,
        78,0,0,921,923,5,91,0,0,922,924,5,30,0,0,923,922,1,0,0,0,923,924,
        1,0,0,0,924,926,1,0,0,0,925,927,5,13,0,0,926,925,1,0,0,0,926,927,
        1,0,0,0,927,928,1,0,0,0,928,929,5,78,0,0,929,931,5,92,0,0,930,914,
        1,0,0,0,930,920,1,0,0,0,931,137,1,0,0,0,932,933,5,51,0,0,933,938,
        3,58,29,0,934,935,5,51,0,0,935,937,3,58,29,0,936,934,1,0,0,0,937,
        940,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,139,1,0,0,0,940,
        938,1,0,0,0,941,942,7,4,0,0,942,141,1,0,0,0,943,944,5,52,0,0,944,
        143,1,0,0,0,945,946,7,5,0,0,946,145,1,0,0,0,947,948,7,6,0,0,948,
        147,1,0,0,0,949,950,7,7,0,0,950,149,1,0,0,0,951,952,5,78,0,0,952,
        953,5,2,0,0,953,958,3,50,25,0,954,955,5,90,0,0,955,957,3,50,25,0,
        956,954,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,
        959,962,1,0,0,0,960,958,1,0,0,0,961,963,5,90,0,0,962,961,1,0,0,0,
        962,963,1,0,0,0,963,964,1,0,0,0,964,965,5,3,0,0,965,151,1,0,0,0,
        966,967,5,13,0,0,967,153,1,0,0,0,968,969,7,8,0,0,969,155,1,0,0,0,
        970,971,5,91,0,0,971,972,3,118,59,0,972,973,5,92,0,0,973,157,1,0,
        0,0,974,975,5,20,0,0,975,976,3,118,59,0,976,159,1,0,0,0,977,981,
        5,2,0,0,978,980,3,70,35,0,979,978,1,0,0,0,980,983,1,0,0,0,981,979,
        1,0,0,0,981,982,1,0,0,0,982,984,1,0,0,0,983,981,1,0,0,0,984,985,
        3,118,59,0,985,986,5,3,0,0,986,161,1,0,0,0,987,988,5,19,0,0,988,
        989,3,118,59,0,989,163,1,0,0,0,990,993,3,172,86,0,991,993,5,78,0,
        0,992,990,1,0,0,0,992,991,1,0,0,0,993,165,1,0,0,0,994,995,5,88,0,
        0,995,996,3,164,82,0,996,997,5,89,0,0,997,1005,1,0,0,0,998,999,5,
        64,0,0,999,1001,3,164,82,0,1000,998,1,0,0,0,1001,1002,1,0,0,0,1002,
        1000,1,0,0,0,1002,1003,1,0,0,0,1003,1005,1,0,0,0,1004,994,1,0,0,
        0,1004,1000,1,0,0,0,1005,167,1,0,0,0,1006,1008,5,85,0,0,1007,1006,
        1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1010,3,170,85,0,
        1010,169,1,0,0,0,1011,1024,5,18,0,0,1012,1013,5,91,0,0,1013,1018,
        3,118,59,0,1014,1015,5,90,0,0,1015,1017,3,118,59,0,1016,1014,1,0,
        0,0,1017,1020,1,0,0,0,1018,1016,1,0,0,0,1018,1019,1,0,0,0,1019,1021,
        1,0,0,0,1020,1018,1,0,0,0,1021,1022,5,92,0,0,1022,1024,1,0,0,0,1023,
        1011,1,0,0,0,1023,1012,1,0,0,0,1024,171,1,0,0,0,1025,1037,3,178,
        89,0,1026,1037,5,82,0,0,1027,1037,5,79,0,0,1028,1037,5,80,0,0,1029,
        1037,5,81,0,0,1030,1037,5,76,0,0,1031,1037,5,77,0,0,1032,1037,3,
        176,88,0,1033,1037,5,83,0,0,1034,1037,3,174,87,0,1035,1037,5,75,
        0,0,1036,1025,1,0,0,0,1036,1026,1,0,0,0,1036,1027,1,0,0,0,1036,1028,
        1,0,0,0,1036,1029,1,0,0,0,1036,1030,1,0,0,0,1036,1031,1,0,0,0,1036,
        1032,1,0,0,0,1036,1033,1,0,0,0,1036,1034,1,0,0,0,1036,1035,1,0,0,
        0,1037,173,1,0,0,0,1038,1050,5,65,0,0,1039,1050,5,66,0,0,1040,1050,
        5,67,0,0,1041,1042,5,68,0,0,1042,1043,5,91,0,0,1043,1050,5,69,0,
        0,1044,1045,5,68,0,0,1045,1046,5,92,0,0,1046,1050,5,69,0,0,1047,
        1050,5,70,0,0,1048,1050,5,71,0,0,1049,1038,1,0,0,0,1049,1039,1,0,
        0,0,1049,1040,1,0,0,0,1049,1041,1,0,0,0,1049,1044,1,0,0,0,1049,1047,
        1,0,0,0,1049,1048,1,0,0,0,1050,175,1,0,0,0,1051,1052,7,9,0,0,1052,
        177,1,0,0,0,1053,1055,5,78,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,
        0,1055,1057,1,0,0,0,1056,1058,5,85,0,0,1057,1056,1,0,0,0,1057,1058,
        1,0,0,0,1058,1059,1,0,0,0,1059,1060,5,88,0,0,1060,1065,3,118,59,
        0,1061,1062,5,90,0,0,1062,1064,3,118,59,0,1063,1061,1,0,0,0,1064,
        1067,1,0,0,0,1065,1063,1,0,0,0,1065,1066,1,0,0,0,1066,1068,1,0,0,
        0,1067,1065,1,0,0,0,1068,1069,5,89,0,0,1069,1091,1,0,0,0,1070,1072,
        5,78,0,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,1074,1,0,0,0,1073,
        1075,5,85,0,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,
        0,0,1076,1077,5,88,0,0,1077,1078,3,118,59,0,1078,1079,5,4,0,0,1079,
        1080,3,118,59,0,1080,1081,5,89,0,0,1081,1091,1,0,0,0,1082,1084,5,
        78,0,0,1083,1082,1,0,0,0,1083,1084,1,0,0,0,1084,1086,1,0,0,0,1085,
        1087,5,85,0,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,1088,1,0,
        0,0,1088,1089,5,88,0,0,1089,1091,5,89,0,0,1090,1054,1,0,0,0,1090,
        1071,1,0,0,0,1090,1083,1,0,0,0,1091,179,1,0,0,0,1092,1096,5,72,0,
        0,1093,1095,9,0,0,0,1094,1093,1,0,0,0,1095,1098,1,0,0,0,1096,1097,
        1,0,0,0,1096,1094,1,0,0,0,1097,1099,1,0,0,0,1098,1096,1,0,0,0,1099,
        1100,5,72,0,0,1100,181,1,0,0,0,126,185,194,200,204,208,215,224,227,
        230,243,247,252,258,261,275,285,291,297,301,309,315,320,323,330,
        335,338,341,346,354,359,363,378,385,391,396,404,410,416,423,431,
        434,437,440,443,450,453,456,459,468,472,475,478,483,487,492,503,
        511,516,525,530,544,549,556,559,568,574,578,603,606,610,636,640,
        648,652,657,660,663,668,683,692,699,701,707,716,719,723,729,743,
        770,775,782,786,793,806,835,865,867,893,905,908,914,917,923,926,
        930,938,958,962,981,992,1002,1004,1007,1018,1023,1036,1049,1054,
        1057,1065,1071,1074,1083,1086,1090,1096
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'use'", "'{'", "'}'", "';'", "'='", "'const'", 
                     "'union'", "'unsafe'", "'type'", "'impl'", "'extern'", 
                     "'static'", "'mut'", "'fn'", "'->'", "'pub'", "'struct'", 
                     "'()'", "'&'", "'*'", "'i32'", "'String'", "'bool'", 
                     "'u8'", "'<'", "'break'", "'continue'", "'let'", "'else'", 
                     "'ref'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'match'", "'|'", "'=>'", "'return'", 
                     "'while'", "'for'", "'in'", "'if'", "'else if'", "'loop'", 
                     "'Box'", "'Some'", "'as'", "'..'", "'=='", "'!='", 
                     "'||'", "'&&'", "'>>'", "'>='", "'<='", "'/'", "'%'", 
                     "'+'", "'-'", "'.'", "'b'.''", "'b'|''", "'b'*''", 
                     "'b''", "'''", "'b'+''", "'b'?''", "'\"'", "'true'", 
                     "'false'", "'None'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'::'", "'!'", "'>'", "'#'", "'['", "']'", 
                     "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "TRUE", "FALSE", "NONE", "Binary", "STRING_LITERAL", 
                      "Identifier", "Number", "SignedNumber", "BYTE_STRING_LITERAL", 
                      "HexNumber", "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", 
                      "GT", "POUND", "LBRACK", "RBRACK", "COMMA", "LPAREN", 
                      "RPAREN", "UNDERSCORE", "COLON", "ELLIPSIS", "WS", 
                      "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_useDecl = 2
    RULE_topLevelDef = 3
    RULE_topLevelVarDef = 4
    RULE_defKind = 5
    RULE_varDefField = 6
    RULE_typeAlias = 7
    RULE_interfaceDef = 8
    RULE_externBlock = 9
    RULE_externItem = 10
    RULE_externParams = 11
    RULE_externParam = 12
    RULE_visibility = 13
    RULE_unsafeModifier = 14
    RULE_externAbi = 15
    RULE_attributes = 16
    RULE_innerAttribute = 17
    RULE_attribute = 18
    RULE_attrArgs = 19
    RULE_attrArg = 20
    RULE_attrValue = 21
    RULE_structDef = 22
    RULE_structField = 23
    RULE_structLiteral = 24
    RULE_structLiteralField = 25
    RULE_functionDef = 26
    RULE_paramList = 27
    RULE_param = 28
    RULE_typeExpr = 29
    RULE_pointerType = 30
    RULE_basicType = 31
    RULE_typePath = 32
    RULE_arrayType = 33
    RULE_block = 34
    RULE_statement = 35
    RULE_conditionalAssignmentStmt = 36
    RULE_callStmt = 37
    RULE_letStmt = 38
    RULE_varDef = 39
    RULE_compoundOp = 40
    RULE_compoundAssignment = 41
    RULE_matchStmt = 42
    RULE_matchArm = 43
    RULE_matchPattern = 44
    RULE_whileStmt = 45
    RULE_initializer = 46
    RULE_staticVarDecl = 47
    RULE_initBlock = 48
    RULE_assignStmt = 49
    RULE_forStmt = 50
    RULE_ifStmt = 51
    RULE_exprStmt = 52
    RULE_returnStmt = 53
    RULE_loopStmt = 54
    RULE_boxWrappwer = 55
    RULE_typeWrapper = 56
    RULE_boxWrapperPrefix = 57
    RULE_typeWrapperPrefix = 58
    RULE_expression = 59
    RULE_basicTypeCastExpr = 60
    RULE_unsafeExpression = 61
    RULE_qualifiedExpression = 62
    RULE_typeAccessPostfix = 63
    RULE_structDefInit = 64
    RULE_arrayDeclaration = 65
    RULE_typePathExpression = 66
    RULE_patternPrefix = 67
    RULE_pattern = 68
    RULE_castExpressionPostFix = 69
    RULE_compoundOps = 70
    RULE_rangeSymbol = 71
    RULE_conditionalOps = 72
    RULE_booleanOps = 73
    RULE_binaryOps = 74
    RULE_structFieldDec = 75
    RULE_mutableExpression = 76
    RULE_unaryOpes = 77
    RULE_parenExpression = 78
    RULE_dereferenceExpression = 79
    RULE_expressionBlock = 80
    RULE_borrowExpression = 81
    RULE_primaryExpression = 82
    RULE_fieldAccessPostFix = 83
    RULE_callExpressionPostFix = 84
    RULE_functionCallArgs = 85
    RULE_literal = 86
    RULE_byteLiteral = 87
    RULE_booleanLiteral = 88
    RULE_arrayLiteral = 89
    RULE_stringLiteral = 90

    ruleNames =  [ "program", "topLevelItem", "useDecl", "topLevelDef", 
                   "topLevelVarDef", "defKind", "varDefField", "typeAlias", 
                   "interfaceDef", "externBlock", "externItem", "externParams", 
                   "externParam", "visibility", "unsafeModifier", "externAbi", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "structLiteral", 
                   "structLiteralField", "functionDef", "paramList", "param", 
                   "typeExpr", "pointerType", "basicType", "typePath", "arrayType", 
                   "block", "statement", "conditionalAssignmentStmt", "callStmt", 
                   "letStmt", "varDef", "compoundOp", "compoundAssignment", 
                   "matchStmt", "matchArm", "matchPattern", "whileStmt", 
                   "initializer", "staticVarDecl", "initBlock", "assignStmt", 
                   "forStmt", "ifStmt", "exprStmt", "returnStmt", "loopStmt", 
                   "boxWrappwer", "typeWrapper", "boxWrapperPrefix", "typeWrapperPrefix", 
                   "expression", "basicTypeCastExpr", "unsafeExpression", 
                   "qualifiedExpression", "typeAccessPostfix", "structDefInit", 
                   "arrayDeclaration", "typePathExpression", "patternPrefix", 
                   "pattern", "castExpressionPostFix", "compoundOps", "rangeSymbol", 
                   "conditionalOps", "booleanOps", "binaryOps", "structFieldDec", 
                   "mutableExpression", "unaryOpes", "parenExpression", 
                   "dereferenceExpression", "expressionBlock", "borrowExpression", 
                   "primaryExpression", "fieldAccessPostFix", "callExpressionPostFix", 
                   "functionCallArgs", "literal", "byteLiteral", "booleanLiteral", 
                   "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    TRUE=73
    FALSE=74
    NONE=75
    Binary=76
    STRING_LITERAL=77
    Identifier=78
    Number=79
    SignedNumber=80
    BYTE_STRING_LITERAL=81
    HexNumber=82
    CHAR_LITERAL=83
    DOUBLE_COLON=84
    EXCL=85
    GT=86
    POUND=87
    LBRACK=88
    RBRACK=89
    COMMA=90
    LPAREN=91
    RPAREN=92
    UNDERSCORE=93
    COLON=94
    ELLIPSIS=95
    WS=96
    COMMENT=97

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 221122) != 0) or _la==78 or _la==87:
                self.state = 182
                self.topLevelItem()
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def useDecl(self):
            return self.getTypedRuleContext(RustParser.UseDeclContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 188
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 189
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 190
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 191
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 192
                self.useDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 193
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypePathContext)
            else:
                return self.getTypedRuleContext(RustParser.TypePathContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_useDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDecl" ):
                listener.enterUseDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDecl" ):
                listener.exitUseDecl(self)




    def useDecl(self):

        localctx = RustParser.UseDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_useDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.match(RustParser.T__0)
            self.state = 197
            self.typePath()
            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 198
                self.match(RustParser.T__1)
                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78 or _la==84:
                    self.state = 200
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 199
                        self.typePath()


                    self.state = 202
                    self.match(RustParser.Identifier)
                    self.state = 204
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 203
                        self.match(RustParser.COMMA)


                    self.state = 210
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 211
                self.match(RustParser.T__2)
                self.state = 212
                self.match(RustParser.COMMA)
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 218
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def topLevelVarDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelVarDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_topLevelDef)
        try:
            self.state = 224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 220
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 221
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 222
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 223
                self.topLevelVarDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelVarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def defKind(self):
            return self.getTypedRuleContext(RustParser.DefKindContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def varDefField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelVarDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelVarDef" ):
                listener.enterTopLevelVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelVarDef" ):
                listener.exitTopLevelVarDef(self)




    def topLevelVarDef(self):

        localctx = RustParser.TopLevelVarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_topLevelVarDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 226
                self.visibility()


            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0):
                self.state = 229
                self.defKind()


            self.state = 232
            self.match(RustParser.Identifier)
            self.state = 247
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.state = 233
                self.match(RustParser.COLON)
                self.state = 234
                self.typeExpr()
                self.state = 235
                self.match(RustParser.T__4)
                self.state = 236
                self.expression(0)
                self.state = 237
                self.match(RustParser.T__3)
                pass
            elif token in [2]:
                self.state = 239
                self.match(RustParser.T__1)
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16 or _la==78:
                    self.state = 240
                    self.varDefField()
                    self.state = 245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 246
                self.match(RustParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_defKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefKind" ):
                listener.enterDefKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefKind" ):
                listener.exitDefKind(self)




    def defKind(self):

        localctx = RustParser.DefKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_defKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_varDefField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDefField" ):
                listener.enterVarDefField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDefField" ):
                listener.exitVarDefField(self)




    def varDefField(self):

        localctx = RustParser.VarDefFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_varDefField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 251
                self.visibility()


            self.state = 254
            self.match(RustParser.Identifier)
            self.state = 255
            self.match(RustParser.COLON)
            self.state = 256
            self.typeExpr()
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 257
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 260
                self.visibility()


            self.state = 263
            self.match(RustParser.T__8)
            self.state = 264
            self.match(RustParser.Identifier)
            self.state = 265
            self.match(RustParser.T__4)
            self.state = 266
            self.typeExpr()
            self.state = 267
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(RustParser.T__9)
            self.state = 270
            self.match(RustParser.Identifier)
            self.state = 271
            self.match(RustParser.T__1)
            self.state = 273 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 272
                self.functionDef()
                self.state = 275 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 84224) != 0)):
                    break

            self.state = 277
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(RustParser.T__10)
            self.state = 280
            self.match(RustParser.STRING_LITERAL)
            self.state = 281
            self.match(RustParser.T__1)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 86528) != 0):
                self.state = 282
                self.externItem()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 288
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 290
                    self.visibility()


                self.state = 293
                self.match(RustParser.T__8)
                self.state = 294
                self.match(RustParser.Identifier)
                self.state = 295
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 296
                    self.visibility()


                self.state = 299
                self.match(RustParser.T__11)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 300
                    self.match(RustParser.T__12)


                self.state = 303
                self.match(RustParser.Identifier)
                self.state = 304
                self.match(RustParser.COLON)
                self.state = 305
                self.typeExpr()
                self.state = 306
                self.match(RustParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 308
                    self.visibility()


                self.state = 311
                self.match(RustParser.T__13)
                self.state = 312
                self.match(RustParser.Identifier)
                self.state = 313
                self.match(RustParser.LPAREN)
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 229377) != 0):
                    self.state = 314
                    self.externParams()


                self.state = 317
                self.match(RustParser.RPAREN)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 318
                    self.match(RustParser.T__14)
                    self.state = 319
                    self.typeExpr()


                self.state = 322
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 338
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 93, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.externParam()
                self.state = 330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 326
                        self.match(RustParser.COMMA)
                        self.state = 327
                        self.externParam() 
                    self.state = 332
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 333
                    self.match(RustParser.COMMA)
                    self.state = 334
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 337
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78 or _la==93:
                self.state = 340
                _la = self._input.LA(1)
                if not(_la==78 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 343
            self.match(RustParser.COLON)
            self.state = 346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 22, 23, 24, 25, 78, 84, 88]:
                self.state = 344
                self.typeExpr()
                pass
            elif token in [95]:
                self.state = 345
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(RustParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(RustParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(RustParser.T__10)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 353
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 356
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 359 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(RustParser.POUND)

            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 362
                self.match(RustParser.EXCL)


            self.state = 365
            self.match(RustParser.LBRACK)
            self.state = 366
            self.attribute()
            self.state = 367
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attribute)
        try:
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 369
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 370
                self.match(RustParser.Identifier)
                self.state = 371
                self.match(RustParser.T__4)
                self.state = 372
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 373
                self.match(RustParser.Identifier)
                self.state = 374
                self.match(RustParser.LPAREN)
                self.state = 375
                self.attrArgs()
                self.state = 376
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.attrArg()
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 381
                self.match(RustParser.COMMA)
                self.state = 382
                self.attrArg()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(RustParser.Identifier)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 389
                self.match(RustParser.T__4)
                self.state = 390
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            _la = self._input.LA(1)
            if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 395
                self.visibility()


            self.state = 398
            self.match(RustParser.T__16)
            self.state = 399
            self.match(RustParser.Identifier)
            self.state = 400
            self.match(RustParser.T__1)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16 or _la==78:
                self.state = 401
                self.structField()
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 407
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 409
                self.visibility()


            self.state = 412
            self.match(RustParser.Identifier)
            self.state = 413
            self.match(RustParser.COLON)
            self.state = 414
            self.typeExpr()
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 415
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(RustParser.Identifier)
            self.state = 419
            self.match(RustParser.T__1)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 420
                self.structLiteralField()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 426
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(RustParser.Identifier)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 429
                self.match(RustParser.COLON)
                self.state = 430
                self.expression(0)


            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 433
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 436
                self.visibility()


            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 439
                self.unsafeModifier()


            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 442
                self.externAbi()


            self.state = 445
            self.match(RustParser.T__13)
            self.state = 446
            self.match(RustParser.Identifier)
            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.state = 447
                self.match(RustParser.T__17)
                pass
            elif token in [91]:
                self.state = 448
                self.match(RustParser.LPAREN)
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==19 or _la==78:
                    self.state = 449
                    self.paramList()


                self.state = 452
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 455
                self.match(RustParser.T__14)


            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 66584576) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1089) != 0):
                self.state = 458
                self.typeExpr()


            self.state = 461
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.param()
            self.state = 468
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 464
                    self.match(RustParser.COMMA)
                    self.state = 465
                    self.param() 
                self.state = 470
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 471
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 474
                self.match(RustParser.T__18)


            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 477
                self.match(RustParser.T__12)


            self.state = 480
            self.match(RustParser.Identifier)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 481
                self.match(RustParser.COLON)
                self.state = 482
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpr" ):
                listener.enterTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpr" ):
                listener.exitTypeExpr(self)




    def typeExpr(self):

        localctx = RustParser.TypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_typeExpr)
        try:
            self.state = 487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 21, 22, 23, 24, 25, 78, 84, 88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 485
                self.basicType()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 486
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(RustParser.T__19)
            self.state = 490
            _la = self._input.LA(1)
            if not(_la==6 or _la==13):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 491
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(RustParser.ArrayTypeContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.match(RustParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.match(RustParser.T__21)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.match(RustParser.T__22)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 497
                self.match(RustParser.T__23)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 498
                self.arrayType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 499
                self.typePath()
                self.state = 500
                self.basicType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 502
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 505
                self.match(RustParser.T__24)
                self.state = 506
                self.typeExpr()
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 507
                    self.match(RustParser.COMMA)
                    self.state = 508
                    self.typeExpr()
                    self.state = 513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 514
                self.match(RustParser.GT)
                self.state = 516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 515
                    self.match(RustParser.T__17)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 518
                self.match(RustParser.Identifier)
                self.state = 530
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 519
                    self.match(RustParser.T__24)
                    self.state = 520
                    self.typeExpr()
                    self.state = 525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==90:
                        self.state = 521
                        self.match(RustParser.COMMA)
                        self.state = 522
                        self.typeExpr()
                        self.state = 527
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 528
                    self.match(RustParser.GT)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 532
                self.match(RustParser.Identifier)
                self.state = 533
                self.match(RustParser.T__24)
                self.state = 534
                self.typeExpr()
                self.state = 535
                self.match(RustParser.GT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 537
                self.match(RustParser.T__18)
                self.state = 538
                self.typeExpr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 539
                self.match(RustParser.LBRACK)
                self.state = 540
                self.typeExpr()
                self.state = 541
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 543
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.match(RustParser.Identifier)
                self.state = 547
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 548
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 551
                self.match(RustParser.Identifier)
                self.state = 556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 552
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 553
                        self.match(RustParser.Identifier) 
                    self.state = 558
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = RustParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(RustParser.LBRACK)
            self.state = 562
            self.basicType()
            self.state = 563
            self.match(RustParser.T__3)
            self.state = 564
            self.match(RustParser.Number)
            self.state = 565
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 567
                self.unsafeModifier()


            self.state = 570
            self.match(RustParser.T__1)
            self.state = 574
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 571
                    self.statement() 
                self.state = 576
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==78:
                self.state = 577
                self.returnStmt()


            self.state = 580
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def conditionalAssignmentStmt(self):
            return self.getTypedRuleContext(RustParser.ConditionalAssignmentStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def callStmt(self):
            return self.getTypedRuleContext(RustParser.CallStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_statement)
        try:
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 582
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.letStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 584
                self.conditionalAssignmentStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 585
                self.structLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 586
                self.structDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 587
                self.staticVarDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 588
                self.typeWrapper()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 589
                self.assignStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 590
                self.compoundAssignment()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 591
                self.forStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 592
                self.ifStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 593
                self.callStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 594
                self.exprStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 595
                self.whileStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 596
                self.returnStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 597
                self.loopStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 598
                self.match(RustParser.T__25)
                self.state = 599
                self.match(RustParser.T__3)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 600
                self.match(RustParser.T__26)
                self.state = 601
                self.match(RustParser.T__3)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 602
                self.matchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalAssignmentStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_conditionalAssignmentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAssignmentStmt" ):
                listener.enterConditionalAssignmentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAssignmentStmt" ):
                listener.exitConditionalAssignmentStmt(self)




    def conditionalAssignmentStmt(self):

        localctx = RustParser.ConditionalAssignmentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_conditionalAssignmentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 605
                self.match(RustParser.T__27)


            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.state = 608
                self.typeWrapper()
                pass
            elif token in [2, 8, 13, 19, 20, 21, 22, 23, 24, 25, 28, 30, 62, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 91]:
                self.state = 609
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 612
            self.match(RustParser.T__4)
            self.state = 613
            self.expression(0)
            self.state = 614
            self.match(RustParser.T__28)
            self.state = 615
            self.block()
            self.state = 616
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStmt" ):
                listener.enterCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStmt" ):
                listener.exitCallStmt(self)




    def callStmt(self):

        localctx = RustParser.CallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_callStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.expression(0)
            self.state = 619
            self.callExpressionPostFix()
            self.state = 620
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.match(RustParser.T__27)
                self.state = 623
                self.varDef()
                self.state = 624
                self.match(RustParser.T__4)
                self.state = 625
                self.expression(0)
                self.state = 626
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.match(RustParser.T__27)
                self.state = 629
                self.varDef()
                self.state = 630
                self.initBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 632
                self.match(RustParser.T__27)
                self.state = 633
                self.match(RustParser.LPAREN)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13 or _la==30 or _la==78:
                    self.state = 634
                    self.varDef()
                    self.state = 636
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 635
                        self.match(RustParser.COMMA)


                    self.state = 642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 643
                self.match(RustParser.RPAREN)
                self.state = 644
                self.match(RustParser.T__4)
                self.state = 645
                self.match(RustParser.LPAREN)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686017018617596) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 77594479) != 0):
                    self.state = 646
                    self.expression(0)
                    self.state = 648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 647
                        self.match(RustParser.COMMA)


                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 655
                self.match(RustParser.RPAREN)
                self.state = 656
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 659
                self.match(RustParser.T__29)


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 662
                self.match(RustParser.T__12)


            self.state = 665
            self.match(RustParser.Identifier)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 666
                self.match(RustParser.COLON)
                self.state = 667
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 547608330240) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.expression(0)
            self.state = 673
            self.compoundOp()
            self.state = 674
            self.expression(0)
            self.state = 675
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(RustParser.T__38)
            self.state = 678
            self.expression(0)
            self.state = 679
            self.match(RustParser.T__1)
            self.state = 681 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 680
                self.matchArm()
                self.state = 683 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 268460143) != 0)):
                    break

            self.state = 685
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.matchPattern()
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==40:
                self.state = 688
                self.match(RustParser.T__39)
                self.state = 689
                self.matchPattern()
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 695
            self.match(RustParser.T__40)
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 8]:
                self.state = 696
                self.block()
                pass
            elif token in [42]:
                self.state = 697
                self.match(RustParser.T__41)
                self.state = 699
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 698
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_matchPattern)
        try:
            self.state = 707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 67, 68, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 703
                self.byteLiteral()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 704
                self.match(RustParser.Number)
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 3)
                self.state = 705
                self.match(RustParser.UNDERSCORE)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 4)
                self.state = 706
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(RustParser.T__42)
            self.state = 710
            self.expression(0)
            self.state = 711
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_initializer)
        try:
            self.state = 716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 715
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 718
                self.visibility()


            self.state = 721
            self.match(RustParser.T__11)
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 722
                self.match(RustParser.T__12)


            self.state = 725
            self.match(RustParser.Identifier)
            self.state = 726
            self.match(RustParser.COLON)
            self.state = 729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 727
                self.typeExpr()
                pass

            elif la_ == 2:
                self.state = 728
                self.match(RustParser.Identifier)
                pass


            self.state = 731
            self.match(RustParser.T__4)
            self.state = 732
            self.initializer()
            self.state = 733
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(RustParser.T__1)
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 736
                self.match(RustParser.Identifier)
                self.state = 737
                self.match(RustParser.COLON)
                self.state = 738
                self.expression(0)
                self.state = 739
                self.match(RustParser.COMMA)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 746
            self.match(RustParser.T__2)
            self.state = 747
            self.match(RustParser.T__3)
            self.state = 748
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.expression(0)
            self.state = 751
            self.match(RustParser.T__4)
            self.state = 752
            self.expression(0)
            self.state = 753
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(RustParser.T__43)
            self.state = 756
            self.match(RustParser.Identifier)
            self.state = 757
            self.match(RustParser.T__44)
            self.state = 758
            self.expression(0)
            self.state = 759
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(RustParser.T__45)
            self.state = 762
            self.expression(0)
            self.state = 763
            self.block()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==47:
                self.state = 764
                self.match(RustParser.T__46)
                self.state = 765
                self.expression(0)
                self.state = 766
                self.block()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 773
                self.match(RustParser.T__28)
                self.state = 774
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.expression(0)
            self.state = 778
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self.match(RustParser.T__41)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686017018617596) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 77594479) != 0):
                    self.state = 781
                    self.expression(0)


                self.state = 784
                self.match(RustParser.T__3)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(RustParser.T__47)
            self.state = 789
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrappwerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrappwer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrappwer" ):
                listener.enterBoxWrappwer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrappwer" ):
                listener.exitBoxWrappwer(self)




    def boxWrappwer(self):

        localctx = RustParser.BoxWrappwerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_boxWrappwer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(RustParser.T__48)
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 66584576) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1089) != 0):
                self.state = 792
                self.typeExpr()


            self.state = 795
            self.match(RustParser.LPAREN)
            self.state = 796
            self.expression(0)
            self.state = 797
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_typeWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapper" ):
                listener.enterTypeWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapper" ):
                listener.exitTypeWrapper(self)




    def typeWrapper(self):

        localctx = RustParser.TypeWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_typeWrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(RustParser.T__49)
            self.state = 800
            self.match(RustParser.LPAREN)
            self.state = 801
            self.expression(0)
            self.state = 802
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrapperPrefix" ):
                listener.enterBoxWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrapperPrefix" ):
                listener.exitBoxWrapperPrefix(self)




    def boxWrapperPrefix(self):

        localctx = RustParser.BoxWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_boxWrapperPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(RustParser.T__48)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 66584576) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1089) != 0):
                self.state = 805
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_typeWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapperPrefix" ):
                listener.enterTypeWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapperPrefix" ):
                listener.exitTypeWrapperPrefix(self)




    def typeWrapperPrefix(self):

        localctx = RustParser.TypeWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeWrapperPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(RustParser.T__49)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def typePathExpression(self):
            return self.getTypedRuleContext(RustParser.TypePathExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def structDefInit(self):
            return self.getTypedRuleContext(RustParser.StructDefInitContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def unsafeExpression(self):
            return self.getTypedRuleContext(RustParser.UnsafeExpressionContext,0)


        def basicTypeCastExpr(self):
            return self.getTypedRuleContext(RustParser.BasicTypeCastExprContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def qualifiedExpression(self):
            return self.getTypedRuleContext(RustParser.QualifiedExpressionContext,0)


        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(RustParser.ArrayDeclarationContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def rangeSymbol(self):
            return self.getTypedRuleContext(RustParser.RangeSymbolContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def typeAccessPostfix(self):
            return self.getTypedRuleContext(RustParser.TypeAccessPostfixContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 811
                self.mutableExpression()
                self.state = 812
                self.expression(25)
                pass

            elif la_ == 2:
                self.state = 814
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.state = 815
                self.structLiteral()
                pass

            elif la_ == 4:
                self.state = 816
                self.typePathExpression()
                self.state = 817
                self.expression(21)
                pass

            elif la_ == 5:
                self.state = 819
                self.parenExpression()
                pass

            elif la_ == 6:
                self.state = 820
                self.structFieldDec()
                pass

            elif la_ == 7:
                self.state = 821
                self.structDefInit()
                pass

            elif la_ == 8:
                self.state = 822
                self.unaryOpes()
                self.state = 823
                self.expression(17)
                pass

            elif la_ == 9:
                self.state = 825
                self.borrowExpression()
                pass

            elif la_ == 10:
                self.state = 826
                self.unsafeExpression()
                pass

            elif la_ == 11:
                self.state = 827
                self.basicTypeCastExpr()
                pass

            elif la_ == 12:
                self.state = 828
                self.expressionBlock()
                pass

            elif la_ == 13:
                self.state = 829
                self.qualifiedExpression()
                pass

            elif la_ == 14:
                self.state = 830
                self.patternPrefix()
                self.state = 831
                self.expression(3)
                pass

            elif la_ == 15:
                self.state = 833
                self.arrayDeclaration()
                pass

            elif la_ == 16:
                self.state = 834
                self.dereferenceExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 865
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 837
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 838
                        self.rangeSymbol()
                        self.state = 839
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 841
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 842
                        self.booleanOps()
                        self.state = 843
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 845
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 846
                        self.binaryOps()
                        self.state = 847
                        self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 849
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 850
                        self.conditionalOps()
                        self.state = 851
                        self.expression(9)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 853
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 854
                        self.compoundOps()
                        self.state = 855
                        self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 857
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 858
                        self.castExpressionPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 859
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 860
                        self.fieldAccessPostFix()
                        pass

                    elif la_ == 8:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 861
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 862
                        self.typeAccessPostfix()
                        pass

                    elif la_ == 9:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 863
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 864
                        self.callExpressionPostFix()
                        pass

             
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasicTypeCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_basicTypeCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicTypeCastExpr" ):
                listener.enterBasicTypeCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicTypeCastExpr" ):
                listener.exitBasicTypeCastExpr(self)




    def basicTypeCastExpr(self):

        localctx = RustParser.BasicTypeCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_basicTypeCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.typeExpr()
            self.state = 871
            self.typePath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeExpression" ):
                listener.enterUnsafeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeExpression" ):
                listener.exitUnsafeExpression(self)




    def unsafeExpression(self):

        localctx = RustParser.UnsafeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_unsafeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(RustParser.T__7)
            self.state = 874
            self.match(RustParser.T__1)
            self.state = 875
            self.expression(0)
            self.state = 876
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedExpression" ):
                listener.enterQualifiedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedExpression" ):
                listener.exitQualifiedExpression(self)




    def qualifiedExpression(self):

        localctx = RustParser.QualifiedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_qualifiedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(RustParser.T__24)
            self.state = 879
            self.expression(0)
            self.state = 880
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAccessPostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAccessPostfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAccessPostfix" ):
                listener.enterTypeAccessPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAccessPostfix" ):
                listener.exitTypeAccessPostfix(self)




    def typeAccessPostfix(self):

        localctx = RustParser.TypeAccessPostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_typeAccessPostfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.typeExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structDefInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefInit" ):
                listener.enterStructDefInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefInit" ):
                listener.exitStructDefInit(self)




    def structDefInit(self):

        localctx = RustParser.StructDefInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_structDefInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(RustParser.Identifier)
            self.state = 885
            self.match(RustParser.T__4)
            self.state = 886
            self.match(RustParser.T__1)
            self.state = 887
            self.expression(0)
            self.state = 888
            self.match(RustParser.T__2)
            self.state = 889
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)




    def arrayDeclaration(self):

        localctx = RustParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(RustParser.Identifier)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 892
                self.match(RustParser.EXCL)


            self.state = 895
            self.match(RustParser.LBRACK)
            self.state = 896
            self.match(RustParser.Number)
            self.state = 897
            self.match(RustParser.T__3)
            self.state = 898
            self.expression(0)
            self.state = 899
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathExpression" ):
                listener.enterTypePathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathExpression" ):
                listener.exitTypePathExpression(self)




    def typePathExpression(self):

        localctx = RustParser.TypePathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_typePathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 901
                    self.match(RustParser.Identifier)
                    self.state = 902
                    self.match(RustParser.DOUBLE_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 905 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 907
                self.match(RustParser.T__27)


            self.state = 910
            self.pattern()
            self.state = 911
            self.match(RustParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 913
                    self.match(RustParser.T__29)


                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 916
                    self.match(RustParser.T__12)


                self.state = 919
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.match(RustParser.Identifier)
                self.state = 921
                self.match(RustParser.LPAREN)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 922
                    self.match(RustParser.T__29)


                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 925
                    self.match(RustParser.T__12)


                self.state = 928
                self.match(RustParser.Identifier)
                self.state = 929
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(RustParser.T__50)
            self.state = 933
            self.typeExpr()
            self.state = 938
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 934
                    self.match(RustParser.T__50)
                    self.state = 935
                    self.typeExpr() 
                self.state = 940
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 547608330240) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeSymbol" ):
                listener.enterRangeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeSymbol" ):
                listener.exitRangeSymbol(self)




    def rangeSymbol(self):

        localctx = RustParser.RangeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_rangeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(RustParser.T__51)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 2305843013240225793) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1008806316531515392) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504605798400) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(RustParser.Identifier)
            self.state = 952
            self.match(RustParser.T__1)
            self.state = 953
            self.structLiteralField()
            self.state = 958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 954
                    self.match(RustParser.COMMA)
                    self.state = 955
                    self.structLiteralField() 
                self.state = 960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 961
                self.match(RustParser.COMMA)


            self.state = 964
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 8388611) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(RustParser.LPAREN)
            self.state = 971
            self.expression(0)
            self.state = 972
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(RustParser.T__19)
            self.state = 975
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(RustParser.T__1)
            self.state = 981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 978
                    self.statement() 
                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 984
            self.expression(0)
            self.state = 985
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(RustParser.T__18)
            self.state = 988
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_primaryExpression)
        try:
            self.state = 992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_fieldAccessPostFix)
        try:
            self.state = 1004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                self.match(RustParser.LBRACK)
                self.state = 995
                self.primaryExpression()
                self.state = 996
                self.match(RustParser.RBRACK)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1000 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 998
                        self.match(RustParser.T__63)
                        self.state = 999
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1002 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallArgs(self):
            return self.getTypedRuleContext(RustParser.FunctionCallArgsContext,0)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_callExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpressionPostFix" ):
                listener.enterCallExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpressionPostFix" ):
                listener.exitCallExpressionPostFix(self)




    def callExpressionPostFix(self):

        localctx = RustParser.CallExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_callExpressionPostFix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 1006
                self.match(RustParser.EXCL)


            self.state = 1009
            self.functionCallArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_functionCallArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArgs" ):
                listener.enterFunctionCallArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArgs" ):
                listener.exitFunctionCallArgs(self)




    def functionCallArgs(self):

        localctx = RustParser.FunctionCallArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_functionCallArgs)
        self._la = 0 # Token type
        try:
            self.state = 1023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1011
                self.match(RustParser.T__17)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1012
                self.match(RustParser.LPAREN)
                self.state = 1013
                self.expression(0)
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1014
                    self.match(RustParser.COMMA)
                    self.state = 1015
                    self.expression(0)
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1021
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_literal)
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 85, 88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1025
                self.arrayLiteral()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1026
                self.match(RustParser.HexNumber)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1027
                self.match(RustParser.Number)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1028
                self.match(RustParser.SignedNumber)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1029
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1030
                self.match(RustParser.Binary)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1031
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [73, 74]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1032
                self.booleanLiteral()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1033
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [65, 66, 67, 68, 70, 71]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1034
                self.byteLiteral()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1035
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_byteLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteLiteral" ):
                listener.enterByteLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteLiteral" ):
                listener.exitByteLiteral(self)




    def byteLiteral(self):

        localctx = RustParser.ByteLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_byteLiteral)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1038
                self.match(RustParser.T__64)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1039
                self.match(RustParser.T__65)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1040
                self.match(RustParser.T__66)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1041
                self.match(RustParser.T__67)
                self.state = 1042
                self.match(RustParser.LPAREN)
                self.state = 1043
                self.match(RustParser.T__68)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1044
                self.match(RustParser.T__67)
                self.state = 1045
                self.match(RustParser.RPAREN)
                self.state = 1046
                self.match(RustParser.T__68)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1047
                self.match(RustParser.T__69)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1048
                self.match(RustParser.T__70)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            _la = self._input.LA(1)
            if not(_la==73 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1053
                    self.match(RustParser.Identifier)


                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1056
                    self.match(RustParser.EXCL)


                self.state = 1059
                self.match(RustParser.LBRACK)
                self.state = 1060
                self.expression(0)
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1061
                    self.match(RustParser.COMMA)
                    self.state = 1062
                    self.expression(0)
                    self.state = 1067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1068
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1070
                    self.match(RustParser.Identifier)


                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1073
                    self.match(RustParser.EXCL)


                self.state = 1076
                self.match(RustParser.LBRACK)
                self.state = 1077
                self.expression(0)
                self.state = 1078
                self.match(RustParser.T__3)
                self.state = 1079
                self.expression(0)
                self.state = 1080
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1082
                    self.match(RustParser.Identifier)


                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1085
                    self.match(RustParser.EXCL)


                self.state = 1088
                self.match(RustParser.LBRACK)
                self.state = 1089
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(RustParser.T__71)
            self.state = 1096
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1093
                    self.matchWildcard() 
                self.state = 1098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 1099
            self.match(RustParser.T__71)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[59] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         




