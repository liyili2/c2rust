# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,98,1129,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,1,0,5,0,178,8,0,10,0,12,0,181,9,0,1,
        1,1,1,1,1,1,1,1,1,1,1,3,1,189,8,1,1,2,1,2,1,2,1,2,3,2,195,8,2,1,
        2,1,2,1,2,1,2,3,2,201,8,2,5,2,203,8,2,10,2,12,2,206,9,2,1,2,3,2,
        209,8,2,1,2,3,2,212,8,2,5,2,214,8,2,10,2,12,2,217,9,2,1,2,1,2,5,
        2,221,8,2,10,2,12,2,224,9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,232,8,3,
        1,4,3,4,235,8,4,1,4,3,4,238,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,5,4,249,8,4,10,4,12,4,252,9,4,1,4,3,4,255,8,4,1,5,1,5,1,6,3,
        6,260,8,6,1,6,1,6,1,6,1,6,3,6,266,8,6,1,7,3,7,269,8,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,4,8,281,8,8,11,8,12,8,282,1,8,1,8,
        1,9,1,9,1,9,1,9,5,9,291,8,9,10,9,12,9,294,9,9,1,9,1,9,1,10,3,10,
        299,8,10,1,10,1,10,1,10,1,10,3,10,305,8,10,1,10,1,10,3,10,309,8,
        10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,317,8,10,1,10,1,10,1,10,1,
        10,3,10,323,8,10,1,10,1,10,1,10,3,10,328,8,10,1,10,3,10,331,8,10,
        1,11,1,11,1,11,5,11,336,8,11,10,11,12,11,339,9,11,1,11,1,11,3,11,
        343,8,11,1,11,3,11,346,8,11,1,12,3,12,349,8,12,1,12,1,12,1,12,3,
        12,354,8,12,1,13,1,13,1,14,1,14,1,15,1,15,3,15,362,8,15,1,16,4,16,
        365,8,16,11,16,12,16,366,1,17,1,17,3,17,371,8,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,386,8,18,
        1,19,1,19,1,19,5,19,391,8,19,10,19,12,19,394,9,19,1,20,1,20,1,20,
        3,20,399,8,20,1,21,1,21,1,22,3,22,404,8,22,1,22,1,22,1,22,1,22,5,
        22,410,8,22,10,22,12,22,413,9,22,1,22,1,22,1,23,3,23,418,8,23,1,
        23,1,23,1,23,1,23,3,23,424,8,23,1,24,1,24,1,24,5,24,429,8,24,10,
        24,12,24,432,9,24,1,24,1,24,1,25,1,25,1,25,3,25,439,8,25,1,25,3,
        25,442,8,25,1,26,3,26,445,8,26,1,26,3,26,448,8,26,1,26,3,26,451,
        8,26,1,26,1,26,1,26,1,26,1,26,3,26,458,8,26,1,26,3,26,461,8,26,1,
        26,3,26,464,8,26,1,26,3,26,467,8,26,1,26,1,26,1,27,1,27,1,27,5,27,
        474,8,27,10,27,12,27,477,9,27,1,27,3,27,480,8,27,1,28,3,28,483,8,
        28,1,28,3,28,486,8,28,1,28,1,28,1,28,3,28,491,8,28,1,29,1,29,3,29,
        495,8,29,1,30,1,30,1,30,3,30,500,8,30,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,3,31,512,8,31,1,31,1,31,1,31,1,31,5,31,518,
        8,31,10,31,12,31,521,9,31,1,31,1,31,3,31,525,8,31,1,31,1,31,1,31,
        1,31,1,31,5,31,532,8,31,10,31,12,31,535,9,31,1,31,1,31,3,31,539,
        8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        3,31,553,8,31,1,32,1,32,1,32,1,32,1,32,3,32,560,8,32,1,33,1,33,1,
        33,3,33,565,8,33,1,33,1,33,1,33,5,33,570,8,33,10,33,12,33,573,9,
        33,3,33,575,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,3,35,584,8,35,
        1,35,1,35,5,35,588,8,35,10,35,12,35,591,9,35,1,35,3,35,594,8,35,
        1,35,1,35,1,36,1,36,1,36,5,36,601,8,36,10,36,12,36,604,9,36,1,36,
        3,36,607,8,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        3,37,632,8,37,1,38,3,38,635,8,38,1,38,1,38,3,38,639,8,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,3,39,658,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,674,8,40,5,40,676,8,40,10,
        40,12,40,679,9,40,1,40,1,40,1,40,1,40,1,40,3,40,686,8,40,5,40,688,
        8,40,10,40,12,40,691,9,40,1,40,1,40,3,40,695,8,40,1,41,3,41,698,
        8,41,1,41,3,41,701,8,41,1,41,1,41,1,41,3,41,706,8,41,1,42,1,42,1,
        43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,4,44,719,8,44,11,44,12,
        44,720,1,44,1,44,1,45,1,45,1,45,5,45,728,8,45,10,45,12,45,731,9,
        45,1,45,1,45,1,45,1,45,3,45,737,8,45,3,45,739,8,45,1,46,1,46,1,46,
        1,46,3,46,745,8,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,3,48,754,8,
        48,1,49,3,49,757,8,49,1,49,1,49,3,49,761,8,49,1,49,1,49,1,49,1,49,
        3,49,767,8,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,
        5,50,779,8,50,10,50,12,50,782,9,50,1,50,1,50,1,50,1,50,1,51,1,51,
        1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,5,53,806,8,53,10,53,12,53,809,9,53,1,53,1,53,3,53,
        813,8,53,1,54,1,54,1,54,1,55,1,55,3,55,820,8,55,1,55,1,55,3,55,824,
        8,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        1,57,1,57,1,57,3,57,841,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,3,58,869,8,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,5,58,891,8,58,10,58,12,58,894,9,58,1,59,1,59,1,59,
        1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,63,1,63,3,63,917,8,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,64,1,64,4,64,927,8,64,11,64,12,64,928,1,65,3,65,932,8,65,
        1,65,1,65,1,65,1,66,3,66,938,8,66,1,66,3,66,941,8,66,1,66,1,66,1,
        66,1,66,3,66,947,8,66,1,66,3,66,950,8,66,1,66,1,66,3,66,954,8,66,
        1,67,1,67,1,67,1,67,5,67,960,8,67,10,67,12,67,963,9,67,1,68,1,68,
        1,69,1,69,1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,
        5,72,980,8,72,10,72,12,72,983,9,72,1,72,3,72,986,8,72,1,72,1,72,
        1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,
        5,77,1003,8,77,10,77,12,77,1006,9,77,1,77,1,77,1,77,1,78,1,78,1,
        78,1,79,1,79,3,79,1016,8,79,1,80,1,80,1,80,1,80,1,80,1,80,4,80,1024,
        8,80,11,80,12,80,1025,3,80,1028,8,80,1,81,1,81,3,81,1032,8,81,1,
        81,3,81,1035,8,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,5,82,1044,8,
        82,10,82,12,82,1047,9,82,1,82,1,82,3,82,1051,8,82,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1064,8,83,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1077,8,84,1,85,
        1,85,1,86,3,86,1082,8,86,1,86,3,86,1085,8,86,1,86,1,86,1,86,1,86,
        5,86,1091,8,86,10,86,12,86,1094,9,86,1,86,1,86,1,86,3,86,1099,8,
        86,1,86,3,86,1102,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1111,
        8,86,1,86,3,86,1114,8,86,1,86,1,86,3,86,1118,8,86,1,87,1,87,5,87,
        1122,8,87,10,87,12,87,1125,9,87,1,87,1,87,1,87,1,1123,1,116,88,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,0,8,1,0,6,8,2,0,79,79,94,94,
        1,0,78,80,2,0,6,6,13,13,1,0,34,41,5,0,19,20,25,25,27,27,56,65,87,
        87,2,0,58,59,86,86,1,0,74,75,1248,0,179,1,0,0,0,2,188,1,0,0,0,4,
        190,1,0,0,0,6,231,1,0,0,0,8,234,1,0,0,0,10,256,1,0,0,0,12,259,1,
        0,0,0,14,268,1,0,0,0,16,276,1,0,0,0,18,286,1,0,0,0,20,330,1,0,0,
        0,22,345,1,0,0,0,24,348,1,0,0,0,26,355,1,0,0,0,28,357,1,0,0,0,30,
        359,1,0,0,0,32,364,1,0,0,0,34,368,1,0,0,0,36,385,1,0,0,0,38,387,
        1,0,0,0,40,395,1,0,0,0,42,400,1,0,0,0,44,403,1,0,0,0,46,417,1,0,
        0,0,48,425,1,0,0,0,50,435,1,0,0,0,52,444,1,0,0,0,54,470,1,0,0,0,
        56,482,1,0,0,0,58,494,1,0,0,0,60,496,1,0,0,0,62,552,1,0,0,0,64,554,
        1,0,0,0,66,574,1,0,0,0,68,576,1,0,0,0,70,583,1,0,0,0,72,597,1,0,
        0,0,74,631,1,0,0,0,76,634,1,0,0,0,78,657,1,0,0,0,80,694,1,0,0,0,
        82,697,1,0,0,0,84,707,1,0,0,0,86,709,1,0,0,0,88,714,1,0,0,0,90,724,
        1,0,0,0,92,744,1,0,0,0,94,746,1,0,0,0,96,753,1,0,0,0,98,756,1,0,
        0,0,100,772,1,0,0,0,102,787,1,0,0,0,104,792,1,0,0,0,106,798,1,0,
        0,0,108,814,1,0,0,0,110,823,1,0,0,0,112,825,1,0,0,0,114,840,1,0,
        0,0,116,868,1,0,0,0,118,895,1,0,0,0,120,898,1,0,0,0,122,903,1,0,
        0,0,124,907,1,0,0,0,126,914,1,0,0,0,128,926,1,0,0,0,130,931,1,0,
        0,0,132,953,1,0,0,0,134,955,1,0,0,0,136,964,1,0,0,0,138,966,1,0,
        0,0,140,968,1,0,0,0,142,970,1,0,0,0,144,974,1,0,0,0,146,989,1,0,
        0,0,148,991,1,0,0,0,150,993,1,0,0,0,152,997,1,0,0,0,154,1000,1,0,
        0,0,156,1010,1,0,0,0,158,1015,1,0,0,0,160,1027,1,0,0,0,162,1031,
        1,0,0,0,164,1050,1,0,0,0,166,1063,1,0,0,0,168,1076,1,0,0,0,170,1078,
        1,0,0,0,172,1117,1,0,0,0,174,1119,1,0,0,0,176,178,3,2,1,0,177,176,
        1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,1,1,
        0,0,0,181,179,1,0,0,0,182,189,3,6,3,0,183,189,3,98,49,0,184,189,
        3,32,16,0,185,189,3,18,9,0,186,189,3,4,2,0,187,189,3,14,7,0,188,
        182,1,0,0,0,188,183,1,0,0,0,188,184,1,0,0,0,188,185,1,0,0,0,188,
        186,1,0,0,0,188,187,1,0,0,0,189,3,1,0,0,0,190,191,5,1,0,0,191,222,
        3,66,33,0,192,215,5,2,0,0,193,195,3,66,33,0,194,193,1,0,0,0,194,
        195,1,0,0,0,195,208,1,0,0,0,196,209,5,79,0,0,197,204,5,2,0,0,198,
        200,5,79,0,0,199,201,5,91,0,0,200,199,1,0,0,0,200,201,1,0,0,0,201,
        203,1,0,0,0,202,198,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,
        205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,209,5,3,0,0,208,
        196,1,0,0,0,208,197,1,0,0,0,209,211,1,0,0,0,210,212,5,91,0,0,211,
        210,1,0,0,0,211,212,1,0,0,0,212,214,1,0,0,0,213,194,1,0,0,0,214,
        217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,
        215,1,0,0,0,218,219,5,3,0,0,219,221,5,91,0,0,220,192,1,0,0,0,221,
        224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,225,1,0,0,0,224,
        222,1,0,0,0,225,226,5,4,0,0,226,5,1,0,0,0,227,232,3,52,26,0,228,
        232,3,44,22,0,229,232,3,16,8,0,230,232,3,8,4,0,231,227,1,0,0,0,231,
        228,1,0,0,0,231,229,1,0,0,0,231,230,1,0,0,0,232,7,1,0,0,0,233,235,
        3,26,13,0,234,233,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,238,
        3,10,5,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,254,
        5,79,0,0,240,241,5,95,0,0,241,242,3,58,29,0,242,243,5,5,0,0,243,
        244,3,116,58,0,244,245,5,4,0,0,245,255,1,0,0,0,246,250,5,2,0,0,247,
        249,3,12,6,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,
        251,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,255,5,3,0,0,254,
        240,1,0,0,0,254,246,1,0,0,0,255,9,1,0,0,0,256,257,7,0,0,0,257,11,
        1,0,0,0,258,260,3,26,13,0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,
        1,0,0,0,261,262,5,79,0,0,262,263,5,95,0,0,263,265,3,58,29,0,264,
        266,5,91,0,0,265,264,1,0,0,0,265,266,1,0,0,0,266,13,1,0,0,0,267,
        269,3,26,13,0,268,267,1,0,0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,
        271,5,9,0,0,271,272,5,79,0,0,272,273,5,5,0,0,273,274,3,58,29,0,274,
        275,5,4,0,0,275,15,1,0,0,0,276,277,5,10,0,0,277,278,5,79,0,0,278,
        280,5,2,0,0,279,281,3,52,26,0,280,279,1,0,0,0,281,282,1,0,0,0,282,
        280,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,285,5,3,0,0,285,
        17,1,0,0,0,286,287,5,11,0,0,287,288,5,78,0,0,288,292,5,2,0,0,289,
        291,3,20,10,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,
        293,1,0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,296,5,3,0,0,296,
        19,1,0,0,0,297,299,3,26,13,0,298,297,1,0,0,0,298,299,1,0,0,0,299,
        300,1,0,0,0,300,301,5,9,0,0,301,302,5,79,0,0,302,331,5,4,0,0,303,
        305,3,26,13,0,304,303,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,
        308,5,12,0,0,307,309,5,13,0,0,308,307,1,0,0,0,308,309,1,0,0,0,309,
        310,1,0,0,0,310,311,5,79,0,0,311,312,5,95,0,0,312,313,3,58,29,0,
        313,314,5,4,0,0,314,331,1,0,0,0,315,317,3,26,13,0,316,315,1,0,0,
        0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,5,14,0,0,319,320,5,79,
        0,0,320,322,5,92,0,0,321,323,3,22,11,0,322,321,1,0,0,0,322,323,1,
        0,0,0,323,324,1,0,0,0,324,327,5,93,0,0,325,326,5,15,0,0,326,328,
        3,58,29,0,327,325,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,331,
        5,4,0,0,330,298,1,0,0,0,330,304,1,0,0,0,330,316,1,0,0,0,331,21,1,
        0,0,0,332,337,3,24,12,0,333,334,5,91,0,0,334,336,3,24,12,0,335,333,
        1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,342,
        1,0,0,0,339,337,1,0,0,0,340,341,5,91,0,0,341,343,5,96,0,0,342,340,
        1,0,0,0,342,343,1,0,0,0,343,346,1,0,0,0,344,346,5,96,0,0,345,332,
        1,0,0,0,345,344,1,0,0,0,346,23,1,0,0,0,347,349,7,1,0,0,348,347,1,
        0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,353,5,95,0,0,351,354,3,
        58,29,0,352,354,5,96,0,0,353,351,1,0,0,0,353,352,1,0,0,0,354,25,
        1,0,0,0,355,356,5,16,0,0,356,27,1,0,0,0,357,358,5,8,0,0,358,29,1,
        0,0,0,359,361,5,11,0,0,360,362,5,78,0,0,361,360,1,0,0,0,361,362,
        1,0,0,0,362,31,1,0,0,0,363,365,3,34,17,0,364,363,1,0,0,0,365,366,
        1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,33,1,0,0,0,368,370,5,
        88,0,0,369,371,5,86,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,372,
        1,0,0,0,372,373,5,89,0,0,373,374,3,36,18,0,374,375,5,90,0,0,375,
        35,1,0,0,0,376,386,5,79,0,0,377,378,5,79,0,0,378,379,5,5,0,0,379,
        386,3,42,21,0,380,381,5,79,0,0,381,382,5,92,0,0,382,383,3,38,19,
        0,383,384,5,93,0,0,384,386,1,0,0,0,385,376,1,0,0,0,385,377,1,0,0,
        0,385,380,1,0,0,0,386,37,1,0,0,0,387,392,3,40,20,0,388,389,5,91,
        0,0,389,391,3,40,20,0,390,388,1,0,0,0,391,394,1,0,0,0,392,390,1,
        0,0,0,392,393,1,0,0,0,393,39,1,0,0,0,394,392,1,0,0,0,395,398,5,79,
        0,0,396,397,5,5,0,0,397,399,3,42,21,0,398,396,1,0,0,0,398,399,1,
        0,0,0,399,41,1,0,0,0,400,401,7,2,0,0,401,43,1,0,0,0,402,404,3,26,
        13,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,5,17,
        0,0,406,407,5,79,0,0,407,411,5,2,0,0,408,410,3,46,23,0,409,408,1,
        0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,
        0,0,0,413,411,1,0,0,0,414,415,5,3,0,0,415,45,1,0,0,0,416,418,3,26,
        13,0,417,416,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,420,5,79,
        0,0,420,421,5,95,0,0,421,423,3,58,29,0,422,424,5,91,0,0,423,422,
        1,0,0,0,423,424,1,0,0,0,424,47,1,0,0,0,425,426,5,79,0,0,426,430,
        5,2,0,0,427,429,3,50,25,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,
        1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,434,
        5,3,0,0,434,49,1,0,0,0,435,438,5,79,0,0,436,437,5,95,0,0,437,439,
        3,116,58,0,438,436,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,442,
        5,91,0,0,441,440,1,0,0,0,441,442,1,0,0,0,442,51,1,0,0,0,443,445,
        3,26,13,0,444,443,1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,448,
        3,28,14,0,447,446,1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,451,
        3,30,15,0,450,449,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,453,
        5,14,0,0,453,460,5,79,0,0,454,461,5,18,0,0,455,457,5,92,0,0,456,
        458,3,54,27,0,457,456,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,459,
        461,5,93,0,0,460,454,1,0,0,0,460,455,1,0,0,0,461,463,1,0,0,0,462,
        464,5,15,0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,466,1,0,0,0,465,
        467,3,58,29,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,
        469,3,70,35,0,469,53,1,0,0,0,470,475,3,56,28,0,471,472,5,91,0,0,
        472,474,3,56,28,0,473,471,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,
        0,475,476,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,478,480,5,91,0,
        0,479,478,1,0,0,0,479,480,1,0,0,0,480,55,1,0,0,0,481,483,5,19,0,
        0,482,481,1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,486,5,13,0,
        0,485,484,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,490,5,79,0,
        0,488,489,5,95,0,0,489,491,3,58,29,0,490,488,1,0,0,0,490,491,1,0,
        0,0,491,57,1,0,0,0,492,495,3,62,31,0,493,495,3,60,30,0,494,492,1,
        0,0,0,494,493,1,0,0,0,495,59,1,0,0,0,496,497,5,20,0,0,497,499,7,
        3,0,0,498,500,3,58,29,0,499,498,1,0,0,0,499,500,1,0,0,0,500,61,1,
        0,0,0,501,553,5,21,0,0,502,553,3,64,32,0,503,553,5,22,0,0,504,553,
        5,23,0,0,505,553,5,24,0,0,506,553,3,68,34,0,507,508,3,66,33,0,508,
        509,3,62,31,0,509,553,1,0,0,0,510,512,5,85,0,0,511,510,1,0,0,0,511,
        512,1,0,0,0,512,513,1,0,0,0,513,514,5,25,0,0,514,519,3,58,29,0,515,
        516,5,91,0,0,516,518,3,58,29,0,517,515,1,0,0,0,518,521,1,0,0,0,519,
        517,1,0,0,0,519,520,1,0,0,0,520,522,1,0,0,0,521,519,1,0,0,0,522,
        524,5,87,0,0,523,525,5,18,0,0,524,523,1,0,0,0,524,525,1,0,0,0,525,
        553,1,0,0,0,526,538,5,79,0,0,527,528,5,25,0,0,528,533,3,58,29,0,
        529,530,5,91,0,0,530,532,3,58,29,0,531,529,1,0,0,0,532,535,1,0,0,
        0,533,531,1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,0,0,
        0,536,537,5,87,0,0,537,539,1,0,0,0,538,527,1,0,0,0,538,539,1,0,0,
        0,539,553,1,0,0,0,540,541,5,79,0,0,541,542,5,25,0,0,542,543,3,58,
        29,0,543,544,5,87,0,0,544,553,1,0,0,0,545,546,5,19,0,0,546,553,3,
        58,29,0,547,548,5,89,0,0,548,549,3,58,29,0,549,550,5,90,0,0,550,
        553,1,0,0,0,551,553,5,79,0,0,552,501,1,0,0,0,552,502,1,0,0,0,552,
        503,1,0,0,0,552,504,1,0,0,0,552,505,1,0,0,0,552,506,1,0,0,0,552,
        507,1,0,0,0,552,511,1,0,0,0,552,526,1,0,0,0,552,540,1,0,0,0,552,
        545,1,0,0,0,552,547,1,0,0,0,552,551,1,0,0,0,553,63,1,0,0,0,554,555,
        5,26,0,0,555,559,3,58,29,0,556,560,5,27,0,0,557,558,5,87,0,0,558,
        560,5,87,0,0,559,556,1,0,0,0,559,557,1,0,0,0,560,65,1,0,0,0,561,
        562,5,79,0,0,562,575,5,85,0,0,563,565,5,85,0,0,564,563,1,0,0,0,564,
        565,1,0,0,0,565,566,1,0,0,0,566,571,5,79,0,0,567,568,5,85,0,0,568,
        570,5,79,0,0,569,567,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,571,
        572,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,574,561,1,0,0,0,574,
        564,1,0,0,0,575,67,1,0,0,0,576,577,5,89,0,0,577,578,3,62,31,0,578,
        579,5,4,0,0,579,580,5,80,0,0,580,581,5,90,0,0,581,69,1,0,0,0,582,
        584,3,28,14,0,583,582,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,
        589,5,2,0,0,586,588,3,74,37,0,587,586,1,0,0,0,588,591,1,0,0,0,589,
        587,1,0,0,0,589,590,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,592,
        594,3,110,55,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,
        596,5,3,0,0,596,71,1,0,0,0,597,598,3,28,14,0,598,602,5,2,0,0,599,
        601,3,74,37,0,600,599,1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,0,602,
        603,1,0,0,0,603,606,1,0,0,0,604,602,1,0,0,0,605,607,3,110,55,0,606,
        605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,5,3,0,0,609,
        73,1,0,0,0,610,632,3,72,36,0,611,632,3,80,40,0,612,632,3,76,38,0,
        613,632,3,48,24,0,614,632,3,44,22,0,615,632,3,98,49,0,616,632,3,
        114,57,0,617,632,3,102,51,0,618,632,3,86,43,0,619,632,3,104,52,0,
        620,632,3,106,53,0,621,632,3,78,39,0,622,632,3,108,54,0,623,632,
        3,94,47,0,624,632,3,110,55,0,625,632,3,112,56,0,626,627,5,28,0,0,
        627,632,5,4,0,0,628,629,5,29,0,0,629,632,5,4,0,0,630,632,3,88,44,
        0,631,610,1,0,0,0,631,611,1,0,0,0,631,612,1,0,0,0,631,613,1,0,0,
        0,631,614,1,0,0,0,631,615,1,0,0,0,631,616,1,0,0,0,631,617,1,0,0,
        0,631,618,1,0,0,0,631,619,1,0,0,0,631,620,1,0,0,0,631,621,1,0,0,
        0,631,622,1,0,0,0,631,623,1,0,0,0,631,624,1,0,0,0,631,625,1,0,0,
        0,631,626,1,0,0,0,631,628,1,0,0,0,631,630,1,0,0,0,632,75,1,0,0,0,
        633,635,5,30,0,0,634,633,1,0,0,0,634,635,1,0,0,0,635,638,1,0,0,0,
        636,639,3,114,57,0,637,639,3,116,58,0,638,636,1,0,0,0,638,637,1,
        0,0,0,639,640,1,0,0,0,640,641,5,5,0,0,641,642,3,116,58,0,642,643,
        5,31,0,0,643,644,3,70,35,0,644,645,5,4,0,0,645,77,1,0,0,0,646,647,
        3,116,58,0,647,648,5,32,0,0,648,649,3,116,58,0,649,650,1,0,0,0,650,
        651,3,162,81,0,651,652,5,4,0,0,652,658,1,0,0,0,653,654,3,116,58,
        0,654,655,3,162,81,0,655,656,5,4,0,0,656,658,1,0,0,0,657,646,1,0,
        0,0,657,653,1,0,0,0,658,79,1,0,0,0,659,660,5,30,0,0,660,661,3,82,
        41,0,661,662,5,5,0,0,662,663,3,116,58,0,663,664,5,4,0,0,664,695,
        1,0,0,0,665,666,5,30,0,0,666,667,3,82,41,0,667,668,3,100,50,0,668,
        695,1,0,0,0,669,670,5,30,0,0,670,677,5,92,0,0,671,673,3,82,41,0,
        672,674,5,91,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,676,1,0,0,0,
        675,671,1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,678,1,0,0,0,
        678,680,1,0,0,0,679,677,1,0,0,0,680,681,5,93,0,0,681,682,5,5,0,0,
        682,689,5,92,0,0,683,685,3,116,58,0,684,686,5,91,0,0,685,684,1,0,
        0,0,685,686,1,0,0,0,686,688,1,0,0,0,687,683,1,0,0,0,688,691,1,0,
        0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,689,1,0,
        0,0,692,693,5,93,0,0,693,695,5,4,0,0,694,659,1,0,0,0,694,665,1,0,
        0,0,694,669,1,0,0,0,695,81,1,0,0,0,696,698,5,33,0,0,697,696,1,0,
        0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,701,5,13,0,0,700,699,1,0,
        0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,705,5,79,0,0,703,704,5,95,
        0,0,704,706,3,58,29,0,705,703,1,0,0,0,705,706,1,0,0,0,706,83,1,0,
        0,0,707,708,7,4,0,0,708,85,1,0,0,0,709,710,3,116,58,0,710,711,3,
        84,42,0,711,712,3,116,58,0,712,713,5,4,0,0,713,87,1,0,0,0,714,715,
        5,42,0,0,715,716,3,116,58,0,716,718,5,2,0,0,717,719,3,90,45,0,718,
        717,1,0,0,0,719,720,1,0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,721,
        722,1,0,0,0,722,723,5,3,0,0,723,89,1,0,0,0,724,729,3,92,46,0,725,
        726,5,43,0,0,726,728,3,92,46,0,727,725,1,0,0,0,728,731,1,0,0,0,729,
        727,1,0,0,0,729,730,1,0,0,0,730,732,1,0,0,0,731,729,1,0,0,0,732,
        738,5,44,0,0,733,739,3,70,35,0,734,736,5,45,0,0,735,737,3,116,58,
        0,736,735,1,0,0,0,736,737,1,0,0,0,737,739,1,0,0,0,738,733,1,0,0,
        0,738,734,1,0,0,0,739,91,1,0,0,0,740,745,3,168,84,0,741,745,5,80,
        0,0,742,745,5,94,0,0,743,745,5,79,0,0,744,740,1,0,0,0,744,741,1,
        0,0,0,744,742,1,0,0,0,744,743,1,0,0,0,745,93,1,0,0,0,746,747,5,46,
        0,0,747,748,3,116,58,0,748,749,3,70,35,0,749,95,1,0,0,0,750,754,
        3,100,50,0,751,754,3,70,35,0,752,754,3,116,58,0,753,750,1,0,0,0,
        753,751,1,0,0,0,753,752,1,0,0,0,754,97,1,0,0,0,755,757,3,26,13,0,
        756,755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,760,5,12,0,0,
        759,761,5,13,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,
        762,763,5,79,0,0,763,766,5,95,0,0,764,767,3,58,29,0,765,767,5,79,
        0,0,766,764,1,0,0,0,766,765,1,0,0,0,767,768,1,0,0,0,768,769,5,5,
        0,0,769,770,3,96,48,0,770,771,5,4,0,0,771,99,1,0,0,0,772,780,5,2,
        0,0,773,774,5,79,0,0,774,775,5,95,0,0,775,776,3,116,58,0,776,777,
        5,91,0,0,777,779,1,0,0,0,778,773,1,0,0,0,779,782,1,0,0,0,780,778,
        1,0,0,0,780,781,1,0,0,0,781,783,1,0,0,0,782,780,1,0,0,0,783,784,
        5,3,0,0,784,785,5,4,0,0,785,786,3,116,58,0,786,101,1,0,0,0,787,788,
        3,116,58,0,788,789,5,5,0,0,789,790,3,116,58,0,790,791,5,4,0,0,791,
        103,1,0,0,0,792,793,5,47,0,0,793,794,5,79,0,0,794,795,5,48,0,0,795,
        796,3,116,58,0,796,797,3,70,35,0,797,105,1,0,0,0,798,799,5,49,0,
        0,799,800,3,116,58,0,800,807,3,70,35,0,801,802,5,50,0,0,802,803,
        3,116,58,0,803,804,3,70,35,0,804,806,1,0,0,0,805,801,1,0,0,0,806,
        809,1,0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,812,1,0,0,0,809,
        807,1,0,0,0,810,811,5,31,0,0,811,813,3,70,35,0,812,810,1,0,0,0,812,
        813,1,0,0,0,813,107,1,0,0,0,814,815,3,158,79,0,815,816,5,4,0,0,816,
        109,1,0,0,0,817,819,5,45,0,0,818,820,3,116,58,0,819,818,1,0,0,0,
        819,820,1,0,0,0,820,821,1,0,0,0,821,824,5,4,0,0,822,824,5,79,0,0,
        823,817,1,0,0,0,823,822,1,0,0,0,824,111,1,0,0,0,825,826,5,51,0,0,
        826,827,3,70,35,0,827,113,1,0,0,0,828,829,5,52,0,0,829,830,5,92,
        0,0,830,831,3,116,58,0,831,832,5,93,0,0,832,841,1,0,0,0,833,834,
        5,53,0,0,834,835,5,85,0,0,835,836,5,79,0,0,836,837,5,92,0,0,837,
        838,3,116,58,0,838,839,5,93,0,0,839,841,1,0,0,0,840,828,1,0,0,0,
        840,833,1,0,0,0,841,115,1,0,0,0,842,843,6,58,-1,0,843,844,3,146,
        73,0,844,845,3,116,58,24,845,869,1,0,0,0,846,869,3,114,57,0,847,
        869,3,158,79,0,848,869,3,48,24,0,849,850,3,128,64,0,850,851,3,116,
        58,18,851,869,1,0,0,0,852,869,3,150,75,0,853,869,3,144,72,0,854,
        869,3,124,62,0,855,856,3,148,74,0,856,857,3,116,58,14,857,869,1,
        0,0,0,858,869,3,156,78,0,859,869,3,120,60,0,860,869,3,118,59,0,861,
        869,3,152,76,0,862,869,3,154,77,0,863,869,3,122,61,0,864,865,3,130,
        65,0,865,866,3,116,58,3,866,869,1,0,0,0,867,869,3,126,63,0,868,842,
        1,0,0,0,868,846,1,0,0,0,868,847,1,0,0,0,868,848,1,0,0,0,868,849,
        1,0,0,0,868,852,1,0,0,0,868,853,1,0,0,0,868,854,1,0,0,0,868,855,
        1,0,0,0,868,858,1,0,0,0,868,859,1,0,0,0,868,860,1,0,0,0,868,861,
        1,0,0,0,868,862,1,0,0,0,868,863,1,0,0,0,868,864,1,0,0,0,868,867,
        1,0,0,0,869,892,1,0,0,0,870,871,10,21,0,0,871,872,3,140,70,0,872,
        873,3,116,58,22,873,891,1,0,0,0,874,875,10,8,0,0,875,876,3,138,69,
        0,876,877,3,116,58,9,877,891,1,0,0,0,878,879,10,6,0,0,879,880,3,
        136,68,0,880,881,3,116,58,7,881,891,1,0,0,0,882,883,10,19,0,0,883,
        891,3,134,67,0,884,885,10,11,0,0,885,891,3,162,81,0,886,887,10,10,
        0,0,887,891,3,58,29,0,888,889,10,1,0,0,889,891,3,160,80,0,890,870,
        1,0,0,0,890,874,1,0,0,0,890,878,1,0,0,0,890,882,1,0,0,0,890,884,
        1,0,0,0,890,886,1,0,0,0,890,888,1,0,0,0,891,894,1,0,0,0,892,890,
        1,0,0,0,892,893,1,0,0,0,893,117,1,0,0,0,894,892,1,0,0,0,895,896,
        3,58,29,0,896,897,3,66,33,0,897,119,1,0,0,0,898,899,5,8,0,0,899,
        900,5,2,0,0,900,901,3,116,58,0,901,902,5,3,0,0,902,121,1,0,0,0,903,
        904,5,25,0,0,904,905,3,116,58,0,905,906,5,87,0,0,906,123,1,0,0,0,
        907,908,5,79,0,0,908,909,5,5,0,0,909,910,5,2,0,0,910,911,3,116,58,
        0,911,912,5,3,0,0,912,913,5,4,0,0,913,125,1,0,0,0,914,916,5,79,0,
        0,915,917,5,86,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,
        0,918,919,5,89,0,0,919,920,5,80,0,0,920,921,5,4,0,0,921,922,3,116,
        58,0,922,923,5,90,0,0,923,127,1,0,0,0,924,925,5,79,0,0,925,927,5,
        85,0,0,926,924,1,0,0,0,927,928,1,0,0,0,928,926,1,0,0,0,928,929,1,
        0,0,0,929,129,1,0,0,0,930,932,5,30,0,0,931,930,1,0,0,0,931,932,1,
        0,0,0,932,933,1,0,0,0,933,934,3,132,66,0,934,935,5,5,0,0,935,131,
        1,0,0,0,936,938,5,33,0,0,937,936,1,0,0,0,937,938,1,0,0,0,938,940,
        1,0,0,0,939,941,5,13,0,0,940,939,1,0,0,0,940,941,1,0,0,0,941,942,
        1,0,0,0,942,954,5,79,0,0,943,944,5,79,0,0,944,946,5,92,0,0,945,947,
        5,33,0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,950,
        5,13,0,0,949,948,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,
        5,79,0,0,952,954,5,93,0,0,953,937,1,0,0,0,953,943,1,0,0,0,954,133,
        1,0,0,0,955,956,5,54,0,0,956,961,3,58,29,0,957,958,5,54,0,0,958,
        960,3,58,29,0,959,957,1,0,0,0,960,963,1,0,0,0,961,959,1,0,0,0,961,
        962,1,0,0,0,962,135,1,0,0,0,963,961,1,0,0,0,964,965,7,4,0,0,965,
        137,1,0,0,0,966,967,5,55,0,0,967,139,1,0,0,0,968,969,7,5,0,0,969,
        141,1,0,0,0,970,971,3,116,58,0,971,972,3,140,70,0,972,973,3,116,
        58,0,973,143,1,0,0,0,974,975,5,79,0,0,975,976,5,2,0,0,976,981,3,
        50,25,0,977,978,5,91,0,0,978,980,3,50,25,0,979,977,1,0,0,0,980,983,
        1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,985,1,0,0,0,983,981,
        1,0,0,0,984,986,5,91,0,0,985,984,1,0,0,0,985,986,1,0,0,0,986,987,
        1,0,0,0,987,988,5,3,0,0,988,145,1,0,0,0,989,990,5,13,0,0,990,147,
        1,0,0,0,991,992,7,6,0,0,992,149,1,0,0,0,993,994,5,92,0,0,994,995,
        3,116,58,0,995,996,5,93,0,0,996,151,1,0,0,0,997,998,5,20,0,0,998,
        999,3,116,58,0,999,153,1,0,0,0,1000,1004,5,2,0,0,1001,1003,3,74,
        37,0,1002,1001,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,
        1005,1,0,0,0,1005,1007,1,0,0,0,1006,1004,1,0,0,0,1007,1008,3,116,
        58,0,1008,1009,5,3,0,0,1009,155,1,0,0,0,1010,1011,5,19,0,0,1011,
        1012,3,116,58,0,1012,157,1,0,0,0,1013,1016,3,166,83,0,1014,1016,
        5,79,0,0,1015,1013,1,0,0,0,1015,1014,1,0,0,0,1016,159,1,0,0,0,1017,
        1018,5,89,0,0,1018,1019,3,158,79,0,1019,1020,5,90,0,0,1020,1028,
        1,0,0,0,1021,1022,5,32,0,0,1022,1024,3,158,79,0,1023,1021,1,0,0,
        0,1024,1025,1,0,0,0,1025,1023,1,0,0,0,1025,1026,1,0,0,0,1026,1028,
        1,0,0,0,1027,1017,1,0,0,0,1027,1023,1,0,0,0,1028,161,1,0,0,0,1029,
        1030,5,32,0,0,1030,1032,3,116,58,0,1031,1029,1,0,0,0,1031,1032,1,
        0,0,0,1032,1034,1,0,0,0,1033,1035,5,86,0,0,1034,1033,1,0,0,0,1034,
        1035,1,0,0,0,1035,1036,1,0,0,0,1036,1037,3,164,82,0,1037,163,1,0,
        0,0,1038,1051,5,18,0,0,1039,1040,5,92,0,0,1040,1045,3,116,58,0,1041,
        1042,5,91,0,0,1042,1044,3,116,58,0,1043,1041,1,0,0,0,1044,1047,1,
        0,0,0,1045,1043,1,0,0,0,1045,1046,1,0,0,0,1046,1048,1,0,0,0,1047,
        1045,1,0,0,0,1048,1049,5,93,0,0,1049,1051,1,0,0,0,1050,1038,1,0,
        0,0,1050,1039,1,0,0,0,1051,165,1,0,0,0,1052,1064,3,172,86,0,1053,
        1064,5,83,0,0,1054,1064,5,80,0,0,1055,1064,5,81,0,0,1056,1064,5,
        82,0,0,1057,1064,5,77,0,0,1058,1064,5,78,0,0,1059,1064,3,170,85,
        0,1060,1064,5,84,0,0,1061,1064,3,168,84,0,1062,1064,5,76,0,0,1063,
        1052,1,0,0,0,1063,1053,1,0,0,0,1063,1054,1,0,0,0,1063,1055,1,0,0,
        0,1063,1056,1,0,0,0,1063,1057,1,0,0,0,1063,1058,1,0,0,0,1063,1059,
        1,0,0,0,1063,1060,1,0,0,0,1063,1061,1,0,0,0,1063,1062,1,0,0,0,1064,
        167,1,0,0,0,1065,1077,5,66,0,0,1066,1077,5,67,0,0,1067,1077,5,68,
        0,0,1068,1069,5,69,0,0,1069,1070,5,92,0,0,1070,1077,5,70,0,0,1071,
        1072,5,69,0,0,1072,1073,5,93,0,0,1073,1077,5,70,0,0,1074,1077,5,
        71,0,0,1075,1077,5,72,0,0,1076,1065,1,0,0,0,1076,1066,1,0,0,0,1076,
        1067,1,0,0,0,1076,1068,1,0,0,0,1076,1071,1,0,0,0,1076,1074,1,0,0,
        0,1076,1075,1,0,0,0,1077,169,1,0,0,0,1078,1079,7,7,0,0,1079,171,
        1,0,0,0,1080,1082,5,79,0,0,1081,1080,1,0,0,0,1081,1082,1,0,0,0,1082,
        1084,1,0,0,0,1083,1085,5,86,0,0,1084,1083,1,0,0,0,1084,1085,1,0,
        0,0,1085,1086,1,0,0,0,1086,1087,5,89,0,0,1087,1092,3,116,58,0,1088,
        1089,5,91,0,0,1089,1091,3,116,58,0,1090,1088,1,0,0,0,1091,1094,1,
        0,0,0,1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,1095,1,0,0,0,1094,
        1092,1,0,0,0,1095,1096,5,90,0,0,1096,1118,1,0,0,0,1097,1099,5,79,
        0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1101,1,0,0,0,1100,1102,
        5,86,0,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1103,1,0,0,0,1103,
        1104,5,89,0,0,1104,1105,3,116,58,0,1105,1106,5,4,0,0,1106,1107,3,
        116,58,0,1107,1108,5,90,0,0,1108,1118,1,0,0,0,1109,1111,5,79,0,0,
        1110,1109,1,0,0,0,1110,1111,1,0,0,0,1111,1113,1,0,0,0,1112,1114,
        5,86,0,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,0,0,1115,
        1116,5,89,0,0,1116,1118,5,90,0,0,1117,1081,1,0,0,0,1117,1098,1,0,
        0,0,1117,1110,1,0,0,0,1118,173,1,0,0,0,1119,1123,5,73,0,0,1120,1122,
        9,0,0,0,1121,1120,1,0,0,0,1122,1125,1,0,0,0,1123,1124,1,0,0,0,1123,
        1121,1,0,0,0,1124,1126,1,0,0,0,1125,1123,1,0,0,0,1126,1127,5,73,
        0,0,1127,175,1,0,0,0,133,179,188,194,200,204,208,211,215,222,231,
        234,237,250,254,259,265,268,282,292,298,304,308,316,322,327,330,
        337,342,345,348,353,361,366,370,385,392,398,403,411,417,423,430,
        438,441,444,447,450,457,460,463,466,475,479,482,485,490,494,499,
        511,519,524,533,538,552,559,564,571,574,583,589,593,602,606,631,
        634,638,657,673,677,685,689,694,697,700,705,720,729,736,738,744,
        753,756,760,766,780,807,812,819,823,840,868,890,892,916,928,931,
        937,940,946,949,953,961,981,985,1004,1015,1025,1027,1031,1034,1045,
        1050,1063,1076,1081,1084,1092,1098,1101,1110,1113,1117,1123
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'use'", "'{'", "'}'", "';'", "'='", "'const'", 
                     "'union'", "'unsafe'", "'type'", "'impl'", "'extern'", 
                     "'static'", "'mut'", "'fn'", "'->'", "'pub'", "'struct'", 
                     "'()'", "'&'", "'*'", "'i32'", "'String'", "'bool'", 
                     "'u8'", "'<'", "'Option<NonNull<'", "'>>'", "'break'", 
                     "'continue'", "'let'", "'else'", "'.'", "'ref'", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'match'", "'|'", "'=>'", "'return'", "'while'", "'for'", 
                     "'in'", "'if'", "'else if'", "'loop'", "'Some'", "'Box'", 
                     "'as'", "'..'", "'/'", "'%'", "'+'", "'-'", "'=='", 
                     "'!='", "'||'", "'&&'", "'>='", "'<='", "'b'.''", "'b'|''", 
                     "'b'*''", "'b''", "'''", "'b'+''", "'b'?''", "'\"'", 
                     "'true'", "'false'", "'None'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'::'", "'!'", "'>'", "'#'", 
                     "'['", "']'", "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "NONE", 
                      "Binary", "STRING_LITERAL", "Identifier", "Number", 
                      "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_useDecl = 2
    RULE_topLevelDef = 3
    RULE_topLevelVarDef = 4
    RULE_defKind = 5
    RULE_varDefField = 6
    RULE_typeAlias = 7
    RULE_interfaceDef = 8
    RULE_externBlock = 9
    RULE_externItem = 10
    RULE_externParams = 11
    RULE_externParam = 12
    RULE_visibility = 13
    RULE_unsafeModifier = 14
    RULE_externAbi = 15
    RULE_attributes = 16
    RULE_innerAttribute = 17
    RULE_attribute = 18
    RULE_attrArgs = 19
    RULE_attrArg = 20
    RULE_attrValue = 21
    RULE_structDef = 22
    RULE_structField = 23
    RULE_structLiteral = 24
    RULE_structLiteralField = 25
    RULE_functionDef = 26
    RULE_paramList = 27
    RULE_param = 28
    RULE_typeExpr = 29
    RULE_pointerType = 30
    RULE_basicType = 31
    RULE_safeNonNullWrapper = 32
    RULE_typePath = 33
    RULE_arrayType = 34
    RULE_block = 35
    RULE_unsafeBlcok = 36
    RULE_statement = 37
    RULE_conditionalAssignmentStmt = 38
    RULE_callStmt = 39
    RULE_letStmt = 40
    RULE_varDef = 41
    RULE_compoundOp = 42
    RULE_compoundAssignment = 43
    RULE_matchStmt = 44
    RULE_matchArm = 45
    RULE_matchPattern = 46
    RULE_whileStmt = 47
    RULE_initializer = 48
    RULE_staticVarDecl = 49
    RULE_initBlock = 50
    RULE_assignStmt = 51
    RULE_forStmt = 52
    RULE_ifStmt = 53
    RULE_exprStmt = 54
    RULE_returnStmt = 55
    RULE_loopStmt = 56
    RULE_safeWrapper = 57
    RULE_expression = 58
    RULE_basicTypeCastExpr = 59
    RULE_unsafeExpression = 60
    RULE_qualifiedExpression = 61
    RULE_structDefInit = 62
    RULE_arrayDeclaration = 63
    RULE_typePathExpression = 64
    RULE_patternPrefix = 65
    RULE_pattern = 66
    RULE_castExpressionPostFix = 67
    RULE_compoundOps = 68
    RULE_rangeSymbol = 69
    RULE_binaryOps = 70
    RULE_binaryExpression = 71
    RULE_structFieldDec = 72
    RULE_mutableExpression = 73
    RULE_unaryOpes = 74
    RULE_parenExpression = 75
    RULE_dereferenceExpression = 76
    RULE_expressionBlock = 77
    RULE_borrowExpression = 78
    RULE_primaryExpression = 79
    RULE_fieldAccessPostFix = 80
    RULE_callExpressionPostFix = 81
    RULE_functionCallArgs = 82
    RULE_literal = 83
    RULE_byteLiteral = 84
    RULE_booleanLiteral = 85
    RULE_arrayLiteral = 86
    RULE_stringLiteral = 87

    ruleNames =  [ "program", "topLevelItem", "useDecl", "topLevelDef", 
                   "topLevelVarDef", "defKind", "varDefField", "typeAlias", 
                   "interfaceDef", "externBlock", "externItem", "externParams", 
                   "externParam", "visibility", "unsafeModifier", "externAbi", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "structLiteral", 
                   "structLiteralField", "functionDef", "paramList", "param", 
                   "typeExpr", "pointerType", "basicType", "safeNonNullWrapper", 
                   "typePath", "arrayType", "block", "unsafeBlcok", "statement", 
                   "conditionalAssignmentStmt", "callStmt", "letStmt", "varDef", 
                   "compoundOp", "compoundAssignment", "matchStmt", "matchArm", 
                   "matchPattern", "whileStmt", "initializer", "staticVarDecl", 
                   "initBlock", "assignStmt", "forStmt", "ifStmt", "exprStmt", 
                   "returnStmt", "loopStmt", "safeWrapper", "expression", 
                   "basicTypeCastExpr", "unsafeExpression", "qualifiedExpression", 
                   "structDefInit", "arrayDeclaration", "typePathExpression", 
                   "patternPrefix", "pattern", "castExpressionPostFix", 
                   "compoundOps", "rangeSymbol", "binaryOps", "binaryExpression", 
                   "structFieldDec", "mutableExpression", "unaryOpes", "parenExpression", 
                   "dereferenceExpression", "expressionBlock", "borrowExpression", 
                   "primaryExpression", "fieldAccessPostFix", "callExpressionPostFix", 
                   "functionCallArgs", "literal", "byteLiteral", "booleanLiteral", 
                   "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    TRUE=74
    FALSE=75
    NONE=76
    Binary=77
    STRING_LITERAL=78
    Identifier=79
    Number=80
    SignedNumber=81
    BYTE_STRING_LITERAL=82
    HexNumber=83
    CHAR_LITERAL=84
    DOUBLE_COLON=85
    EXCL=86
    GT=87
    POUND=88
    LBRACK=89
    RBRACK=90
    COMMA=91
    LPAREN=92
    RPAREN=93
    UNDERSCORE=94
    COLON=95
    ELLIPSIS=96
    WS=97
    COMMENT=98

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 221122) != 0) or _la==79 or _la==88:
                self.state = 176
                self.topLevelItem()
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def useDecl(self):
            return self.getTypedRuleContext(RustParser.UseDeclContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 183
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 184
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 185
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 186
                self.useDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 187
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypePathContext)
            else:
                return self.getTypedRuleContext(RustParser.TypePathContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_useDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDecl" ):
                listener.enterUseDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDecl" ):
                listener.exitUseDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDecl" ):
                return visitor.visitUseDecl(self)
            else:
                return visitor.visitChildren(self)




    def useDecl(self):

        localctx = RustParser.UseDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_useDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.match(RustParser.T__0)
            self.state = 191
            self.typePath()
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 192
                self.match(RustParser.T__1)
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==79 or _la==85:
                    self.state = 194
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 193
                        self.typePath()


                    self.state = 208
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [79]:
                        self.state = 196
                        self.match(RustParser.Identifier)
                        pass
                    elif token in [2]:
                        self.state = 197
                        self.match(RustParser.T__1)
                        self.state = 204
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==79:
                            self.state = 198
                            self.match(RustParser.Identifier)
                            self.state = 200
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==91:
                                self.state = 199
                                self.match(RustParser.COMMA)


                            self.state = 206
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 207
                        self.match(RustParser.T__2)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 210
                        self.match(RustParser.COMMA)


                    self.state = 217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 218
                self.match(RustParser.T__2)
                self.state = 219
                self.match(RustParser.COMMA)
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def topLevelVarDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelVarDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelDef" ):
                return visitor.visitTopLevelDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_topLevelDef)
        try:
            self.state = 231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 227
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 228
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 229
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 230
                self.topLevelVarDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelVarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def defKind(self):
            return self.getTypedRuleContext(RustParser.DefKindContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def varDefField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelVarDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelVarDef" ):
                listener.enterTopLevelVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelVarDef" ):
                listener.exitTopLevelVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelVarDef" ):
                return visitor.visitTopLevelVarDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelVarDef(self):

        localctx = RustParser.TopLevelVarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_topLevelVarDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 233
                self.visibility()


            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0):
                self.state = 236
                self.defKind()


            self.state = 239
            self.match(RustParser.Identifier)
            self.state = 254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.state = 240
                self.match(RustParser.COLON)
                self.state = 241
                self.typeExpr()
                self.state = 242
                self.match(RustParser.T__4)
                self.state = 243
                self.expression(0)
                self.state = 244
                self.match(RustParser.T__3)
                pass
            elif token in [2]:
                self.state = 246
                self.match(RustParser.T__1)
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16 or _la==79:
                    self.state = 247
                    self.varDefField()
                    self.state = 252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 253
                self.match(RustParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_defKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefKind" ):
                listener.enterDefKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefKind" ):
                listener.exitDefKind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefKind" ):
                return visitor.visitDefKind(self)
            else:
                return visitor.visitChildren(self)




    def defKind(self):

        localctx = RustParser.DefKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_defKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_varDefField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDefField" ):
                listener.enterVarDefField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDefField" ):
                listener.exitVarDefField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDefField" ):
                return visitor.visitVarDefField(self)
            else:
                return visitor.visitChildren(self)




    def varDefField(self):

        localctx = RustParser.VarDefFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_varDefField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 258
                self.visibility()


            self.state = 261
            self.match(RustParser.Identifier)
            self.state = 262
            self.match(RustParser.COLON)
            self.state = 263
            self.typeExpr()
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 264
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 267
                self.visibility()


            self.state = 270
            self.match(RustParser.T__8)
            self.state = 271
            self.match(RustParser.Identifier)
            self.state = 272
            self.match(RustParser.T__4)
            self.state = 273
            self.typeExpr()
            self.state = 274
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDef" ):
                return visitor.visitInterfaceDef(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(RustParser.T__9)
            self.state = 277
            self.match(RustParser.Identifier)
            self.state = 278
            self.match(RustParser.T__1)
            self.state = 280 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 279
                self.functionDef()
                self.state = 282 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 84224) != 0)):
                    break

            self.state = 284
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(RustParser.T__10)
            self.state = 287
            self.match(RustParser.STRING_LITERAL)
            self.state = 288
            self.match(RustParser.T__1)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 86528) != 0):
                self.state = 289
                self.externItem()
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 295
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 297
                    self.visibility()


                self.state = 300
                self.match(RustParser.T__8)
                self.state = 301
                self.match(RustParser.Identifier)
                self.state = 302
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 303
                    self.visibility()


                self.state = 306
                self.match(RustParser.T__11)
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 307
                    self.match(RustParser.T__12)


                self.state = 310
                self.match(RustParser.Identifier)
                self.state = 311
                self.match(RustParser.COLON)
                self.state = 312
                self.typeExpr()
                self.state = 313
                self.match(RustParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 315
                    self.visibility()


                self.state = 318
                self.match(RustParser.T__13)
                self.state = 319
                self.match(RustParser.Identifier)
                self.state = 320
                self.match(RustParser.LPAREN)
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 229377) != 0):
                    self.state = 321
                    self.externParams()


                self.state = 324
                self.match(RustParser.RPAREN)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 325
                    self.match(RustParser.T__14)
                    self.state = 326
                    self.typeExpr()


                self.state = 329
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79, 94, 95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.externParam()
                self.state = 337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 333
                        self.match(RustParser.COMMA)
                        self.state = 334
                        self.externParam() 
                    self.state = 339
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 340
                    self.match(RustParser.COMMA)
                    self.state = 341
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 344
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79 or _la==94:
                self.state = 347
                _la = self._input.LA(1)
                if not(_la==79 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 350
            self.match(RustParser.COLON)
            self.state = 353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 22, 23, 24, 25, 26, 79, 85, 89]:
                self.state = 351
                self.typeExpr()
                pass
            elif token in [96]:
                self.state = 352
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(RustParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(RustParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(RustParser.T__10)
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 360
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 363
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 366 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(RustParser.POUND)

            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 369
                self.match(RustParser.EXCL)


            self.state = 372
            self.match(RustParser.LBRACK)
            self.state = 373
            self.attribute()
            self.state = 374
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attribute)
        try:
            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 376
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 377
                self.match(RustParser.Identifier)
                self.state = 378
                self.match(RustParser.T__4)
                self.state = 379
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 380
                self.match(RustParser.Identifier)
                self.state = 381
                self.match(RustParser.LPAREN)
                self.state = 382
                self.attrArgs()
                self.state = 383
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.attrArg()
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==91:
                self.state = 388
                self.match(RustParser.COMMA)
                self.state = 389
                self.attrArg()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(RustParser.Identifier)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 396
                self.match(RustParser.T__4)
                self.state = 397
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 402
                self.visibility()


            self.state = 405
            self.match(RustParser.T__16)
            self.state = 406
            self.match(RustParser.Identifier)
            self.state = 407
            self.match(RustParser.T__1)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16 or _la==79:
                self.state = 408
                self.structField()
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 414
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 416
                self.visibility()


            self.state = 419
            self.match(RustParser.Identifier)
            self.state = 420
            self.match(RustParser.COLON)
            self.state = 421
            self.typeExpr()
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 422
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteral" ):
                return visitor.visitStructLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(RustParser.Identifier)
            self.state = 426
            self.match(RustParser.T__1)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 427
                self.structLiteralField()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(RustParser.Identifier)
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 436
                self.match(RustParser.COLON)
                self.state = 437
                self.expression(0)


            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 440
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 443
                self.visibility()


            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 446
                self.unsafeModifier()


            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 449
                self.externAbi()


            self.state = 452
            self.match(RustParser.T__13)
            self.state = 453
            self.match(RustParser.Identifier)
            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.state = 454
                self.match(RustParser.T__17)
                pass
            elif token in [92]:
                self.state = 455
                self.match(RustParser.LPAREN)
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==19 or _la==79:
                    self.state = 456
                    self.paramList()


                self.state = 459
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 462
                self.match(RustParser.T__14)


            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 465
                self.typeExpr()


            self.state = 468
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.param()
            self.state = 475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 471
                    self.match(RustParser.COMMA)
                    self.state = 472
                    self.param() 
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 478
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 481
                self.match(RustParser.T__18)


            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 484
                self.match(RustParser.T__12)


            self.state = 487
            self.match(RustParser.Identifier)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 488
                self.match(RustParser.COLON)
                self.state = 489
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpr" ):
                listener.enterTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpr" ):
                listener.exitTypeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpr" ):
                return visitor.visitTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def typeExpr(self):

        localctx = RustParser.TypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_typeExpr)
        try:
            self.state = 494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 21, 22, 23, 24, 25, 26, 79, 85, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 492
                self.basicType()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(RustParser.T__19)
            self.state = 497
            _la = self._input.LA(1)
            if not(_la==6 or _la==13):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 498
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def safeNonNullWrapper(self):
            return self.getTypedRuleContext(RustParser.SafeNonNullWrapperContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(RustParser.ArrayTypeContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.match(RustParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.safeNonNullWrapper()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.match(RustParser.T__21)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 504
                self.match(RustParser.T__22)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 505
                self.match(RustParser.T__23)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 506
                self.arrayType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 507
                self.typePath()
                self.state = 508
                self.basicType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 510
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 513
                self.match(RustParser.T__24)
                self.state = 514
                self.typeExpr()
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 515
                    self.match(RustParser.COMMA)
                    self.state = 516
                    self.typeExpr()
                    self.state = 521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 522
                self.match(RustParser.GT)
                self.state = 524
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 523
                    self.match(RustParser.T__17)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 526
                self.match(RustParser.Identifier)
                self.state = 538
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 527
                    self.match(RustParser.T__24)
                    self.state = 528
                    self.typeExpr()
                    self.state = 533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==91:
                        self.state = 529
                        self.match(RustParser.COMMA)
                        self.state = 530
                        self.typeExpr()
                        self.state = 535
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 536
                    self.match(RustParser.GT)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 540
                self.match(RustParser.Identifier)
                self.state = 541
                self.match(RustParser.T__24)
                self.state = 542
                self.typeExpr()
                self.state = 543
                self.match(RustParser.GT)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 545
                self.match(RustParser.T__18)
                self.state = 546
                self.typeExpr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 547
                self.match(RustParser.LBRACK)
                self.state = 548
                self.typeExpr()
                self.state = 549
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 551
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SafeNonNullWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.GT)
            else:
                return self.getToken(RustParser.GT, i)

        def getRuleIndex(self):
            return RustParser.RULE_safeNonNullWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafeNonNullWrapper" ):
                listener.enterSafeNonNullWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafeNonNullWrapper" ):
                listener.exitSafeNonNullWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSafeNonNullWrapper" ):
                return visitor.visitSafeNonNullWrapper(self)
            else:
                return visitor.visitChildren(self)




    def safeNonNullWrapper(self):

        localctx = RustParser.SafeNonNullWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_safeNonNullWrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(RustParser.T__25)
            self.state = 555
            self.typeExpr()
            self.state = 559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 556
                self.match(RustParser.T__26)
                pass
            elif token in [87]:
                self.state = 557
                self.match(RustParser.GT)
                self.state = 558
                self.match(RustParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 561
                self.match(RustParser.Identifier)
                self.state = 562
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 563
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 566
                self.match(RustParser.Identifier)
                self.state = 571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 567
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 568
                        self.match(RustParser.Identifier) 
                    self.state = 573
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = RustParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(RustParser.LBRACK)
            self.state = 577
            self.basicType()
            self.state = 578
            self.match(RustParser.T__3)
            self.state = 579
            self.match(RustParser.Number)
            self.state = 580
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 582
                self.unsafeModifier()


            self.state = 585
            self.match(RustParser.T__1)
            self.state = 589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 586
                    self.statement() 
                self.state = 591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==79:
                self.state = 592
                self.returnStmt()


            self.state = 595
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlcokContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlcok

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlcok" ):
                listener.enterUnsafeBlcok(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlcok" ):
                listener.exitUnsafeBlcok(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlcok" ):
                return visitor.visitUnsafeBlcok(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlcok(self):

        localctx = RustParser.UnsafeBlcokContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_unsafeBlcok)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.unsafeModifier()
            self.state = 598
            self.match(RustParser.T__1)
            self.state = 602
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 599
                    self.statement() 
                self.state = 604
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==79:
                self.state = 605
                self.returnStmt()


            self.state = 608
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeBlcok(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlcokContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def conditionalAssignmentStmt(self):
            return self.getTypedRuleContext(RustParser.ConditionalAssignmentStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def safeWrapper(self):
            return self.getTypedRuleContext(RustParser.SafeWrapperContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def callStmt(self):
            return self.getTypedRuleContext(RustParser.CallStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_statement)
        try:
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 610
                self.unsafeBlcok()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.letStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 612
                self.conditionalAssignmentStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 613
                self.structLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 614
                self.structDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 615
                self.staticVarDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 616
                self.safeWrapper()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 617
                self.assignStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 618
                self.compoundAssignment()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 619
                self.forStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 620
                self.ifStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 621
                self.callStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 622
                self.exprStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 623
                self.whileStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 624
                self.returnStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 625
                self.loopStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 626
                self.match(RustParser.T__27)
                self.state = 627
                self.match(RustParser.T__3)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 628
                self.match(RustParser.T__28)
                self.state = 629
                self.match(RustParser.T__3)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 630
                self.matchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalAssignmentStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def safeWrapper(self):
            return self.getTypedRuleContext(RustParser.SafeWrapperContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_conditionalAssignmentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAssignmentStmt" ):
                listener.enterConditionalAssignmentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAssignmentStmt" ):
                listener.exitConditionalAssignmentStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalAssignmentStmt" ):
                return visitor.visitConditionalAssignmentStmt(self)
            else:
                return visitor.visitChildren(self)




    def conditionalAssignmentStmt(self):

        localctx = RustParser.ConditionalAssignmentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conditionalAssignmentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 633
                self.match(RustParser.T__29)


            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 636
                self.safeWrapper()
                pass

            elif la_ == 2:
                self.state = 637
                self.expression(0)
                pass


            self.state = 640
            self.match(RustParser.T__4)
            self.state = 641
            self.expression(0)
            self.state = 642
            self.match(RustParser.T__30)
            self.state = 643
            self.block()
            self.state = 644
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStmt" ):
                listener.enterCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStmt" ):
                listener.exitCallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStmt" ):
                return visitor.visitCallStmt(self)
            else:
                return visitor.visitChildren(self)




    def callStmt(self):

        localctx = RustParser.CallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_callStmt)
        try:
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.expression(0)

                self.state = 647
                self.match(RustParser.T__31)
                self.state = 648
                self.expression(0)
                self.state = 650
                self.callExpressionPostFix()
                self.state = 651
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.expression(0)
                self.state = 654
                self.callExpressionPostFix()
                self.state = 655
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.match(RustParser.T__29)
                self.state = 660
                self.varDef()
                self.state = 661
                self.match(RustParser.T__4)
                self.state = 662
                self.expression(0)
                self.state = 663
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.match(RustParser.T__29)
                self.state = 666
                self.varDef()
                self.state = 667
                self.initBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 669
                self.match(RustParser.T__29)
                self.state = 670
                self.match(RustParser.LPAREN)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13 or _la==33 or _la==79:
                    self.state = 671
                    self.varDef()
                    self.state = 673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 672
                        self.match(RustParser.COMMA)


                    self.state = 679
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 680
                self.match(RustParser.RPAREN)
                self.state = 681
                self.match(RustParser.T__4)
                self.state = 682
                self.match(RustParser.LPAREN)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 878201937134625028) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 77594479) != 0):
                    self.state = 683
                    self.expression(0)
                    self.state = 685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 684
                        self.match(RustParser.COMMA)


                    self.state = 691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 692
                self.match(RustParser.RPAREN)
                self.state = 693
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 696
                self.match(RustParser.T__32)


            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 699
                self.match(RustParser.T__12)


            self.state = 702
            self.match(RustParser.Identifier)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 703
                self.match(RustParser.COLON)
                self.state = 704
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4380866641920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.expression(0)
            self.state = 710
            self.compoundOp()
            self.state = 711
            self.expression(0)
            self.state = 712
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(RustParser.T__41)
            self.state = 715
            self.expression(0)
            self.state = 716
            self.match(RustParser.T__1)
            self.state = 718 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 717
                self.matchArm()
                self.state = 720 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 268460143) != 0)):
                    break

            self.state = 722
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.matchPattern()
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 725
                self.match(RustParser.T__42)
                self.state = 726
                self.matchPattern()
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 732
            self.match(RustParser.T__43)
            self.state = 738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 8]:
                self.state = 733
                self.block()
                pass
            elif token in [45]:
                self.state = 734
                self.match(RustParser.T__44)
                self.state = 736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 735
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_matchPattern)
        try:
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 67, 68, 69, 71, 72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.byteLiteral()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.match(RustParser.Number)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 3)
                self.state = 742
                self.match(RustParser.UNDERSCORE)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 4)
                self.state = 743
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(RustParser.T__45)
            self.state = 747
            self.expression(0)
            self.state = 748
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_initializer)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 752
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 755
                self.visibility()


            self.state = 758
            self.match(RustParser.T__11)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 759
                self.match(RustParser.T__12)


            self.state = 762
            self.match(RustParser.Identifier)
            self.state = 763
            self.match(RustParser.COLON)
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 764
                self.typeExpr()
                pass

            elif la_ == 2:
                self.state = 765
                self.match(RustParser.Identifier)
                pass


            self.state = 768
            self.match(RustParser.T__4)
            self.state = 769
            self.initializer()
            self.state = 770
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(RustParser.T__1)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 773
                self.match(RustParser.Identifier)
                self.state = 774
                self.match(RustParser.COLON)
                self.state = 775
                self.expression(0)
                self.state = 776
                self.match(RustParser.COMMA)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 783
            self.match(RustParser.T__2)
            self.state = 784
            self.match(RustParser.T__3)
            self.state = 785
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.expression(0)
            self.state = 788
            self.match(RustParser.T__4)
            self.state = 789
            self.expression(0)
            self.state = 790
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(RustParser.T__46)
            self.state = 793
            self.match(RustParser.Identifier)
            self.state = 794
            self.match(RustParser.T__47)
            self.state = 795
            self.expression(0)
            self.state = 796
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(RustParser.T__48)
            self.state = 799
            self.expression(0)
            self.state = 800
            self.block()
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50:
                self.state = 801
                self.match(RustParser.T__49)
                self.state = 802
                self.expression(0)
                self.state = 803
                self.block()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 810
                self.match(RustParser.T__30)
                self.state = 811
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.primaryExpression()
            self.state = 815
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 817
                self.match(RustParser.T__44)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 878201937134625028) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 77594479) != 0):
                    self.state = 818
                    self.expression(0)


                self.state = 821
                self.match(RustParser.T__3)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(RustParser.T__50)
            self.state = 826
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SafeWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_safeWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafeWrapper" ):
                listener.enterSafeWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafeWrapper" ):
                listener.exitSafeWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSafeWrapper" ):
                return visitor.visitSafeWrapper(self)
            else:
                return visitor.visitChildren(self)




    def safeWrapper(self):

        localctx = RustParser.SafeWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_safeWrapper)
        try:
            self.state = 840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self.match(RustParser.T__51)
                self.state = 829
                self.match(RustParser.LPAREN)
                self.state = 830
                self.expression(0)
                self.state = 831
                self.match(RustParser.RPAREN)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.match(RustParser.T__52)
                self.state = 834
                self.match(RustParser.DOUBLE_COLON)
                self.state = 835
                self.match(RustParser.Identifier)
                self.state = 836
                self.match(RustParser.LPAREN)
                self.state = 837
                self.expression(0)
                self.state = 838
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def safeWrapper(self):
            return self.getTypedRuleContext(RustParser.SafeWrapperContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def typePathExpression(self):
            return self.getTypedRuleContext(RustParser.TypePathExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def structDefInit(self):
            return self.getTypedRuleContext(RustParser.StructDefInitContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def unsafeExpression(self):
            return self.getTypedRuleContext(RustParser.UnsafeExpressionContext,0)


        def basicTypeCastExpr(self):
            return self.getTypedRuleContext(RustParser.BasicTypeCastExprContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def qualifiedExpression(self):
            return self.getTypedRuleContext(RustParser.QualifiedExpressionContext,0)


        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(RustParser.ArrayDeclarationContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def rangeSymbol(self):
            return self.getTypedRuleContext(RustParser.RangeSymbolContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 843
                self.mutableExpression()
                self.state = 844
                self.expression(24)
                pass

            elif la_ == 2:
                self.state = 846
                self.safeWrapper()
                pass

            elif la_ == 3:
                self.state = 847
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 848
                self.structLiteral()
                pass

            elif la_ == 5:
                self.state = 849
                self.typePathExpression()
                self.state = 850
                self.expression(18)
                pass

            elif la_ == 6:
                self.state = 852
                self.parenExpression()
                pass

            elif la_ == 7:
                self.state = 853
                self.structFieldDec()
                pass

            elif la_ == 8:
                self.state = 854
                self.structDefInit()
                pass

            elif la_ == 9:
                self.state = 855
                self.unaryOpes()
                self.state = 856
                self.expression(14)
                pass

            elif la_ == 10:
                self.state = 858
                self.borrowExpression()
                pass

            elif la_ == 11:
                self.state = 859
                self.unsafeExpression()
                pass

            elif la_ == 12:
                self.state = 860
                self.basicTypeCastExpr()
                pass

            elif la_ == 13:
                self.state = 861
                self.dereferenceExpression()
                pass

            elif la_ == 14:
                self.state = 862
                self.expressionBlock()
                pass

            elif la_ == 15:
                self.state = 863
                self.qualifiedExpression()
                pass

            elif la_ == 16:
                self.state = 864
                self.patternPrefix()
                self.state = 865
                self.expression(3)
                pass

            elif la_ == 17:
                self.state = 867
                self.arrayDeclaration()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 892
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 890
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 870
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 871
                        self.binaryOps()
                        self.state = 872
                        self.expression(22)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 874
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 875
                        self.rangeSymbol()
                        self.state = 876
                        self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 878
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 879
                        self.compoundOps()
                        self.state = 880
                        self.expression(7)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 882
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 883
                        self.castExpressionPostFix()
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 884
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 885
                        self.callExpressionPostFix()
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 886
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 887
                        self.typeExpr()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 888
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 889
                        self.fieldAccessPostFix()
                        pass

             
                self.state = 894
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasicTypeCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_basicTypeCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicTypeCastExpr" ):
                listener.enterBasicTypeCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicTypeCastExpr" ):
                listener.exitBasicTypeCastExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicTypeCastExpr" ):
                return visitor.visitBasicTypeCastExpr(self)
            else:
                return visitor.visitChildren(self)




    def basicTypeCastExpr(self):

        localctx = RustParser.BasicTypeCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_basicTypeCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.typeExpr()
            self.state = 896
            self.typePath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeExpression" ):
                listener.enterUnsafeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeExpression" ):
                listener.exitUnsafeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeExpression" ):
                return visitor.visitUnsafeExpression(self)
            else:
                return visitor.visitChildren(self)




    def unsafeExpression(self):

        localctx = RustParser.UnsafeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_unsafeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.match(RustParser.T__7)
            self.state = 899
            self.match(RustParser.T__1)
            self.state = 900
            self.expression(0)
            self.state = 901
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedExpression" ):
                listener.enterQualifiedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedExpression" ):
                listener.exitQualifiedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedExpression" ):
                return visitor.visitQualifiedExpression(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedExpression(self):

        localctx = RustParser.QualifiedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_qualifiedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(RustParser.T__24)
            self.state = 904
            self.expression(0)
            self.state = 905
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structDefInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefInit" ):
                listener.enterStructDefInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefInit" ):
                listener.exitStructDefInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefInit" ):
                return visitor.visitStructDefInit(self)
            else:
                return visitor.visitChildren(self)




    def structDefInit(self):

        localctx = RustParser.StructDefInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_structDefInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(RustParser.Identifier)
            self.state = 908
            self.match(RustParser.T__4)
            self.state = 909
            self.match(RustParser.T__1)
            self.state = 910
            self.expression(0)
            self.state = 911
            self.match(RustParser.T__2)
            self.state = 912
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = RustParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self.match(RustParser.Identifier)
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 915
                self.match(RustParser.EXCL)


            self.state = 918
            self.match(RustParser.LBRACK)
            self.state = 919
            self.match(RustParser.Number)
            self.state = 920
            self.match(RustParser.T__3)
            self.state = 921
            self.expression(0)
            self.state = 922
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathExpression" ):
                listener.enterTypePathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathExpression" ):
                listener.exitTypePathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePathExpression" ):
                return visitor.visitTypePathExpression(self)
            else:
                return visitor.visitChildren(self)




    def typePathExpression(self):

        localctx = RustParser.TypePathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_typePathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 924
                    self.match(RustParser.Identifier)
                    self.state = 925
                    self.match(RustParser.DOUBLE_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 928 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPrefix" ):
                return visitor.visitPatternPrefix(self)
            else:
                return visitor.visitChildren(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 930
                self.match(RustParser.T__29)


            self.state = 933
            self.pattern()
            self.state = 934
            self.match(RustParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 936
                    self.match(RustParser.T__32)


                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 939
                    self.match(RustParser.T__12)


                self.state = 942
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.match(RustParser.Identifier)
                self.state = 944
                self.match(RustParser.LPAREN)
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 945
                    self.match(RustParser.T__32)


                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 948
                    self.match(RustParser.T__12)


                self.state = 951
                self.match(RustParser.Identifier)
                self.state = 952
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpressionPostFix" ):
                return visitor.visitCastExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(RustParser.T__53)
            self.state = 956
            self.typeExpr()
            self.state = 961
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 957
                    self.match(RustParser.T__53)
                    self.state = 958
                    self.typeExpr() 
                self.state = 963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOps" ):
                return visitor.visitCompoundOps(self)
            else:
                return visitor.visitChildren(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4380866641920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeSymbol" ):
                listener.enterRangeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeSymbol" ):
                listener.exitRangeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeSymbol" ):
                return visitor.visitRangeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def rangeSymbol(self):

        localctx = RustParser.RangeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_rangeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(RustParser.T__54)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOps" ):
                return visitor.visitBinaryOps(self)
            else:
                return visitor.visitChildren(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -72057593868582912) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8388611) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_binaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpression" ):
                listener.enterBinaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpression" ):
                listener.exitBinaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryExpression" ):
                return visitor.visitBinaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def binaryExpression(self):

        localctx = RustParser.BinaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_binaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.expression(0)
            self.state = 971
            self.binaryOps()
            self.state = 972
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFieldDec" ):
                return visitor.visitStructFieldDec(self)
            else:
                return visitor.visitChildren(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(RustParser.Identifier)
            self.state = 975
            self.match(RustParser.T__1)
            self.state = 976
            self.structLiteralField()
            self.state = 981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 977
                    self.match(RustParser.COMMA)
                    self.state = 978
                    self.structLiteralField() 
                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 984
                self.match(RustParser.COMMA)


            self.state = 987
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableExpression" ):
                return visitor.visitMutableExpression(self)
            else:
                return visitor.visitChildren(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOpes" ):
                return visitor.visitUnaryOpes(self)
            else:
                return visitor.visitChildren(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 268435459) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(RustParser.LPAREN)
            self.state = 994
            self.expression(0)
            self.state = 995
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(RustParser.T__19)
            self.state = 998
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(RustParser.T__1)
            self.state = 1004
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1001
                    self.statement() 
                self.state = 1006
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 1007
            self.expression(0)
            self.state = 1008
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(RustParser.T__18)
            self.state = 1011
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_primaryExpression)
        try:
            self.state = 1015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1013
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1014
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldAccessPostFix" ):
                return visitor.visitFieldAccessPostFix(self)
            else:
                return visitor.visitChildren(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_fieldAccessPostFix)
        try:
            self.state = 1027
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1017
                self.match(RustParser.LBRACK)
                self.state = 1018
                self.primaryExpression()
                self.state = 1019
                self.match(RustParser.RBRACK)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1023 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1021
                        self.match(RustParser.T__31)
                        self.state = 1022
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1025 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallArgs(self):
            return self.getTypedRuleContext(RustParser.FunctionCallArgsContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_callExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpressionPostFix" ):
                listener.enterCallExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpressionPostFix" ):
                listener.exitCallExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpressionPostFix" ):
                return visitor.visitCallExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def callExpressionPostFix(self):

        localctx = RustParser.CallExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_callExpressionPostFix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 1029
                self.match(RustParser.T__31)
                self.state = 1030
                self.expression(0)


            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1033
                self.match(RustParser.EXCL)


            self.state = 1036
            self.functionCallArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_functionCallArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArgs" ):
                listener.enterFunctionCallArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArgs" ):
                listener.exitFunctionCallArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArgs" ):
                return visitor.visitFunctionCallArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArgs(self):

        localctx = RustParser.FunctionCallArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_functionCallArgs)
        self._la = 0 # Token type
        try:
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1038
                self.match(RustParser.T__17)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1039
                self.match(RustParser.LPAREN)
                self.state = 1040
                self.expression(0)
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 1041
                    self.match(RustParser.COMMA)
                    self.state = 1042
                    self.expression(0)
                    self.state = 1047
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1048
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_literal)
        try:
            self.state = 1063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79, 86, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.arrayLiteral()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.match(RustParser.HexNumber)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1054
                self.match(RustParser.Number)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1055
                self.match(RustParser.SignedNumber)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1056
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1057
                self.match(RustParser.Binary)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1058
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [74, 75]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1059
                self.booleanLiteral()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1060
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [66, 67, 68, 69, 71, 72]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1061
                self.byteLiteral()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1062
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_byteLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteLiteral" ):
                listener.enterByteLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteLiteral" ):
                listener.exitByteLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteLiteral" ):
                return visitor.visitByteLiteral(self)
            else:
                return visitor.visitChildren(self)




    def byteLiteral(self):

        localctx = RustParser.ByteLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_byteLiteral)
        try:
            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1065
                self.match(RustParser.T__65)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1066
                self.match(RustParser.T__66)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1067
                self.match(RustParser.T__67)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1068
                self.match(RustParser.T__68)
                self.state = 1069
                self.match(RustParser.LPAREN)
                self.state = 1070
                self.match(RustParser.T__69)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1071
                self.match(RustParser.T__68)
                self.state = 1072
                self.match(RustParser.RPAREN)
                self.state = 1073
                self.match(RustParser.T__69)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1074
                self.match(RustParser.T__70)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1075
                self.match(RustParser.T__71)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            _la = self._input.LA(1)
            if not(_la==74 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1080
                    self.match(RustParser.Identifier)


                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1083
                    self.match(RustParser.EXCL)


                self.state = 1086
                self.match(RustParser.LBRACK)
                self.state = 1087
                self.expression(0)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 1088
                    self.match(RustParser.COMMA)
                    self.state = 1089
                    self.expression(0)
                    self.state = 1094
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1095
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1097
                    self.match(RustParser.Identifier)


                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1100
                    self.match(RustParser.EXCL)


                self.state = 1103
                self.match(RustParser.LBRACK)
                self.state = 1104
                self.expression(0)
                self.state = 1105
                self.match(RustParser.T__3)
                self.state = 1106
                self.expression(0)
                self.state = 1107
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1109
                    self.match(RustParser.Identifier)


                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1112
                    self.match(RustParser.EXCL)


                self.state = 1115
                self.match(RustParser.LBRACK)
                self.state = 1116
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(RustParser.T__72)
            self.state = 1123
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,132,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1120
                    self.matchWildcard() 
                self.state = 1125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,132,self._ctx)

            self.state = 1126
            self.match(RustParser.T__72)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[58] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




