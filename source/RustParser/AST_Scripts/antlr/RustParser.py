# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,85,952,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,1,0,5,0,136,8,0,10,0,12,0,139,9,0,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,3,1,150,8,1,1,2,3,2,153,8,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,5,3,165,8,3,10,3,12,3,168,9,3,1,3,1,3,1,4,3,
        4,173,8,4,1,4,1,4,1,4,1,4,3,4,179,8,4,1,4,1,4,3,4,183,8,4,1,4,1,
        4,1,4,1,4,1,4,1,4,3,4,191,8,4,1,4,1,4,1,4,1,4,3,4,197,8,4,1,4,1,
        4,1,4,3,4,202,8,4,1,4,3,4,205,8,4,1,5,1,5,1,5,5,5,210,8,5,10,5,12,
        5,213,9,5,1,5,1,5,3,5,217,8,5,1,5,3,5,220,8,5,1,6,3,6,223,8,6,1,
        6,1,6,1,6,3,6,228,8,6,1,7,1,7,1,8,4,8,233,8,8,11,8,12,8,234,1,9,
        1,9,3,9,239,8,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,3,10,254,8,10,1,11,1,11,1,11,5,11,259,8,11,10,11,12,
        11,262,9,11,1,12,1,12,1,12,3,12,267,8,12,1,13,1,13,1,14,3,14,272,
        8,14,1,14,1,14,1,14,1,14,5,14,278,8,14,10,14,12,14,281,9,14,1,14,
        1,14,1,15,3,15,286,8,15,1,15,1,15,1,15,1,15,3,15,292,8,15,1,16,3,
        16,295,8,16,1,16,3,16,298,8,16,1,16,3,16,301,8,16,1,16,1,16,1,16,
        1,16,1,16,3,16,308,8,16,1,16,3,16,311,8,16,1,16,3,16,314,8,16,1,
        16,3,16,317,8,16,1,16,1,16,1,17,1,17,1,18,1,18,3,18,325,8,18,1,19,
        1,19,1,19,5,19,330,8,19,10,19,12,19,333,9,19,1,19,3,19,336,8,19,
        1,20,3,20,339,8,20,1,20,1,20,1,20,1,20,1,21,3,21,346,8,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,3,22,357,8,22,1,22,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,22,369,8,22,10,22,12,22,
        372,9,22,1,22,3,22,375,8,22,1,23,3,23,378,8,23,1,23,1,23,1,23,1,
        23,3,23,384,8,23,1,24,3,24,387,8,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,26,1,26,3,26,402,8,26,1,27,1,27,1,27,
        3,27,407,8,27,1,27,1,27,1,27,5,27,412,8,27,10,27,12,27,415,9,27,
        3,27,417,8,27,1,28,1,28,1,28,3,28,422,8,28,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,5,29,434,8,29,10,29,12,29,437,9,29,1,
        29,1,29,3,29,441,8,29,1,29,1,29,1,29,1,29,1,29,5,29,448,8,29,10,
        29,12,29,451,9,29,1,29,1,29,3,29,455,8,29,1,29,1,29,1,29,3,29,460,
        8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        3,29,474,8,29,1,30,1,30,5,30,478,8,30,10,30,12,30,481,9,30,1,30,
        3,30,484,8,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,
        508,8,31,10,31,12,31,511,9,31,1,31,1,31,1,31,3,31,516,8,31,1,32,
        1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,4,34,529,8,34,
        11,34,12,34,530,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,
        3,37,543,8,37,1,37,1,37,3,37,547,8,37,1,37,1,37,1,37,1,37,3,37,553,
        8,37,1,37,1,37,1,37,1,37,1,38,1,38,3,38,561,8,38,1,39,1,39,1,39,
        1,39,1,39,1,39,1,40,1,40,3,40,571,8,40,1,40,1,40,1,40,3,40,576,8,
        40,1,40,1,40,1,40,1,40,3,40,582,8,40,1,40,1,40,1,40,3,40,587,8,40,
        3,40,589,8,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,
        1,42,1,43,1,43,1,43,1,43,1,43,3,43,607,8,43,1,44,1,44,1,44,1,45,
        1,45,3,45,614,8,45,1,45,1,45,3,45,618,8,45,1,46,1,46,1,46,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,3,47,643,8,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,4,47,656,8,47,11,47,12,47,657,1,
        47,1,47,1,47,1,47,1,47,3,47,665,8,47,3,47,667,8,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,5,47,691,8,47,10,47,12,47,694,9,47,
        5,47,696,8,47,10,47,12,47,699,9,47,1,48,1,48,1,48,1,48,1,49,1,49,
        1,49,1,50,1,50,5,50,710,8,50,10,50,12,50,713,9,50,1,50,1,50,1,50,
        1,51,1,51,1,51,1,52,1,52,1,52,1,52,3,52,725,8,52,1,52,3,52,728,8,
        52,1,52,1,52,4,52,732,8,52,11,52,12,52,733,1,52,1,52,1,52,1,52,3,
        52,740,8,52,1,52,1,52,3,52,744,8,52,1,52,1,52,1,52,1,52,4,52,750,
        8,52,11,52,12,52,751,1,53,1,53,1,53,1,53,1,53,1,53,3,53,760,8,53,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,5,53,772,8,53,
        10,53,12,53,775,9,53,1,53,3,53,778,8,53,1,53,1,53,3,53,782,8,53,
        1,54,1,54,1,54,1,54,3,54,788,8,54,1,54,1,54,1,54,3,54,793,8,54,1,
        54,3,54,796,8,54,1,54,1,54,1,54,5,54,801,8,54,10,54,12,54,804,9,
        54,1,54,1,54,5,54,808,8,54,10,54,12,54,811,9,54,1,54,1,54,1,54,1,
        54,1,54,1,54,1,54,5,54,820,8,54,10,54,12,54,823,9,54,1,54,3,54,826,
        8,54,3,54,828,8,54,1,55,1,55,1,55,1,55,5,55,834,8,55,10,55,12,55,
        837,9,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,5,57,848,8,
        57,10,57,12,57,851,9,57,1,57,1,57,1,57,1,58,1,58,1,59,1,59,3,59,
        860,8,59,1,59,1,59,1,59,3,59,865,8,59,5,59,867,8,59,10,59,12,59,
        870,9,59,1,59,3,59,873,8,59,1,59,1,59,4,59,877,8,59,11,59,12,59,
        878,1,59,1,59,1,59,1,59,1,59,3,59,886,8,59,3,59,888,8,59,1,60,1,
        60,1,60,1,60,1,61,1,61,3,61,896,8,61,1,61,1,61,1,61,3,61,901,8,61,
        1,61,3,61,904,8,61,1,62,1,62,1,62,3,62,909,8,62,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,3,63,920,8,63,1,64,1,64,1,65,1,65,1,
        65,1,65,5,65,928,8,65,10,65,12,65,931,9,65,1,65,1,65,1,65,1,65,1,
        65,1,65,1,65,1,65,3,65,941,8,65,1,66,1,66,5,66,945,8,66,10,66,12,
        66,948,9,66,1,66,1,66,1,66,1,946,1,94,67,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,0,8,2,0,
        66,66,81,81,1,0,65,67,2,0,8,8,15,15,1,0,27,34,2,0,17,18,46,52,3,
        0,23,23,53,56,74,74,2,0,66,67,81,81,1,0,62,63,1063,0,137,1,0,0,0,
        2,149,1,0,0,0,4,152,1,0,0,0,6,160,1,0,0,0,8,204,1,0,0,0,10,219,1,
        0,0,0,12,222,1,0,0,0,14,229,1,0,0,0,16,232,1,0,0,0,18,236,1,0,0,
        0,20,253,1,0,0,0,22,255,1,0,0,0,24,263,1,0,0,0,26,268,1,0,0,0,28,
        271,1,0,0,0,30,285,1,0,0,0,32,294,1,0,0,0,34,320,1,0,0,0,36,322,
        1,0,0,0,38,326,1,0,0,0,40,338,1,0,0,0,42,345,1,0,0,0,44,356,1,0,
        0,0,46,377,1,0,0,0,48,386,1,0,0,0,50,396,1,0,0,0,52,401,1,0,0,0,
        54,416,1,0,0,0,56,418,1,0,0,0,58,473,1,0,0,0,60,475,1,0,0,0,62,515,
        1,0,0,0,64,517,1,0,0,0,66,519,1,0,0,0,68,524,1,0,0,0,70,534,1,0,
        0,0,72,537,1,0,0,0,74,542,1,0,0,0,76,560,1,0,0,0,78,562,1,0,0,0,
        80,588,1,0,0,0,82,590,1,0,0,0,84,595,1,0,0,0,86,601,1,0,0,0,88,608,
        1,0,0,0,90,617,1,0,0,0,92,619,1,0,0,0,94,666,1,0,0,0,96,700,1,0,
        0,0,98,704,1,0,0,0,100,707,1,0,0,0,102,717,1,0,0,0,104,720,1,0,0,
        0,106,781,1,0,0,0,108,827,1,0,0,0,110,829,1,0,0,0,112,840,1,0,0,
        0,114,844,1,0,0,0,116,855,1,0,0,0,118,887,1,0,0,0,120,889,1,0,0,
        0,122,903,1,0,0,0,124,905,1,0,0,0,126,919,1,0,0,0,128,921,1,0,0,
        0,130,940,1,0,0,0,132,942,1,0,0,0,134,136,3,2,1,0,135,134,1,0,0,
        0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,1,1,0,0,0,
        139,137,1,0,0,0,140,150,3,32,16,0,141,150,3,28,14,0,142,150,3,16,
        8,0,143,150,3,6,3,0,144,150,3,4,2,0,145,150,3,42,21,0,146,150,3,
        44,22,0,147,150,3,48,24,0,148,150,3,74,37,0,149,140,1,0,0,0,149,
        141,1,0,0,0,149,142,1,0,0,0,149,143,1,0,0,0,149,144,1,0,0,0,149,
        145,1,0,0,0,149,146,1,0,0,0,149,147,1,0,0,0,149,148,1,0,0,0,150,
        3,1,0,0,0,151,153,3,14,7,0,152,151,1,0,0,0,152,153,1,0,0,0,153,154,
        1,0,0,0,154,155,5,1,0,0,155,156,5,66,0,0,156,157,5,2,0,0,157,158,
        3,52,26,0,158,159,5,3,0,0,159,5,1,0,0,0,160,161,5,4,0,0,161,162,
        5,65,0,0,162,166,5,5,0,0,163,165,3,8,4,0,164,163,1,0,0,0,165,168,
        1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,166,
        1,0,0,0,169,170,5,6,0,0,170,7,1,0,0,0,171,173,3,14,7,0,172,171,1,
        0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,5,1,0,0,175,176,5,
        66,0,0,176,205,5,3,0,0,177,179,3,14,7,0,178,177,1,0,0,0,178,179,
        1,0,0,0,179,180,1,0,0,0,180,182,5,7,0,0,181,183,5,8,0,0,182,181,
        1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,185,5,66,0,0,185,186,
        5,82,0,0,186,187,3,52,26,0,187,188,5,3,0,0,188,205,1,0,0,0,189,191,
        3,14,7,0,190,189,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,
        5,9,0,0,193,194,5,66,0,0,194,196,5,79,0,0,195,197,3,10,5,0,196,195,
        1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,201,5,80,0,0,199,200,
        5,10,0,0,200,202,3,52,26,0,201,199,1,0,0,0,201,202,1,0,0,0,202,203,
        1,0,0,0,203,205,5,3,0,0,204,172,1,0,0,0,204,178,1,0,0,0,204,190,
        1,0,0,0,205,9,1,0,0,0,206,211,3,12,6,0,207,208,5,78,0,0,208,210,
        3,12,6,0,209,207,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,
        1,0,0,0,212,216,1,0,0,0,213,211,1,0,0,0,214,215,5,78,0,0,215,217,
        5,83,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,220,1,0,0,0,218,220,
        5,83,0,0,219,206,1,0,0,0,219,218,1,0,0,0,220,11,1,0,0,0,221,223,
        7,0,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,227,
        5,82,0,0,225,228,3,52,26,0,226,228,5,83,0,0,227,225,1,0,0,0,227,
        226,1,0,0,0,228,13,1,0,0,0,229,230,5,11,0,0,230,15,1,0,0,0,231,233,
        3,18,9,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,1,0,0,0,234,235,
        1,0,0,0,235,17,1,0,0,0,236,238,5,75,0,0,237,239,5,73,0,0,238,237,
        1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,241,5,76,0,0,241,242,
        3,20,10,0,242,243,5,77,0,0,243,19,1,0,0,0,244,254,5,66,0,0,245,246,
        5,66,0,0,246,247,5,2,0,0,247,254,3,26,13,0,248,249,5,66,0,0,249,
        250,5,79,0,0,250,251,3,22,11,0,251,252,5,80,0,0,252,254,1,0,0,0,
        253,244,1,0,0,0,253,245,1,0,0,0,253,248,1,0,0,0,254,21,1,0,0,0,255,
        260,3,24,12,0,256,257,5,78,0,0,257,259,3,24,12,0,258,256,1,0,0,0,
        259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,23,1,0,0,0,262,
        260,1,0,0,0,263,266,5,66,0,0,264,265,5,2,0,0,265,267,3,26,13,0,266,
        264,1,0,0,0,266,267,1,0,0,0,267,25,1,0,0,0,268,269,7,1,0,0,269,27,
        1,0,0,0,270,272,3,14,7,0,271,270,1,0,0,0,271,272,1,0,0,0,272,273,
        1,0,0,0,273,274,5,12,0,0,274,275,5,66,0,0,275,279,5,5,0,0,276,278,
        3,30,15,0,277,276,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,
        1,0,0,0,280,282,1,0,0,0,281,279,1,0,0,0,282,283,5,6,0,0,283,29,1,
        0,0,0,284,286,3,14,7,0,285,284,1,0,0,0,285,286,1,0,0,0,286,287,1,
        0,0,0,287,288,5,66,0,0,288,289,5,82,0,0,289,291,3,52,26,0,290,292,
        5,78,0,0,291,290,1,0,0,0,291,292,1,0,0,0,292,31,1,0,0,0,293,295,
        3,14,7,0,294,293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,298,
        3,34,17,0,297,296,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,301,
        3,36,18,0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,303,
        5,9,0,0,303,310,5,66,0,0,304,311,5,13,0,0,305,307,5,79,0,0,306,308,
        3,38,19,0,307,306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,311,
        5,80,0,0,310,304,1,0,0,0,310,305,1,0,0,0,311,313,1,0,0,0,312,314,
        5,10,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,317,
        3,52,26,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,
        3,60,30,0,319,33,1,0,0,0,320,321,5,14,0,0,321,35,1,0,0,0,322,324,
        5,4,0,0,323,325,5,65,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,37,
        1,0,0,0,326,331,3,40,20,0,327,328,5,78,0,0,328,330,3,40,20,0,329,
        327,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,
        335,1,0,0,0,333,331,1,0,0,0,334,336,5,78,0,0,335,334,1,0,0,0,335,
        336,1,0,0,0,336,39,1,0,0,0,337,339,5,8,0,0,338,337,1,0,0,0,338,339,
        1,0,0,0,339,340,1,0,0,0,340,341,5,66,0,0,341,342,5,82,0,0,342,343,
        3,52,26,0,343,41,1,0,0,0,344,346,3,14,7,0,345,344,1,0,0,0,345,346,
        1,0,0,0,346,347,1,0,0,0,347,348,5,15,0,0,348,349,5,66,0,0,349,350,
        5,82,0,0,350,351,3,52,26,0,351,352,5,2,0,0,352,353,3,94,47,0,353,
        354,5,3,0,0,354,43,1,0,0,0,355,357,3,14,7,0,356,355,1,0,0,0,356,
        357,1,0,0,0,357,358,1,0,0,0,358,359,5,16,0,0,359,374,5,66,0,0,360,
        361,5,82,0,0,361,362,3,52,26,0,362,363,5,2,0,0,363,364,3,94,47,0,
        364,365,5,3,0,0,365,375,1,0,0,0,366,370,5,5,0,0,367,369,3,46,23,
        0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,
        0,371,373,1,0,0,0,372,370,1,0,0,0,373,375,5,6,0,0,374,360,1,0,0,
        0,374,366,1,0,0,0,375,45,1,0,0,0,376,378,3,14,7,0,377,376,1,0,0,
        0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,5,66,0,0,380,381,5,82,
        0,0,381,383,3,52,26,0,382,384,5,78,0,0,383,382,1,0,0,0,383,384,1,
        0,0,0,384,47,1,0,0,0,385,387,3,14,7,0,386,385,1,0,0,0,386,387,1,
        0,0,0,387,388,1,0,0,0,388,389,5,14,0,0,389,390,5,66,0,0,390,391,
        5,82,0,0,391,392,3,52,26,0,392,393,5,2,0,0,393,394,3,94,47,0,394,
        395,5,3,0,0,395,49,1,0,0,0,396,397,5,17,0,0,397,398,3,52,26,0,398,
        51,1,0,0,0,399,402,3,58,29,0,400,402,3,56,28,0,401,399,1,0,0,0,401,
        400,1,0,0,0,402,53,1,0,0,0,403,404,5,66,0,0,404,417,5,72,0,0,405,
        407,5,72,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,
        413,5,66,0,0,409,410,5,72,0,0,410,412,5,66,0,0,411,409,1,0,0,0,412,
        415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,417,1,0,0,0,415,
        413,1,0,0,0,416,403,1,0,0,0,416,406,1,0,0,0,417,55,1,0,0,0,418,419,
        5,18,0,0,419,421,7,2,0,0,420,422,3,52,26,0,421,420,1,0,0,0,421,422,
        1,0,0,0,422,57,1,0,0,0,423,474,5,19,0,0,424,474,5,20,0,0,425,474,
        5,21,0,0,426,474,5,22,0,0,427,474,5,13,0,0,428,440,3,54,27,0,429,
        430,5,23,0,0,430,435,3,52,26,0,431,432,5,78,0,0,432,434,3,52,26,
        0,433,431,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,1,0,0,
        0,436,438,1,0,0,0,437,435,1,0,0,0,438,439,5,74,0,0,439,441,1,0,0,
        0,440,429,1,0,0,0,440,441,1,0,0,0,441,474,1,0,0,0,442,454,5,66,0,
        0,443,444,5,23,0,0,444,449,3,52,26,0,445,446,5,78,0,0,446,448,3,
        52,26,0,447,445,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,450,
        1,0,0,0,450,452,1,0,0,0,451,449,1,0,0,0,452,453,5,74,0,0,453,455,
        1,0,0,0,454,443,1,0,0,0,454,455,1,0,0,0,455,474,1,0,0,0,456,457,
        5,17,0,0,457,474,3,52,26,0,458,460,3,54,27,0,459,458,1,0,0,0,459,
        460,1,0,0,0,460,461,1,0,0,0,461,462,5,76,0,0,462,463,3,52,26,0,463,
        464,5,3,0,0,464,465,5,67,0,0,465,466,5,77,0,0,466,474,1,0,0,0,467,
        474,3,54,27,0,468,469,5,76,0,0,469,470,3,52,26,0,470,471,5,77,0,
        0,471,474,1,0,0,0,472,474,5,66,0,0,473,423,1,0,0,0,473,424,1,0,0,
        0,473,425,1,0,0,0,473,426,1,0,0,0,473,427,1,0,0,0,473,428,1,0,0,
        0,473,442,1,0,0,0,473,456,1,0,0,0,473,459,1,0,0,0,473,467,1,0,0,
        0,473,468,1,0,0,0,473,472,1,0,0,0,474,59,1,0,0,0,475,479,5,5,0,0,
        476,478,3,62,31,0,477,476,1,0,0,0,478,481,1,0,0,0,479,477,1,0,0,
        0,479,480,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,482,484,3,90,45,
        0,483,482,1,0,0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,486,5,6,0,
        0,486,61,1,0,0,0,487,516,3,78,39,0,488,516,3,74,37,0,489,516,3,82,
        41,0,490,491,5,66,0,0,491,516,5,3,0,0,492,516,3,66,33,0,493,516,
        3,84,42,0,494,516,3,86,43,0,495,516,3,88,44,0,496,516,3,72,36,0,
        497,516,3,90,45,0,498,516,3,92,46,0,499,500,5,24,0,0,500,516,5,3,
        0,0,501,502,5,25,0,0,502,516,5,3,0,0,503,516,3,68,34,0,504,509,3,
        108,54,0,505,506,5,26,0,0,506,508,3,108,54,0,507,505,1,0,0,0,508,
        511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,512,1,0,0,0,511,
        509,1,0,0,0,512,513,5,3,0,0,513,516,1,0,0,0,514,516,3,70,35,0,515,
        487,1,0,0,0,515,488,1,0,0,0,515,489,1,0,0,0,515,490,1,0,0,0,515,
        492,1,0,0,0,515,493,1,0,0,0,515,494,1,0,0,0,515,495,1,0,0,0,515,
        496,1,0,0,0,515,497,1,0,0,0,515,498,1,0,0,0,515,499,1,0,0,0,515,
        501,1,0,0,0,515,503,1,0,0,0,515,504,1,0,0,0,515,514,1,0,0,0,516,
        63,1,0,0,0,517,518,7,3,0,0,518,65,1,0,0,0,519,520,3,94,47,0,520,
        521,3,64,32,0,521,522,3,94,47,0,522,523,5,3,0,0,523,67,1,0,0,0,524,
        525,5,35,0,0,525,526,3,94,47,0,526,528,5,5,0,0,527,529,3,114,57,
        0,528,527,1,0,0,0,529,530,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,
        0,531,532,1,0,0,0,532,533,5,6,0,0,533,69,1,0,0,0,534,535,5,14,0,
        0,535,536,3,60,30,0,536,71,1,0,0,0,537,538,5,36,0,0,538,539,3,94,
        47,0,539,540,3,60,30,0,540,73,1,0,0,0,541,543,3,14,7,0,542,541,1,
        0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,546,5,7,0,0,545,547,5,
        8,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,549,5,
        66,0,0,549,552,5,82,0,0,550,553,3,52,26,0,551,553,5,66,0,0,552,550,
        1,0,0,0,552,551,1,0,0,0,553,554,1,0,0,0,554,555,5,2,0,0,555,556,
        3,76,38,0,556,557,5,3,0,0,557,75,1,0,0,0,558,561,3,94,47,0,559,561,
        3,60,30,0,560,558,1,0,0,0,560,559,1,0,0,0,561,77,1,0,0,0,562,563,
        5,37,0,0,563,564,3,80,40,0,564,565,5,2,0,0,565,566,3,94,47,0,566,
        567,5,3,0,0,567,79,1,0,0,0,568,570,5,38,0,0,569,571,5,8,0,0,570,
        569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,575,5,66,0,0,573,
        574,5,82,0,0,574,576,3,52,26,0,575,573,1,0,0,0,575,576,1,0,0,0,576,
        589,1,0,0,0,577,578,5,8,0,0,578,581,5,66,0,0,579,580,5,82,0,0,580,
        582,3,52,26,0,581,579,1,0,0,0,581,582,1,0,0,0,582,589,1,0,0,0,583,
        586,5,66,0,0,584,585,5,82,0,0,585,587,3,52,26,0,586,584,1,0,0,0,
        586,587,1,0,0,0,587,589,1,0,0,0,588,568,1,0,0,0,588,577,1,0,0,0,
        588,583,1,0,0,0,589,81,1,0,0,0,590,591,3,94,47,0,591,592,5,2,0,0,
        592,593,3,94,47,0,593,594,5,3,0,0,594,83,1,0,0,0,595,596,5,39,0,
        0,596,597,5,66,0,0,597,598,5,40,0,0,598,599,3,94,47,0,599,600,3,
        60,30,0,600,85,1,0,0,0,601,602,5,41,0,0,602,603,3,94,47,0,603,606,
        3,60,30,0,604,605,5,42,0,0,605,607,3,60,30,0,606,604,1,0,0,0,606,
        607,1,0,0,0,607,87,1,0,0,0,608,609,3,94,47,0,609,610,5,3,0,0,610,
        89,1,0,0,0,611,613,5,43,0,0,612,614,3,94,47,0,613,612,1,0,0,0,613,
        614,1,0,0,0,614,615,1,0,0,0,615,618,5,3,0,0,616,618,5,66,0,0,617,
        611,1,0,0,0,617,616,1,0,0,0,618,91,1,0,0,0,619,620,5,44,0,0,620,
        621,3,60,30,0,621,93,1,0,0,0,622,623,6,47,-1,0,623,667,3,104,52,
        0,624,667,3,126,63,0,625,667,3,106,53,0,626,667,3,98,49,0,627,667,
        3,96,48,0,628,667,3,120,60,0,629,667,3,102,51,0,630,631,3,54,27,
        0,631,632,5,72,0,0,632,633,5,23,0,0,633,634,3,52,26,0,634,635,5,
        45,0,0,635,667,1,0,0,0,636,637,5,73,0,0,637,667,3,94,47,11,638,639,
        5,66,0,0,639,640,5,73,0,0,640,642,5,79,0,0,641,643,3,118,59,0,642,
        641,1,0,0,0,642,643,1,0,0,0,643,644,1,0,0,0,644,667,5,80,0,0,645,
        667,3,100,50,0,646,647,5,17,0,0,647,648,5,8,0,0,648,667,3,94,47,
        3,649,650,5,79,0,0,650,651,3,94,47,0,651,652,5,80,0,0,652,667,1,
        0,0,0,653,654,5,72,0,0,654,656,5,66,0,0,655,653,1,0,0,0,656,657,
        1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,664,1,0,0,0,659,665,
        5,13,0,0,660,661,5,79,0,0,661,662,3,118,59,0,662,663,5,80,0,0,663,
        665,1,0,0,0,664,659,1,0,0,0,664,660,1,0,0,0,665,667,1,0,0,0,666,
        622,1,0,0,0,666,624,1,0,0,0,666,625,1,0,0,0,666,626,1,0,0,0,666,
        627,1,0,0,0,666,628,1,0,0,0,666,629,1,0,0,0,666,630,1,0,0,0,666,
        636,1,0,0,0,666,638,1,0,0,0,666,645,1,0,0,0,666,646,1,0,0,0,666,
        649,1,0,0,0,666,655,1,0,0,0,667,697,1,0,0,0,668,669,10,10,0,0,669,
        670,7,4,0,0,670,696,3,94,47,11,671,672,10,9,0,0,672,673,7,5,0,0,
        673,696,3,94,47,10,674,675,10,8,0,0,675,676,5,57,0,0,676,696,3,94,
        47,9,677,678,10,7,0,0,678,679,7,3,0,0,679,696,3,94,47,8,680,681,
        10,12,0,0,681,682,5,76,0,0,682,683,3,94,47,0,683,684,5,77,0,0,684,
        696,1,0,0,0,685,686,10,5,0,0,686,687,5,58,0,0,687,692,3,52,26,0,
        688,689,5,58,0,0,689,691,3,52,26,0,690,688,1,0,0,0,691,694,1,0,0,
        0,692,690,1,0,0,0,692,693,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,
        0,695,668,1,0,0,0,695,671,1,0,0,0,695,674,1,0,0,0,695,677,1,0,0,
        0,695,680,1,0,0,0,695,685,1,0,0,0,696,699,1,0,0,0,697,695,1,0,0,
        0,697,698,1,0,0,0,698,95,1,0,0,0,699,697,1,0,0,0,700,701,5,79,0,
        0,701,702,3,94,47,0,702,703,5,80,0,0,703,97,1,0,0,0,704,705,5,18,
        0,0,705,706,3,94,47,0,706,99,1,0,0,0,707,711,5,5,0,0,708,710,3,62,
        31,0,709,708,1,0,0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,
        0,0,712,714,1,0,0,0,713,711,1,0,0,0,714,715,3,94,47,0,715,716,5,
        6,0,0,716,101,1,0,0,0,717,718,5,17,0,0,718,719,3,94,47,0,719,103,
        1,0,0,0,720,749,3,106,53,0,721,728,5,13,0,0,722,724,5,79,0,0,723,
        725,3,118,59,0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,
        728,5,80,0,0,727,721,1,0,0,0,727,722,1,0,0,0,728,750,1,0,0,0,729,
        730,5,26,0,0,730,732,5,66,0,0,731,729,1,0,0,0,732,733,1,0,0,0,733,
        731,1,0,0,0,733,734,1,0,0,0,734,750,1,0,0,0,735,736,5,26,0,0,736,
        743,5,66,0,0,737,739,5,79,0,0,738,740,3,118,59,0,739,738,1,0,0,0,
        739,740,1,0,0,0,740,741,1,0,0,0,741,744,5,80,0,0,742,744,5,13,0,
        0,743,737,1,0,0,0,743,742,1,0,0,0,744,750,1,0,0,0,745,746,5,76,0,
        0,746,747,3,94,47,0,747,748,5,77,0,0,748,750,1,0,0,0,749,727,1,0,
        0,0,749,731,1,0,0,0,749,735,1,0,0,0,749,745,1,0,0,0,750,751,1,0,
        0,0,751,749,1,0,0,0,751,752,1,0,0,0,752,105,1,0,0,0,753,782,3,126,
        63,0,754,782,5,66,0,0,755,782,3,108,54,0,756,757,5,66,0,0,757,759,
        5,79,0,0,758,760,3,118,59,0,759,758,1,0,0,0,759,760,1,0,0,0,760,
        761,1,0,0,0,761,782,5,80,0,0,762,763,5,79,0,0,763,764,3,94,47,0,
        764,765,5,80,0,0,765,782,1,0,0,0,766,767,5,66,0,0,767,768,5,5,0,
        0,768,773,3,112,56,0,769,770,5,78,0,0,770,772,3,112,56,0,771,769,
        1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,777,
        1,0,0,0,775,773,1,0,0,0,776,778,5,78,0,0,777,776,1,0,0,0,777,778,
        1,0,0,0,778,779,1,0,0,0,779,780,5,6,0,0,780,782,1,0,0,0,781,753,
        1,0,0,0,781,754,1,0,0,0,781,755,1,0,0,0,781,756,1,0,0,0,781,762,
        1,0,0,0,781,766,1,0,0,0,782,107,1,0,0,0,783,784,5,72,0,0,784,785,
        3,54,27,0,785,787,5,66,0,0,786,788,3,110,55,0,787,786,1,0,0,0,787,
        788,1,0,0,0,788,795,1,0,0,0,789,796,5,13,0,0,790,792,5,79,0,0,791,
        793,3,118,59,0,792,791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,
        796,5,80,0,0,795,789,1,0,0,0,795,790,1,0,0,0,796,828,1,0,0,0,797,
        802,5,66,0,0,798,799,5,26,0,0,799,801,5,66,0,0,800,798,1,0,0,0,801,
        804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,809,1,0,0,0,804,
        802,1,0,0,0,805,806,5,72,0,0,806,808,5,66,0,0,807,805,1,0,0,0,808,
        811,1,0,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,825,1,0,0,0,811,
        809,1,0,0,0,812,826,5,13,0,0,813,821,5,79,0,0,814,815,5,66,0,0,815,
        816,5,79,0,0,816,817,5,65,0,0,817,820,5,80,0,0,818,820,3,118,59,
        0,819,814,1,0,0,0,819,818,1,0,0,0,820,823,1,0,0,0,821,819,1,0,0,
        0,821,822,1,0,0,0,822,824,1,0,0,0,823,821,1,0,0,0,824,826,5,80,0,
        0,825,812,1,0,0,0,825,813,1,0,0,0,826,828,1,0,0,0,827,783,1,0,0,
        0,827,797,1,0,0,0,828,109,1,0,0,0,829,830,5,23,0,0,830,835,3,52,
        26,0,831,832,5,78,0,0,832,834,3,52,26,0,833,831,1,0,0,0,834,837,
        1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,838,1,0,0,0,837,835,
        1,0,0,0,838,839,5,74,0,0,839,111,1,0,0,0,840,841,5,66,0,0,841,842,
        5,82,0,0,842,843,3,94,47,0,843,113,1,0,0,0,844,849,3,116,58,0,845,
        846,5,59,0,0,846,848,3,116,58,0,847,845,1,0,0,0,848,851,1,0,0,0,
        849,847,1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,849,1,0,0,0,
        852,853,5,60,0,0,853,854,3,60,30,0,854,115,1,0,0,0,855,856,7,6,0,
        0,856,117,1,0,0,0,857,860,3,108,54,0,858,860,3,94,47,0,859,857,1,
        0,0,0,859,858,1,0,0,0,860,868,1,0,0,0,861,864,5,78,0,0,862,865,3,
        108,54,0,863,865,3,94,47,0,864,862,1,0,0,0,864,863,1,0,0,0,865,867,
        1,0,0,0,866,861,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,869,
        1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,0,871,873,5,78,0,0,872,871,
        1,0,0,0,872,873,1,0,0,0,873,888,1,0,0,0,874,875,5,72,0,0,875,877,
        5,66,0,0,876,874,1,0,0,0,877,878,1,0,0,0,878,876,1,0,0,0,878,879,
        1,0,0,0,879,885,1,0,0,0,880,886,5,13,0,0,881,882,5,79,0,0,882,883,
        3,118,59,0,883,884,5,80,0,0,884,886,1,0,0,0,885,880,1,0,0,0,885,
        881,1,0,0,0,886,888,1,0,0,0,887,859,1,0,0,0,887,876,1,0,0,0,888,
        119,1,0,0,0,889,890,5,66,0,0,890,891,5,73,0,0,891,892,3,122,61,0,
        892,121,1,0,0,0,893,895,5,76,0,0,894,896,3,124,62,0,895,894,1,0,
        0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,904,5,77,0,0,898,900,5,79,
        0,0,899,901,3,124,62,0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,1,
        0,0,0,902,904,5,80,0,0,903,893,1,0,0,0,903,898,1,0,0,0,904,123,1,
        0,0,0,905,908,3,94,47,0,906,907,5,3,0,0,907,909,3,94,47,0,908,906,
        1,0,0,0,908,909,1,0,0,0,909,125,1,0,0,0,910,920,3,130,65,0,911,920,
        5,70,0,0,912,920,5,67,0,0,913,920,5,68,0,0,914,920,5,69,0,0,915,
        920,5,64,0,0,916,920,5,65,0,0,917,920,3,128,64,0,918,920,5,71,0,
        0,919,910,1,0,0,0,919,911,1,0,0,0,919,912,1,0,0,0,919,913,1,0,0,
        0,919,914,1,0,0,0,919,915,1,0,0,0,919,916,1,0,0,0,919,917,1,0,0,
        0,919,918,1,0,0,0,920,127,1,0,0,0,921,922,7,7,0,0,922,129,1,0,0,
        0,923,924,5,76,0,0,924,929,3,94,47,0,925,926,5,78,0,0,926,928,3,
        94,47,0,927,925,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,
        1,0,0,0,930,932,1,0,0,0,931,929,1,0,0,0,932,933,5,77,0,0,933,941,
        1,0,0,0,934,935,5,76,0,0,935,936,3,94,47,0,936,937,5,3,0,0,937,938,
        3,94,47,0,938,939,5,77,0,0,939,941,1,0,0,0,940,923,1,0,0,0,940,934,
        1,0,0,0,941,131,1,0,0,0,942,946,5,61,0,0,943,945,9,0,0,0,944,943,
        1,0,0,0,945,948,1,0,0,0,946,947,1,0,0,0,946,944,1,0,0,0,947,949,
        1,0,0,0,948,946,1,0,0,0,949,950,5,61,0,0,950,133,1,0,0,0,116,137,
        149,152,166,172,178,182,190,196,201,204,211,216,219,222,227,234,
        238,253,260,266,271,279,285,291,294,297,300,307,310,313,316,324,
        331,335,338,345,356,370,374,377,383,386,401,406,413,416,421,435,
        440,449,454,459,473,479,483,509,515,530,542,546,552,560,570,575,
        581,586,588,606,613,617,642,657,664,666,692,695,697,711,724,727,
        733,739,743,749,751,759,773,777,781,787,792,795,802,809,819,821,
        825,827,835,849,859,864,868,872,878,885,887,895,900,903,908,919,
        929,940,946
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'extern'", "'{'", 
                     "'}'", "'static'", "'mut'", "'fn'", "'->'", "'pub'", 
                     "'struct'", "'()'", "'unsafe'", "'const'", "'union'", 
                     "'&'", "'*'", "'i32'", "'String'", "'bool'", "'u8'", 
                     "'<'", "'break'", "'continue'", "'.'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'match'", 
                     "'while'", "'let'", "'ref'", "'for'", "'in'", "'if'", 
                     "'else'", "'return'", "'loop'", "'>()'", "'/'", "'%'", 
                     "'+'", "'-'", "'>>'", "'>='", "'<='", "'=='", "'!='", 
                     "'||'", "'&&'", "'..'", "'as'", "'|'", "'=>'", "'\"'", 
                     "'true'", "'false'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'::'", "'!'", "'>'", "'#'", "'['", "']'", 
                     "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "Binary", 
                      "STRING_LITERAL", "Identifier", "Number", "SignedNumber", 
                      "BYTE_STRING_LITERAL", "HexNumber", "CHAR_LITERAL", 
                      "DOUBLE_COLON", "EXCL", "GT", "POUND", "LBRACK", "RBRACK", 
                      "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", "COLON", 
                      "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_typeAlias = 2
    RULE_externBlock = 3
    RULE_externItem = 4
    RULE_externParams = 5
    RULE_externParam = 6
    RULE_visibility = 7
    RULE_attributes = 8
    RULE_innerAttribute = 9
    RULE_attribute = 10
    RULE_attrArgs = 11
    RULE_attrArg = 12
    RULE_attrValue = 13
    RULE_structDef = 14
    RULE_structField = 15
    RULE_functionDef = 16
    RULE_unsafeModifier = 17
    RULE_externAbi = 18
    RULE_paramList = 19
    RULE_param = 20
    RULE_constDef = 21
    RULE_unionDef = 22
    RULE_unionField = 23
    RULE_unsafeDef = 24
    RULE_referenceType = 25
    RULE_type = 26
    RULE_typePath = 27
    RULE_pointerType = 28
    RULE_basicType = 29
    RULE_block = 30
    RULE_statement = 31
    RULE_compoundOp = 32
    RULE_compoundAssignment = 33
    RULE_matchStmt = 34
    RULE_unsafeBlock = 35
    RULE_whileStmt = 36
    RULE_staticVarDecl = 37
    RULE_initializer = 38
    RULE_letStmt = 39
    RULE_varDef = 40
    RULE_assignStmt = 41
    RULE_forStmt = 42
    RULE_ifStmt = 43
    RULE_exprStmt = 44
    RULE_returnStmt = 45
    RULE_loopStmt = 46
    RULE_expression = 47
    RULE_parenExpression = 48
    RULE_dereferenceExpression = 49
    RULE_expressionBlock = 50
    RULE_borrowExpression = 51
    RULE_postfixExpression = 52
    RULE_primaryExpression = 53
    RULE_qualifiedFunctionCall = 54
    RULE_genericArgs = 55
    RULE_structLiteralField = 56
    RULE_matchArm = 57
    RULE_matchPattern = 58
    RULE_argumentList = 59
    RULE_macroCall = 60
    RULE_macroArgs = 61
    RULE_macroInner = 62
    RULE_literal = 63
    RULE_booleanLiteral = 64
    RULE_arrayLiteral = 65
    RULE_stringLiteral = 66

    ruleNames =  [ "program", "topLevelItem", "typeAlias", "externBlock", 
                   "externItem", "externParams", "externParam", "visibility", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "functionDef", 
                   "unsafeModifier", "externAbi", "paramList", "param", 
                   "constDef", "unionDef", "unionField", "unsafeDef", "referenceType", 
                   "type", "typePath", "pointerType", "basicType", "block", 
                   "statement", "compoundOp", "compoundAssignment", "matchStmt", 
                   "unsafeBlock", "whileStmt", "staticVarDecl", "initializer", 
                   "letStmt", "varDef", "assignStmt", "forStmt", "ifStmt", 
                   "exprStmt", "returnStmt", "loopStmt", "expression", "parenExpression", 
                   "dereferenceExpression", "expressionBlock", "borrowExpression", 
                   "postfixExpression", "primaryExpression", "qualifiedFunctionCall", 
                   "genericArgs", "structLiteralField", "matchArm", "matchPattern", 
                   "argumentList", "macroCall", "macroArgs", "macroInner", 
                   "literal", "booleanLiteral", "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    TRUE=62
    FALSE=63
    Binary=64
    STRING_LITERAL=65
    Identifier=66
    Number=67
    SignedNumber=68
    BYTE_STRING_LITERAL=69
    HexNumber=70
    CHAR_LITERAL=71
    DOUBLE_COLON=72
    EXCL=73
    GT=74
    POUND=75
    LBRACK=76
    RBRACK=77
    COMMA=78
    LPAREN=79
    RPAREN=80
    UNDERSCORE=81
    COLON=82
    ELLIPSIS=83
    WS=84
    COMMENT=85

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 121490) != 0) or _la==75:
                self.state = 134
                self.topLevelItem()
                self.state = 139
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 140
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 141
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 142
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 143
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 144
                self.typeAlias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 145
                self.constDef()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 146
                self.unionDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 147
                self.unsafeDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 148
                self.staticVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 151
                self.visibility()


            self.state = 154
            self.match(RustParser.T__0)
            self.state = 155
            self.match(RustParser.Identifier)
            self.state = 156
            self.match(RustParser.T__1)
            self.state = 157
            self.type_()
            self.state = 158
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            self.match(RustParser.T__3)
            self.state = 161
            self.match(RustParser.STRING_LITERAL)
            self.state = 162
            self.match(RustParser.T__4)
            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2690) != 0):
                self.state = 163
                self.externItem()
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 169
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 171
                    self.visibility()


                self.state = 174
                self.match(RustParser.T__0)
                self.state = 175
                self.match(RustParser.Identifier)
                self.state = 176
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 177
                    self.visibility()


                self.state = 180
                self.match(RustParser.T__6)
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 181
                    self.match(RustParser.T__7)


                self.state = 184
                self.match(RustParser.Identifier)
                self.state = 185
                self.match(RustParser.COLON)
                self.state = 186
                self.type_()
                self.state = 187
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 189
                    self.visibility()


                self.state = 192
                self.match(RustParser.T__8)
                self.state = 193
                self.match(RustParser.Identifier)
                self.state = 194
                self.match(RustParser.LPAREN)
                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 229377) != 0):
                    self.state = 195
                    self.externParams()


                self.state = 198
                self.match(RustParser.RPAREN)
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 199
                    self.match(RustParser.T__9)
                    self.state = 200
                    self.type_()


                self.state = 203
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 81, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 206
                self.externParam()
                self.state = 211
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 207
                        self.match(RustParser.COMMA)
                        self.state = 208
                        self.externParam() 
                    self.state = 213
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 214
                    self.match(RustParser.COMMA)
                    self.state = 215
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 218
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66 or _la==81:
                self.state = 221
                _la = self._input.LA(1)
                if not(_la==66 or _la==81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 224
            self.match(RustParser.COLON)
            self.state = 227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 18, 19, 20, 21, 22, 66, 72, 76]:
                self.state = 225
                self.type_()
                pass
            elif token in [83]:
                self.state = 226
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(RustParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 231
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 234 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(RustParser.POUND)

            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 237
                self.match(RustParser.EXCL)


            self.state = 240
            self.match(RustParser.LBRACK)
            self.state = 241
            self.attribute()
            self.state = 242
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_attribute)
        try:
            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 245
                self.match(RustParser.Identifier)
                self.state = 246
                self.match(RustParser.T__1)
                self.state = 247
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 248
                self.match(RustParser.Identifier)
                self.state = 249
                self.match(RustParser.LPAREN)
                self.state = 250
                self.attrArgs()
                self.state = 251
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.attrArg()
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 256
                self.match(RustParser.COMMA)
                self.state = 257
                self.attrArg()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(RustParser.Identifier)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 264
                self.match(RustParser.T__1)
                self.state = 265
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 270
                self.visibility()


            self.state = 273
            self.match(RustParser.T__11)
            self.state = 274
            self.match(RustParser.Identifier)
            self.state = 275
            self.match(RustParser.T__4)
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==66:
                self.state = 276
                self.structField()
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 282
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 284
                self.visibility()


            self.state = 287
            self.match(RustParser.Identifier)
            self.state = 288
            self.match(RustParser.COLON)
            self.state = 289
            self.type_()
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 290
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 293
                self.visibility()


            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 296
                self.unsafeModifier()


            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 299
                self.externAbi()


            self.state = 302
            self.match(RustParser.T__8)
            self.state = 303
            self.match(RustParser.Identifier)
            self.state = 310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 304
                self.match(RustParser.T__12)
                pass
            elif token in [79]:
                self.state = 305
                self.match(RustParser.LPAREN)
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==66:
                    self.state = 306
                    self.paramList()


                self.state = 309
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 312
                self.match(RustParser.T__9)


            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & -8637904085296610319) != 0):
                self.state = 315
                self.type_()


            self.state = 318
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(RustParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(RustParser.T__3)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 323
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.param()
            self.state = 331
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 327
                    self.match(RustParser.COMMA)
                    self.state = 328
                    self.param() 
                self.state = 333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 334
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 337
                self.match(RustParser.T__7)


            self.state = 340
            self.match(RustParser.Identifier)
            self.state = 341
            self.match(RustParser.COLON)
            self.state = 342
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 344
                self.visibility()


            self.state = 347
            self.match(RustParser.T__14)
            self.state = 348
            self.match(RustParser.Identifier)
            self.state = 349
            self.match(RustParser.COLON)
            self.state = 350
            self.type_()
            self.state = 351
            self.match(RustParser.T__1)
            self.state = 352
            self.expression(0)
            self.state = 353
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 355
                self.visibility()


            self.state = 358
            self.match(RustParser.T__15)
            self.state = 359
            self.match(RustParser.Identifier)
            self.state = 374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.state = 360
                self.match(RustParser.COLON)
                self.state = 361
                self.type_()
                self.state = 362
                self.match(RustParser.T__1)
                self.state = 363
                self.expression(0)
                self.state = 364
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 366
                self.match(RustParser.T__4)
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11 or _la==66:
                    self.state = 367
                    self.unionField()
                    self.state = 372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 373
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 376
                self.visibility()


            self.state = 379
            self.match(RustParser.Identifier)
            self.state = 380
            self.match(RustParser.COLON)
            self.state = 381
            self.type_()
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 382
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 385
                self.visibility()


            self.state = 388
            self.match(RustParser.T__13)
            self.state = 389
            self.match(RustParser.Identifier)
            self.state = 390
            self.match(RustParser.COLON)
            self.state = 391
            self.type_()
            self.state = 392
            self.match(RustParser.T__1)
            self.state = 393
            self.expression(0)
            self.state = 394
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceType" ):
                return visitor.visitReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def referenceType(self):

        localctx = RustParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_referenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(RustParser.T__16)
            self.state = 397
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_type)
        try:
            self.state = 401
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 19, 20, 21, 22, 66, 72, 76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 399
                self.basicType()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 400
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self.match(RustParser.Identifier)
                self.state = 404
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 405
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 408
                self.match(RustParser.Identifier)
                self.state = 413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 409
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 410
                        self.match(RustParser.Identifier) 
                    self.state = 415
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(RustParser.T__17)
            self.state = 419
            _la = self._input.LA(1)
            if not(_la==8 or _la==15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 420
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.match(RustParser.T__18)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 424
                self.match(RustParser.T__19)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 425
                self.match(RustParser.T__20)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 426
                self.match(RustParser.T__21)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 427
                self.match(RustParser.T__12)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 428
                self.typePath()
                self.state = 440
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 429
                    self.match(RustParser.T__22)
                    self.state = 430
                    self.type_()
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==78:
                        self.state = 431
                        self.match(RustParser.COMMA)
                        self.state = 432
                        self.type_()
                        self.state = 437
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 438
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 442
                self.match(RustParser.Identifier)
                self.state = 454
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 443
                    self.match(RustParser.T__22)
                    self.state = 444
                    self.type_()
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==78:
                        self.state = 445
                        self.match(RustParser.COMMA)
                        self.state = 446
                        self.type_()
                        self.state = 451
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 452
                    self.match(RustParser.GT)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 456
                self.match(RustParser.T__16)
                self.state = 457
                self.type_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66 or _la==72:
                    self.state = 458
                    self.typePath()


                self.state = 461
                self.match(RustParser.LBRACK)
                self.state = 462
                self.type_()
                self.state = 463
                self.match(RustParser.T__2)
                self.state = 464
                self.match(RustParser.Number)
                self.state = 465
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 467
                self.typePath()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 468
                self.match(RustParser.LBRACK)
                self.state = 469
                self.type_()
                self.state = 470
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 472
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(RustParser.T__4)
            self.state = 479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 476
                    self.statement() 
                self.state = 481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43 or _la==66:
                self.state = 482
                self.returnStmt()


            self.state = 485
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def unsafeBlock(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 488
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self.assignStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 490
                self.match(RustParser.Identifier)
                self.state = 491
                self.match(RustParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 492
                self.compoundAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 493
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 494
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 495
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 496
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 497
                self.returnStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 498
                self.loopStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 499
                self.match(RustParser.T__23)
                self.state = 500
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 501
                self.match(RustParser.T__24)
                self.state = 502
                self.match(RustParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 503
                self.matchStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 504
                self.qualifiedFunctionCall()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==26:
                    self.state = 505
                    self.match(RustParser.T__25)
                    self.state = 506
                    self.qualifiedFunctionCall()
                    self.state = 511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 512
                self.match(RustParser.T__2)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 514
                self.unsafeBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 34225520640) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.expression(0)
            self.state = 520
            self.compoundOp()
            self.state = 521
            self.expression(0)
            self.state = 522
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(RustParser.T__34)
            self.state = 525
            self.expression(0)
            self.state = 526
            self.match(RustParser.T__4)
            self.state = 528 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 527
                self.matchArm()
                self.state = 530 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32771) != 0)):
                    break

            self.state = 532
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(RustParser.T__13)
            self.state = 535
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(RustParser.T__35)
            self.state = 538
            self.expression(0)
            self.state = 539
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 541
                self.visibility()


            self.state = 544
            self.match(RustParser.T__6)
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 545
                self.match(RustParser.T__7)


            self.state = 548
            self.match(RustParser.Identifier)
            self.state = 549
            self.match(RustParser.COLON)
            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 550
                self.type_()
                pass

            elif la_ == 2:
                self.state = 551
                self.match(RustParser.Identifier)
                pass


            self.state = 554
            self.match(RustParser.T__1)
            self.state = 555
            self.initializer()
            self.state = 556
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_initializer)
        try:
            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_letStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(RustParser.T__36)
            self.state = 563
            self.varDef()
            self.state = 564
            self.match(RustParser.T__1)
            self.state = 565
            self.expression(0)
            self.state = 566
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.match(RustParser.T__37)
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 569
                    self.match(RustParser.T__7)


                self.state = 572
                self.match(RustParser.Identifier)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 573
                    self.match(RustParser.COLON)
                    self.state = 574
                    self.type_()


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.match(RustParser.T__7)
                self.state = 578
                self.match(RustParser.Identifier)
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 579
                    self.match(RustParser.COLON)
                    self.state = 580
                    self.type_()


                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 583
                self.match(RustParser.Identifier)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 584
                    self.match(RustParser.COLON)
                    self.state = 585
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)

    def assignStmt(self):
        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.expression(0)
            self.state = 591
            self.match(RustParser.T__1)
            self.state = 592
            self.expression(0)
            self.state = 593
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(RustParser.T__38)
            self.state = 596
            self.match(RustParser.Identifier)
            self.state = 597
            self.match(RustParser.T__39)
            self.state = 598
            self.expression(0)
            self.state = 599
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(RustParser.T__40)
            self.state = 602
            self.expression(0)
            self.state = 603
            self.block()
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 604
                self.match(RustParser.T__41)
                self.state = 605
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.expression(0)
            self.state = 609
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 611
                self.match(RustParser.T__42)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 612
                    self.expression(0)


                self.state = 615
                self.match(RustParser.T__2)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(RustParser.T__43)
            self.state = 620
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def macroCall(self):
            return self.getTypedRuleContext(RustParser.MacroCallContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 623
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.state = 624
                self.literal()
                pass

            elif la_ == 3:
                self.state = 625
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 626
                self.dereferenceExpression()
                pass

            elif la_ == 5:
                self.state = 627
                self.parenExpression()
                pass

            elif la_ == 6:
                self.state = 628
                self.macroCall()
                pass

            elif la_ == 7:
                self.state = 629
                self.borrowExpression()
                pass

            elif la_ == 8:
                self.state = 630
                self.typePath()
                self.state = 631
                self.match(RustParser.DOUBLE_COLON)
                self.state = 632
                self.match(RustParser.T__22)
                self.state = 633
                self.type_()
                self.state = 634
                self.match(RustParser.T__44)
                pass

            elif la_ == 9:
                self.state = 636
                self.match(RustParser.EXCL)
                self.state = 637
                self.expression(11)
                pass

            elif la_ == 10:
                self.state = 638
                self.match(RustParser.Identifier)
                self.state = 639
                self.match(RustParser.EXCL)
                self.state = 640
                self.match(RustParser.LPAREN)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 641
                    self.argumentList()


                self.state = 644
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 11:
                self.state = 645
                self.expressionBlock()
                pass

            elif la_ == 12:
                self.state = 646
                self.match(RustParser.T__16)
                self.state = 647
                self.match(RustParser.T__7)
                self.state = 648
                self.expression(3)
                pass

            elif la_ == 13:
                self.state = 649
                self.match(RustParser.LPAREN)
                self.state = 650
                self.expression(0)
                self.state = 651
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 14:
                self.state = 655 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 653
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 654
                    self.match(RustParser.Identifier)
                    self.state = 657 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==72):
                        break

                self.state = 664
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 659
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 660
                    self.match(RustParser.LPAREN)
                    self.state = 661
                    self.argumentList()
                    self.state = 662
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 697
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 695
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 668
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 669
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8936830510956544) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 670
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 671
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 672
                        _la = self._input.LA(1)
                        if not(((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 2251815919812609) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 673
                        self.expression(10)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 674
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 675
                        self.match(RustParser.T__56)
                        self.state = 676
                        self.expression(9)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 677
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 678
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 34225520640) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 679
                        self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 680
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 681
                        self.match(RustParser.LBRACK)
                        self.state = 682
                        self.expression(0)
                        self.state = 683
                        self.match(RustParser.RBRACK)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 685
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 686
                        self.match(RustParser.T__57)
                        self.state = 687
                        self.type_()
                        self.state = 692
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 688
                                self.match(RustParser.T__57)
                                self.state = 689
                                self.type_() 
                            self.state = 694
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                        pass

             
                self.state = 699
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(RustParser.LPAREN)
            self.state = 701
            self.expression(0)
            self.state = 702
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(RustParser.T__17)
            self.state = 705
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(RustParser.T__4)
            self.state = 711
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 708
                    self.statement() 
                self.state = 713
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 714
            self.expression(0)
            self.state = 715
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(RustParser.T__16)
            self.state = 718
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LBRACK)
            else:
                return self.getToken(RustParser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RBRACK)
            else:
                return self.getToken(RustParser.RBRACK, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.primaryExpression()
            self.state = 749 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 749
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 727
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [13]:
                            self.state = 721
                            self.match(RustParser.T__12)
                            pass
                        elif token in [79]:
                            self.state = 722
                            self.match(RustParser.LPAREN)
                            self.state = 724
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                                self.state = 723
                                self.argumentList()


                            self.state = 726
                            self.match(RustParser.RPAREN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 731 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 729
                                self.match(RustParser.T__25)
                                self.state = 730
                                self.match(RustParser.Identifier)

                            else:
                                raise NoViableAltException(self)
                            self.state = 733 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 735
                        self.match(RustParser.T__25)
                        self.state = 736
                        self.match(RustParser.Identifier)
                        self.state = 743
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [79]:
                            self.state = 737
                            self.match(RustParser.LPAREN)
                            self.state = 739
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                                self.state = 738
                                self.argumentList()


                            self.state = 741
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [13]:
                            self.state = 742
                            self.match(RustParser.T__12)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        self.state = 745
                        self.match(RustParser.LBRACK)
                        self.state = 746
                        self.expression(0)
                        self.state = 747
                        self.match(RustParser.RBRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 751 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def qualifiedFunctionCall(self):
            return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 753
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                self.match(RustParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 755
                self.qualifiedFunctionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 756
                self.match(RustParser.Identifier)
                self.state = 757
                self.match(RustParser.LPAREN)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 758
                    self.argumentList()


                self.state = 761
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 762
                self.match(RustParser.LPAREN)
                self.state = 763
                self.expression(0)
                self.state = 764
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 766
                self.match(RustParser.Identifier)
                self.state = 767
                self.match(RustParser.T__4)
                self.state = 768
                self.structLiteralField()
                self.state = 773
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 769
                        self.match(RustParser.COMMA)
                        self.state = 770
                        self.structLiteralField() 
                    self.state = 775
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 776
                    self.match(RustParser.COMMA)


                self.state = 779
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.STRING_LITERAL)
            else:
                return self.getToken(RustParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.match(RustParser.DOUBLE_COLON)
                self.state = 784
                self.typePath()
                self.state = 785
                self.match(RustParser.Identifier)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 786
                    self.genericArgs()


                self.state = 795
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 789
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 790
                    self.match(RustParser.LPAREN)
                    self.state = 792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                        self.state = 791
                        self.argumentList()


                    self.state = 794
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.match(RustParser.Identifier)
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==26:
                    self.state = 798
                    self.match(RustParser.T__25)
                    self.state = 799
                    self.match(RustParser.Identifier)
                    self.state = 804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==72:
                    self.state = 805
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 806
                    self.match(RustParser.Identifier)
                    self.state = 811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 825
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 812
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 813
                    self.match(RustParser.LPAREN)
                    self.state = 821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                        self.state = 819
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 814
                            self.match(RustParser.Identifier)
                            self.state = 815
                            self.match(RustParser.LPAREN)
                            self.state = 816
                            self.match(RustParser.STRING_LITERAL)
                            self.state = 817
                            self.match(RustParser.RPAREN)
                            pass

                        elif la_ == 2:
                            self.state = 818
                            self.argumentList()
                            pass


                        self.state = 823
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 824
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(RustParser.T__22)
            self.state = 830
            self.type_()
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 831
                self.match(RustParser.COMMA)
                self.state = 832
                self.type_()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 838
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_structLiteralField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(RustParser.Identifier)
            self.state = 841
            self.match(RustParser.COLON)
            self.state = 842
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.matchPattern()
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 845
                self.match(RustParser.T__58)
                self.state = 846
                self.matchPattern()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 852
            self.match(RustParser.T__59)
            self.state = 853
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 859
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 857
                    self.qualifiedFunctionCall()
                    pass

                elif la_ == 2:
                    self.state = 858
                    self.expression(0)
                    pass


                self.state = 868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 861
                        self.match(RustParser.COMMA)
                        self.state = 864
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                        if la_ == 1:
                            self.state = 862
                            self.qualifiedFunctionCall()
                            pass

                        elif la_ == 2:
                            self.state = 863
                            self.expression(0)
                            pass

                 
                    self.state = 870
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 871
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 876 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 874
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 875
                    self.match(RustParser.Identifier)
                    self.state = 878 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==72):
                        break

                self.state = 885
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 880
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 881
                    self.match(RustParser.LPAREN)
                    self.state = 882
                    self.argumentList()
                    self.state = 883
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(RustParser.Identifier)
            self.state = 890
            self.match(RustParser.EXCL)
            self.state = 891
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.match(RustParser.LBRACK)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 894
                    self.macroInner()


                self.state = 897
                self.match(RustParser.RBRACK)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.match(RustParser.LPAREN)
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 899
                    self.macroInner()


                self.state = 902
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.expression(0)
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 906
                self.match(RustParser.T__2)
                self.state = 907
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_literal)
        try:
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.arrayLiteral()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 911
                self.match(RustParser.HexNumber)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 912
                self.match(RustParser.Number)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 913
                self.match(RustParser.SignedNumber)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 5)
                self.state = 914
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 6)
                self.state = 915
                self.match(RustParser.Binary)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 7)
                self.state = 916
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [62, 63]:
                self.enterOuterAlt(localctx, 8)
                self.state = 917
                self.booleanLiteral()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 9)
                self.state = 918
                self.match(RustParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            _la = self._input.LA(1)
            if not(_la==62 or _la==63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.match(RustParser.LBRACK)
                self.state = 924
                self.expression(0)
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78:
                    self.state = 925
                    self.match(RustParser.COMMA)
                    self.state = 926
                    self.expression(0)
                    self.state = 931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 932
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.match(RustParser.LBRACK)
                self.state = 935
                self.expression(0)
                self.state = 936
                self.match(RustParser.T__2)
                self.state = 937
                self.expression(0)
                self.state = 938
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(RustParser.T__60)
            self.state = 946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 943
                    self.matchWildcard() 
                self.state = 948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 949
            self.match(RustParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[47] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         




