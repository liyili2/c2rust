# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,86,1014,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,5,0,140,8,0,10,0,12,0,143,9,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,154,8,1,1,2,3,2,157,8,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,169,8,3,10,3,12,3,
        172,9,3,1,3,1,3,1,4,3,4,177,8,4,1,4,1,4,1,4,1,4,3,4,183,8,4,1,4,
        1,4,3,4,187,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,195,8,4,1,4,1,4,1,4,
        1,4,3,4,201,8,4,1,4,1,4,1,4,3,4,206,8,4,1,4,3,4,209,8,4,1,5,1,5,
        1,5,5,5,214,8,5,10,5,12,5,217,9,5,1,5,1,5,3,5,221,8,5,1,5,3,5,224,
        8,5,1,6,3,6,227,8,6,1,6,1,6,1,6,3,6,232,8,6,1,7,1,7,1,8,4,8,237,
        8,8,11,8,12,8,238,1,9,1,9,3,9,243,8,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,258,8,10,1,11,1,11,1,11,
        5,11,263,8,11,10,11,12,11,266,9,11,1,12,1,12,1,12,3,12,271,8,12,
        1,13,1,13,1,14,3,14,276,8,14,1,14,1,14,1,14,1,14,5,14,282,8,14,10,
        14,12,14,285,9,14,1,14,1,14,1,15,3,15,290,8,15,1,15,1,15,1,15,1,
        15,3,15,296,8,15,1,16,3,16,299,8,16,1,16,3,16,302,8,16,1,16,3,16,
        305,8,16,1,16,1,16,1,16,1,16,1,16,3,16,312,8,16,1,16,3,16,315,8,
        16,1,16,3,16,318,8,16,1,16,3,16,321,8,16,1,16,1,16,1,17,1,17,1,18,
        1,18,3,18,329,8,18,1,19,1,19,1,19,5,19,334,8,19,10,19,12,19,337,
        9,19,1,19,3,19,340,8,19,1,20,3,20,343,8,20,1,20,1,20,1,20,1,20,1,
        21,3,21,350,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,3,
        22,361,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,
        22,373,8,22,10,22,12,22,376,9,22,1,22,3,22,379,8,22,1,23,3,23,382,
        8,23,1,23,1,23,1,23,1,23,3,23,388,8,23,1,24,3,24,391,8,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,3,26,406,
        8,26,1,27,1,27,1,27,3,27,411,8,27,1,27,1,27,1,27,5,27,416,8,27,10,
        27,12,27,419,9,27,3,27,421,8,27,1,28,1,28,1,28,3,28,426,8,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,438,8,29,10,29,
        12,29,441,9,29,1,29,1,29,3,29,445,8,29,1,29,1,29,1,29,1,29,1,29,
        5,29,452,8,29,10,29,12,29,455,9,29,1,29,1,29,3,29,459,8,29,1,29,
        1,29,1,29,3,29,464,8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,3,29,478,8,29,1,30,1,30,5,30,482,8,30,10,30,
        12,30,485,9,30,1,30,3,30,488,8,30,1,30,3,30,491,8,30,1,30,1,30,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,515,8,31,10,31,12,31,518,9,
        31,1,31,1,31,1,31,3,31,523,8,31,1,32,1,32,1,33,1,33,1,33,1,33,1,
        33,1,34,1,34,1,34,1,34,4,34,536,8,34,11,34,12,34,537,1,34,1,34,1,
        35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,3,37,550,8,37,1,37,1,37,3,
        37,554,8,37,1,37,1,37,1,37,1,37,3,37,560,8,37,1,37,1,37,1,37,1,37,
        1,38,1,38,1,38,3,38,569,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,3,39,579,8,39,1,39,1,39,1,39,1,39,3,39,585,8,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,3,39,595,8,39,1,40,1,40,3,40,599,8,40,
        1,40,1,40,1,40,3,40,604,8,40,1,40,1,40,1,40,1,40,3,40,610,8,40,1,
        40,1,40,1,40,3,40,615,8,40,3,40,617,8,40,1,41,1,41,1,41,1,41,1,41,
        1,41,5,41,625,8,41,10,41,12,41,628,9,41,1,41,1,41,1,41,1,41,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,5,42,641,8,42,10,42,12,42,644,9,42,
        1,42,3,42,647,8,42,3,42,649,8,42,1,43,1,43,1,43,1,43,1,43,1,44,1,
        44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,667,8,45,1,
        46,1,46,1,46,1,47,1,47,3,47,674,8,47,1,47,1,47,3,47,678,8,47,1,48,
        1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,704,8,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,4,49,717,
        8,49,11,49,12,49,718,1,49,1,49,1,49,1,49,1,49,3,49,726,8,49,3,49,
        728,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,752,
        8,49,10,49,12,49,755,9,49,5,49,757,8,49,10,49,12,49,760,9,49,1,50,
        1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,5,52,771,8,52,10,52,12,52,
        774,9,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,3,54,
        786,8,54,1,54,3,54,789,8,54,1,54,1,54,4,54,793,8,54,11,54,12,54,
        794,1,54,1,54,1,54,1,54,3,54,801,8,54,1,54,1,54,3,54,805,8,54,1,
        54,1,54,1,54,1,54,4,54,811,8,54,11,54,12,54,812,1,55,1,55,1,55,1,
        55,1,55,1,55,3,55,821,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,5,55,833,8,55,10,55,12,55,836,9,55,1,55,3,55,839,8,
        55,1,55,1,55,3,55,843,8,55,1,56,1,56,1,56,1,56,1,56,3,56,850,8,56,
        1,56,1,56,1,56,3,56,855,8,56,1,56,3,56,858,8,56,1,56,1,56,1,56,5,
        56,863,8,56,10,56,12,56,866,9,56,1,56,1,56,5,56,870,8,56,10,56,12,
        56,873,9,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,882,8,56,10,
        56,12,56,885,9,56,1,56,3,56,888,8,56,3,56,890,8,56,1,57,1,57,1,57,
        1,57,5,57,896,8,57,10,57,12,57,899,9,57,1,57,1,57,1,58,1,58,1,58,
        1,58,1,59,1,59,1,59,5,59,910,8,59,10,59,12,59,913,9,59,1,59,1,59,
        1,59,1,60,1,60,1,61,1,61,3,61,922,8,61,1,61,1,61,1,61,3,61,927,8,
        61,5,61,929,8,61,10,61,12,61,932,9,61,1,61,3,61,935,8,61,1,61,1,
        61,4,61,939,8,61,11,61,12,61,940,1,61,1,61,1,61,1,61,1,61,3,61,948,
        8,61,3,61,950,8,61,1,62,1,62,1,62,1,62,1,63,1,63,3,63,958,8,63,1,
        63,1,63,1,63,3,63,963,8,63,1,63,3,63,966,8,63,1,64,1,64,1,64,3,64,
        971,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,982,8,
        65,1,66,1,66,1,67,1,67,1,67,1,67,5,67,990,8,67,10,67,12,67,993,9,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1003,8,67,1,68,1,
        68,5,68,1007,8,68,10,68,12,68,1010,9,68,1,68,1,68,1,68,1,1008,1,
        98,69,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,0,9,2,0,67,67,82,82,1,0,66,68,2,
        0,8,8,15,15,1,0,27,34,2,0,2,2,83,83,2,0,17,18,46,52,4,0,23,23,50,
        50,53,57,75,75,2,0,67,68,82,82,1,0,63,64,1133,0,141,1,0,0,0,2,153,
        1,0,0,0,4,156,1,0,0,0,6,164,1,0,0,0,8,208,1,0,0,0,10,223,1,0,0,0,
        12,226,1,0,0,0,14,233,1,0,0,0,16,236,1,0,0,0,18,240,1,0,0,0,20,257,
        1,0,0,0,22,259,1,0,0,0,24,267,1,0,0,0,26,272,1,0,0,0,28,275,1,0,
        0,0,30,289,1,0,0,0,32,298,1,0,0,0,34,324,1,0,0,0,36,326,1,0,0,0,
        38,330,1,0,0,0,40,342,1,0,0,0,42,349,1,0,0,0,44,360,1,0,0,0,46,381,
        1,0,0,0,48,390,1,0,0,0,50,400,1,0,0,0,52,405,1,0,0,0,54,420,1,0,
        0,0,56,422,1,0,0,0,58,477,1,0,0,0,60,479,1,0,0,0,62,522,1,0,0,0,
        64,524,1,0,0,0,66,526,1,0,0,0,68,531,1,0,0,0,70,541,1,0,0,0,72,544,
        1,0,0,0,74,549,1,0,0,0,76,568,1,0,0,0,78,594,1,0,0,0,80,616,1,0,
        0,0,82,618,1,0,0,0,84,648,1,0,0,0,86,650,1,0,0,0,88,655,1,0,0,0,
        90,661,1,0,0,0,92,668,1,0,0,0,94,677,1,0,0,0,96,679,1,0,0,0,98,727,
        1,0,0,0,100,761,1,0,0,0,102,765,1,0,0,0,104,768,1,0,0,0,106,778,
        1,0,0,0,108,781,1,0,0,0,110,842,1,0,0,0,112,889,1,0,0,0,114,891,
        1,0,0,0,116,902,1,0,0,0,118,906,1,0,0,0,120,917,1,0,0,0,122,949,
        1,0,0,0,124,951,1,0,0,0,126,965,1,0,0,0,128,967,1,0,0,0,130,981,
        1,0,0,0,132,983,1,0,0,0,134,1002,1,0,0,0,136,1004,1,0,0,0,138,140,
        3,2,1,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,
        1,0,0,0,142,1,1,0,0,0,143,141,1,0,0,0,144,154,3,32,16,0,145,154,
        3,74,37,0,146,154,3,28,14,0,147,154,3,16,8,0,148,154,3,6,3,0,149,
        154,3,4,2,0,150,154,3,42,21,0,151,154,3,44,22,0,152,154,3,48,24,
        0,153,144,1,0,0,0,153,145,1,0,0,0,153,146,1,0,0,0,153,147,1,0,0,
        0,153,148,1,0,0,0,153,149,1,0,0,0,153,150,1,0,0,0,153,151,1,0,0,
        0,153,152,1,0,0,0,154,3,1,0,0,0,155,157,3,14,7,0,156,155,1,0,0,0,
        156,157,1,0,0,0,157,158,1,0,0,0,158,159,5,1,0,0,159,160,5,67,0,0,
        160,161,5,2,0,0,161,162,3,52,26,0,162,163,5,3,0,0,163,5,1,0,0,0,
        164,165,5,4,0,0,165,166,5,66,0,0,166,170,5,5,0,0,167,169,3,8,4,0,
        168,167,1,0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,
        171,173,1,0,0,0,172,170,1,0,0,0,173,174,5,6,0,0,174,7,1,0,0,0,175,
        177,3,14,7,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,
        179,5,1,0,0,179,180,5,67,0,0,180,209,5,3,0,0,181,183,3,14,7,0,182,
        181,1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,186,5,7,0,0,185,
        187,5,8,0,0,186,185,1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,
        189,5,67,0,0,189,190,5,83,0,0,190,191,3,52,26,0,191,192,5,3,0,0,
        192,209,1,0,0,0,193,195,3,14,7,0,194,193,1,0,0,0,194,195,1,0,0,0,
        195,196,1,0,0,0,196,197,5,9,0,0,197,198,5,67,0,0,198,200,5,80,0,
        0,199,201,3,10,5,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,
        0,202,205,5,81,0,0,203,204,5,10,0,0,204,206,3,52,26,0,205,203,1,
        0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,209,5,3,0,0,208,176,1,
        0,0,0,208,182,1,0,0,0,208,194,1,0,0,0,209,9,1,0,0,0,210,215,3,12,
        6,0,211,212,5,79,0,0,212,214,3,12,6,0,213,211,1,0,0,0,214,217,1,
        0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,220,1,0,0,0,217,215,1,
        0,0,0,218,219,5,79,0,0,219,221,5,84,0,0,220,218,1,0,0,0,220,221,
        1,0,0,0,221,224,1,0,0,0,222,224,5,84,0,0,223,210,1,0,0,0,223,222,
        1,0,0,0,224,11,1,0,0,0,225,227,7,0,0,0,226,225,1,0,0,0,226,227,1,
        0,0,0,227,228,1,0,0,0,228,231,5,83,0,0,229,232,3,52,26,0,230,232,
        5,84,0,0,231,229,1,0,0,0,231,230,1,0,0,0,232,13,1,0,0,0,233,234,
        5,11,0,0,234,15,1,0,0,0,235,237,3,18,9,0,236,235,1,0,0,0,237,238,
        1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,17,1,0,0,0,240,242,5,
        76,0,0,241,243,5,74,0,0,242,241,1,0,0,0,242,243,1,0,0,0,243,244,
        1,0,0,0,244,245,5,77,0,0,245,246,3,20,10,0,246,247,5,78,0,0,247,
        19,1,0,0,0,248,258,5,67,0,0,249,250,5,67,0,0,250,251,5,2,0,0,251,
        258,3,26,13,0,252,253,5,67,0,0,253,254,5,80,0,0,254,255,3,22,11,
        0,255,256,5,81,0,0,256,258,1,0,0,0,257,248,1,0,0,0,257,249,1,0,0,
        0,257,252,1,0,0,0,258,21,1,0,0,0,259,264,3,24,12,0,260,261,5,79,
        0,0,261,263,3,24,12,0,262,260,1,0,0,0,263,266,1,0,0,0,264,262,1,
        0,0,0,264,265,1,0,0,0,265,23,1,0,0,0,266,264,1,0,0,0,267,270,5,67,
        0,0,268,269,5,2,0,0,269,271,3,26,13,0,270,268,1,0,0,0,270,271,1,
        0,0,0,271,25,1,0,0,0,272,273,7,1,0,0,273,27,1,0,0,0,274,276,3,14,
        7,0,275,274,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,278,5,12,
        0,0,278,279,5,67,0,0,279,283,5,5,0,0,280,282,3,30,15,0,281,280,1,
        0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,286,1,
        0,0,0,285,283,1,0,0,0,286,287,5,6,0,0,287,29,1,0,0,0,288,290,3,14,
        7,0,289,288,1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,292,5,67,
        0,0,292,293,5,83,0,0,293,295,3,52,26,0,294,296,5,79,0,0,295,294,
        1,0,0,0,295,296,1,0,0,0,296,31,1,0,0,0,297,299,3,14,7,0,298,297,
        1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,302,3,34,17,0,301,300,
        1,0,0,0,301,302,1,0,0,0,302,304,1,0,0,0,303,305,3,36,18,0,304,303,
        1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,307,5,9,0,0,307,314,
        5,67,0,0,308,315,5,13,0,0,309,311,5,80,0,0,310,312,3,38,19,0,311,
        310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,5,81,0,0,314,
        308,1,0,0,0,314,309,1,0,0,0,315,317,1,0,0,0,316,318,5,10,0,0,317,
        316,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,321,3,52,26,0,320,
        319,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,3,60,30,0,323,
        33,1,0,0,0,324,325,5,14,0,0,325,35,1,0,0,0,326,328,5,4,0,0,327,329,
        5,66,0,0,328,327,1,0,0,0,328,329,1,0,0,0,329,37,1,0,0,0,330,335,
        3,40,20,0,331,332,5,79,0,0,332,334,3,40,20,0,333,331,1,0,0,0,334,
        337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,339,1,0,0,0,337,
        335,1,0,0,0,338,340,5,79,0,0,339,338,1,0,0,0,339,340,1,0,0,0,340,
        39,1,0,0,0,341,343,5,8,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,
        1,0,0,0,344,345,5,67,0,0,345,346,5,83,0,0,346,347,3,52,26,0,347,
        41,1,0,0,0,348,350,3,14,7,0,349,348,1,0,0,0,349,350,1,0,0,0,350,
        351,1,0,0,0,351,352,5,15,0,0,352,353,5,67,0,0,353,354,5,83,0,0,354,
        355,3,52,26,0,355,356,5,2,0,0,356,357,3,98,49,0,357,358,5,3,0,0,
        358,43,1,0,0,0,359,361,3,14,7,0,360,359,1,0,0,0,360,361,1,0,0,0,
        361,362,1,0,0,0,362,363,5,16,0,0,363,378,5,67,0,0,364,365,5,83,0,
        0,365,366,3,52,26,0,366,367,5,2,0,0,367,368,3,98,49,0,368,369,5,
        3,0,0,369,379,1,0,0,0,370,374,5,5,0,0,371,373,3,46,23,0,372,371,
        1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,377,
        1,0,0,0,376,374,1,0,0,0,377,379,5,6,0,0,378,364,1,0,0,0,378,370,
        1,0,0,0,379,45,1,0,0,0,380,382,3,14,7,0,381,380,1,0,0,0,381,382,
        1,0,0,0,382,383,1,0,0,0,383,384,5,67,0,0,384,385,5,83,0,0,385,387,
        3,52,26,0,386,388,5,79,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,47,
        1,0,0,0,389,391,3,14,7,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,
        1,0,0,0,392,393,5,14,0,0,393,394,5,67,0,0,394,395,5,83,0,0,395,396,
        3,52,26,0,396,397,5,2,0,0,397,398,3,98,49,0,398,399,5,3,0,0,399,
        49,1,0,0,0,400,401,5,17,0,0,401,402,3,52,26,0,402,51,1,0,0,0,403,
        406,3,58,29,0,404,406,3,56,28,0,405,403,1,0,0,0,405,404,1,0,0,0,
        406,53,1,0,0,0,407,408,5,67,0,0,408,421,5,73,0,0,409,411,5,73,0,
        0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,417,5,67,0,
        0,413,414,5,73,0,0,414,416,5,67,0,0,415,413,1,0,0,0,416,419,1,0,
        0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,421,1,0,0,0,419,417,1,0,
        0,0,420,407,1,0,0,0,420,410,1,0,0,0,421,55,1,0,0,0,422,423,5,18,
        0,0,423,425,7,2,0,0,424,426,3,52,26,0,425,424,1,0,0,0,425,426,1,
        0,0,0,426,57,1,0,0,0,427,478,5,19,0,0,428,478,5,20,0,0,429,478,5,
        21,0,0,430,478,5,22,0,0,431,478,5,13,0,0,432,444,3,54,27,0,433,434,
        5,23,0,0,434,439,3,52,26,0,435,436,5,79,0,0,436,438,3,52,26,0,437,
        435,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,
        442,1,0,0,0,441,439,1,0,0,0,442,443,5,75,0,0,443,445,1,0,0,0,444,
        433,1,0,0,0,444,445,1,0,0,0,445,478,1,0,0,0,446,458,5,67,0,0,447,
        448,5,23,0,0,448,453,3,52,26,0,449,450,5,79,0,0,450,452,3,52,26,
        0,451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,
        0,454,456,1,0,0,0,455,453,1,0,0,0,456,457,5,75,0,0,457,459,1,0,0,
        0,458,447,1,0,0,0,458,459,1,0,0,0,459,478,1,0,0,0,460,461,5,17,0,
        0,461,478,3,52,26,0,462,464,3,54,27,0,463,462,1,0,0,0,463,464,1,
        0,0,0,464,465,1,0,0,0,465,466,5,77,0,0,466,467,3,52,26,0,467,468,
        5,3,0,0,468,469,5,68,0,0,469,470,5,78,0,0,470,478,1,0,0,0,471,478,
        3,54,27,0,472,473,5,77,0,0,473,474,3,52,26,0,474,475,5,78,0,0,475,
        478,1,0,0,0,476,478,5,67,0,0,477,427,1,0,0,0,477,428,1,0,0,0,477,
        429,1,0,0,0,477,430,1,0,0,0,477,431,1,0,0,0,477,432,1,0,0,0,477,
        446,1,0,0,0,477,460,1,0,0,0,477,463,1,0,0,0,477,471,1,0,0,0,477,
        472,1,0,0,0,477,476,1,0,0,0,478,59,1,0,0,0,479,483,5,5,0,0,480,482,
        3,62,31,0,481,480,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,
        1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,486,488,3,94,47,0,487,486,
        1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,491,3,98,49,0,490,489,
        1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,493,5,6,0,0,493,61,1,
        0,0,0,494,523,3,78,39,0,495,523,3,74,37,0,496,523,3,86,43,0,497,
        498,5,67,0,0,498,523,5,3,0,0,499,523,3,66,33,0,500,523,3,88,44,0,
        501,523,3,90,45,0,502,523,3,92,46,0,503,523,3,72,36,0,504,523,3,
        94,47,0,505,523,3,96,48,0,506,507,5,24,0,0,507,523,5,3,0,0,508,509,
        5,25,0,0,509,523,5,3,0,0,510,523,3,68,34,0,511,516,3,112,56,0,512,
        513,5,26,0,0,513,515,3,112,56,0,514,512,1,0,0,0,515,518,1,0,0,0,
        516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,516,1,0,0,0,
        519,520,5,3,0,0,520,523,1,0,0,0,521,523,3,70,35,0,522,494,1,0,0,
        0,522,495,1,0,0,0,522,496,1,0,0,0,522,497,1,0,0,0,522,499,1,0,0,
        0,522,500,1,0,0,0,522,501,1,0,0,0,522,502,1,0,0,0,522,503,1,0,0,
        0,522,504,1,0,0,0,522,505,1,0,0,0,522,506,1,0,0,0,522,508,1,0,0,
        0,522,510,1,0,0,0,522,511,1,0,0,0,522,521,1,0,0,0,523,63,1,0,0,0,
        524,525,7,3,0,0,525,65,1,0,0,0,526,527,3,98,49,0,527,528,3,64,32,
        0,528,529,3,98,49,0,529,530,5,3,0,0,530,67,1,0,0,0,531,532,5,35,
        0,0,532,533,3,98,49,0,533,535,5,5,0,0,534,536,3,118,59,0,535,534,
        1,0,0,0,536,537,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,539,
        1,0,0,0,539,540,5,6,0,0,540,69,1,0,0,0,541,542,5,14,0,0,542,543,
        3,60,30,0,543,71,1,0,0,0,544,545,5,36,0,0,545,546,3,98,49,0,546,
        547,3,60,30,0,547,73,1,0,0,0,548,550,3,14,7,0,549,548,1,0,0,0,549,
        550,1,0,0,0,550,551,1,0,0,0,551,553,5,7,0,0,552,554,5,8,0,0,553,
        552,1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,556,5,67,0,0,556,
        559,5,83,0,0,557,560,3,52,26,0,558,560,5,67,0,0,559,557,1,0,0,0,
        559,558,1,0,0,0,560,561,1,0,0,0,561,562,5,2,0,0,562,563,3,76,38,
        0,563,564,5,3,0,0,564,75,1,0,0,0,565,569,3,82,41,0,566,569,3,60,
        30,0,567,569,3,98,49,0,568,565,1,0,0,0,568,566,1,0,0,0,568,567,1,
        0,0,0,569,77,1,0,0,0,570,571,5,37,0,0,571,572,3,80,40,0,572,573,
        5,2,0,0,573,574,3,98,49,0,574,575,5,3,0,0,575,595,1,0,0,0,576,578,
        5,37,0,0,577,579,5,8,0,0,578,577,1,0,0,0,578,579,1,0,0,0,579,580,
        1,0,0,0,580,581,5,67,0,0,581,584,5,83,0,0,582,585,3,52,26,0,583,
        585,5,67,0,0,584,582,1,0,0,0,584,583,1,0,0,0,585,586,1,0,0,0,586,
        587,5,2,0,0,587,588,3,76,38,0,588,589,5,3,0,0,589,595,1,0,0,0,590,
        591,5,37,0,0,591,592,3,80,40,0,592,593,3,82,41,0,593,595,1,0,0,0,
        594,570,1,0,0,0,594,576,1,0,0,0,594,590,1,0,0,0,595,79,1,0,0,0,596,
        598,5,38,0,0,597,599,5,8,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,
        600,1,0,0,0,600,603,5,67,0,0,601,602,5,83,0,0,602,604,3,52,26,0,
        603,601,1,0,0,0,603,604,1,0,0,0,604,617,1,0,0,0,605,606,5,8,0,0,
        606,609,5,67,0,0,607,608,7,4,0,0,608,610,3,52,26,0,609,607,1,0,0,
        0,609,610,1,0,0,0,610,617,1,0,0,0,611,614,5,67,0,0,612,613,5,83,
        0,0,613,615,3,52,26,0,614,612,1,0,0,0,614,615,1,0,0,0,615,617,1,
        0,0,0,616,596,1,0,0,0,616,605,1,0,0,0,616,611,1,0,0,0,617,81,1,0,
        0,0,618,626,5,5,0,0,619,620,5,67,0,0,620,621,5,83,0,0,621,622,3,
        98,49,0,622,623,5,79,0,0,623,625,1,0,0,0,624,619,1,0,0,0,625,628,
        1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,626,
        1,0,0,0,629,630,5,6,0,0,630,631,5,3,0,0,631,632,3,98,49,0,632,83,
        1,0,0,0,633,634,5,67,0,0,634,635,5,83,0,0,635,642,3,98,49,0,636,
        637,5,79,0,0,637,638,5,67,0,0,638,639,5,83,0,0,639,641,3,98,49,0,
        640,636,1,0,0,0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,1,0,0,0,
        643,646,1,0,0,0,644,642,1,0,0,0,645,647,5,79,0,0,646,645,1,0,0,0,
        646,647,1,0,0,0,647,649,1,0,0,0,648,633,1,0,0,0,648,649,1,0,0,0,
        649,85,1,0,0,0,650,651,3,98,49,0,651,652,5,2,0,0,652,653,3,98,49,
        0,653,654,5,3,0,0,654,87,1,0,0,0,655,656,5,39,0,0,656,657,5,67,0,
        0,657,658,5,40,0,0,658,659,3,98,49,0,659,660,3,60,30,0,660,89,1,
        0,0,0,661,662,5,41,0,0,662,663,3,98,49,0,663,666,3,60,30,0,664,665,
        5,42,0,0,665,667,3,60,30,0,666,664,1,0,0,0,666,667,1,0,0,0,667,91,
        1,0,0,0,668,669,3,98,49,0,669,670,5,3,0,0,670,93,1,0,0,0,671,673,
        5,43,0,0,672,674,3,98,49,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,
        1,0,0,0,675,678,5,3,0,0,676,678,5,67,0,0,677,671,1,0,0,0,677,676,
        1,0,0,0,678,95,1,0,0,0,679,680,5,44,0,0,680,681,3,60,30,0,681,97,
        1,0,0,0,682,683,6,49,-1,0,683,728,3,108,54,0,684,728,3,130,65,0,
        685,728,3,110,55,0,686,728,3,102,51,0,687,728,3,100,50,0,688,728,
        3,124,62,0,689,728,3,106,53,0,690,691,3,54,27,0,691,692,5,67,0,0,
        692,693,5,73,0,0,693,694,5,23,0,0,694,695,3,52,26,0,695,696,5,45,
        0,0,696,728,1,0,0,0,697,698,5,74,0,0,698,728,3,98,49,11,699,700,
        5,67,0,0,700,701,5,74,0,0,701,703,5,80,0,0,702,704,3,122,61,0,703,
        702,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,728,5,81,0,0,706,
        728,3,104,52,0,707,708,5,17,0,0,708,709,5,8,0,0,709,728,3,98,49,
        3,710,711,5,80,0,0,711,712,3,98,49,0,712,713,5,81,0,0,713,728,1,
        0,0,0,714,715,5,73,0,0,715,717,5,67,0,0,716,714,1,0,0,0,717,718,
        1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,725,1,0,0,0,720,726,
        5,13,0,0,721,722,5,80,0,0,722,723,3,122,61,0,723,724,5,81,0,0,724,
        726,1,0,0,0,725,720,1,0,0,0,725,721,1,0,0,0,726,728,1,0,0,0,727,
        682,1,0,0,0,727,684,1,0,0,0,727,685,1,0,0,0,727,686,1,0,0,0,727,
        687,1,0,0,0,727,688,1,0,0,0,727,689,1,0,0,0,727,690,1,0,0,0,727,
        697,1,0,0,0,727,699,1,0,0,0,727,706,1,0,0,0,727,707,1,0,0,0,727,
        710,1,0,0,0,727,716,1,0,0,0,728,758,1,0,0,0,729,730,10,10,0,0,730,
        731,7,5,0,0,731,757,3,98,49,11,732,733,10,9,0,0,733,734,7,6,0,0,
        734,757,3,98,49,10,735,736,10,8,0,0,736,737,5,58,0,0,737,757,3,98,
        49,9,738,739,10,7,0,0,739,740,7,3,0,0,740,757,3,98,49,8,741,742,
        10,12,0,0,742,743,5,77,0,0,743,744,3,98,49,0,744,745,5,78,0,0,745,
        757,1,0,0,0,746,747,10,5,0,0,747,748,5,59,0,0,748,753,3,52,26,0,
        749,750,5,59,0,0,750,752,3,52,26,0,751,749,1,0,0,0,752,755,1,0,0,
        0,753,751,1,0,0,0,753,754,1,0,0,0,754,757,1,0,0,0,755,753,1,0,0,
        0,756,729,1,0,0,0,756,732,1,0,0,0,756,735,1,0,0,0,756,738,1,0,0,
        0,756,741,1,0,0,0,756,746,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,
        0,758,759,1,0,0,0,759,99,1,0,0,0,760,758,1,0,0,0,761,762,5,80,0,
        0,762,763,3,98,49,0,763,764,5,81,0,0,764,101,1,0,0,0,765,766,5,18,
        0,0,766,767,3,98,49,0,767,103,1,0,0,0,768,772,5,5,0,0,769,771,3,
        62,31,0,770,769,1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,
        1,0,0,0,773,775,1,0,0,0,774,772,1,0,0,0,775,776,3,98,49,0,776,777,
        5,6,0,0,777,105,1,0,0,0,778,779,5,17,0,0,779,780,3,98,49,0,780,107,
        1,0,0,0,781,810,3,110,55,0,782,789,5,13,0,0,783,785,5,80,0,0,784,
        786,3,122,61,0,785,784,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,
        789,5,81,0,0,788,782,1,0,0,0,788,783,1,0,0,0,789,811,1,0,0,0,790,
        791,5,26,0,0,791,793,5,67,0,0,792,790,1,0,0,0,793,794,1,0,0,0,794,
        792,1,0,0,0,794,795,1,0,0,0,795,811,1,0,0,0,796,797,5,26,0,0,797,
        804,5,67,0,0,798,800,5,80,0,0,799,801,3,122,61,0,800,799,1,0,0,0,
        800,801,1,0,0,0,801,802,1,0,0,0,802,805,5,81,0,0,803,805,5,13,0,
        0,804,798,1,0,0,0,804,803,1,0,0,0,805,811,1,0,0,0,806,807,5,77,0,
        0,807,808,3,98,49,0,808,809,5,78,0,0,809,811,1,0,0,0,810,788,1,0,
        0,0,810,792,1,0,0,0,810,796,1,0,0,0,810,806,1,0,0,0,811,812,1,0,
        0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,109,1,0,0,0,814,843,3,130,
        65,0,815,843,5,67,0,0,816,843,3,112,56,0,817,818,5,67,0,0,818,820,
        5,80,0,0,819,821,3,122,61,0,820,819,1,0,0,0,820,821,1,0,0,0,821,
        822,1,0,0,0,822,843,5,81,0,0,823,824,5,80,0,0,824,825,3,98,49,0,
        825,826,5,81,0,0,826,843,1,0,0,0,827,828,5,67,0,0,828,829,5,5,0,
        0,829,834,3,116,58,0,830,831,5,79,0,0,831,833,3,116,58,0,832,830,
        1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,838,
        1,0,0,0,836,834,1,0,0,0,837,839,5,79,0,0,838,837,1,0,0,0,838,839,
        1,0,0,0,839,840,1,0,0,0,840,841,5,6,0,0,841,843,1,0,0,0,842,814,
        1,0,0,0,842,815,1,0,0,0,842,816,1,0,0,0,842,817,1,0,0,0,842,823,
        1,0,0,0,842,827,1,0,0,0,843,111,1,0,0,0,844,845,5,73,0,0,845,846,
        3,54,27,0,846,847,5,67,0,0,847,849,5,73,0,0,848,850,3,114,57,0,849,
        848,1,0,0,0,849,850,1,0,0,0,850,857,1,0,0,0,851,858,5,13,0,0,852,
        854,5,80,0,0,853,855,3,122,61,0,854,853,1,0,0,0,854,855,1,0,0,0,
        855,856,1,0,0,0,856,858,5,81,0,0,857,851,1,0,0,0,857,852,1,0,0,0,
        858,890,1,0,0,0,859,864,5,67,0,0,860,861,5,26,0,0,861,863,5,67,0,
        0,862,860,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,
        0,865,871,1,0,0,0,866,864,1,0,0,0,867,868,5,73,0,0,868,870,5,67,
        0,0,869,867,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,
        0,0,872,887,1,0,0,0,873,871,1,0,0,0,874,888,5,13,0,0,875,883,5,80,
        0,0,876,877,5,67,0,0,877,878,5,80,0,0,878,879,5,66,0,0,879,882,5,
        81,0,0,880,882,3,122,61,0,881,876,1,0,0,0,881,880,1,0,0,0,882,885,
        1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,883,
        1,0,0,0,886,888,5,81,0,0,887,874,1,0,0,0,887,875,1,0,0,0,888,890,
        1,0,0,0,889,844,1,0,0,0,889,859,1,0,0,0,890,113,1,0,0,0,891,892,
        5,23,0,0,892,897,3,52,26,0,893,894,5,79,0,0,894,896,3,52,26,0,895,
        893,1,0,0,0,896,899,1,0,0,0,897,895,1,0,0,0,897,898,1,0,0,0,898,
        900,1,0,0,0,899,897,1,0,0,0,900,901,5,75,0,0,901,115,1,0,0,0,902,
        903,5,67,0,0,903,904,5,83,0,0,904,905,3,98,49,0,905,117,1,0,0,0,
        906,911,3,120,60,0,907,908,5,60,0,0,908,910,3,120,60,0,909,907,1,
        0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,914,1,
        0,0,0,913,911,1,0,0,0,914,915,5,61,0,0,915,916,3,60,30,0,916,119,
        1,0,0,0,917,918,7,7,0,0,918,121,1,0,0,0,919,922,3,112,56,0,920,922,
        3,98,49,0,921,919,1,0,0,0,921,920,1,0,0,0,922,930,1,0,0,0,923,926,
        5,79,0,0,924,927,3,112,56,0,925,927,3,98,49,0,926,924,1,0,0,0,926,
        925,1,0,0,0,927,929,1,0,0,0,928,923,1,0,0,0,929,932,1,0,0,0,930,
        928,1,0,0,0,930,931,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,933,
        935,5,79,0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,950,1,0,0,0,936,
        937,5,73,0,0,937,939,5,67,0,0,938,936,1,0,0,0,939,940,1,0,0,0,940,
        938,1,0,0,0,940,941,1,0,0,0,941,947,1,0,0,0,942,948,5,13,0,0,943,
        944,5,80,0,0,944,945,3,122,61,0,945,946,5,81,0,0,946,948,1,0,0,0,
        947,942,1,0,0,0,947,943,1,0,0,0,948,950,1,0,0,0,949,921,1,0,0,0,
        949,938,1,0,0,0,950,123,1,0,0,0,951,952,5,67,0,0,952,953,5,74,0,
        0,953,954,3,126,63,0,954,125,1,0,0,0,955,957,5,77,0,0,956,958,3,
        128,64,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,966,
        5,78,0,0,960,962,5,80,0,0,961,963,3,128,64,0,962,961,1,0,0,0,962,
        963,1,0,0,0,963,964,1,0,0,0,964,966,5,81,0,0,965,955,1,0,0,0,965,
        960,1,0,0,0,966,127,1,0,0,0,967,970,3,98,49,0,968,969,5,3,0,0,969,
        971,3,98,49,0,970,968,1,0,0,0,970,971,1,0,0,0,971,129,1,0,0,0,972,
        982,5,65,0,0,973,982,3,134,67,0,974,982,5,71,0,0,975,982,5,68,0,
        0,976,982,5,69,0,0,977,982,5,70,0,0,978,982,5,66,0,0,979,982,3,132,
        66,0,980,982,5,72,0,0,981,972,1,0,0,0,981,973,1,0,0,0,981,974,1,
        0,0,0,981,975,1,0,0,0,981,976,1,0,0,0,981,977,1,0,0,0,981,978,1,
        0,0,0,981,979,1,0,0,0,981,980,1,0,0,0,982,131,1,0,0,0,983,984,7,
        8,0,0,984,133,1,0,0,0,985,986,5,77,0,0,986,991,3,98,49,0,987,988,
        5,79,0,0,988,990,3,98,49,0,989,987,1,0,0,0,990,993,1,0,0,0,991,989,
        1,0,0,0,991,992,1,0,0,0,992,994,1,0,0,0,993,991,1,0,0,0,994,995,
        5,78,0,0,995,1003,1,0,0,0,996,997,5,77,0,0,997,998,3,98,49,0,998,
        999,5,3,0,0,999,1000,3,98,49,0,1000,1001,5,78,0,0,1001,1003,1,0,
        0,0,1002,985,1,0,0,0,1002,996,1,0,0,0,1003,135,1,0,0,0,1004,1008,
        5,62,0,0,1005,1007,9,0,0,0,1006,1005,1,0,0,0,1007,1010,1,0,0,0,1008,
        1009,1,0,0,0,1008,1006,1,0,0,0,1009,1011,1,0,0,0,1010,1008,1,0,0,
        0,1011,1012,5,62,0,0,1012,137,1,0,0,0,124,141,153,156,170,176,182,
        186,194,200,205,208,215,220,223,226,231,238,242,257,264,270,275,
        283,289,295,298,301,304,311,314,317,320,328,335,339,342,349,360,
        374,378,381,387,390,405,410,417,420,425,439,444,453,458,463,477,
        483,487,490,516,522,537,549,553,559,568,578,584,594,598,603,609,
        614,616,626,642,646,648,666,673,677,703,718,725,727,753,756,758,
        772,785,788,794,800,804,810,812,820,834,838,842,849,854,857,864,
        871,881,883,887,889,897,911,921,926,930,934,940,947,949,957,962,
        965,970,981,991,1002,1008
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'extern'", "'{'", 
                     "'}'", "'static'", "'mut'", "'fn'", "'->'", "'pub'", 
                     "'struct'", "'()'", "'unsafe'", "'const'", "'union'", 
                     "'&'", "'*'", "'i32'", "'String'", "'bool'", "'u8'", 
                     "'<'", "'break'", "'continue'", "'.'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'match'", 
                     "'while'", "'let'", "'ref'", "'for'", "'in'", "'if'", 
                     "'else'", "'return'", "'loop'", "'>()'", "'/'", "'%'", 
                     "'+'", "'-'", "'>>'", "'>='", "'<='", "'=='", "'!='", 
                     "'<<'", "'||'", "'&&'", "'..'", "'as'", "'|'", "'=>'", 
                     "'\"'", "'true'", "'false'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'::'", "'!'", "'>'", "'#'", 
                     "'['", "']'", "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "TRUE", "FALSE", 
                      "Binary", "STRING_LITERAL", "Identifier", "Number", 
                      "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_typeAlias = 2
    RULE_externBlock = 3
    RULE_externItem = 4
    RULE_externParams = 5
    RULE_externParam = 6
    RULE_visibility = 7
    RULE_attributes = 8
    RULE_innerAttribute = 9
    RULE_attribute = 10
    RULE_attrArgs = 11
    RULE_attrArg = 12
    RULE_attrValue = 13
    RULE_structDef = 14
    RULE_structField = 15
    RULE_functionDef = 16
    RULE_unsafeModifier = 17
    RULE_externAbi = 18
    RULE_paramList = 19
    RULE_param = 20
    RULE_constDef = 21
    RULE_unionDef = 22
    RULE_unionField = 23
    RULE_unsafeDef = 24
    RULE_referenceType = 25
    RULE_type = 26
    RULE_typePath = 27
    RULE_pointerType = 28
    RULE_basicType = 29
    RULE_block = 30
    RULE_statement = 31
    RULE_compoundOp = 32
    RULE_compoundAssignment = 33
    RULE_matchStmt = 34
    RULE_unsafeBlock = 35
    RULE_whileStmt = 36
    RULE_staticVarDecl = 37
    RULE_initializer = 38
    RULE_letStmt = 39
    RULE_varDef = 40
    RULE_initBlock = 41
    RULE_fieldList = 42
    RULE_assignStmt = 43
    RULE_forStmt = 44
    RULE_ifStmt = 45
    RULE_exprStmt = 46
    RULE_returnStmt = 47
    RULE_loopStmt = 48
    RULE_expression = 49
    RULE_parenExpression = 50
    RULE_dereferenceExpression = 51
    RULE_expressionBlock = 52
    RULE_borrowExpression = 53
    RULE_postfixExpression = 54
    RULE_primaryExpression = 55
    RULE_qualifiedFunctionCall = 56
    RULE_genericArgs = 57
    RULE_structLiteralField = 58
    RULE_matchArm = 59
    RULE_matchPattern = 60
    RULE_argumentList = 61
    RULE_macroCall = 62
    RULE_macroArgs = 63
    RULE_macroInner = 64
    RULE_literal = 65
    RULE_booleanLiteral = 66
    RULE_arrayLiteral = 67
    RULE_stringLiteral = 68

    ruleNames =  [ "program", "topLevelItem", "typeAlias", "externBlock", 
                   "externItem", "externParams", "externParam", "visibility", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "functionDef", 
                   "unsafeModifier", "externAbi", "paramList", "param", 
                   "constDef", "unionDef", "unionField", "unsafeDef", "referenceType", 
                   "type", "typePath", "pointerType", "basicType", "block", 
                   "statement", "compoundOp", "compoundAssignment", "matchStmt", 
                   "unsafeBlock", "whileStmt", "staticVarDecl", "initializer", 
                   "letStmt", "varDef", "initBlock", "fieldList", "assignStmt", 
                   "forStmt", "ifStmt", "exprStmt", "returnStmt", "loopStmt", 
                   "expression", "parenExpression", "dereferenceExpression", 
                   "expressionBlock", "borrowExpression", "postfixExpression", 
                   "primaryExpression", "qualifiedFunctionCall", "genericArgs", 
                   "structLiteralField", "matchArm", "matchPattern", "argumentList", 
                   "macroCall", "macroArgs", "macroInner", "literal", "booleanLiteral", 
                   "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    TRUE=63
    FALSE=64
    Binary=65
    STRING_LITERAL=66
    Identifier=67
    Number=68
    SignedNumber=69
    BYTE_STRING_LITERAL=70
    HexNumber=71
    CHAR_LITERAL=72
    DOUBLE_COLON=73
    EXCL=74
    GT=75
    POUND=76
    LBRACK=77
    RBRACK=78
    COMMA=79
    LPAREN=80
    RPAREN=81
    UNDERSCORE=82
    COLON=83
    ELLIPSIS=84
    WS=85
    COMMENT=86

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 121490) != 0) or _la==76:
                self.state = 138
                self.topLevelItem()
                self.state = 143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 144
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 145
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 146
                self.structDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 147
                self.attributes()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 148
                self.externBlock()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 149
                self.typeAlias()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 150
                self.constDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 151
                self.unionDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 152
                self.unsafeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 155
                self.visibility()


            self.state = 158
            self.match(RustParser.T__0)
            self.state = 159
            self.match(RustParser.Identifier)
            self.state = 160
            self.match(RustParser.T__1)
            self.state = 161
            self.type_()
            self.state = 162
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self.match(RustParser.T__3)
            self.state = 165
            self.match(RustParser.STRING_LITERAL)
            self.state = 166
            self.match(RustParser.T__4)
            self.state = 170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2690) != 0):
                self.state = 167
                self.externItem()
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 173
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 175
                    self.visibility()


                self.state = 178
                self.match(RustParser.T__0)
                self.state = 179
                self.match(RustParser.Identifier)
                self.state = 180
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 181
                    self.visibility()


                self.state = 184
                self.match(RustParser.T__6)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 185
                    self.match(RustParser.T__7)


                self.state = 188
                self.match(RustParser.Identifier)
                self.state = 189
                self.match(RustParser.COLON)
                self.state = 190
                self.type_()
                self.state = 191
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 193
                    self.visibility()


                self.state = 196
                self.match(RustParser.T__8)
                self.state = 197
                self.match(RustParser.Identifier)
                self.state = 198
                self.match(RustParser.LPAREN)
                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 229377) != 0):
                    self.state = 199
                    self.externParams()


                self.state = 202
                self.match(RustParser.RPAREN)
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 203
                    self.match(RustParser.T__9)
                    self.state = 204
                    self.type_()


                self.state = 207
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 82, 83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 210
                self.externParam()
                self.state = 215
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 211
                        self.match(RustParser.COMMA)
                        self.state = 212
                        self.externParam() 
                    self.state = 217
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 218
                    self.match(RustParser.COMMA)
                    self.state = 219
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 222
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67 or _la==82:
                self.state = 225
                _la = self._input.LA(1)
                if not(_la==67 or _la==82):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 228
            self.match(RustParser.COLON)
            self.state = 231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 18, 19, 20, 21, 22, 67, 73, 77]:
                self.state = 229
                self.type_()
                pass
            elif token in [84]:
                self.state = 230
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(RustParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 235
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 238 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(RustParser.POUND)

            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 241
                self.match(RustParser.EXCL)


            self.state = 244
            self.match(RustParser.LBRACK)
            self.state = 245
            self.attribute()
            self.state = 246
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_attribute)
        try:
            self.state = 257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 248
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.match(RustParser.Identifier)
                self.state = 250
                self.match(RustParser.T__1)
                self.state = 251
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 252
                self.match(RustParser.Identifier)
                self.state = 253
                self.match(RustParser.LPAREN)
                self.state = 254
                self.attrArgs()
                self.state = 255
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.attrArg()
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 260
                self.match(RustParser.COMMA)
                self.state = 261
                self.attrArg()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(RustParser.Identifier)
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 268
                self.match(RustParser.T__1)
                self.state = 269
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 274
                self.visibility()


            self.state = 277
            self.match(RustParser.T__11)
            self.state = 278
            self.match(RustParser.Identifier)
            self.state = 279
            self.match(RustParser.T__4)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==67:
                self.state = 280
                self.structField()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 286
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 288
                self.visibility()


            self.state = 291
            self.match(RustParser.Identifier)
            self.state = 292
            self.match(RustParser.COLON)
            self.state = 293
            self.type_()
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 294
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 297
                self.visibility()


            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 300
                self.unsafeModifier()


            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 303
                self.externAbi()


            self.state = 306
            self.match(RustParser.T__8)
            self.state = 307
            self.match(RustParser.Identifier)
            self.state = 314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 308
                self.match(RustParser.T__12)
                pass
            elif token in [80]:
                self.state = 309
                self.match(RustParser.LPAREN)
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==67:
                    self.state = 310
                    self.paramList()


                self.state = 313
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 316
                self.match(RustParser.T__9)


            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8265728) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 1089) != 0):
                self.state = 319
                self.type_()


            self.state = 322
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(RustParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(RustParser.T__3)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 327
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.param()
            self.state = 335
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 331
                    self.match(RustParser.COMMA)
                    self.state = 332
                    self.param() 
                self.state = 337
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 338
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 341
                self.match(RustParser.T__7)


            self.state = 344
            self.match(RustParser.Identifier)
            self.state = 345
            self.match(RustParser.COLON)
            self.state = 346
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 348
                self.visibility()


            self.state = 351
            self.match(RustParser.T__14)
            self.state = 352
            self.match(RustParser.Identifier)
            self.state = 353
            self.match(RustParser.COLON)
            self.state = 354
            self.type_()
            self.state = 355
            self.match(RustParser.T__1)
            self.state = 356
            self.expression(0)
            self.state = 357
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 359
                self.visibility()


            self.state = 362
            self.match(RustParser.T__15)
            self.state = 363
            self.match(RustParser.Identifier)
            self.state = 378
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.state = 364
                self.match(RustParser.COLON)
                self.state = 365
                self.type_()
                self.state = 366
                self.match(RustParser.T__1)
                self.state = 367
                self.expression(0)
                self.state = 368
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 370
                self.match(RustParser.T__4)
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11 or _la==67:
                    self.state = 371
                    self.unionField()
                    self.state = 376
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 377
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 380
                self.visibility()


            self.state = 383
            self.match(RustParser.Identifier)
            self.state = 384
            self.match(RustParser.COLON)
            self.state = 385
            self.type_()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 386
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 389
                self.visibility()


            self.state = 392
            self.match(RustParser.T__13)
            self.state = 393
            self.match(RustParser.Identifier)
            self.state = 394
            self.match(RustParser.COLON)
            self.state = 395
            self.type_()
            self.state = 396
            self.match(RustParser.T__1)
            self.state = 397
            self.expression(0)
            self.state = 398
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceType" ):
                return visitor.visitReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def referenceType(self):

        localctx = RustParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_referenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(RustParser.T__16)
            self.state = 401
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_type)
        try:
            self.state = 405
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 19, 20, 21, 22, 67, 73, 77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self.basicType()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 404
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 407
                self.match(RustParser.Identifier)
                self.state = 408
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 409
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 412
                self.match(RustParser.Identifier)
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 413
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 414
                        self.match(RustParser.Identifier) 
                    self.state = 419
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(RustParser.T__17)
            self.state = 423
            _la = self._input.LA(1)
            if not(_la==8 or _la==15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 424
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.match(RustParser.T__18)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.match(RustParser.T__19)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 429
                self.match(RustParser.T__20)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 430
                self.match(RustParser.T__21)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 431
                self.match(RustParser.T__12)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 432
                self.typePath()
                self.state = 444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 433
                    self.match(RustParser.T__22)
                    self.state = 434
                    self.type_()
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==79:
                        self.state = 435
                        self.match(RustParser.COMMA)
                        self.state = 436
                        self.type_()
                        self.state = 441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 442
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 446
                self.match(RustParser.Identifier)
                self.state = 458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 447
                    self.match(RustParser.T__22)
                    self.state = 448
                    self.type_()
                    self.state = 453
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==79:
                        self.state = 449
                        self.match(RustParser.COMMA)
                        self.state = 450
                        self.type_()
                        self.state = 455
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 456
                    self.match(RustParser.GT)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 460
                self.match(RustParser.T__16)
                self.state = 461
                self.type_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==73:
                    self.state = 462
                    self.typePath()


                self.state = 465
                self.match(RustParser.LBRACK)
                self.state = 466
                self.type_()
                self.state = 467
                self.match(RustParser.T__2)
                self.state = 468
                self.match(RustParser.Number)
                self.state = 469
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 471
                self.typePath()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 472
                self.match(RustParser.LBRACK)
                self.state = 473
                self.type_()
                self.state = 474
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 476
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(RustParser.T__4)
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 480
                    self.statement() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 486
                self.returnStmt()


            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                self.state = 489
                self.expression(0)


            self.state = 492
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def unsafeBlock(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.assignStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 497
                self.match(RustParser.Identifier)
                self.state = 498
                self.match(RustParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 499
                self.compoundAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 500
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 501
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 502
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 503
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 504
                self.returnStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 505
                self.loopStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 506
                self.match(RustParser.T__23)
                self.state = 507
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 508
                self.match(RustParser.T__24)
                self.state = 509
                self.match(RustParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 510
                self.matchStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 511
                self.qualifiedFunctionCall()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==26:
                    self.state = 512
                    self.match(RustParser.T__25)
                    self.state = 513
                    self.qualifiedFunctionCall()
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 519
                self.match(RustParser.T__2)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 521
                self.unsafeBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 34225520640) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.expression(0)
            self.state = 527
            self.compoundOp()
            self.state = 528
            self.expression(0)
            self.state = 529
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(RustParser.T__34)
            self.state = 532
            self.expression(0)
            self.state = 533
            self.match(RustParser.T__4)
            self.state = 535 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 534
                self.matchArm()
                self.state = 537 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 32771) != 0)):
                    break

            self.state = 539
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(RustParser.T__13)
            self.state = 542
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(RustParser.T__35)
            self.state = 545
            self.expression(0)
            self.state = 546
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 548
                self.visibility()


            self.state = 551
            self.match(RustParser.T__6)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 552
                self.match(RustParser.T__7)


            self.state = 555
            self.match(RustParser.Identifier)
            self.state = 556
            self.match(RustParser.COLON)
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 557
                self.type_()
                pass

            elif la_ == 2:
                self.state = 558
                self.match(RustParser.Identifier)
                pass


            self.state = 561
            self.match(RustParser.T__1)
            self.state = 562
            self.initializer()
            self.state = 563
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_initializer)
        try:
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 565
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.match(RustParser.T__36)
                self.state = 571
                self.varDef()
                self.state = 572
                self.match(RustParser.T__1)
                self.state = 573
                self.expression(0)
                self.state = 574
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.match(RustParser.T__36)
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 577
                    self.match(RustParser.T__7)


                self.state = 580
                self.match(RustParser.Identifier)
                self.state = 581
                self.match(RustParser.COLON)
                self.state = 584
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 582
                    self.type_()
                    pass

                elif la_ == 2:
                    self.state = 583
                    self.match(RustParser.Identifier)
                    pass


                self.state = 586
                self.match(RustParser.T__1)
                self.state = 587
                self.initializer()
                self.state = 588
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 590
                self.match(RustParser.T__36)
                self.state = 591
                self.varDef()
                self.state = 592
                self.initBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 596
                self.match(RustParser.T__37)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 597
                    self.match(RustParser.T__7)


                self.state = 600
                self.match(RustParser.Identifier)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 601
                    self.match(RustParser.COLON)
                    self.state = 602
                    self.type_()


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.match(RustParser.T__7)
                self.state = 606
                self.match(RustParser.Identifier)
                self.state = 609
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 607
                    _la = self._input.LA(1)
                    if not(_la==2 or _la==83):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 608
                    self.type_()


                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 611
                self.match(RustParser.Identifier)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 612
                    self.match(RustParser.COLON)
                    self.state = 613
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(RustParser.T__4)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==67:
                self.state = 619
                self.match(RustParser.Identifier)
                self.state = 620
                self.match(RustParser.COLON)
                self.state = 621
                self.expression(0)
                self.state = 622
                self.match(RustParser.COMMA)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self.match(RustParser.T__5)
            self.state = 630
            self.match(RustParser.T__2)
            self.state = 631
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_fieldList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldList" ):
                listener.enterFieldList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldList" ):
                listener.exitFieldList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldList" ):
                return visitor.visitFieldList(self)
            else:
                return visitor.visitChildren(self)




    def fieldList(self):

        localctx = RustParser.FieldListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fieldList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 633
                self.match(RustParser.Identifier)
                self.state = 634
                self.match(RustParser.COLON)
                self.state = 635
                self.expression(0)
                self.state = 642
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 636
                        self.match(RustParser.COMMA)
                        self.state = 637
                        self.match(RustParser.Identifier)
                        self.state = 638
                        self.match(RustParser.COLON)
                        self.state = 639
                        self.expression(0) 
                    self.state = 644
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 645
                    self.match(RustParser.COMMA)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.expression(0)
            self.state = 651
            self.match(RustParser.T__1)
            self.state = 652
            self.expression(0)
            self.state = 653
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(RustParser.T__38)
            self.state = 656
            self.match(RustParser.Identifier)
            self.state = 657
            self.match(RustParser.T__39)
            self.state = 658
            self.expression(0)
            self.state = 659
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(RustParser.T__40)
            self.state = 662
            self.expression(0)
            self.state = 663
            self.block()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 664
                self.match(RustParser.T__41)
                self.state = 665
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.expression(0)
            self.state = 669
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.match(RustParser.T__42)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                    self.state = 672
                    self.expression(0)


                self.state = 675
                self.match(RustParser.T__2)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(RustParser.T__43)
            self.state = 680
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def macroCall(self):
            return self.getTypedRuleContext(RustParser.MacroCallContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 683
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.state = 684
                self.literal()
                pass

            elif la_ == 3:
                self.state = 685
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 686
                self.dereferenceExpression()
                pass

            elif la_ == 5:
                self.state = 687
                self.parenExpression()
                pass

            elif la_ == 6:
                self.state = 688
                self.macroCall()
                pass

            elif la_ == 7:
                self.state = 689
                self.borrowExpression()
                pass

            elif la_ == 8:
                self.state = 690
                self.typePath()
                self.state = 691
                self.match(RustParser.Identifier)
                self.state = 692
                self.match(RustParser.DOUBLE_COLON)
                self.state = 693
                self.match(RustParser.T__22)
                self.state = 694
                self.type_()
                self.state = 695
                self.match(RustParser.T__44)
                pass

            elif la_ == 9:
                self.state = 697
                self.match(RustParser.EXCL)
                self.state = 698
                self.expression(11)
                pass

            elif la_ == 10:
                self.state = 699
                self.match(RustParser.Identifier)
                self.state = 700
                self.match(RustParser.EXCL)
                self.state = 701
                self.match(RustParser.LPAREN)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                    self.state = 702
                    self.argumentList()


                self.state = 705
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 11:
                self.state = 706
                self.expressionBlock()
                pass

            elif la_ == 12:
                self.state = 707
                self.match(RustParser.T__16)
                self.state = 708
                self.match(RustParser.T__7)
                self.state = 709
                self.expression(3)
                pass

            elif la_ == 13:
                self.state = 710
                self.match(RustParser.LPAREN)
                self.state = 711
                self.expression(0)
                self.state = 712
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 14:
                self.state = 716 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 714
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 715
                    self.match(RustParser.Identifier)
                    self.state = 718 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==73):
                        break

                self.state = 725
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 720
                    self.match(RustParser.T__12)
                    pass
                elif token in [80]:
                    self.state = 721
                    self.match(RustParser.LPAREN)
                    self.state = 722
                    self.argumentList()
                    self.state = 723
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 758
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 756
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 729
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 730
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8936830510956544) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 731
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 732
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 733
                        _la = self._input.LA(1)
                        if not(((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 4503633047584769) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 734
                        self.expression(10)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 735
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 736
                        self.match(RustParser.T__57)
                        self.state = 737
                        self.expression(9)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 738
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 739
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 34225520640) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 740
                        self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 741
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 742
                        self.match(RustParser.LBRACK)
                        self.state = 743
                        self.expression(0)
                        self.state = 744
                        self.match(RustParser.RBRACK)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 746
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 747
                        self.match(RustParser.T__58)
                        self.state = 748
                        self.type_()
                        self.state = 753
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 749
                                self.match(RustParser.T__58)
                                self.state = 750
                                self.type_() 
                            self.state = 755
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

                        pass

             
                self.state = 760
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(RustParser.LPAREN)
            self.state = 762
            self.expression(0)
            self.state = 763
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(RustParser.T__17)
            self.state = 766
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(RustParser.T__4)
            self.state = 772
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 769
                    self.statement() 
                self.state = 774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

            self.state = 775
            self.expression(0)
            self.state = 776
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(RustParser.T__16)
            self.state = 779
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LBRACK)
            else:
                return self.getToken(RustParser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RBRACK)
            else:
                return self.getToken(RustParser.RBRACK, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.primaryExpression()
            self.state = 810 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 810
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                    if la_ == 1:
                        self.state = 788
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [13]:
                            self.state = 782
                            self.match(RustParser.T__12)
                            pass
                        elif token in [80]:
                            self.state = 783
                            self.match(RustParser.LPAREN)
                            self.state = 785
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                                self.state = 784
                                self.argumentList()


                            self.state = 787
                            self.match(RustParser.RPAREN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 792 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 790
                                self.match(RustParser.T__25)
                                self.state = 791
                                self.match(RustParser.Identifier)

                            else:
                                raise NoViableAltException(self)
                            self.state = 794 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 796
                        self.match(RustParser.T__25)
                        self.state = 797
                        self.match(RustParser.Identifier)
                        self.state = 804
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [80]:
                            self.state = 798
                            self.match(RustParser.LPAREN)
                            self.state = 800
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                                self.state = 799
                                self.argumentList()


                            self.state = 802
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [13]:
                            self.state = 803
                            self.match(RustParser.T__12)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        self.state = 806
                        self.match(RustParser.LBRACK)
                        self.state = 807
                        self.expression(0)
                        self.state = 808
                        self.match(RustParser.RBRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 812 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def qualifiedFunctionCall(self):
            return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.match(RustParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 816
                self.qualifiedFunctionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 817
                self.match(RustParser.Identifier)
                self.state = 818
                self.match(RustParser.LPAREN)
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                    self.state = 819
                    self.argumentList()


                self.state = 822
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 823
                self.match(RustParser.LPAREN)
                self.state = 824
                self.expression(0)
                self.state = 825
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 827
                self.match(RustParser.Identifier)
                self.state = 828
                self.match(RustParser.T__4)
                self.state = 829
                self.structLiteralField()
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 830
                        self.match(RustParser.COMMA)
                        self.state = 831
                        self.structLiteralField() 
                    self.state = 836
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 837
                    self.match(RustParser.COMMA)


                self.state = 840
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.STRING_LITERAL)
            else:
                return self.getToken(RustParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.match(RustParser.DOUBLE_COLON)
                self.state = 845
                self.typePath()
                self.state = 846
                self.match(RustParser.Identifier)
                self.state = 847
                self.match(RustParser.DOUBLE_COLON)
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 848
                    self.genericArgs()


                self.state = 857
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 851
                    self.match(RustParser.T__12)
                    pass
                elif token in [80]:
                    self.state = 852
                    self.match(RustParser.LPAREN)
                    self.state = 854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                        self.state = 853
                        self.argumentList()


                    self.state = 856
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 859
                self.match(RustParser.Identifier)
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==26:
                    self.state = 860
                    self.match(RustParser.T__25)
                    self.state = 861
                    self.match(RustParser.Identifier)
                    self.state = 866
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==73:
                    self.state = 867
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 868
                    self.match(RustParser.Identifier)
                    self.state = 873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 887
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 874
                    self.match(RustParser.T__12)
                    pass
                elif token in [80]:
                    self.state = 875
                    self.match(RustParser.LPAREN)
                    self.state = 883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                        self.state = 881
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                        if la_ == 1:
                            self.state = 876
                            self.match(RustParser.Identifier)
                            self.state = 877
                            self.match(RustParser.LPAREN)
                            self.state = 878
                            self.match(RustParser.STRING_LITERAL)
                            self.state = 879
                            self.match(RustParser.RPAREN)
                            pass

                        elif la_ == 2:
                            self.state = 880
                            self.argumentList()
                            pass


                        self.state = 885
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 886
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(RustParser.T__22)
            self.state = 892
            self.type_()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 893
                self.match(RustParser.COMMA)
                self.state = 894
                self.type_()
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 900
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_structLiteralField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(RustParser.Identifier)
            self.state = 903
            self.match(RustParser.COLON)
            self.state = 904
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.matchPattern()
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 907
                self.match(RustParser.T__59)
                self.state = 908
                self.matchPattern()
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 914
            self.match(RustParser.T__60)
            self.state = 915
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 919
                    self.qualifiedFunctionCall()
                    pass

                elif la_ == 2:
                    self.state = 920
                    self.expression(0)
                    pass


                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 923
                        self.match(RustParser.COMMA)
                        self.state = 926
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                        if la_ == 1:
                            self.state = 924
                            self.qualifiedFunctionCall()
                            pass

                        elif la_ == 2:
                            self.state = 925
                            self.expression(0)
                            pass

                 
                    self.state = 932
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 933
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 938 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 936
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 937
                    self.match(RustParser.Identifier)
                    self.state = 940 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==73):
                        break

                self.state = 947
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 942
                    self.match(RustParser.T__12)
                    pass
                elif token in [80]:
                    self.state = 943
                    self.match(RustParser.LPAREN)
                    self.state = 944
                    self.argumentList()
                    self.state = 945
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(RustParser.Identifier)
            self.state = 952
            self.match(RustParser.EXCL)
            self.state = 953
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 965
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.match(RustParser.LBRACK)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                    self.state = 956
                    self.macroInner()


                self.state = 959
                self.match(RustParser.RBRACK)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.match(RustParser.LPAREN)
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036854382560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                    self.state = 961
                    self.macroInner()


                self.state = 964
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.expression(0)
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 968
                self.match(RustParser.T__2)
                self.state = 969
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_literal)
        try:
            self.state = 981
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.match(RustParser.Binary)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.arrayLiteral()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.match(RustParser.HexNumber)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 975
                self.match(RustParser.Number)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 5)
                self.state = 976
                self.match(RustParser.SignedNumber)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 6)
                self.state = 977
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 7)
                self.state = 978
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [63, 64]:
                self.enterOuterAlt(localctx, 8)
                self.state = 979
                self.booleanLiteral()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 9)
                self.state = 980
                self.match(RustParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            _la = self._input.LA(1)
            if not(_la==63 or _la==64):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.match(RustParser.LBRACK)
                self.state = 986
                self.expression(0)
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==79:
                    self.state = 987
                    self.match(RustParser.COMMA)
                    self.state = 988
                    self.expression(0)
                    self.state = 993
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 994
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 996
                self.match(RustParser.LBRACK)
                self.state = 997
                self.expression(0)
                self.state = 998
                self.match(RustParser.T__2)
                self.state = 999
                self.expression(0)
                self.state = 1000
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(RustParser.T__61)
            self.state = 1008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1005
                    self.matchWildcard() 
                self.state = 1010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

            self.state = 1011
            self.match(RustParser.T__61)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[49] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         




