# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,82,823,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,1,0,5,0,122,8,0,10,0,12,0,125,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,3,1,136,8,1,1,2,3,2,139,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,5,3,151,8,3,10,3,12,3,154,9,3,1,3,1,3,1,4,3,4,159,
        8,4,1,4,1,4,1,4,1,4,3,4,165,8,4,1,4,1,4,3,4,169,8,4,1,4,1,4,1,4,
        1,4,1,4,1,4,3,4,177,8,4,1,4,1,4,1,4,1,4,3,4,183,8,4,1,4,1,4,1,4,
        3,4,188,8,4,1,4,3,4,191,8,4,1,5,1,5,1,5,5,5,196,8,5,10,5,12,5,199,
        9,5,1,5,1,5,3,5,203,8,5,1,5,3,5,206,8,5,1,6,3,6,209,8,6,1,6,1,6,
        1,6,3,6,214,8,6,1,7,1,7,1,8,4,8,219,8,8,11,8,12,8,220,1,9,1,9,3,
        9,225,8,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,236,8,10,
        1,11,1,11,1,11,5,11,241,8,11,10,11,12,11,244,9,11,1,12,1,12,1,13,
        3,13,249,8,13,1,13,1,13,1,13,1,13,5,13,255,8,13,10,13,12,13,258,
        9,13,1,13,1,13,1,14,3,14,263,8,14,1,14,1,14,1,14,1,14,3,14,269,8,
        14,1,15,3,15,272,8,15,1,15,3,15,275,8,15,1,15,3,15,278,8,15,1,15,
        1,15,1,15,1,15,3,15,284,8,15,1,15,1,15,3,15,288,8,15,1,15,3,15,291,
        8,15,1,15,1,15,1,16,1,16,1,17,1,17,3,17,299,8,17,1,18,1,18,1,18,
        5,18,304,8,18,10,18,12,18,307,9,18,1,18,3,18,310,8,18,1,19,3,19,
        313,8,19,1,19,1,19,1,19,1,19,1,20,3,20,320,8,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,21,3,21,331,8,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,5,21,343,8,21,10,21,12,21,346,9,21,1,
        21,3,21,349,8,21,1,22,3,22,352,8,22,1,22,1,22,1,22,1,22,3,22,358,
        8,22,1,23,3,23,361,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,24,1,24,1,24,1,25,1,25,3,25,376,8,25,1,26,3,26,379,8,26,1,26,1,
        26,1,26,5,26,384,8,26,10,26,12,26,387,9,26,1,27,1,27,1,27,1,27,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,402,8,28,10,28,12,
        28,405,9,28,1,28,1,28,3,28,409,8,28,1,28,1,28,1,28,1,28,1,28,5,28,
        416,8,28,10,28,12,28,419,9,28,1,28,1,28,3,28,423,8,28,1,28,1,28,
        1,28,3,28,428,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,3,28,442,8,28,1,29,1,29,5,29,446,8,29,10,29,12,29,
        449,9,29,1,29,3,29,452,8,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,4,30,479,8,30,11,30,12,30,480,1,30,1,30,3,
        30,485,8,30,1,31,1,31,1,31,1,31,1,32,3,32,492,8,32,1,32,1,32,3,32,
        496,8,32,1,32,1,32,1,32,1,32,3,32,502,8,32,1,32,1,32,1,32,1,32,1,
        33,1,33,3,33,510,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,3,
        35,520,8,35,1,35,1,35,1,35,3,35,525,8,35,1,35,1,35,1,35,1,35,3,35,
        531,8,35,1,35,1,35,1,35,3,35,536,8,35,3,35,538,8,35,1,36,1,36,1,
        36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,
        38,3,38,556,8,38,1,39,1,39,1,39,1,40,1,40,3,40,563,8,40,1,40,1,40,
        3,40,567,8,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        3,42,592,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
        603,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,627,
        8,42,10,42,12,42,630,9,42,5,42,632,8,42,10,42,12,42,635,9,42,1,43,
        1,43,5,43,639,8,43,10,43,12,43,642,9,43,1,43,1,43,1,43,1,44,1,44,
        1,44,1,45,1,45,1,45,1,45,3,45,654,8,45,1,45,3,45,657,8,45,1,45,1,
        45,4,45,661,8,45,11,45,12,45,662,1,45,1,45,1,45,1,45,3,45,669,8,
        45,1,45,1,45,3,45,673,8,45,1,45,1,45,1,45,1,45,5,45,679,8,45,10,
        45,12,45,682,9,45,1,46,1,46,1,46,1,46,1,46,1,46,3,46,690,8,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,5,46,702,8,46,10,
        46,12,46,705,9,46,1,46,3,46,708,8,46,1,46,1,46,3,46,712,8,46,1,47,
        1,47,1,47,1,47,1,47,3,47,719,8,47,1,47,1,47,3,47,723,8,47,1,47,1,
        47,1,48,1,48,1,48,1,48,5,48,731,8,48,10,48,12,48,734,9,48,1,48,1,
        48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,5,50,745,8,50,10,50,12,50,
        748,9,50,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,52,5,52,758,8,52,10,
        52,12,52,761,9,52,1,53,1,53,1,53,1,53,1,54,1,54,3,54,769,8,54,1,
        54,1,54,1,54,3,54,774,8,54,1,54,3,54,777,8,54,1,55,1,55,1,55,3,55,
        782,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,791,8,56,1,57,1,
        57,1,58,1,58,1,58,1,58,5,58,799,8,58,10,58,12,58,802,9,58,1,58,1,
        58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,812,8,58,1,59,1,59,5,59,816,
        8,59,10,59,12,59,819,9,59,1,59,1,59,1,59,1,817,1,84,60,0,2,4,6,8,
        10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
        54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
        98,100,102,104,106,108,110,112,114,116,118,0,7,2,0,64,64,77,77,2,
        0,8,8,14,14,1,0,23,30,2,0,16,17,44,50,3,0,22,22,51,54,70,70,2,0,
        64,65,77,77,1,0,61,62,912,0,123,1,0,0,0,2,135,1,0,0,0,4,138,1,0,
        0,0,6,146,1,0,0,0,8,190,1,0,0,0,10,205,1,0,0,0,12,208,1,0,0,0,14,
        215,1,0,0,0,16,218,1,0,0,0,18,222,1,0,0,0,20,230,1,0,0,0,22,237,
        1,0,0,0,24,245,1,0,0,0,26,248,1,0,0,0,28,262,1,0,0,0,30,271,1,0,
        0,0,32,294,1,0,0,0,34,296,1,0,0,0,36,300,1,0,0,0,38,312,1,0,0,0,
        40,319,1,0,0,0,42,330,1,0,0,0,44,351,1,0,0,0,46,360,1,0,0,0,48,370,
        1,0,0,0,50,375,1,0,0,0,52,378,1,0,0,0,54,388,1,0,0,0,56,441,1,0,
        0,0,58,443,1,0,0,0,60,484,1,0,0,0,62,486,1,0,0,0,64,491,1,0,0,0,
        66,509,1,0,0,0,68,511,1,0,0,0,70,537,1,0,0,0,72,539,1,0,0,0,74,544,
        1,0,0,0,76,550,1,0,0,0,78,557,1,0,0,0,80,566,1,0,0,0,82,568,1,0,
        0,0,84,602,1,0,0,0,86,636,1,0,0,0,88,646,1,0,0,0,90,649,1,0,0,0,
        92,711,1,0,0,0,94,713,1,0,0,0,96,726,1,0,0,0,98,737,1,0,0,0,100,
        741,1,0,0,0,102,752,1,0,0,0,104,754,1,0,0,0,106,762,1,0,0,0,108,
        776,1,0,0,0,110,778,1,0,0,0,112,790,1,0,0,0,114,792,1,0,0,0,116,
        811,1,0,0,0,118,813,1,0,0,0,120,122,3,2,1,0,121,120,1,0,0,0,122,
        125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,1,1,0,0,0,125,123,
        1,0,0,0,126,136,3,30,15,0,127,136,3,26,13,0,128,136,3,16,8,0,129,
        136,3,6,3,0,130,136,3,4,2,0,131,136,3,40,20,0,132,136,3,42,21,0,
        133,136,3,46,23,0,134,136,3,64,32,0,135,126,1,0,0,0,135,127,1,0,
        0,0,135,128,1,0,0,0,135,129,1,0,0,0,135,130,1,0,0,0,135,131,1,0,
        0,0,135,132,1,0,0,0,135,133,1,0,0,0,135,134,1,0,0,0,136,3,1,0,0,
        0,137,139,3,14,7,0,138,137,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,
        0,140,141,5,1,0,0,141,142,5,64,0,0,142,143,5,2,0,0,143,144,3,50,
        25,0,144,145,5,3,0,0,145,5,1,0,0,0,146,147,5,4,0,0,147,148,5,79,
        0,0,148,152,5,5,0,0,149,151,3,8,4,0,150,149,1,0,0,0,151,154,1,0,
        0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,152,1,0,
        0,0,155,156,5,6,0,0,156,7,1,0,0,0,157,159,3,14,7,0,158,157,1,0,0,
        0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,5,1,0,0,161,162,5,64,0,
        0,162,191,5,3,0,0,163,165,3,14,7,0,164,163,1,0,0,0,164,165,1,0,0,
        0,165,166,1,0,0,0,166,168,5,7,0,0,167,169,5,8,0,0,168,167,1,0,0,
        0,168,169,1,0,0,0,169,170,1,0,0,0,170,171,5,64,0,0,171,172,5,78,
        0,0,172,173,3,50,25,0,173,174,5,3,0,0,174,191,1,0,0,0,175,177,3,
        14,7,0,176,175,1,0,0,0,176,177,1,0,0,0,177,178,1,0,0,0,178,179,5,
        9,0,0,179,180,5,64,0,0,180,182,5,75,0,0,181,183,3,10,5,0,182,181,
        1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,187,5,76,0,0,185,186,
        5,10,0,0,186,188,3,50,25,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,
        1,0,0,0,189,191,5,3,0,0,190,158,1,0,0,0,190,164,1,0,0,0,190,176,
        1,0,0,0,191,9,1,0,0,0,192,197,3,12,6,0,193,194,5,74,0,0,194,196,
        3,12,6,0,195,193,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,
        1,0,0,0,198,202,1,0,0,0,199,197,1,0,0,0,200,201,5,74,0,0,201,203,
        5,80,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,206,1,0,0,0,204,206,
        5,80,0,0,205,192,1,0,0,0,205,204,1,0,0,0,206,11,1,0,0,0,207,209,
        7,0,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,213,
        5,78,0,0,211,214,3,50,25,0,212,214,5,80,0,0,213,211,1,0,0,0,213,
        212,1,0,0,0,214,13,1,0,0,0,215,216,5,11,0,0,216,15,1,0,0,0,217,219,
        3,18,9,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,221,
        1,0,0,0,221,17,1,0,0,0,222,224,5,71,0,0,223,225,5,69,0,0,224,223,
        1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,72,0,0,227,228,
        3,20,10,0,228,229,5,73,0,0,229,19,1,0,0,0,230,235,5,64,0,0,231,232,
        5,75,0,0,232,233,3,22,11,0,233,234,5,76,0,0,234,236,1,0,0,0,235,
        231,1,0,0,0,235,236,1,0,0,0,236,21,1,0,0,0,237,242,3,24,12,0,238,
        239,5,74,0,0,239,241,3,24,12,0,240,238,1,0,0,0,241,244,1,0,0,0,242,
        240,1,0,0,0,242,243,1,0,0,0,243,23,1,0,0,0,244,242,1,0,0,0,245,246,
        5,64,0,0,246,25,1,0,0,0,247,249,3,14,7,0,248,247,1,0,0,0,248,249,
        1,0,0,0,249,250,1,0,0,0,250,251,5,12,0,0,251,252,5,64,0,0,252,256,
        5,5,0,0,253,255,3,28,14,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,
        1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,256,1,0,0,0,259,260,
        5,6,0,0,260,27,1,0,0,0,261,263,3,14,7,0,262,261,1,0,0,0,262,263,
        1,0,0,0,263,264,1,0,0,0,264,265,5,64,0,0,265,266,5,78,0,0,266,268,
        3,50,25,0,267,269,5,74,0,0,268,267,1,0,0,0,268,269,1,0,0,0,269,29,
        1,0,0,0,270,272,3,14,7,0,271,270,1,0,0,0,271,272,1,0,0,0,272,274,
        1,0,0,0,273,275,3,32,16,0,274,273,1,0,0,0,274,275,1,0,0,0,275,277,
        1,0,0,0,276,278,3,34,17,0,277,276,1,0,0,0,277,278,1,0,0,0,278,279,
        1,0,0,0,279,280,5,9,0,0,280,281,5,64,0,0,281,283,5,75,0,0,282,284,
        3,36,18,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,287,
        5,76,0,0,286,288,5,10,0,0,287,286,1,0,0,0,287,288,1,0,0,0,288,290,
        1,0,0,0,289,291,3,50,25,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,
        1,0,0,0,292,293,3,58,29,0,293,31,1,0,0,0,294,295,5,13,0,0,295,33,
        1,0,0,0,296,298,5,4,0,0,297,299,5,79,0,0,298,297,1,0,0,0,298,299,
        1,0,0,0,299,35,1,0,0,0,300,305,3,38,19,0,301,302,5,74,0,0,302,304,
        3,38,19,0,303,301,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,
        1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,308,310,5,74,0,0,309,308,
        1,0,0,0,309,310,1,0,0,0,310,37,1,0,0,0,311,313,5,8,0,0,312,311,1,
        0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,5,64,0,0,315,316,5,
        78,0,0,316,317,3,50,25,0,317,39,1,0,0,0,318,320,3,14,7,0,319,318,
        1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,322,5,14,0,0,322,323,
        5,64,0,0,323,324,5,78,0,0,324,325,3,50,25,0,325,326,5,2,0,0,326,
        327,3,84,42,0,327,328,5,3,0,0,328,41,1,0,0,0,329,331,3,14,7,0,330,
        329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,5,15,0,0,333,
        348,5,64,0,0,334,335,5,78,0,0,335,336,3,50,25,0,336,337,5,2,0,0,
        337,338,3,84,42,0,338,339,5,3,0,0,339,349,1,0,0,0,340,344,5,5,0,
        0,341,343,3,44,22,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,
        0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,349,5,6,
        0,0,348,334,1,0,0,0,348,340,1,0,0,0,349,43,1,0,0,0,350,352,3,14,
        7,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,354,5,64,
        0,0,354,355,5,78,0,0,355,357,3,50,25,0,356,358,5,74,0,0,357,356,
        1,0,0,0,357,358,1,0,0,0,358,45,1,0,0,0,359,361,3,14,7,0,360,359,
        1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,0,362,363,5,13,0,0,363,364,
        5,64,0,0,364,365,5,78,0,0,365,366,3,50,25,0,366,367,5,2,0,0,367,
        368,3,84,42,0,368,369,5,3,0,0,369,47,1,0,0,0,370,371,5,16,0,0,371,
        372,3,50,25,0,372,49,1,0,0,0,373,376,3,56,28,0,374,376,3,54,27,0,
        375,373,1,0,0,0,375,374,1,0,0,0,376,51,1,0,0,0,377,379,5,68,0,0,
        378,377,1,0,0,0,378,379,1,0,0,0,379,380,1,0,0,0,380,385,5,64,0,0,
        381,382,5,68,0,0,382,384,5,64,0,0,383,381,1,0,0,0,384,387,1,0,0,
        0,385,383,1,0,0,0,385,386,1,0,0,0,386,53,1,0,0,0,387,385,1,0,0,0,
        388,389,5,17,0,0,389,390,7,1,0,0,390,391,3,50,25,0,391,55,1,0,0,
        0,392,442,5,18,0,0,393,442,5,19,0,0,394,442,5,20,0,0,395,442,5,21,
        0,0,396,408,3,52,26,0,397,398,5,22,0,0,398,403,3,50,25,0,399,400,
        5,74,0,0,400,402,3,50,25,0,401,399,1,0,0,0,402,405,1,0,0,0,403,401,
        1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,403,1,0,0,0,406,407,
        5,70,0,0,407,409,1,0,0,0,408,397,1,0,0,0,408,409,1,0,0,0,409,442,
        1,0,0,0,410,422,5,64,0,0,411,412,5,22,0,0,412,417,3,50,25,0,413,
        414,5,74,0,0,414,416,3,50,25,0,415,413,1,0,0,0,416,419,1,0,0,0,417,
        415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,417,1,0,0,0,420,
        421,5,70,0,0,421,423,1,0,0,0,422,411,1,0,0,0,422,423,1,0,0,0,423,
        442,1,0,0,0,424,425,5,16,0,0,425,442,3,50,25,0,426,428,3,52,26,0,
        427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,430,5,72,0,0,
        430,431,3,50,25,0,431,432,5,3,0,0,432,433,5,65,0,0,433,434,5,73,
        0,0,434,442,1,0,0,0,435,442,3,52,26,0,436,437,5,72,0,0,437,438,3,
        50,25,0,438,439,5,73,0,0,439,442,1,0,0,0,440,442,5,64,0,0,441,392,
        1,0,0,0,441,393,1,0,0,0,441,394,1,0,0,0,441,395,1,0,0,0,441,396,
        1,0,0,0,441,410,1,0,0,0,441,424,1,0,0,0,441,427,1,0,0,0,441,435,
        1,0,0,0,441,436,1,0,0,0,441,440,1,0,0,0,442,57,1,0,0,0,443,447,5,
        5,0,0,444,446,3,60,30,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,
        1,0,0,0,447,448,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,450,452,
        3,80,40,0,451,450,1,0,0,0,451,452,1,0,0,0,452,453,1,0,0,0,453,454,
        5,6,0,0,454,59,1,0,0,0,455,485,3,68,34,0,456,485,3,64,32,0,457,485,
        3,72,36,0,458,459,5,64,0,0,459,485,5,3,0,0,460,461,3,84,42,0,461,
        462,7,2,0,0,462,463,3,84,42,0,463,464,5,3,0,0,464,485,1,0,0,0,465,
        485,3,74,37,0,466,485,3,76,38,0,467,485,3,78,39,0,468,485,3,62,31,
        0,469,485,3,82,41,0,470,471,5,31,0,0,471,485,5,3,0,0,472,473,5,32,
        0,0,473,485,5,3,0,0,474,475,5,33,0,0,475,476,3,84,42,0,476,478,5,
        5,0,0,477,479,3,100,50,0,478,477,1,0,0,0,479,480,1,0,0,0,480,478,
        1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,483,5,6,0,0,483,485,
        1,0,0,0,484,455,1,0,0,0,484,456,1,0,0,0,484,457,1,0,0,0,484,458,
        1,0,0,0,484,460,1,0,0,0,484,465,1,0,0,0,484,466,1,0,0,0,484,467,
        1,0,0,0,484,468,1,0,0,0,484,469,1,0,0,0,484,470,1,0,0,0,484,472,
        1,0,0,0,484,474,1,0,0,0,485,61,1,0,0,0,486,487,5,34,0,0,487,488,
        3,84,42,0,488,489,3,58,29,0,489,63,1,0,0,0,490,492,3,14,7,0,491,
        490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,495,5,7,0,0,494,
        496,5,8,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,
        498,5,64,0,0,498,501,5,78,0,0,499,502,3,50,25,0,500,502,5,64,0,0,
        501,499,1,0,0,0,501,500,1,0,0,0,502,503,1,0,0,0,503,504,5,2,0,0,
        504,505,3,66,33,0,505,506,5,3,0,0,506,65,1,0,0,0,507,510,3,84,42,
        0,508,510,3,58,29,0,509,507,1,0,0,0,509,508,1,0,0,0,510,67,1,0,0,
        0,511,512,5,35,0,0,512,513,3,70,35,0,513,514,5,2,0,0,514,515,3,84,
        42,0,515,516,5,3,0,0,516,69,1,0,0,0,517,519,5,36,0,0,518,520,5,8,
        0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,524,5,64,
        0,0,522,523,5,78,0,0,523,525,3,50,25,0,524,522,1,0,0,0,524,525,1,
        0,0,0,525,538,1,0,0,0,526,527,5,8,0,0,527,530,5,64,0,0,528,529,5,
        78,0,0,529,531,3,50,25,0,530,528,1,0,0,0,530,531,1,0,0,0,531,538,
        1,0,0,0,532,535,5,64,0,0,533,534,5,78,0,0,534,536,3,50,25,0,535,
        533,1,0,0,0,535,536,1,0,0,0,536,538,1,0,0,0,537,517,1,0,0,0,537,
        526,1,0,0,0,537,532,1,0,0,0,538,71,1,0,0,0,539,540,3,84,42,0,540,
        541,5,2,0,0,541,542,3,84,42,0,542,543,5,3,0,0,543,73,1,0,0,0,544,
        545,5,37,0,0,545,546,5,64,0,0,546,547,5,38,0,0,547,548,3,84,42,0,
        548,549,3,58,29,0,549,75,1,0,0,0,550,551,5,39,0,0,551,552,3,84,42,
        0,552,555,3,58,29,0,553,554,5,40,0,0,554,556,3,58,29,0,555,553,1,
        0,0,0,555,556,1,0,0,0,556,77,1,0,0,0,557,558,3,84,42,0,558,559,5,
        3,0,0,559,79,1,0,0,0,560,562,5,41,0,0,561,563,3,84,42,0,562,561,
        1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,567,5,3,0,0,565,567,
        3,84,42,0,566,560,1,0,0,0,566,565,1,0,0,0,567,81,1,0,0,0,568,569,
        5,42,0,0,569,570,3,58,29,0,570,83,1,0,0,0,571,572,6,42,-1,0,572,
        603,3,90,45,0,573,603,3,112,56,0,574,603,3,92,46,0,575,576,5,17,
        0,0,576,603,3,84,42,15,577,603,3,106,53,0,578,603,3,88,44,0,579,
        580,3,52,26,0,580,581,5,68,0,0,581,582,5,22,0,0,582,583,3,50,25,
        0,583,584,5,43,0,0,584,603,1,0,0,0,585,586,5,69,0,0,586,603,3,84,
        42,10,587,588,5,64,0,0,588,589,5,69,0,0,589,591,5,75,0,0,590,592,
        3,104,52,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,603,
        5,76,0,0,594,603,3,86,43,0,595,596,5,16,0,0,596,597,5,8,0,0,597,
        603,3,84,42,2,598,599,5,75,0,0,599,600,3,84,42,0,600,601,5,76,0,
        0,601,603,1,0,0,0,602,571,1,0,0,0,602,573,1,0,0,0,602,574,1,0,0,
        0,602,575,1,0,0,0,602,577,1,0,0,0,602,578,1,0,0,0,602,579,1,0,0,
        0,602,585,1,0,0,0,602,587,1,0,0,0,602,594,1,0,0,0,602,595,1,0,0,
        0,602,598,1,0,0,0,603,633,1,0,0,0,604,605,10,9,0,0,605,606,7,3,0,
        0,606,632,3,84,42,10,607,608,10,8,0,0,608,609,7,4,0,0,609,632,3,
        84,42,9,610,611,10,7,0,0,611,612,5,55,0,0,612,632,3,84,42,8,613,
        614,10,6,0,0,614,615,7,2,0,0,615,632,3,84,42,7,616,617,10,11,0,0,
        617,618,5,72,0,0,618,619,3,84,42,0,619,620,5,73,0,0,620,632,1,0,
        0,0,621,622,10,4,0,0,622,623,5,56,0,0,623,628,3,50,25,0,624,625,
        5,56,0,0,625,627,3,50,25,0,626,624,1,0,0,0,627,630,1,0,0,0,628,626,
        1,0,0,0,628,629,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,631,604,
        1,0,0,0,631,607,1,0,0,0,631,610,1,0,0,0,631,613,1,0,0,0,631,616,
        1,0,0,0,631,621,1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,
        1,0,0,0,634,85,1,0,0,0,635,633,1,0,0,0,636,640,5,5,0,0,637,639,3,
        60,30,0,638,637,1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,641,
        1,0,0,0,641,643,1,0,0,0,642,640,1,0,0,0,643,644,3,84,42,0,644,645,
        5,6,0,0,645,87,1,0,0,0,646,647,5,16,0,0,647,648,3,84,42,0,648,89,
        1,0,0,0,649,680,3,92,46,0,650,657,5,21,0,0,651,653,5,75,0,0,652,
        654,3,104,52,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,
        657,5,76,0,0,656,650,1,0,0,0,656,651,1,0,0,0,657,679,1,0,0,0,658,
        659,5,57,0,0,659,661,5,64,0,0,660,658,1,0,0,0,661,662,1,0,0,0,662,
        660,1,0,0,0,662,663,1,0,0,0,663,679,1,0,0,0,664,665,5,57,0,0,665,
        672,5,64,0,0,666,668,5,75,0,0,667,669,3,104,52,0,668,667,1,0,0,0,
        668,669,1,0,0,0,669,670,1,0,0,0,670,673,5,76,0,0,671,673,5,21,0,
        0,672,666,1,0,0,0,672,671,1,0,0,0,673,679,1,0,0,0,674,675,5,72,0,
        0,675,676,3,84,42,0,676,677,5,73,0,0,677,679,1,0,0,0,678,656,1,0,
        0,0,678,660,1,0,0,0,678,664,1,0,0,0,678,674,1,0,0,0,679,682,1,0,
        0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,91,1,0,0,0,682,680,1,0,0,
        0,683,712,3,112,56,0,684,712,5,64,0,0,685,712,3,94,47,0,686,687,
        5,64,0,0,687,689,5,75,0,0,688,690,3,104,52,0,689,688,1,0,0,0,689,
        690,1,0,0,0,690,691,1,0,0,0,691,712,5,76,0,0,692,693,5,75,0,0,693,
        694,3,84,42,0,694,695,5,76,0,0,695,712,1,0,0,0,696,697,5,64,0,0,
        697,698,5,5,0,0,698,703,3,98,49,0,699,700,5,74,0,0,700,702,3,98,
        49,0,701,699,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,
        0,0,704,707,1,0,0,0,705,703,1,0,0,0,706,708,5,74,0,0,707,706,1,0,
        0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,710,5,6,0,0,710,712,1,0,
        0,0,711,683,1,0,0,0,711,684,1,0,0,0,711,685,1,0,0,0,711,686,1,0,
        0,0,711,692,1,0,0,0,711,696,1,0,0,0,712,93,1,0,0,0,713,714,5,68,
        0,0,714,715,3,52,26,0,715,716,5,68,0,0,716,718,5,64,0,0,717,719,
        3,96,48,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,722,
        5,75,0,0,721,723,3,104,52,0,722,721,1,0,0,0,722,723,1,0,0,0,723,
        724,1,0,0,0,724,725,5,76,0,0,725,95,1,0,0,0,726,727,5,22,0,0,727,
        732,3,50,25,0,728,729,5,74,0,0,729,731,3,50,25,0,730,728,1,0,0,0,
        731,734,1,0,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,
        734,732,1,0,0,0,735,736,5,70,0,0,736,97,1,0,0,0,737,738,5,64,0,0,
        738,739,5,78,0,0,739,740,3,84,42,0,740,99,1,0,0,0,741,746,3,102,
        51,0,742,743,5,58,0,0,743,745,3,102,51,0,744,742,1,0,0,0,745,748,
        1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,746,
        1,0,0,0,749,750,5,59,0,0,750,751,3,58,29,0,751,101,1,0,0,0,752,753,
        7,5,0,0,753,103,1,0,0,0,754,759,3,84,42,0,755,756,5,74,0,0,756,758,
        3,84,42,0,757,755,1,0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,759,760,
        1,0,0,0,760,105,1,0,0,0,761,759,1,0,0,0,762,763,5,64,0,0,763,764,
        5,69,0,0,764,765,3,108,54,0,765,107,1,0,0,0,766,768,5,72,0,0,767,
        769,3,110,55,0,768,767,1,0,0,0,768,769,1,0,0,0,769,770,1,0,0,0,770,
        777,5,73,0,0,771,773,5,75,0,0,772,774,3,110,55,0,773,772,1,0,0,0,
        773,774,1,0,0,0,774,775,1,0,0,0,775,777,5,76,0,0,776,766,1,0,0,0,
        776,771,1,0,0,0,777,109,1,0,0,0,778,781,3,84,42,0,779,780,5,3,0,
        0,780,782,3,84,42,0,781,779,1,0,0,0,781,782,1,0,0,0,782,111,1,0,
        0,0,783,791,3,116,58,0,784,791,5,65,0,0,785,791,5,66,0,0,786,791,
        5,63,0,0,787,791,3,118,59,0,788,791,3,114,57,0,789,791,5,67,0,0,
        790,783,1,0,0,0,790,784,1,0,0,0,790,785,1,0,0,0,790,786,1,0,0,0,
        790,787,1,0,0,0,790,788,1,0,0,0,790,789,1,0,0,0,791,113,1,0,0,0,
        792,793,7,6,0,0,793,115,1,0,0,0,794,795,5,72,0,0,795,800,3,84,42,
        0,796,797,5,74,0,0,797,799,3,84,42,0,798,796,1,0,0,0,799,802,1,0,
        0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,803,1,0,0,0,802,800,1,0,
        0,0,803,804,5,73,0,0,804,812,1,0,0,0,805,806,5,72,0,0,806,807,3,
        84,42,0,807,808,5,3,0,0,808,809,3,84,42,0,809,810,5,73,0,0,810,812,
        1,0,0,0,811,794,1,0,0,0,811,805,1,0,0,0,812,117,1,0,0,0,813,817,
        5,60,0,0,814,816,9,0,0,0,815,814,1,0,0,0,816,819,1,0,0,0,817,818,
        1,0,0,0,817,815,1,0,0,0,818,820,1,0,0,0,819,817,1,0,0,0,820,821,
        5,60,0,0,821,119,1,0,0,0,96,123,135,138,152,158,164,168,176,182,
        187,190,197,202,205,208,213,220,224,235,242,248,256,262,268,271,
        274,277,283,287,290,298,305,309,312,319,330,344,348,351,357,360,
        375,378,385,403,408,417,422,427,441,447,451,480,484,491,495,501,
        509,519,524,530,535,537,555,562,566,591,602,628,631,633,640,653,
        656,662,668,672,678,680,689,703,707,711,718,722,732,746,759,768,
        773,776,781,790,800,811,817
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'extern'", "'{'", 
                     "'}'", "'static'", "'mut'", "'fn'", "'->'", "'pub'", 
                     "'struct'", "'unsafe'", "'const'", "'union'", "'&'", 
                     "'*'", "'i32'", "'String'", "'bool'", "'()'", "'<'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'break'", "'continue'", "'match'", "'while'", 
                     "'let'", "'ref'", "'for'", "'in'", "'if'", "'else'", 
                     "'return'", "'loop'", "'>()'", "'/'", "'%'", "'+'", 
                     "'-'", "'>>'", "'>='", "'<='", "'=='", "'!='", "'||'", 
                     "'&&'", "'..'", "'as'", "'.'", "'|'", "'=>'", "'\"'", 
                     "'true'", "'false'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'::'", "'!'", "'>'", "'#'", 
                     "'['", "']'", "','", "'('", "')'", "'_'", "':'", "<INVALID>", 
                     "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "TRUE", "FALSE", "Binary", "Identifier", 
                      "Number", "SignedNumber", "CHAR_LITERAL", "DOUBLE_COLON", 
                      "EXCL", "GT", "POUND", "LBRACK", "RBRACK", "COMMA", 
                      "LPAREN", "RPAREN", "UNDERSCORE", "COLON", "STRING_LITERAL", 
                      "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_typeAlias = 2
    RULE_externBlock = 3
    RULE_externItem = 4
    RULE_externParams = 5
    RULE_externParam = 6
    RULE_visibility = 7
    RULE_attributes = 8
    RULE_innerAttribute = 9
    RULE_attribute = 10
    RULE_attrArgs = 11
    RULE_attrArg = 12
    RULE_structDef = 13
    RULE_structField = 14
    RULE_functionDef = 15
    RULE_unsafeModifier = 16
    RULE_externAbi = 17
    RULE_paramList = 18
    RULE_param = 19
    RULE_constDef = 20
    RULE_unionDef = 21
    RULE_unionField = 22
    RULE_unsafeDef = 23
    RULE_referenceType = 24
    RULE_type = 25
    RULE_typePath = 26
    RULE_pointerType = 27
    RULE_basicType = 28
    RULE_block = 29
    RULE_statement = 30
    RULE_whileStmt = 31
    RULE_staticVarDecl = 32
    RULE_initializer = 33
    RULE_letStmt = 34
    RULE_varDef = 35
    RULE_assignStmt = 36
    RULE_forStmt = 37
    RULE_ifStmt = 38
    RULE_exprStmt = 39
    RULE_returnStmt = 40
    RULE_loopStmt = 41
    RULE_expression = 42
    RULE_expressionBlock = 43
    RULE_borrowExpression = 44
    RULE_postfixExpression = 45
    RULE_primaryExpression = 46
    RULE_qualifiedFunctionCall = 47
    RULE_genericArgs = 48
    RULE_structLiteralField = 49
    RULE_matchArm = 50
    RULE_matchPattern = 51
    RULE_argumentList = 52
    RULE_macroCall = 53
    RULE_macroArgs = 54
    RULE_macroInner = 55
    RULE_literal = 56
    RULE_booleanLiteral = 57
    RULE_arrayLiteral = 58
    RULE_stringLiteral = 59

    ruleNames =  [ "program", "topLevelItem", "typeAlias", "externBlock", 
                   "externItem", "externParams", "externParam", "visibility", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "structDef", "structField", "functionDef", 
                   "unsafeModifier", "externAbi", "paramList", "param", 
                   "constDef", "unionDef", "unionField", "unsafeDef", "referenceType", 
                   "type", "typePath", "pointerType", "basicType", "block", 
                   "statement", "whileStmt", "staticVarDecl", "initializer", 
                   "letStmt", "varDef", "assignStmt", "forStmt", "ifStmt", 
                   "exprStmt", "returnStmt", "loopStmt", "expression", "expressionBlock", 
                   "borrowExpression", "postfixExpression", "primaryExpression", 
                   "qualifiedFunctionCall", "genericArgs", "structLiteralField", 
                   "matchArm", "matchPattern", "argumentList", "macroCall", 
                   "macroArgs", "macroInner", "literal", "booleanLiteral", 
                   "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    TRUE=61
    FALSE=62
    Binary=63
    Identifier=64
    Number=65
    SignedNumber=66
    CHAR_LITERAL=67
    DOUBLE_COLON=68
    EXCL=69
    GT=70
    POUND=71
    LBRACK=72
    RBRACK=73
    COMMA=74
    LPAREN=75
    RPAREN=76
    UNDERSCORE=77
    COLON=78
    STRING_LITERAL=79
    ELLIPSIS=80
    WS=81
    COMMENT=82

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 64146) != 0) or _la==71:
                self.state = 120
                self.topLevelItem()
                self.state = 125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 126
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 127
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 128
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 129
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 130
                self.typeAlias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 131
                self.constDef()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 132
                self.unionDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 133
                self.unsafeDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 134
                self.staticVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 137
                self.visibility()


            self.state = 140
            self.match(RustParser.T__0)
            self.state = 141
            self.match(RustParser.Identifier)
            self.state = 142
            self.match(RustParser.T__1)
            self.state = 143
            self.type_()
            self.state = 144
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 146
            self.match(RustParser.T__3)
            self.state = 147
            self.match(RustParser.STRING_LITERAL)
            self.state = 148
            self.match(RustParser.T__4)
            self.state = 152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2690) != 0):
                self.state = 149
                self.externItem()
                self.state = 154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 155
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 157
                    self.visibility()


                self.state = 160
                self.match(RustParser.T__0)
                self.state = 161
                self.match(RustParser.Identifier)
                self.state = 162
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 163
                    self.visibility()


                self.state = 166
                self.match(RustParser.T__6)
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 167
                    self.match(RustParser.T__7)


                self.state = 170
                self.match(RustParser.Identifier)
                self.state = 171
                self.match(RustParser.COLON)
                self.state = 172
                self.type_()
                self.state = 173
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 175
                    self.visibility()


                self.state = 178
                self.match(RustParser.T__8)
                self.state = 179
                self.match(RustParser.Identifier)
                self.state = 180
                self.match(RustParser.LPAREN)
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 90113) != 0):
                    self.state = 181
                    self.externParams()


                self.state = 184
                self.match(RustParser.RPAREN)
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 185
                    self.match(RustParser.T__9)
                    self.state = 186
                    self.type_()


                self.state = 189
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64, 77, 78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 192
                self.externParam()
                self.state = 197
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 193
                        self.match(RustParser.COMMA)
                        self.state = 194
                        self.externParam() 
                    self.state = 199
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 200
                    self.match(RustParser.COMMA)
                    self.state = 201
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 204
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64 or _la==77:
                self.state = 207
                _la = self._input.LA(1)
                if not(_la==64 or _la==77):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 210
            self.match(RustParser.COLON)
            self.state = 213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 17, 18, 19, 20, 21, 64, 68, 72]:
                self.state = 211
                self.type_()
                pass
            elif token in [80]:
                self.state = 212
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(RustParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 217
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 220 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(RustParser.POUND)

            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 223
                self.match(RustParser.EXCL)


            self.state = 226
            self.match(RustParser.LBRACK)
            self.state = 227
            self.attribute()
            self.state = 228
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.match(RustParser.Identifier)
            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 231
                self.match(RustParser.LPAREN)
                self.state = 232
                self.attrArgs()
                self.state = 233
                self.match(RustParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.attrArg()
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74:
                self.state = 238
                self.match(RustParser.COMMA)
                self.state = 239
                self.attrArg()
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attrArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(RustParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 247
                self.visibility()


            self.state = 250
            self.match(RustParser.T__11)
            self.state = 251
            self.match(RustParser.Identifier)
            self.state = 252
            self.match(RustParser.T__4)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==64:
                self.state = 253
                self.structField()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 259
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 261
                self.visibility()


            self.state = 264
            self.match(RustParser.Identifier)
            self.state = 265
            self.match(RustParser.COLON)
            self.state = 266
            self.type_()
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 267
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 270
                self.visibility()


            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 273
                self.unsafeModifier()


            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 276
                self.externAbi()


            self.state = 279
            self.match(RustParser.T__8)
            self.state = 280
            self.match(RustParser.Identifier)
            self.state = 281
            self.match(RustParser.LPAREN)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==64:
                self.state = 282
                self.paramList()


            self.state = 285
            self.match(RustParser.RPAREN)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 286
                self.match(RustParser.T__9)


            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 76842668642009151) != 0):
                self.state = 289
                self.type_()


            self.state = 292
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(RustParser.T__3)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 297
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.param()
            self.state = 305
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 301
                    self.match(RustParser.COMMA)
                    self.state = 302
                    self.param() 
                self.state = 307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 308
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 311
                self.match(RustParser.T__7)


            self.state = 314
            self.match(RustParser.Identifier)
            self.state = 315
            self.match(RustParser.COLON)
            self.state = 316
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 318
                self.visibility()


            self.state = 321
            self.match(RustParser.T__13)
            self.state = 322
            self.match(RustParser.Identifier)
            self.state = 323
            self.match(RustParser.COLON)
            self.state = 324
            self.type_()
            self.state = 325
            self.match(RustParser.T__1)
            self.state = 326
            self.expression(0)
            self.state = 327
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 329
                self.visibility()


            self.state = 332
            self.match(RustParser.T__14)
            self.state = 333
            self.match(RustParser.Identifier)
            self.state = 348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.state = 334
                self.match(RustParser.COLON)
                self.state = 335
                self.type_()
                self.state = 336
                self.match(RustParser.T__1)
                self.state = 337
                self.expression(0)
                self.state = 338
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 340
                self.match(RustParser.T__4)
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11 or _la==64:
                    self.state = 341
                    self.unionField()
                    self.state = 346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 347
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 350
                self.visibility()


            self.state = 353
            self.match(RustParser.Identifier)
            self.state = 354
            self.match(RustParser.COLON)
            self.state = 355
            self.type_()
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 356
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 359
                self.visibility()


            self.state = 362
            self.match(RustParser.T__12)
            self.state = 363
            self.match(RustParser.Identifier)
            self.state = 364
            self.match(RustParser.COLON)
            self.state = 365
            self.type_()
            self.state = 366
            self.match(RustParser.T__1)
            self.state = 367
            self.expression(0)
            self.state = 368
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceType" ):
                return visitor.visitReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def referenceType(self):

        localctx = RustParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_referenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(RustParser.T__15)
            self.state = 371
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_type)
        try:
            self.state = 375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 18, 19, 20, 21, 64, 68, 72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.basicType()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 377
                self.match(RustParser.DOUBLE_COLON)


            self.state = 380
            self.match(RustParser.Identifier)
            self.state = 385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 381
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 382
                    self.match(RustParser.Identifier) 
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(RustParser.T__16)
            self.state = 389
            _la = self._input.LA(1)
            if not(_la==8 or _la==14):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 390
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 441
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 392
                self.match(RustParser.T__17)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 393
                self.match(RustParser.T__18)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 394
                self.match(RustParser.T__19)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 395
                self.match(RustParser.T__20)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 396
                self.typePath()
                self.state = 408
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 397
                    self.match(RustParser.T__21)
                    self.state = 398
                    self.type_()
                    self.state = 403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==74:
                        self.state = 399
                        self.match(RustParser.COMMA)
                        self.state = 400
                        self.type_()
                        self.state = 405
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 406
                    self.match(RustParser.GT)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 410
                self.match(RustParser.Identifier)
                self.state = 422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 411
                    self.match(RustParser.T__21)
                    self.state = 412
                    self.type_()
                    self.state = 417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==74:
                        self.state = 413
                        self.match(RustParser.COMMA)
                        self.state = 414
                        self.type_()
                        self.state = 419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 420
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 424
                self.match(RustParser.T__15)
                self.state = 425
                self.type_()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64 or _la==68:
                    self.state = 426
                    self.typePath()


                self.state = 429
                self.match(RustParser.LBRACK)
                self.state = 430
                self.type_()
                self.state = 431
                self.match(RustParser.T__2)
                self.state = 432
                self.match(RustParser.Number)
                self.state = 433
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 435
                self.typePath()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 436
                self.match(RustParser.LBRACK)
                self.state = 437
                self.type_()
                self.state = 438
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 440
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(RustParser.T__4)
            self.state = 447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 444
                    self.statement() 
                self.state = 449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152919305583394784) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2367) != 0):
                self.state = 450
                self.returnStmt()


            self.state = 453
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 457
                self.assignStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 458
                self.match(RustParser.Identifier)
                self.state = 459
                self.match(RustParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 460
                self.expression(0)
                self.state = 461
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2139095040) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 462
                self.expression(0)
                self.state = 463
                self.match(RustParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 465
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 466
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 467
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 468
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 469
                self.loopStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 470
                self.match(RustParser.T__30)
                self.state = 471
                self.match(RustParser.T__2)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 472
                self.match(RustParser.T__31)
                self.state = 473
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 474
                self.match(RustParser.T__32)
                self.state = 475
                self.expression(0)
                self.state = 476
                self.match(RustParser.T__4)
                self.state = 478 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 477
                    self.matchArm()
                    self.state = 480 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8195) != 0)):
                        break

                self.state = 482
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(RustParser.T__33)
            self.state = 487
            self.expression(0)
            self.state = 488
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 490
                self.visibility()


            self.state = 493
            self.match(RustParser.T__6)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 494
                self.match(RustParser.T__7)


            self.state = 497
            self.match(RustParser.Identifier)
            self.state = 498
            self.match(RustParser.COLON)
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 499
                self.type_()
                pass

            elif la_ == 2:
                self.state = 500
                self.match(RustParser.Identifier)
                pass


            self.state = 503
            self.match(RustParser.T__1)
            self.state = 504
            self.initializer()
            self.state = 505
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_initializer)
        try:
            self.state = 509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_letStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(RustParser.T__34)
            self.state = 512
            self.varDef()
            self.state = 513
            self.match(RustParser.T__1)
            self.state = 514
            self.expression(0)
            self.state = 515
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.match(RustParser.T__35)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 518
                    self.match(RustParser.T__7)


                self.state = 521
                self.match(RustParser.Identifier)
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 522
                    self.match(RustParser.COLON)
                    self.state = 523
                    self.type_()


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.match(RustParser.T__7)
                self.state = 527
                self.match(RustParser.Identifier)
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 528
                    self.match(RustParser.COLON)
                    self.state = 529
                    self.type_()


                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 3)
                self.state = 532
                self.match(RustParser.Identifier)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 533
                    self.match(RustParser.COLON)
                    self.state = 534
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.expression(0)
            self.state = 540
            self.match(RustParser.T__1)
            self.state = 541
            self.expression(0)
            self.state = 542
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(RustParser.T__36)
            self.state = 545
            self.match(RustParser.Identifier)
            self.state = 546
            self.match(RustParser.T__37)
            self.state = 547
            self.expression(0)
            self.state = 548
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.match(RustParser.T__38)
            self.state = 551
            self.expression(0)
            self.state = 552
            self.block()
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 553
                self.match(RustParser.T__39)
                self.state = 554
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.expression(0)
            self.state = 558
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 566
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.match(RustParser.T__40)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2367) != 0):
                    self.state = 561
                    self.expression(0)


                self.state = 564
                self.match(RustParser.T__2)
                pass
            elif token in [5, 16, 17, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(RustParser.T__41)
            self.state = 569
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def macroCall(self):
            return self.getTypedRuleContext(RustParser.MacroCallContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 572
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.state = 573
                self.literal()
                pass

            elif la_ == 3:
                self.state = 574
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 575
                self.match(RustParser.T__16)
                self.state = 576
                self.expression(15)
                pass

            elif la_ == 5:
                self.state = 577
                self.macroCall()
                pass

            elif la_ == 6:
                self.state = 578
                self.borrowExpression()
                pass

            elif la_ == 7:
                self.state = 579
                self.typePath()
                self.state = 580
                self.match(RustParser.DOUBLE_COLON)
                self.state = 581
                self.match(RustParser.T__21)
                self.state = 582
                self.type_()
                self.state = 583
                self.match(RustParser.T__42)
                pass

            elif la_ == 8:
                self.state = 585
                self.match(RustParser.EXCL)
                self.state = 586
                self.expression(10)
                pass

            elif la_ == 9:
                self.state = 587
                self.match(RustParser.Identifier)
                self.state = 588
                self.match(RustParser.EXCL)
                self.state = 589
                self.match(RustParser.LPAREN)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2367) != 0):
                    self.state = 590
                    self.argumentList()


                self.state = 593
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 10:
                self.state = 594
                self.expressionBlock()
                pass

            elif la_ == 11:
                self.state = 595
                self.match(RustParser.T__15)
                self.state = 596
                self.match(RustParser.T__7)
                self.state = 597
                self.expression(2)
                pass

            elif la_ == 12:
                self.state = 598
                self.match(RustParser.LPAREN)
                self.state = 599
                self.expression(0)
                self.state = 600
                self.match(RustParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 631
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 604
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 605
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2234207627837440) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 606
                        self.expression(10)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 607
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 608
                        _la = self._input.LA(1)
                        if not(((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & 281483029774337) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 609
                        self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 610
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 611
                        self.match(RustParser.T__54)
                        self.state = 612
                        self.expression(8)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 613
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 614
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2139095040) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 615
                        self.expression(7)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 616
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 617
                        self.match(RustParser.LBRACK)
                        self.state = 618
                        self.expression(0)
                        self.state = 619
                        self.match(RustParser.RBRACK)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 621
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 622
                        self.match(RustParser.T__55)
                        self.state = 623
                        self.type_()
                        self.state = 628
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 624
                                self.match(RustParser.T__55)
                                self.state = 625
                                self.type_() 
                            self.state = 630
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                        pass

             
                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(RustParser.T__4)
            self.state = 640
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 637
                    self.statement() 
                self.state = 642
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 643
            self.expression(0)
            self.state = 644
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(RustParser.T__15)
            self.state = 647
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LBRACK)
            else:
                return self.getToken(RustParser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RBRACK)
            else:
                return self.getToken(RustParser.RBRACK, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.primaryExpression()
            self.state = 680
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 678
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        self.state = 656
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [21]:
                            self.state = 650
                            self.match(RustParser.T__20)
                            pass
                        elif token in [75]:
                            self.state = 651
                            self.match(RustParser.LPAREN)
                            self.state = 653
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2367) != 0):
                                self.state = 652
                                self.argumentList()


                            self.state = 655
                            self.match(RustParser.RPAREN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 660 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 658
                                self.match(RustParser.T__56)
                                self.state = 659
                                self.match(RustParser.Identifier)

                            else:
                                raise NoViableAltException(self)
                            self.state = 662 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 664
                        self.match(RustParser.T__56)
                        self.state = 665
                        self.match(RustParser.Identifier)
                        self.state = 672
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [75]:
                            self.state = 666
                            self.match(RustParser.LPAREN)
                            self.state = 668
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2367) != 0):
                                self.state = 667
                                self.argumentList()


                            self.state = 670
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [21]:
                            self.state = 671
                            self.match(RustParser.T__20)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        self.state = 674
                        self.match(RustParser.LBRACK)
                        self.state = 675
                        self.expression(0)
                        self.state = 676
                        self.match(RustParser.RBRACK)
                        pass

             
                self.state = 682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def qualifiedFunctionCall(self):
            return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 683
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 684
                self.match(RustParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 685
                self.qualifiedFunctionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 686
                self.match(RustParser.Identifier)
                self.state = 687
                self.match(RustParser.LPAREN)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2367) != 0):
                    self.state = 688
                    self.argumentList()


                self.state = 691
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 692
                self.match(RustParser.LPAREN)
                self.state = 693
                self.expression(0)
                self.state = 694
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 696
                self.match(RustParser.Identifier)
                self.state = 697
                self.match(RustParser.T__4)
                self.state = 698
                self.structLiteralField()
                self.state = 703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 699
                        self.match(RustParser.COMMA)
                        self.state = 700
                        self.structLiteralField() 
                    self.state = 705
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 706
                    self.match(RustParser.COMMA)


                self.state = 709
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(RustParser.DOUBLE_COLON)
            self.state = 714
            self.typePath()
            self.state = 715
            self.match(RustParser.DOUBLE_COLON)
            self.state = 716
            self.match(RustParser.Identifier)
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 717
                self.genericArgs()


            self.state = 720
            self.match(RustParser.LPAREN)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2367) != 0):
                self.state = 721
                self.argumentList()


            self.state = 724
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(RustParser.T__21)
            self.state = 727
            self.type_()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74:
                self.state = 728
                self.match(RustParser.COMMA)
                self.state = 729
                self.type_()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 735
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_structLiteralField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(RustParser.Identifier)
            self.state = 738
            self.match(RustParser.COLON)
            self.state = 739
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.matchPattern()
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 742
                self.match(RustParser.T__57)
                self.state = 743
                self.matchPattern()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 749
            self.match(RustParser.T__58)
            self.state = 750
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 8195) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.expression(0)
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==74:
                self.state = 755
                self.match(RustParser.COMMA)
                self.state = 756
                self.expression(0)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(RustParser.Identifier)
            self.state = 763
            self.match(RustParser.EXCL)
            self.state = 764
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.match(RustParser.LBRACK)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2367) != 0):
                    self.state = 767
                    self.macroInner()


                self.state = 770
                self.match(RustParser.RBRACK)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(RustParser.LPAREN)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2367) != 0):
                    self.state = 772
                    self.macroInner()


                self.state = 775
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.expression(0)
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 779
                self.match(RustParser.T__2)
                self.state = 780
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(RustParser.StringLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_literal)
        try:
            self.state = 790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.arrayLiteral()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.match(RustParser.Number)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 785
                self.match(RustParser.SignedNumber)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 4)
                self.state = 786
                self.match(RustParser.Binary)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 5)
                self.state = 787
                self.stringLiteral()
                pass
            elif token in [61, 62]:
                self.enterOuterAlt(localctx, 6)
                self.state = 788
                self.booleanLiteral()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 7)
                self.state = 789
                self.match(RustParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            _la = self._input.LA(1)
            if not(_la==61 or _la==62):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self.match(RustParser.LBRACK)
                self.state = 795
                self.expression(0)
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==74:
                    self.state = 796
                    self.match(RustParser.COMMA)
                    self.state = 797
                    self.expression(0)
                    self.state = 802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 803
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.match(RustParser.LBRACK)
                self.state = 806
                self.expression(0)
                self.state = 807
                self.match(RustParser.T__2)
                self.state = 808
                self.expression(0)
                self.state = 809
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(RustParser.T__59)
            self.state = 817
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 814
                    self.matchWildcard() 
                self.state = 819
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 820
            self.match(RustParser.T__59)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[42] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         




