# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,88,1010,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,1,0,5,0,174,8,0,10,0,12,0,177,9,0,1,1,1,1,1,1,1,1,1,1,1,
        1,3,1,185,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,193,8,2,1,2,1,2,1,2,1,
        3,1,3,1,3,3,3,201,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,209,8,3,1,4,1,
        4,1,4,5,4,214,8,4,10,4,12,4,217,9,4,1,4,3,4,220,8,4,1,5,1,5,1,5,
        1,5,1,5,1,5,3,5,228,8,5,1,6,3,6,231,8,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,4,7,243,8,7,11,7,12,7,244,1,7,1,7,1,8,1,8,1,8,1,
        8,5,8,253,8,8,10,8,12,8,256,9,8,1,8,1,8,1,9,3,9,261,8,9,1,9,1,9,
        1,9,1,9,3,9,267,8,9,1,9,1,9,3,9,271,8,9,1,9,1,9,1,9,1,9,1,9,1,9,
        3,9,279,8,9,1,9,1,9,1,9,1,9,3,9,285,8,9,1,9,1,9,1,9,3,9,290,8,9,
        1,9,3,9,293,8,9,1,10,1,10,1,10,5,10,298,8,10,10,10,12,10,301,9,10,
        1,10,1,10,3,10,305,8,10,1,10,3,10,308,8,10,1,11,3,11,311,8,11,1,
        11,1,11,1,11,3,11,316,8,11,1,12,1,12,1,13,1,13,1,14,1,14,3,14,324,
        8,14,1,15,4,15,327,8,15,11,15,12,15,328,1,16,1,16,3,16,333,8,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        3,17,348,8,17,1,18,1,18,1,18,5,18,353,8,18,10,18,12,18,356,9,18,
        1,19,1,19,1,19,3,19,361,8,19,1,20,1,20,1,21,3,21,366,8,21,1,21,1,
        21,1,21,1,21,5,21,372,8,21,10,21,12,21,375,9,21,1,21,1,21,1,22,3,
        22,380,8,22,1,22,1,22,1,22,1,22,3,22,386,8,22,1,23,1,23,1,23,5,23,
        391,8,23,10,23,12,23,394,9,23,1,23,1,23,1,24,3,24,399,8,24,1,24,
        3,24,402,8,24,1,24,3,24,405,8,24,1,24,1,24,1,24,1,24,1,24,3,24,412,
        8,24,1,24,3,24,415,8,24,1,24,3,24,418,8,24,1,24,3,24,421,8,24,1,
        24,1,24,1,25,1,25,1,25,5,25,428,8,25,10,25,12,25,431,9,25,1,25,3,
        25,434,8,25,1,26,3,26,437,8,26,1,26,3,26,440,8,26,1,26,1,26,1,26,
        3,26,445,8,26,1,27,3,27,448,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,28,3,28,459,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,5,28,471,8,28,10,28,12,28,474,9,28,1,28,3,28,477,8,
        28,1,29,3,29,480,8,29,1,29,1,29,1,29,1,29,3,29,486,8,29,1,30,3,30,
        489,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,3,31,
        501,8,31,1,32,1,32,1,32,3,32,506,8,32,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,520,8,33,10,33,12,33,523,9,
        33,1,33,1,33,3,33,527,8,33,1,33,1,33,1,33,1,33,1,33,5,33,534,8,33,
        10,33,12,33,537,9,33,1,33,1,33,3,33,541,8,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,555,8,33,1,34,1,34,
        1,34,3,34,560,8,34,1,34,1,34,1,34,5,34,565,8,34,10,34,12,34,568,
        9,34,3,34,570,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,5,36,
        580,8,36,10,36,12,36,583,9,36,1,36,3,36,586,8,36,1,36,1,36,1,37,
        1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,612,8,38,1,39,1,39,
        1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
        628,8,40,1,41,3,41,631,8,41,1,41,3,41,634,8,41,1,41,1,41,1,41,3,
        41,639,8,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,
        44,4,44,652,8,44,11,44,12,44,653,1,44,1,44,1,45,1,45,1,45,1,45,1,
        46,1,46,1,46,3,46,665,8,46,1,47,3,47,668,8,47,1,47,1,47,3,47,672,
        8,47,1,47,1,47,1,47,1,47,3,47,678,8,47,1,47,1,47,1,47,1,47,1,48,
        1,48,1,48,1,48,1,48,1,48,5,48,690,8,48,10,48,12,48,693,9,48,1,48,
        1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,
        1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,717,8,51,10,51,12,51,
        720,9,51,1,51,1,51,3,51,724,8,51,1,52,1,52,1,52,1,53,1,53,3,53,731,
        8,53,1,53,1,53,3,53,735,8,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,3,55,763,8,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,791,8,55,10,55,
        12,55,794,9,55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,
        1,57,1,58,1,58,3,58,809,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,
        1,59,4,59,819,8,59,11,59,12,59,820,1,60,3,60,824,8,60,1,60,1,60,
        1,60,1,61,3,61,830,8,61,1,61,3,61,833,8,61,1,61,1,61,1,61,1,61,3,
        61,839,8,61,1,61,3,61,842,8,61,1,61,1,61,3,61,846,8,61,1,62,1,62,
        1,62,1,62,5,62,852,8,62,10,62,12,62,855,9,62,1,63,1,63,1,64,1,64,
        1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,5,68,872,
        8,68,10,68,12,68,875,9,68,1,68,3,68,878,8,68,1,68,1,68,1,69,1,69,
        1,70,1,70,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,5,73,895,
        8,73,10,73,12,73,898,9,73,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,
        3,75,908,8,75,1,76,1,76,1,76,1,76,1,76,1,76,4,76,916,8,76,11,76,
        12,76,917,3,76,920,8,76,1,77,3,77,923,8,77,1,77,1,77,1,78,1,78,1,
        78,1,78,1,78,5,78,932,8,78,10,78,12,78,935,9,78,1,78,1,78,3,78,939,
        8,78,1,79,1,79,1,79,3,79,944,8,79,1,79,3,79,947,8,79,1,80,1,80,1,
        80,5,80,952,8,80,10,80,12,80,955,9,80,1,80,1,80,1,80,1,81,1,81,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,972,8,82,1,
        83,1,83,1,84,3,84,977,8,84,1,84,1,84,1,84,1,84,5,84,983,8,84,10,
        84,12,84,986,9,84,1,84,1,84,1,84,3,84,991,8,84,1,84,1,84,1,84,1,
        84,1,84,1,84,3,84,999,8,84,1,85,1,85,5,85,1003,8,85,10,85,12,85,
        1006,9,85,1,85,1,85,1,85,1,1004,1,110,86,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
        170,0,10,2,0,69,69,84,84,1,0,68,70,2,0,11,11,19,19,1,0,31,38,3,0,
        26,26,49,52,77,77,2,0,18,18,53,55,2,0,21,21,56,59,2,0,58,59,76,76,
        2,0,69,70,84,84,1,0,64,65,1095,0,175,1,0,0,0,2,184,1,0,0,0,4,186,
        1,0,0,0,6,208,1,0,0,0,8,210,1,0,0,0,10,227,1,0,0,0,12,230,1,0,0,
        0,14,238,1,0,0,0,16,248,1,0,0,0,18,292,1,0,0,0,20,307,1,0,0,0,22,
        310,1,0,0,0,24,317,1,0,0,0,26,319,1,0,0,0,28,321,1,0,0,0,30,326,
        1,0,0,0,32,330,1,0,0,0,34,347,1,0,0,0,36,349,1,0,0,0,38,357,1,0,
        0,0,40,362,1,0,0,0,42,365,1,0,0,0,44,379,1,0,0,0,46,387,1,0,0,0,
        48,398,1,0,0,0,50,424,1,0,0,0,52,436,1,0,0,0,54,447,1,0,0,0,56,458,
        1,0,0,0,58,479,1,0,0,0,60,488,1,0,0,0,62,500,1,0,0,0,64,502,1,0,
        0,0,66,554,1,0,0,0,68,569,1,0,0,0,70,571,1,0,0,0,72,577,1,0,0,0,
        74,589,1,0,0,0,76,611,1,0,0,0,78,613,1,0,0,0,80,627,1,0,0,0,82,630,
        1,0,0,0,84,640,1,0,0,0,86,642,1,0,0,0,88,647,1,0,0,0,90,657,1,0,
        0,0,92,664,1,0,0,0,94,667,1,0,0,0,96,683,1,0,0,0,98,698,1,0,0,0,
        100,703,1,0,0,0,102,709,1,0,0,0,104,725,1,0,0,0,106,734,1,0,0,0,
        108,736,1,0,0,0,110,762,1,0,0,0,112,795,1,0,0,0,114,799,1,0,0,0,
        116,806,1,0,0,0,118,818,1,0,0,0,120,823,1,0,0,0,122,845,1,0,0,0,
        124,847,1,0,0,0,126,856,1,0,0,0,128,858,1,0,0,0,130,860,1,0,0,0,
        132,862,1,0,0,0,134,864,1,0,0,0,136,866,1,0,0,0,138,881,1,0,0,0,
        140,883,1,0,0,0,142,885,1,0,0,0,144,889,1,0,0,0,146,892,1,0,0,0,
        148,902,1,0,0,0,150,907,1,0,0,0,152,919,1,0,0,0,154,922,1,0,0,0,
        156,938,1,0,0,0,158,940,1,0,0,0,160,948,1,0,0,0,162,959,1,0,0,0,
        164,971,1,0,0,0,166,973,1,0,0,0,168,998,1,0,0,0,170,1000,1,0,0,0,
        172,174,3,2,1,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,
        175,176,1,0,0,0,176,1,1,0,0,0,177,175,1,0,0,0,178,185,3,10,5,0,179,
        185,3,94,47,0,180,185,3,30,15,0,181,185,3,16,8,0,182,185,3,4,2,0,
        183,185,3,12,6,0,184,178,1,0,0,0,184,179,1,0,0,0,184,180,1,0,0,0,
        184,181,1,0,0,0,184,182,1,0,0,0,184,183,1,0,0,0,185,3,1,0,0,0,186,
        187,5,1,0,0,187,188,3,68,34,0,188,189,5,2,0,0,189,190,3,68,34,0,
        190,192,5,69,0,0,191,193,5,81,0,0,192,191,1,0,0,0,192,193,1,0,0,
        0,193,194,1,0,0,0,194,195,5,3,0,0,195,196,5,4,0,0,196,5,1,0,0,0,
        197,200,3,68,34,0,198,199,5,5,0,0,199,201,5,69,0,0,200,198,1,0,0,
        0,200,201,1,0,0,0,201,209,1,0,0,0,202,203,3,68,34,0,203,204,5,75,
        0,0,204,205,5,2,0,0,205,206,3,8,4,0,206,207,5,3,0,0,207,209,1,0,
        0,0,208,197,1,0,0,0,208,202,1,0,0,0,209,7,1,0,0,0,210,215,3,6,3,
        0,211,212,5,81,0,0,212,214,3,6,3,0,213,211,1,0,0,0,214,217,1,0,0,
        0,215,213,1,0,0,0,215,216,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,
        0,218,220,5,81,0,0,219,218,1,0,0,0,219,220,1,0,0,0,220,9,1,0,0,0,
        221,228,3,48,24,0,222,228,3,42,21,0,223,228,3,14,7,0,224,228,3,54,
        27,0,225,228,3,56,28,0,226,228,3,60,30,0,227,221,1,0,0,0,227,222,
        1,0,0,0,227,223,1,0,0,0,227,224,1,0,0,0,227,225,1,0,0,0,227,226,
        1,0,0,0,228,11,1,0,0,0,229,231,3,24,12,0,230,229,1,0,0,0,230,231,
        1,0,0,0,231,232,1,0,0,0,232,233,5,6,0,0,233,234,5,69,0,0,234,235,
        5,7,0,0,235,236,3,62,31,0,236,237,5,4,0,0,237,13,1,0,0,0,238,239,
        5,8,0,0,239,240,5,69,0,0,240,242,5,2,0,0,241,243,3,48,24,0,242,241,
        1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,246,
        1,0,0,0,246,247,5,3,0,0,247,15,1,0,0,0,248,249,5,9,0,0,249,250,5,
        68,0,0,250,254,5,2,0,0,251,253,3,18,9,0,252,251,1,0,0,0,253,256,
        1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,254,
        1,0,0,0,257,258,5,3,0,0,258,17,1,0,0,0,259,261,3,24,12,0,260,259,
        1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,263,5,6,0,0,263,264,
        5,69,0,0,264,293,5,4,0,0,265,267,3,24,12,0,266,265,1,0,0,0,266,267,
        1,0,0,0,267,268,1,0,0,0,268,270,5,10,0,0,269,271,5,11,0,0,270,269,
        1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,5,69,0,0,273,274,
        5,85,0,0,274,275,3,62,31,0,275,276,5,4,0,0,276,293,1,0,0,0,277,279,
        3,24,12,0,278,277,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,281,
        5,12,0,0,281,282,5,69,0,0,282,284,5,82,0,0,283,285,3,20,10,0,284,
        283,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,286,289,5,83,0,0,287,
        288,5,13,0,0,288,290,3,62,31,0,289,287,1,0,0,0,289,290,1,0,0,0,290,
        291,1,0,0,0,291,293,5,4,0,0,292,260,1,0,0,0,292,266,1,0,0,0,292,
        278,1,0,0,0,293,19,1,0,0,0,294,299,3,22,11,0,295,296,5,81,0,0,296,
        298,3,22,11,0,297,295,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,
        300,1,0,0,0,300,304,1,0,0,0,301,299,1,0,0,0,302,303,5,81,0,0,303,
        305,5,86,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,
        308,5,86,0,0,307,294,1,0,0,0,307,306,1,0,0,0,308,21,1,0,0,0,309,
        311,7,0,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,
        315,5,85,0,0,313,316,3,62,31,0,314,316,5,86,0,0,315,313,1,0,0,0,
        315,314,1,0,0,0,316,23,1,0,0,0,317,318,5,14,0,0,318,25,1,0,0,0,319,
        320,5,15,0,0,320,27,1,0,0,0,321,323,5,9,0,0,322,324,5,68,0,0,323,
        322,1,0,0,0,323,324,1,0,0,0,324,29,1,0,0,0,325,327,3,32,16,0,326,
        325,1,0,0,0,327,328,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,
        31,1,0,0,0,330,332,5,78,0,0,331,333,5,76,0,0,332,331,1,0,0,0,332,
        333,1,0,0,0,333,334,1,0,0,0,334,335,5,79,0,0,335,336,3,34,17,0,336,
        337,5,80,0,0,337,33,1,0,0,0,338,348,5,69,0,0,339,340,5,69,0,0,340,
        341,5,7,0,0,341,348,3,40,20,0,342,343,5,69,0,0,343,344,5,82,0,0,
        344,345,3,36,18,0,345,346,5,83,0,0,346,348,1,0,0,0,347,338,1,0,0,
        0,347,339,1,0,0,0,347,342,1,0,0,0,348,35,1,0,0,0,349,354,3,38,19,
        0,350,351,5,81,0,0,351,353,3,38,19,0,352,350,1,0,0,0,353,356,1,0,
        0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,37,1,0,0,0,356,354,1,0,0,
        0,357,360,5,69,0,0,358,359,5,7,0,0,359,361,3,40,20,0,360,358,1,0,
        0,0,360,361,1,0,0,0,361,39,1,0,0,0,362,363,7,1,0,0,363,41,1,0,0,
        0,364,366,3,24,12,0,365,364,1,0,0,0,365,366,1,0,0,0,366,367,1,0,
        0,0,367,368,5,16,0,0,368,369,5,69,0,0,369,373,5,2,0,0,370,372,3,
        44,22,0,371,370,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,
        1,0,0,0,374,376,1,0,0,0,375,373,1,0,0,0,376,377,5,3,0,0,377,43,1,
        0,0,0,378,380,3,24,12,0,379,378,1,0,0,0,379,380,1,0,0,0,380,381,
        1,0,0,0,381,382,5,69,0,0,382,383,5,85,0,0,383,385,3,62,31,0,384,
        386,5,81,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,45,1,0,0,0,387,
        388,5,69,0,0,388,392,5,2,0,0,389,391,3,158,79,0,390,389,1,0,0,0,
        391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,395,1,0,0,0,
        394,392,1,0,0,0,395,396,5,3,0,0,396,47,1,0,0,0,397,399,3,24,12,0,
        398,397,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,402,3,26,13,
        0,401,400,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,405,3,28,14,
        0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,5,12,0,
        0,407,414,5,69,0,0,408,415,5,17,0,0,409,411,5,82,0,0,410,412,3,50,
        25,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,415,5,83,
        0,0,414,408,1,0,0,0,414,409,1,0,0,0,415,417,1,0,0,0,416,418,5,13,
        0,0,417,416,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,421,3,62,
        31,0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,423,3,72,
        36,0,423,49,1,0,0,0,424,429,3,52,26,0,425,426,5,81,0,0,426,428,3,
        52,26,0,427,425,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,
        1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,432,434,5,81,0,0,433,432,
        1,0,0,0,433,434,1,0,0,0,434,51,1,0,0,0,435,437,5,18,0,0,436,435,
        1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,438,440,5,11,0,0,439,438,
        1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,444,5,69,0,0,442,443,
        5,85,0,0,443,445,3,62,31,0,444,442,1,0,0,0,444,445,1,0,0,0,445,53,
        1,0,0,0,446,448,3,24,12,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,
        1,0,0,0,449,450,5,19,0,0,450,451,5,69,0,0,451,452,5,85,0,0,452,453,
        3,62,31,0,453,454,5,7,0,0,454,455,3,110,55,0,455,456,5,4,0,0,456,
        55,1,0,0,0,457,459,3,24,12,0,458,457,1,0,0,0,458,459,1,0,0,0,459,
        460,1,0,0,0,460,461,5,20,0,0,461,476,5,69,0,0,462,463,5,85,0,0,463,
        464,3,62,31,0,464,465,5,7,0,0,465,466,3,110,55,0,466,467,5,4,0,0,
        467,477,1,0,0,0,468,472,5,2,0,0,469,471,3,58,29,0,470,469,1,0,0,
        0,471,474,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,
        0,474,472,1,0,0,0,475,477,5,3,0,0,476,462,1,0,0,0,476,468,1,0,0,
        0,477,57,1,0,0,0,478,480,3,24,12,0,479,478,1,0,0,0,479,480,1,0,0,
        0,480,481,1,0,0,0,481,482,5,69,0,0,482,483,5,85,0,0,483,485,3,62,
        31,0,484,486,5,81,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,59,1,0,
        0,0,487,489,3,24,12,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,
        0,0,0,490,491,5,15,0,0,491,492,5,69,0,0,492,493,5,85,0,0,493,494,
        3,62,31,0,494,495,5,7,0,0,495,496,3,110,55,0,496,497,5,4,0,0,497,
        61,1,0,0,0,498,501,3,66,33,0,499,501,3,64,32,0,500,498,1,0,0,0,500,
        499,1,0,0,0,501,63,1,0,0,0,502,503,5,21,0,0,503,505,7,2,0,0,504,
        506,3,62,31,0,505,504,1,0,0,0,505,506,1,0,0,0,506,65,1,0,0,0,507,
        555,5,22,0,0,508,555,5,23,0,0,509,555,5,24,0,0,510,555,5,25,0,0,
        511,555,3,70,35,0,512,513,3,68,34,0,513,514,3,66,33,0,514,555,1,
        0,0,0,515,516,5,26,0,0,516,521,3,62,31,0,517,518,5,81,0,0,518,520,
        3,62,31,0,519,517,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,
        1,0,0,0,522,524,1,0,0,0,523,521,1,0,0,0,524,526,5,77,0,0,525,527,
        5,17,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,555,1,0,0,0,528,540,
        5,69,0,0,529,530,5,26,0,0,530,535,3,62,31,0,531,532,5,81,0,0,532,
        534,3,62,31,0,533,531,1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,
        536,1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,539,5,77,0,0,539,
        541,1,0,0,0,540,529,1,0,0,0,540,541,1,0,0,0,541,555,1,0,0,0,542,
        543,5,69,0,0,543,544,5,26,0,0,544,545,3,62,31,0,545,546,5,77,0,0,
        546,555,1,0,0,0,547,548,5,18,0,0,548,555,3,62,31,0,549,550,5,79,
        0,0,550,551,3,62,31,0,551,552,5,80,0,0,552,555,1,0,0,0,553,555,5,
        69,0,0,554,507,1,0,0,0,554,508,1,0,0,0,554,509,1,0,0,0,554,510,1,
        0,0,0,554,511,1,0,0,0,554,512,1,0,0,0,554,515,1,0,0,0,554,528,1,
        0,0,0,554,542,1,0,0,0,554,547,1,0,0,0,554,549,1,0,0,0,554,553,1,
        0,0,0,555,67,1,0,0,0,556,557,5,69,0,0,557,570,5,75,0,0,558,560,5,
        75,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,566,5,
        69,0,0,562,563,5,75,0,0,563,565,5,69,0,0,564,562,1,0,0,0,565,568,
        1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,570,1,0,0,0,568,566,
        1,0,0,0,569,556,1,0,0,0,569,559,1,0,0,0,570,69,1,0,0,0,571,572,5,
        79,0,0,572,573,3,66,33,0,573,574,5,4,0,0,574,575,5,70,0,0,575,576,
        5,80,0,0,576,71,1,0,0,0,577,581,5,2,0,0,578,580,3,76,38,0,579,578,
        1,0,0,0,580,583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,585,
        1,0,0,0,583,581,1,0,0,0,584,586,3,106,53,0,585,584,1,0,0,0,585,586,
        1,0,0,0,586,587,1,0,0,0,587,588,5,3,0,0,588,73,1,0,0,0,589,590,3,
        26,13,0,590,591,3,72,36,0,591,75,1,0,0,0,592,612,3,74,37,0,593,612,
        3,80,40,0,594,612,3,78,39,0,595,612,3,46,23,0,596,612,3,42,21,0,
        597,612,3,94,47,0,598,612,3,98,49,0,599,612,3,86,43,0,600,612,3,
        100,50,0,601,612,3,102,51,0,602,612,3,104,52,0,603,612,3,90,45,0,
        604,612,3,106,53,0,605,612,3,108,54,0,606,607,5,27,0,0,607,612,5,
        4,0,0,608,609,5,28,0,0,609,612,5,4,0,0,610,612,3,88,44,0,611,592,
        1,0,0,0,611,593,1,0,0,0,611,594,1,0,0,0,611,595,1,0,0,0,611,596,
        1,0,0,0,611,597,1,0,0,0,611,598,1,0,0,0,611,599,1,0,0,0,611,600,
        1,0,0,0,611,601,1,0,0,0,611,602,1,0,0,0,611,603,1,0,0,0,611,604,
        1,0,0,0,611,605,1,0,0,0,611,606,1,0,0,0,611,608,1,0,0,0,611,610,
        1,0,0,0,612,77,1,0,0,0,613,614,3,110,55,0,614,615,3,154,77,0,615,
        616,5,4,0,0,616,79,1,0,0,0,617,618,5,29,0,0,618,619,3,82,41,0,619,
        620,5,7,0,0,620,621,3,110,55,0,621,622,5,4,0,0,622,628,1,0,0,0,623,
        624,5,29,0,0,624,625,3,82,41,0,625,626,3,96,48,0,626,628,1,0,0,0,
        627,617,1,0,0,0,627,623,1,0,0,0,628,81,1,0,0,0,629,631,5,30,0,0,
        630,629,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,632,634,5,11,0,0,
        633,632,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,638,5,69,0,0,
        636,637,5,85,0,0,637,639,3,62,31,0,638,636,1,0,0,0,638,639,1,0,0,
        0,639,83,1,0,0,0,640,641,7,3,0,0,641,85,1,0,0,0,642,643,3,110,55,
        0,643,644,3,84,42,0,644,645,3,110,55,0,645,646,5,4,0,0,646,87,1,
        0,0,0,647,648,5,39,0,0,648,649,3,110,55,0,649,651,5,2,0,0,650,652,
        3,160,80,0,651,650,1,0,0,0,652,653,1,0,0,0,653,651,1,0,0,0,653,654,
        1,0,0,0,654,655,1,0,0,0,655,656,5,3,0,0,656,89,1,0,0,0,657,658,5,
        40,0,0,658,659,3,110,55,0,659,660,3,72,36,0,660,91,1,0,0,0,661,665,
        3,96,48,0,662,665,3,72,36,0,663,665,3,110,55,0,664,661,1,0,0,0,664,
        662,1,0,0,0,664,663,1,0,0,0,665,93,1,0,0,0,666,668,3,24,12,0,667,
        666,1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,671,5,10,0,0,670,
        672,5,11,0,0,671,670,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,
        674,5,69,0,0,674,677,5,85,0,0,675,678,3,62,31,0,676,678,5,69,0,0,
        677,675,1,0,0,0,677,676,1,0,0,0,678,679,1,0,0,0,679,680,5,7,0,0,
        680,681,3,92,46,0,681,682,5,4,0,0,682,95,1,0,0,0,683,691,5,2,0,0,
        684,685,5,69,0,0,685,686,5,85,0,0,686,687,3,110,55,0,687,688,5,81,
        0,0,688,690,1,0,0,0,689,684,1,0,0,0,690,693,1,0,0,0,691,689,1,0,
        0,0,691,692,1,0,0,0,692,694,1,0,0,0,693,691,1,0,0,0,694,695,5,3,
        0,0,695,696,5,4,0,0,696,697,3,110,55,0,697,97,1,0,0,0,698,699,3,
        110,55,0,699,700,5,7,0,0,700,701,3,110,55,0,701,702,5,4,0,0,702,
        99,1,0,0,0,703,704,5,41,0,0,704,705,5,69,0,0,705,706,5,42,0,0,706,
        707,3,110,55,0,707,708,3,72,36,0,708,101,1,0,0,0,709,710,5,43,0,
        0,710,711,3,110,55,0,711,718,3,72,36,0,712,713,5,44,0,0,713,714,
        3,110,55,0,714,715,3,72,36,0,715,717,1,0,0,0,716,712,1,0,0,0,717,
        720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,723,1,0,0,0,720,
        718,1,0,0,0,721,722,5,45,0,0,722,724,3,72,36,0,723,721,1,0,0,0,723,
        724,1,0,0,0,724,103,1,0,0,0,725,726,3,110,55,0,726,727,5,4,0,0,727,
        105,1,0,0,0,728,730,5,46,0,0,729,731,3,110,55,0,730,729,1,0,0,0,
        730,731,1,0,0,0,731,732,1,0,0,0,732,735,5,4,0,0,733,735,5,69,0,0,
        734,728,1,0,0,0,734,733,1,0,0,0,735,107,1,0,0,0,736,737,5,47,0,0,
        737,738,3,72,36,0,738,109,1,0,0,0,739,740,6,55,-1,0,740,741,3,138,
        69,0,741,742,3,110,55,22,742,763,1,0,0,0,743,763,3,150,75,0,744,
        745,3,118,59,0,745,746,3,110,55,19,746,763,1,0,0,0,747,763,3,142,
        71,0,748,763,3,46,23,0,749,763,3,136,68,0,750,763,3,114,57,0,751,
        752,3,140,70,0,752,753,3,110,55,14,753,763,1,0,0,0,754,763,3,148,
        74,0,755,763,3,146,73,0,756,763,3,112,56,0,757,758,3,120,60,0,758,
        759,3,110,55,3,759,763,1,0,0,0,760,763,3,116,58,0,761,763,3,144,
        72,0,762,739,1,0,0,0,762,743,1,0,0,0,762,744,1,0,0,0,762,747,1,0,
        0,0,762,748,1,0,0,0,762,749,1,0,0,0,762,750,1,0,0,0,762,751,1,0,
        0,0,762,754,1,0,0,0,762,755,1,0,0,0,762,756,1,0,0,0,762,757,1,0,
        0,0,762,760,1,0,0,0,762,761,1,0,0,0,763,792,1,0,0,0,764,765,10,11,
        0,0,765,766,3,128,64,0,766,767,3,110,55,12,767,791,1,0,0,0,768,769,
        10,10,0,0,769,770,3,132,66,0,770,771,3,110,55,11,771,791,1,0,0,0,
        772,773,10,9,0,0,773,774,3,134,67,0,774,775,3,110,55,10,775,791,
        1,0,0,0,776,777,10,8,0,0,777,778,3,130,65,0,778,779,3,110,55,9,779,
        791,1,0,0,0,780,781,10,7,0,0,781,782,3,126,63,0,782,783,3,110,55,
        8,783,791,1,0,0,0,784,785,10,20,0,0,785,791,3,124,62,0,786,787,10,
        12,0,0,787,791,3,152,76,0,788,789,10,4,0,0,789,791,3,154,77,0,790,
        764,1,0,0,0,790,768,1,0,0,0,790,772,1,0,0,0,790,776,1,0,0,0,790,
        780,1,0,0,0,790,784,1,0,0,0,790,786,1,0,0,0,790,788,1,0,0,0,791,
        794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,111,1,0,0,0,794,
        792,1,0,0,0,795,796,5,26,0,0,796,797,3,110,55,0,797,798,5,77,0,0,
        798,113,1,0,0,0,799,800,5,69,0,0,800,801,5,7,0,0,801,802,5,2,0,0,
        802,803,3,110,55,0,803,804,5,3,0,0,804,805,5,4,0,0,805,115,1,0,0,
        0,806,808,5,69,0,0,807,809,5,76,0,0,808,807,1,0,0,0,808,809,1,0,
        0,0,809,810,1,0,0,0,810,811,5,79,0,0,811,812,5,70,0,0,812,813,5,
        4,0,0,813,814,3,110,55,0,814,815,5,80,0,0,815,117,1,0,0,0,816,817,
        5,69,0,0,817,819,5,75,0,0,818,816,1,0,0,0,819,820,1,0,0,0,820,818,
        1,0,0,0,820,821,1,0,0,0,821,119,1,0,0,0,822,824,5,29,0,0,823,822,
        1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,825,826,3,122,61,0,826,827,
        5,7,0,0,827,121,1,0,0,0,828,830,5,30,0,0,829,828,1,0,0,0,829,830,
        1,0,0,0,830,832,1,0,0,0,831,833,5,11,0,0,832,831,1,0,0,0,832,833,
        1,0,0,0,833,834,1,0,0,0,834,846,5,69,0,0,835,836,5,69,0,0,836,838,
        5,82,0,0,837,839,5,30,0,0,838,837,1,0,0,0,838,839,1,0,0,0,839,841,
        1,0,0,0,840,842,5,11,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,
        1,0,0,0,843,844,5,69,0,0,844,846,5,83,0,0,845,829,1,0,0,0,845,835,
        1,0,0,0,846,123,1,0,0,0,847,848,5,5,0,0,848,853,3,62,31,0,849,850,
        5,5,0,0,850,852,3,62,31,0,851,849,1,0,0,0,852,855,1,0,0,0,853,851,
        1,0,0,0,853,854,1,0,0,0,854,125,1,0,0,0,855,853,1,0,0,0,856,857,
        7,3,0,0,857,127,1,0,0,0,858,859,5,48,0,0,859,129,1,0,0,0,860,861,
        7,4,0,0,861,131,1,0,0,0,862,863,7,5,0,0,863,133,1,0,0,0,864,865,
        7,6,0,0,865,135,1,0,0,0,866,867,5,69,0,0,867,868,5,2,0,0,868,873,
        3,158,79,0,869,870,5,81,0,0,870,872,3,158,79,0,871,869,1,0,0,0,872,
        875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,877,1,0,0,0,875,
        873,1,0,0,0,876,878,5,81,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,
        879,1,0,0,0,879,880,5,3,0,0,880,137,1,0,0,0,881,882,5,11,0,0,882,
        139,1,0,0,0,883,884,7,7,0,0,884,141,1,0,0,0,885,886,5,82,0,0,886,
        887,3,110,55,0,887,888,5,83,0,0,888,143,1,0,0,0,889,890,5,21,0,0,
        890,891,3,110,55,0,891,145,1,0,0,0,892,896,5,2,0,0,893,895,3,76,
        38,0,894,893,1,0,0,0,895,898,1,0,0,0,896,894,1,0,0,0,896,897,1,0,
        0,0,897,899,1,0,0,0,898,896,1,0,0,0,899,900,3,110,55,0,900,901,5,
        3,0,0,901,147,1,0,0,0,902,903,5,18,0,0,903,904,3,110,55,0,904,149,
        1,0,0,0,905,908,3,164,82,0,906,908,5,69,0,0,907,905,1,0,0,0,907,
        906,1,0,0,0,908,151,1,0,0,0,909,910,5,79,0,0,910,911,3,150,75,0,
        911,912,5,80,0,0,912,920,1,0,0,0,913,914,5,60,0,0,914,916,3,150,
        75,0,915,913,1,0,0,0,916,917,1,0,0,0,917,915,1,0,0,0,917,918,1,0,
        0,0,918,920,1,0,0,0,919,909,1,0,0,0,919,915,1,0,0,0,920,153,1,0,
        0,0,921,923,5,76,0,0,922,921,1,0,0,0,922,923,1,0,0,0,923,924,1,0,
        0,0,924,925,3,156,78,0,925,155,1,0,0,0,926,939,5,17,0,0,927,928,
        5,82,0,0,928,933,3,110,55,0,929,930,5,81,0,0,930,932,3,110,55,0,
        931,929,1,0,0,0,932,935,1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,
        934,936,1,0,0,0,935,933,1,0,0,0,936,937,5,83,0,0,937,939,1,0,0,0,
        938,926,1,0,0,0,938,927,1,0,0,0,939,157,1,0,0,0,940,943,5,69,0,0,
        941,942,5,85,0,0,942,944,3,110,55,0,943,941,1,0,0,0,943,944,1,0,
        0,0,944,946,1,0,0,0,945,947,5,81,0,0,946,945,1,0,0,0,946,947,1,0,
        0,0,947,159,1,0,0,0,948,953,3,162,81,0,949,950,5,61,0,0,950,952,
        3,162,81,0,951,949,1,0,0,0,952,955,1,0,0,0,953,951,1,0,0,0,953,954,
        1,0,0,0,954,956,1,0,0,0,955,953,1,0,0,0,956,957,5,62,0,0,957,958,
        3,72,36,0,958,161,1,0,0,0,959,960,7,8,0,0,960,163,1,0,0,0,961,972,
        3,168,84,0,962,972,5,73,0,0,963,972,5,70,0,0,964,972,5,71,0,0,965,
        972,5,72,0,0,966,972,5,67,0,0,967,972,5,68,0,0,968,972,3,166,83,
        0,969,972,5,74,0,0,970,972,5,66,0,0,971,961,1,0,0,0,971,962,1,0,
        0,0,971,963,1,0,0,0,971,964,1,0,0,0,971,965,1,0,0,0,971,966,1,0,
        0,0,971,967,1,0,0,0,971,968,1,0,0,0,971,969,1,0,0,0,971,970,1,0,
        0,0,972,165,1,0,0,0,973,974,7,9,0,0,974,167,1,0,0,0,975,977,5,69,
        0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,978,1,0,0,0,978,979,5,79,
        0,0,979,984,3,110,55,0,980,981,5,81,0,0,981,983,3,110,55,0,982,980,
        1,0,0,0,983,986,1,0,0,0,984,982,1,0,0,0,984,985,1,0,0,0,985,987,
        1,0,0,0,986,984,1,0,0,0,987,988,5,80,0,0,988,999,1,0,0,0,989,991,
        5,69,0,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,992,993,
        5,79,0,0,993,994,3,110,55,0,994,995,5,4,0,0,995,996,3,110,55,0,996,
        997,5,80,0,0,997,999,1,0,0,0,998,976,1,0,0,0,998,990,1,0,0,0,999,
        169,1,0,0,0,1000,1004,5,63,0,0,1001,1003,9,0,0,0,1002,1001,1,0,0,
        0,1003,1006,1,0,0,0,1004,1005,1,0,0,0,1004,1002,1,0,0,0,1005,1007,
        1,0,0,0,1006,1004,1,0,0,0,1007,1008,5,63,0,0,1008,171,1,0,0,0,110,
        175,184,192,200,208,215,219,227,230,244,254,260,266,270,278,284,
        289,292,299,304,307,310,315,323,328,332,347,354,360,365,373,379,
        385,392,398,401,404,411,414,417,420,429,433,436,439,444,447,458,
        472,476,479,485,488,500,505,521,526,535,540,554,559,566,569,581,
        585,611,627,630,633,638,653,664,667,671,677,691,718,723,730,734,
        762,790,792,808,820,823,829,832,838,841,845,853,873,877,896,907,
        917,919,922,933,938,943,946,953,971,976,984,990,998,1004
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'use'", "'{'", "'}'", "';'", "'as'", 
                     "'type'", "'='", "'impl'", "'extern'", "'static'", 
                     "'mut'", "'fn'", "'->'", "'pub'", "'unsafe'", "'struct'", 
                     "'()'", "'&'", "'const'", "'union'", "'*'", "'i32'", 
                     "'String'", "'bool'", "'u8'", "'<'", "'break'", "'continue'", 
                     "'let'", "'ref'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'|='", "'^='", "'match'", "'while'", "'for'", 
                     "'in'", "'if'", "'else if'", "'else'", "'return'", 
                     "'loop'", "'..'", "'=='", "'!='", "'||'", "'&&'", "'>>'", 
                     "'>='", "'<='", "'/'", "'%'", "'+'", "'-'", "'.'", 
                     "'|'", "'=>'", "'\"'", "'true'", "'false'", "'None'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'::'", "'!'", "'>'", "'#'", "'['", "']'", "','", "'('", 
                     "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "TRUE", "FALSE", "NONE", "Binary", "STRING_LITERAL", 
                      "Identifier", "Number", "SignedNumber", "BYTE_STRING_LITERAL", 
                      "HexNumber", "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", 
                      "GT", "POUND", "LBRACK", "RBRACK", "COMMA", "LPAREN", 
                      "RPAREN", "UNDERSCORE", "COLON", "ELLIPSIS", "WS", 
                      "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_useDecl = 2
    RULE_useTree = 3
    RULE_useTreeList = 4
    RULE_topLevelDef = 5
    RULE_typeAlias = 6
    RULE_interfaceDef = 7
    RULE_externBlock = 8
    RULE_externItem = 9
    RULE_externParams = 10
    RULE_externParam = 11
    RULE_visibility = 12
    RULE_unsafeModifier = 13
    RULE_externAbi = 14
    RULE_attributes = 15
    RULE_innerAttribute = 16
    RULE_attribute = 17
    RULE_attrArgs = 18
    RULE_attrArg = 19
    RULE_attrValue = 20
    RULE_structDef = 21
    RULE_structField = 22
    RULE_structLiteral = 23
    RULE_functionDef = 24
    RULE_paramList = 25
    RULE_param = 26
    RULE_constDef = 27
    RULE_unionDef = 28
    RULE_unionField = 29
    RULE_unsafeDef = 30
    RULE_typeExpr = 31
    RULE_pointerType = 32
    RULE_basicType = 33
    RULE_typePath = 34
    RULE_arrayType = 35
    RULE_block = 36
    RULE_unsafeBlock = 37
    RULE_statement = 38
    RULE_callStmt = 39
    RULE_letStmt = 40
    RULE_varDef = 41
    RULE_compoundOp = 42
    RULE_compoundAssignment = 43
    RULE_matchStmt = 44
    RULE_whileStmt = 45
    RULE_initializer = 46
    RULE_staticVarDecl = 47
    RULE_initBlock = 48
    RULE_assignStmt = 49
    RULE_forStmt = 50
    RULE_ifStmt = 51
    RULE_exprStmt = 52
    RULE_returnStmt = 53
    RULE_loopStmt = 54
    RULE_expression = 55
    RULE_qualifiedExpression = 56
    RULE_structDefInit = 57
    RULE_arrayDeclaration = 58
    RULE_typePathExpression = 59
    RULE_patternPrefix = 60
    RULE_pattern = 61
    RULE_castExpressionPostFix = 62
    RULE_compoundOps = 63
    RULE_rangeSymbol = 64
    RULE_conditionalOps = 65
    RULE_booleanOps = 66
    RULE_binaryOps = 67
    RULE_structFieldDec = 68
    RULE_mutableExpression = 69
    RULE_unaryOpes = 70
    RULE_parenExpression = 71
    RULE_dereferenceExpression = 72
    RULE_expressionBlock = 73
    RULE_borrowExpression = 74
    RULE_primaryExpression = 75
    RULE_fieldAccessPostFix = 76
    RULE_callExpressionPostFix = 77
    RULE_functionCallArgs = 78
    RULE_structLiteralField = 79
    RULE_matchArm = 80
    RULE_matchPattern = 81
    RULE_literal = 82
    RULE_booleanLiteral = 83
    RULE_arrayLiteral = 84
    RULE_stringLiteral = 85

    ruleNames =  [ "program", "topLevelItem", "useDecl", "useTree", "useTreeList", 
                   "topLevelDef", "typeAlias", "interfaceDef", "externBlock", 
                   "externItem", "externParams", "externParam", "visibility", 
                   "unsafeModifier", "externAbi", "attributes", "innerAttribute", 
                   "attribute", "attrArgs", "attrArg", "attrValue", "structDef", 
                   "structField", "structLiteral", "functionDef", "paramList", 
                   "param", "constDef", "unionDef", "unionField", "unsafeDef", 
                   "typeExpr", "pointerType", "basicType", "typePath", "arrayType", 
                   "block", "unsafeBlock", "statement", "callStmt", "letStmt", 
                   "varDef", "compoundOp", "compoundAssignment", "matchStmt", 
                   "whileStmt", "initializer", "staticVarDecl", "initBlock", 
                   "assignStmt", "forStmt", "ifStmt", "exprStmt", "returnStmt", 
                   "loopStmt", "expression", "qualifiedExpression", "structDefInit", 
                   "arrayDeclaration", "typePathExpression", "patternPrefix", 
                   "pattern", "castExpressionPostFix", "compoundOps", "rangeSymbol", 
                   "conditionalOps", "booleanOps", "binaryOps", "structFieldDec", 
                   "mutableExpression", "unaryOpes", "parenExpression", 
                   "dereferenceExpression", "expressionBlock", "borrowExpression", 
                   "primaryExpression", "fieldAccessPostFix", "callExpressionPostFix", 
                   "functionCallArgs", "structLiteralField", "matchArm", 
                   "matchPattern", "literal", "booleanLiteral", "arrayLiteral", 
                   "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    TRUE=64
    FALSE=65
    NONE=66
    Binary=67
    STRING_LITERAL=68
    Identifier=69
    Number=70
    SignedNumber=71
    BYTE_STRING_LITERAL=72
    HexNumber=73
    CHAR_LITERAL=74
    DOUBLE_COLON=75
    EXCL=76
    GT=77
    POUND=78
    LBRACK=79
    RBRACK=80
    COMMA=81
    LPAREN=82
    RPAREN=83
    UNDERSCORE=84
    COLON=85
    ELLIPSIS=86
    WS=87
    COMMENT=88

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1693506) != 0) or _la==78:
                self.state = 172
                self.topLevelItem()
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def useDecl(self):
            return self.getTypedRuleContext(RustParser.UseDeclContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 178
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 179
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 180
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 181
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 182
                self.useDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 183
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypePathContext)
            else:
                return self.getTypedRuleContext(RustParser.TypePathContext,i)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_useDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDecl" ):
                listener.enterUseDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDecl" ):
                listener.exitUseDecl(self)




    def useDecl(self):

        localctx = RustParser.UseDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_useDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(RustParser.T__0)
            self.state = 187
            self.typePath()
            self.state = 188
            self.match(RustParser.T__1)
            self.state = 189
            self.typePath()
            self.state = 190
            self.match(RustParser.Identifier)
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 191
                self.match(RustParser.COMMA)


            self.state = 194
            self.match(RustParser.T__2)
            self.state = 195
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseTreeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def useTreeList(self):
            return self.getTypedRuleContext(RustParser.UseTreeListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_useTree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseTree" ):
                listener.enterUseTree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseTree" ):
                listener.exitUseTree(self)




    def useTree(self):

        localctx = RustParser.UseTreeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_useTree)
        self._la = 0 # Token type
        try:
            self.state = 208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 197
                self.typePath()
                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 198
                    self.match(RustParser.T__4)
                    self.state = 199
                    self.match(RustParser.Identifier)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 202
                self.typePath()
                self.state = 203
                self.match(RustParser.DOUBLE_COLON)
                self.state = 204
                self.match(RustParser.T__1)
                self.state = 205
                self.useTreeList()
                self.state = 206
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseTreeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useTree(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UseTreeContext)
            else:
                return self.getTypedRuleContext(RustParser.UseTreeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_useTreeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseTreeList" ):
                listener.enterUseTreeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseTreeList" ):
                listener.exitUseTreeList(self)




    def useTreeList(self):

        localctx = RustParser.UseTreeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_useTreeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.useTree()
            self.state = 215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 211
                    self.match(RustParser.COMMA)
                    self.state = 212
                    self.useTree() 
                self.state = 217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 218
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_topLevelDef)
        try:
            self.state = 227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 221
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 222
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 223
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 224
                self.constDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 225
                self.unionDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 226
                self.unsafeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 229
                self.visibility()


            self.state = 232
            self.match(RustParser.T__5)
            self.state = 233
            self.match(RustParser.Identifier)
            self.state = 234
            self.match(RustParser.T__6)
            self.state = 235
            self.typeExpr()
            self.state = 236
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(RustParser.T__7)
            self.state = 239
            self.match(RustParser.Identifier)
            self.state = 240
            self.match(RustParser.T__1)
            self.state = 242 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 241
                self.functionDef()
                self.state = 244 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 53760) != 0)):
                    break

            self.state = 246
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(RustParser.T__8)
            self.state = 249
            self.match(RustParser.STRING_LITERAL)
            self.state = 250
            self.match(RustParser.T__1)
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 21568) != 0):
                self.state = 251
                self.externItem()
                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 257
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 259
                    self.visibility()


                self.state = 262
                self.match(RustParser.T__5)
                self.state = 263
                self.match(RustParser.Identifier)
                self.state = 264
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 265
                    self.visibility()


                self.state = 268
                self.match(RustParser.T__9)
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 269
                    self.match(RustParser.T__10)


                self.state = 272
                self.match(RustParser.Identifier)
                self.state = 273
                self.match(RustParser.COLON)
                self.state = 274
                self.typeExpr()
                self.state = 275
                self.match(RustParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 277
                    self.visibility()


                self.state = 280
                self.match(RustParser.T__11)
                self.state = 281
                self.match(RustParser.Identifier)
                self.state = 282
                self.match(RustParser.LPAREN)
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 229377) != 0):
                    self.state = 283
                    self.externParams()


                self.state = 286
                self.match(RustParser.RPAREN)
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 287
                    self.match(RustParser.T__12)
                    self.state = 288
                    self.typeExpr()


                self.state = 291
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69, 84, 85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 294
                self.externParam()
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 295
                        self.match(RustParser.COMMA)
                        self.state = 296
                        self.externParam() 
                    self.state = 301
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==81:
                    self.state = 302
                    self.match(RustParser.COMMA)
                    self.state = 303
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 306
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==84:
                self.state = 309
                _la = self._input.LA(1)
                if not(_la==69 or _la==84):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 312
            self.match(RustParser.COLON)
            self.state = 315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 21, 22, 23, 24, 25, 26, 69, 75, 79]:
                self.state = 313
                self.typeExpr()
                pass
            elif token in [86]:
                self.state = 314
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(RustParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(RustParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(RustParser.T__8)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 322
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 325
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 328 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(RustParser.POUND)

            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 331
                self.match(RustParser.EXCL)


            self.state = 334
            self.match(RustParser.LBRACK)
            self.state = 335
            self.attribute()
            self.state = 336
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_attribute)
        try:
            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.match(RustParser.Identifier)
                self.state = 340
                self.match(RustParser.T__6)
                self.state = 341
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 342
                self.match(RustParser.Identifier)
                self.state = 343
                self.match(RustParser.LPAREN)
                self.state = 344
                self.attrArgs()
                self.state = 345
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.attrArg()
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==81:
                self.state = 350
                self.match(RustParser.COMMA)
                self.state = 351
                self.attrArg()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(RustParser.Identifier)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 358
                self.match(RustParser.T__6)
                self.state = 359
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 364
                self.visibility()


            self.state = 367
            self.match(RustParser.T__15)
            self.state = 368
            self.match(RustParser.Identifier)
            self.state = 369
            self.match(RustParser.T__1)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14 or _la==69:
                self.state = 370
                self.structField()
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 376
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 378
                self.visibility()


            self.state = 381
            self.match(RustParser.Identifier)
            self.state = 382
            self.match(RustParser.COLON)
            self.state = 383
            self.typeExpr()
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 384
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(RustParser.Identifier)
            self.state = 388
            self.match(RustParser.T__1)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==69:
                self.state = 389
                self.structLiteralField()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 395
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 397
                self.visibility()


            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 400
                self.unsafeModifier()


            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 403
                self.externAbi()


            self.state = 406
            self.match(RustParser.T__11)
            self.state = 407
            self.match(RustParser.Identifier)
            self.state = 414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 408
                self.match(RustParser.T__16)
                pass
            elif token in [82]:
                self.state = 409
                self.match(RustParser.LPAREN)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 11)) & ~0x3f) == 0 and ((1 << (_la - 11)) & 288230376151711873) != 0):
                    self.state = 410
                    self.paramList()


                self.state = 413
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 416
                self.match(RustParser.T__12)


            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & 2452209997103235577) != 0):
                self.state = 419
                self.typeExpr()


            self.state = 422
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.param()
            self.state = 429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 425
                    self.match(RustParser.COMMA)
                    self.state = 426
                    self.param() 
                self.state = 431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 432
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 435
                self.match(RustParser.T__17)


            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 438
                self.match(RustParser.T__10)


            self.state = 441
            self.match(RustParser.Identifier)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 442
                self.match(RustParser.COLON)
                self.state = 443
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 446
                self.visibility()


            self.state = 449
            self.match(RustParser.T__18)
            self.state = 450
            self.match(RustParser.Identifier)
            self.state = 451
            self.match(RustParser.COLON)
            self.state = 452
            self.typeExpr()
            self.state = 453
            self.match(RustParser.T__6)
            self.state = 454
            self.expression(0)
            self.state = 455
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 457
                self.visibility()


            self.state = 460
            self.match(RustParser.T__19)
            self.state = 461
            self.match(RustParser.Identifier)
            self.state = 476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.state = 462
                self.match(RustParser.COLON)
                self.state = 463
                self.typeExpr()
                self.state = 464
                self.match(RustParser.T__6)
                self.state = 465
                self.expression(0)
                self.state = 466
                self.match(RustParser.T__3)
                pass
            elif token in [2]:
                self.state = 468
                self.match(RustParser.T__1)
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==14 or _la==69:
                    self.state = 469
                    self.unionField()
                    self.state = 474
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 475
                self.match(RustParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 478
                self.visibility()


            self.state = 481
            self.match(RustParser.Identifier)
            self.state = 482
            self.match(RustParser.COLON)
            self.state = 483
            self.typeExpr()
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 484
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 487
                self.visibility()


            self.state = 490
            self.match(RustParser.T__14)
            self.state = 491
            self.match(RustParser.Identifier)
            self.state = 492
            self.match(RustParser.COLON)
            self.state = 493
            self.typeExpr()
            self.state = 494
            self.match(RustParser.T__6)
            self.state = 495
            self.expression(0)
            self.state = 496
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpr" ):
                listener.enterTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpr" ):
                listener.exitTypeExpr(self)




    def typeExpr(self):

        localctx = RustParser.TypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typeExpr)
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 22, 23, 24, 25, 26, 69, 75, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self.basicType()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 499
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(RustParser.T__20)
            self.state = 503
            _la = self._input.LA(1)
            if not(_la==11 or _la==19):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 504
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(RustParser.ArrayTypeContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.match(RustParser.T__21)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.match(RustParser.T__22)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 509
                self.match(RustParser.T__23)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 510
                self.match(RustParser.T__24)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 511
                self.arrayType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 512
                self.typePath()
                self.state = 513
                self.basicType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 515
                self.match(RustParser.T__25)
                self.state = 516
                self.typeExpr()
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==81:
                    self.state = 517
                    self.match(RustParser.COMMA)
                    self.state = 518
                    self.typeExpr()
                    self.state = 523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 524
                self.match(RustParser.GT)
                self.state = 526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 525
                    self.match(RustParser.T__16)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 528
                self.match(RustParser.Identifier)
                self.state = 540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 529
                    self.match(RustParser.T__25)
                    self.state = 530
                    self.typeExpr()
                    self.state = 535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==81:
                        self.state = 531
                        self.match(RustParser.COMMA)
                        self.state = 532
                        self.typeExpr()
                        self.state = 537
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 538
                    self.match(RustParser.GT)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 542
                self.match(RustParser.Identifier)
                self.state = 543
                self.match(RustParser.T__25)
                self.state = 544
                self.typeExpr()
                self.state = 545
                self.match(RustParser.GT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 547
                self.match(RustParser.T__17)
                self.state = 548
                self.typeExpr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 549
                self.match(RustParser.LBRACK)
                self.state = 550
                self.typeExpr()
                self.state = 551
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 553
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 556
                self.match(RustParser.Identifier)
                self.state = 557
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 558
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 561
                self.match(RustParser.Identifier)
                self.state = 566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 562
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 563
                        self.match(RustParser.Identifier) 
                    self.state = 568
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = RustParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(RustParser.LBRACK)
            self.state = 572
            self.basicType()
            self.state = 573
            self.match(RustParser.T__3)
            self.state = 574
            self.match(RustParser.Number)
            self.state = 575
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(RustParser.T__1)
            self.state = 581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 578
                    self.statement() 
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46 or _la==69:
                self.state = 584
                self.returnStmt()


            self.state = 587
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.unsafeModifier()
            self.state = 590
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeBlock(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlockContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def callStmt(self):
            return self.getTypedRuleContext(RustParser.CallStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_statement)
        try:
            self.state = 611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.unsafeBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.letStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 594
                self.callStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 595
                self.structLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 596
                self.structDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 597
                self.staticVarDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 598
                self.assignStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 599
                self.compoundAssignment()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 600
                self.forStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 601
                self.ifStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 602
                self.exprStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 603
                self.whileStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 604
                self.returnStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 605
                self.loopStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 606
                self.match(RustParser.T__26)
                self.state = 607
                self.match(RustParser.T__3)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 608
                self.match(RustParser.T__27)
                self.state = 609
                self.match(RustParser.T__3)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 610
                self.matchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStmt" ):
                listener.enterCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStmt" ):
                listener.exitCallStmt(self)




    def callStmt(self):

        localctx = RustParser.CallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_callStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.expression(0)
            self.state = 614
            self.callExpressionPostFix()
            self.state = 615
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_letStmt)
        try:
            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.match(RustParser.T__28)
                self.state = 618
                self.varDef()
                self.state = 619
                self.match(RustParser.T__6)
                self.state = 620
                self.expression(0)
                self.state = 621
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.match(RustParser.T__28)
                self.state = 624
                self.varDef()
                self.state = 625
                self.initBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 629
                self.match(RustParser.T__29)


            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 632
                self.match(RustParser.T__10)


            self.state = 635
            self.match(RustParser.Identifier)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 636
                self.match(RustParser.COLON)
                self.state = 637
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 547608330240) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.expression(0)
            self.state = 643
            self.compoundOp()
            self.state = 644
            self.expression(0)
            self.state = 645
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(RustParser.T__38)
            self.state = 648
            self.expression(0)
            self.state = 649
            self.match(RustParser.T__1)
            self.state = 651 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 650
                self.matchArm()
                self.state = 653 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 32771) != 0)):
                    break

            self.state = 655
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(RustParser.T__39)
            self.state = 658
            self.expression(0)
            self.state = 659
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_initializer)
        try:
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 661
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 663
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 666
                self.visibility()


            self.state = 669
            self.match(RustParser.T__9)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 670
                self.match(RustParser.T__10)


            self.state = 673
            self.match(RustParser.Identifier)
            self.state = 674
            self.match(RustParser.COLON)
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 675
                self.typeExpr()
                pass

            elif la_ == 2:
                self.state = 676
                self.match(RustParser.Identifier)
                pass


            self.state = 679
            self.match(RustParser.T__6)
            self.state = 680
            self.initializer()
            self.state = 681
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(RustParser.T__1)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==69:
                self.state = 684
                self.match(RustParser.Identifier)
                self.state = 685
                self.match(RustParser.COLON)
                self.state = 686
                self.expression(0)
                self.state = 687
                self.match(RustParser.COMMA)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 694
            self.match(RustParser.T__2)
            self.state = 695
            self.match(RustParser.T__3)
            self.state = 696
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.expression(0)
            self.state = 699
            self.match(RustParser.T__6)
            self.state = 700
            self.expression(0)
            self.state = 701
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(RustParser.T__40)
            self.state = 704
            self.match(RustParser.Identifier)
            self.state = 705
            self.match(RustParser.T__41)
            self.state = 706
            self.expression(0)
            self.state = 707
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(RustParser.T__42)
            self.state = 710
            self.expression(0)
            self.state = 711
            self.block()
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==44:
                self.state = 712
                self.match(RustParser.T__43)
                self.state = 713
                self.expression(0)
                self.state = 714
                self.block()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 721
                self.match(RustParser.T__44)
                self.state = 722
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.expression(0)
            self.state = 726
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 728
                self.match(RustParser.T__45)
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 864691130135218180) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 301055) != 0):
                    self.state = 729
                    self.expression(0)


                self.state = 732
                self.match(RustParser.T__3)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 733
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(RustParser.T__46)
            self.state = 737
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def typePathExpression(self):
            return self.getTypedRuleContext(RustParser.TypePathExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def structDefInit(self):
            return self.getTypedRuleContext(RustParser.StructDefInitContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def qualifiedExpression(self):
            return self.getTypedRuleContext(RustParser.QualifiedExpressionContext,0)


        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(RustParser.ArrayDeclarationContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def rangeSymbol(self):
            return self.getTypedRuleContext(RustParser.RangeSymbolContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 740
                self.mutableExpression()
                self.state = 741
                self.expression(22)
                pass

            elif la_ == 2:
                self.state = 743
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.state = 744
                self.typePathExpression()
                self.state = 745
                self.expression(19)
                pass

            elif la_ == 4:
                self.state = 747
                self.parenExpression()
                pass

            elif la_ == 5:
                self.state = 748
                self.structLiteral()
                pass

            elif la_ == 6:
                self.state = 749
                self.structFieldDec()
                pass

            elif la_ == 7:
                self.state = 750
                self.structDefInit()
                pass

            elif la_ == 8:
                self.state = 751
                self.unaryOpes()
                self.state = 752
                self.expression(14)
                pass

            elif la_ == 9:
                self.state = 754
                self.borrowExpression()
                pass

            elif la_ == 10:
                self.state = 755
                self.expressionBlock()
                pass

            elif la_ == 11:
                self.state = 756
                self.qualifiedExpression()
                pass

            elif la_ == 12:
                self.state = 757
                self.patternPrefix()
                self.state = 758
                self.expression(3)
                pass

            elif la_ == 13:
                self.state = 760
                self.arrayDeclaration()
                pass

            elif la_ == 14:
                self.state = 761
                self.dereferenceExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 790
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 764
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 765
                        self.rangeSymbol()
                        self.state = 766
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 768
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 769
                        self.booleanOps()
                        self.state = 770
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 772
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 773
                        self.binaryOps()
                        self.state = 774
                        self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 776
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 777
                        self.conditionalOps()
                        self.state = 778
                        self.expression(9)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 780
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 781
                        self.compoundOps()
                        self.state = 782
                        self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 784
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 785
                        self.castExpressionPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 786
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 787
                        self.fieldAccessPostFix()
                        pass

                    elif la_ == 8:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 788
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 789
                        self.callExpressionPostFix()
                        pass

             
                self.state = 794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QualifiedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedExpression" ):
                listener.enterQualifiedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedExpression" ):
                listener.exitQualifiedExpression(self)




    def qualifiedExpression(self):

        localctx = RustParser.QualifiedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_qualifiedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(RustParser.T__25)
            self.state = 796
            self.expression(0)
            self.state = 797
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structDefInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefInit" ):
                listener.enterStructDefInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefInit" ):
                listener.exitStructDefInit(self)




    def structDefInit(self):

        localctx = RustParser.StructDefInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_structDefInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(RustParser.Identifier)
            self.state = 800
            self.match(RustParser.T__6)
            self.state = 801
            self.match(RustParser.T__1)
            self.state = 802
            self.expression(0)
            self.state = 803
            self.match(RustParser.T__2)
            self.state = 804
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)




    def arrayDeclaration(self):

        localctx = RustParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(RustParser.Identifier)
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 807
                self.match(RustParser.EXCL)


            self.state = 810
            self.match(RustParser.LBRACK)
            self.state = 811
            self.match(RustParser.Number)
            self.state = 812
            self.match(RustParser.T__3)
            self.state = 813
            self.expression(0)
            self.state = 814
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathExpression" ):
                listener.enterTypePathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathExpression" ):
                listener.exitTypePathExpression(self)




    def typePathExpression(self):

        localctx = RustParser.TypePathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typePathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 816
                    self.match(RustParser.Identifier)
                    self.state = 817
                    self.match(RustParser.DOUBLE_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 820 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 822
                self.match(RustParser.T__28)


            self.state = 825
            self.pattern()
            self.state = 826
            self.match(RustParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 828
                    self.match(RustParser.T__29)


                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 831
                    self.match(RustParser.T__10)


                self.state = 834
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 835
                self.match(RustParser.Identifier)
                self.state = 836
                self.match(RustParser.LPAREN)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 837
                    self.match(RustParser.T__29)


                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 840
                    self.match(RustParser.T__10)


                self.state = 843
                self.match(RustParser.Identifier)
                self.state = 844
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(RustParser.T__4)
            self.state = 848
            self.typeExpr()
            self.state = 853
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 849
                    self.match(RustParser.T__4)
                    self.state = 850
                    self.typeExpr() 
                self.state = 855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 547608330240) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeSymbol" ):
                listener.enterRangeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeSymbol" ):
                listener.exitRangeSymbol(self)




    def rangeSymbol(self):

        localctx = RustParser.RangeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_rangeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(RustParser.T__47)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            _la = self._input.LA(1)
            if not(((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 2251799939514369) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 63050394783449088) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1080863910571016192) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(RustParser.Identifier)
            self.state = 867
            self.match(RustParser.T__1)
            self.state = 868
            self.structLiteralField()
            self.state = 873
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 869
                    self.match(RustParser.COMMA)
                    self.state = 870
                    self.structLiteralField() 
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 876
                self.match(RustParser.COMMA)


            self.state = 879
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(RustParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 262147) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(RustParser.LPAREN)
            self.state = 886
            self.expression(0)
            self.state = 887
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(RustParser.T__20)
            self.state = 890
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(RustParser.T__1)
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 893
                    self.statement() 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

            self.state = 899
            self.expression(0)
            self.state = 900
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(RustParser.T__17)
            self.state = 903
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_primaryExpression)
        try:
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_fieldAccessPostFix)
        try:
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.match(RustParser.LBRACK)
                self.state = 910
                self.primaryExpression()
                self.state = 911
                self.match(RustParser.RBRACK)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 913
                        self.match(RustParser.T__59)
                        self.state = 914
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 917 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallArgs(self):
            return self.getTypedRuleContext(RustParser.FunctionCallArgsContext,0)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_callExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpressionPostFix" ):
                listener.enterCallExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpressionPostFix" ):
                listener.exitCallExpressionPostFix(self)




    def callExpressionPostFix(self):

        localctx = RustParser.CallExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_callExpressionPostFix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 921
                self.match(RustParser.EXCL)


            self.state = 924
            self.functionCallArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_functionCallArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArgs" ):
                listener.enterFunctionCallArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArgs" ):
                listener.exitFunctionCallArgs(self)




    def functionCallArgs(self):

        localctx = RustParser.FunctionCallArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_functionCallArgs)
        self._la = 0 # Token type
        try:
            self.state = 938
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.match(RustParser.T__16)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.match(RustParser.LPAREN)
                self.state = 928
                self.expression(0)
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==81:
                    self.state = 929
                    self.match(RustParser.COMMA)
                    self.state = 930
                    self.expression(0)
                    self.state = 935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 936
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(RustParser.Identifier)
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 941
                self.match(RustParser.COLON)
                self.state = 942
                self.expression(0)


            self.state = 946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 945
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.matchPattern()
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 949
                self.match(RustParser.T__60)
                self.state = 950
                self.matchPattern()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 956
            self.match(RustParser.T__61)
            self.state = 957
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_literal)
        try:
            self.state = 971
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.arrayLiteral()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 962
                self.match(RustParser.HexNumber)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 963
                self.match(RustParser.Number)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 4)
                self.state = 964
                self.match(RustParser.SignedNumber)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 5)
                self.state = 965
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 6)
                self.state = 966
                self.match(RustParser.Binary)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 7)
                self.state = 967
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [64, 65]:
                self.enterOuterAlt(localctx, 8)
                self.state = 968
                self.booleanLiteral()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 9)
                self.state = 969
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 10)
                self.state = 970
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not(_la==64 or _la==65):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 975
                    self.match(RustParser.Identifier)


                self.state = 978
                self.match(RustParser.LBRACK)
                self.state = 979
                self.expression(0)
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==81:
                    self.state = 980
                    self.match(RustParser.COMMA)
                    self.state = 981
                    self.expression(0)
                    self.state = 986
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 987
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 989
                    self.match(RustParser.Identifier)


                self.state = 992
                self.match(RustParser.LBRACK)
                self.state = 993
                self.expression(0)
                self.state = 994
                self.match(RustParser.T__3)
                self.state = 995
                self.expression(0)
                self.state = 996
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(RustParser.T__62)
            self.state = 1004
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1001
                    self.matchWildcard() 
                self.state = 1006
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 1007
            self.match(RustParser.T__62)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[55] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         




