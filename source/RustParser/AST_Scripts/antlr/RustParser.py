# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,85,941,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,0,5,0,132,
        8,0,10,0,12,0,135,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,146,
        8,1,1,2,3,2,149,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,
        161,8,3,10,3,12,3,164,9,3,1,3,1,3,1,4,3,4,169,8,4,1,4,1,4,1,4,1,
        4,3,4,175,8,4,1,4,1,4,3,4,179,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,187,
        8,4,1,4,1,4,1,4,1,4,3,4,193,8,4,1,4,1,4,1,4,3,4,198,8,4,1,4,3,4,
        201,8,4,1,5,1,5,1,5,5,5,206,8,5,10,5,12,5,209,9,5,1,5,1,5,3,5,213,
        8,5,1,5,3,5,216,8,5,1,6,3,6,219,8,6,1,6,1,6,1,6,3,6,224,8,6,1,7,
        1,7,1,8,4,8,229,8,8,11,8,12,8,230,1,9,1,9,3,9,235,8,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,250,8,10,
        1,11,1,11,1,11,5,11,255,8,11,10,11,12,11,258,9,11,1,12,1,12,1,12,
        3,12,263,8,12,1,13,1,13,1,14,3,14,268,8,14,1,14,1,14,1,14,1,14,5,
        14,274,8,14,10,14,12,14,277,9,14,1,14,1,14,1,15,3,15,282,8,15,1,
        15,1,15,1,15,1,15,3,15,288,8,15,1,16,3,16,291,8,16,1,16,3,16,294,
        8,16,1,16,3,16,297,8,16,1,16,1,16,1,16,1,16,1,16,3,16,304,8,16,1,
        16,3,16,307,8,16,1,16,3,16,310,8,16,1,16,3,16,313,8,16,1,16,1,16,
        1,17,1,17,1,18,1,18,3,18,321,8,18,1,19,1,19,1,19,5,19,326,8,19,10,
        19,12,19,329,9,19,1,19,3,19,332,8,19,1,20,3,20,335,8,20,1,20,1,20,
        1,20,1,20,1,21,3,21,342,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,22,3,22,353,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,5,22,365,8,22,10,22,12,22,368,9,22,1,22,3,22,371,8,22,
        1,23,3,23,374,8,23,1,23,1,23,1,23,1,23,3,23,380,8,23,1,24,3,24,383,
        8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,3,26,398,8,26,1,27,1,27,1,27,3,27,403,8,27,1,27,1,27,1,27,5,
        27,408,8,27,10,27,12,27,411,9,27,3,27,413,8,27,1,28,1,28,1,28,3,
        28,418,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,
        29,430,8,29,10,29,12,29,433,9,29,1,29,1,29,3,29,437,8,29,1,29,1,
        29,1,29,1,29,1,29,5,29,444,8,29,10,29,12,29,447,9,29,1,29,1,29,3,
        29,451,8,29,1,29,1,29,1,29,3,29,456,8,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,470,8,29,1,30,1,30,5,30,
        474,8,30,10,30,12,30,477,9,30,1,30,3,30,480,8,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,5,31,504,8,31,10,31,12,31,507,9,31,
        1,31,1,31,1,31,3,31,512,8,31,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,34,1,34,1,34,1,34,4,34,525,8,34,11,34,12,34,526,1,34,1,34,1,35,
        1,35,1,35,1,36,1,36,1,36,1,36,1,37,3,37,539,8,37,1,37,1,37,3,37,
        543,8,37,1,37,1,37,1,37,1,37,3,37,549,8,37,1,37,1,37,1,37,1,37,1,
        38,1,38,3,38,557,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,3,
        40,567,8,40,1,40,1,40,1,40,3,40,572,8,40,1,40,1,40,1,40,1,40,3,40,
        578,8,40,1,40,1,40,1,40,3,40,583,8,40,3,40,585,8,40,1,41,1,41,1,
        41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,
        43,3,43,603,8,43,1,44,1,44,1,44,1,45,1,45,3,45,610,8,45,1,45,1,45,
        3,45,614,8,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,639,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,4,47,652,8,47,11,47,12,47,653,1,47,1,47,1,47,1,47,1,47,3,47,
        661,8,47,3,47,663,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,5,47,687,8,47,10,47,12,47,690,9,47,5,47,692,8,47,10,47,12,47,
        695,9,47,1,48,1,48,5,48,699,8,48,10,48,12,48,702,9,48,1,48,1,48,
        1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,3,50,714,8,50,1,50,3,50,
        717,8,50,1,50,1,50,4,50,721,8,50,11,50,12,50,722,1,50,1,50,1,50,
        1,50,3,50,729,8,50,1,50,1,50,3,50,733,8,50,1,50,1,50,1,50,1,50,4,
        50,739,8,50,11,50,12,50,740,1,51,1,51,1,51,1,51,1,51,1,51,3,51,749,
        8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,761,
        8,51,10,51,12,51,764,9,51,1,51,3,51,767,8,51,1,51,1,51,3,51,771,
        8,51,1,52,1,52,1,52,1,52,3,52,777,8,52,1,52,1,52,1,52,3,52,782,8,
        52,1,52,3,52,785,8,52,1,52,1,52,1,52,5,52,790,8,52,10,52,12,52,793,
        9,52,1,52,1,52,5,52,797,8,52,10,52,12,52,800,9,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,5,52,809,8,52,10,52,12,52,812,9,52,1,52,3,52,
        815,8,52,3,52,817,8,52,1,53,1,53,1,53,1,53,5,53,823,8,53,10,53,12,
        53,826,9,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,5,55,837,
        8,55,10,55,12,55,840,9,55,1,55,1,55,1,55,1,56,1,56,1,57,1,57,3,57,
        849,8,57,1,57,1,57,1,57,3,57,854,8,57,5,57,856,8,57,10,57,12,57,
        859,9,57,1,57,3,57,862,8,57,1,57,1,57,4,57,866,8,57,11,57,12,57,
        867,1,57,1,57,1,57,1,57,1,57,3,57,875,8,57,3,57,877,8,57,1,58,1,
        58,1,58,1,58,1,59,1,59,3,59,885,8,59,1,59,1,59,1,59,3,59,890,8,59,
        1,59,3,59,893,8,59,1,60,1,60,1,60,3,60,898,8,60,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,3,61,909,8,61,1,62,1,62,1,63,1,63,1,
        63,1,63,5,63,917,8,63,10,63,12,63,920,9,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,3,63,930,8,63,1,64,1,64,5,64,934,8,64,10,64,12,
        64,937,9,64,1,64,1,64,1,64,1,935,1,94,65,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,0,8,2,0,66,66,81,
        81,1,0,65,67,2,0,8,8,15,15,1,0,27,34,2,0,17,18,46,52,3,0,23,23,53,
        56,74,74,2,0,66,67,81,81,1,0,62,63,1053,0,133,1,0,0,0,2,145,1,0,
        0,0,4,148,1,0,0,0,6,156,1,0,0,0,8,200,1,0,0,0,10,215,1,0,0,0,12,
        218,1,0,0,0,14,225,1,0,0,0,16,228,1,0,0,0,18,232,1,0,0,0,20,249,
        1,0,0,0,22,251,1,0,0,0,24,259,1,0,0,0,26,264,1,0,0,0,28,267,1,0,
        0,0,30,281,1,0,0,0,32,290,1,0,0,0,34,316,1,0,0,0,36,318,1,0,0,0,
        38,322,1,0,0,0,40,334,1,0,0,0,42,341,1,0,0,0,44,352,1,0,0,0,46,373,
        1,0,0,0,48,382,1,0,0,0,50,392,1,0,0,0,52,397,1,0,0,0,54,412,1,0,
        0,0,56,414,1,0,0,0,58,469,1,0,0,0,60,471,1,0,0,0,62,511,1,0,0,0,
        64,513,1,0,0,0,66,515,1,0,0,0,68,520,1,0,0,0,70,530,1,0,0,0,72,533,
        1,0,0,0,74,538,1,0,0,0,76,556,1,0,0,0,78,558,1,0,0,0,80,584,1,0,
        0,0,82,586,1,0,0,0,84,591,1,0,0,0,86,597,1,0,0,0,88,604,1,0,0,0,
        90,613,1,0,0,0,92,615,1,0,0,0,94,662,1,0,0,0,96,696,1,0,0,0,98,706,
        1,0,0,0,100,709,1,0,0,0,102,770,1,0,0,0,104,816,1,0,0,0,106,818,
        1,0,0,0,108,829,1,0,0,0,110,833,1,0,0,0,112,844,1,0,0,0,114,876,
        1,0,0,0,116,878,1,0,0,0,118,892,1,0,0,0,120,894,1,0,0,0,122,908,
        1,0,0,0,124,910,1,0,0,0,126,929,1,0,0,0,128,931,1,0,0,0,130,132,
        3,2,1,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,
        1,0,0,0,134,1,1,0,0,0,135,133,1,0,0,0,136,146,3,32,16,0,137,146,
        3,28,14,0,138,146,3,16,8,0,139,146,3,6,3,0,140,146,3,4,2,0,141,146,
        3,42,21,0,142,146,3,44,22,0,143,146,3,48,24,0,144,146,3,74,37,0,
        145,136,1,0,0,0,145,137,1,0,0,0,145,138,1,0,0,0,145,139,1,0,0,0,
        145,140,1,0,0,0,145,141,1,0,0,0,145,142,1,0,0,0,145,143,1,0,0,0,
        145,144,1,0,0,0,146,3,1,0,0,0,147,149,3,14,7,0,148,147,1,0,0,0,148,
        149,1,0,0,0,149,150,1,0,0,0,150,151,5,1,0,0,151,152,5,66,0,0,152,
        153,5,2,0,0,153,154,3,52,26,0,154,155,5,3,0,0,155,5,1,0,0,0,156,
        157,5,4,0,0,157,158,5,65,0,0,158,162,5,5,0,0,159,161,3,8,4,0,160,
        159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,
        165,1,0,0,0,164,162,1,0,0,0,165,166,5,6,0,0,166,7,1,0,0,0,167,169,
        3,14,7,0,168,167,1,0,0,0,168,169,1,0,0,0,169,170,1,0,0,0,170,171,
        5,1,0,0,171,172,5,66,0,0,172,201,5,3,0,0,173,175,3,14,7,0,174,173,
        1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,178,5,7,0,0,177,179,
        5,8,0,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,
        5,66,0,0,181,182,5,82,0,0,182,183,3,52,26,0,183,184,5,3,0,0,184,
        201,1,0,0,0,185,187,3,14,7,0,186,185,1,0,0,0,186,187,1,0,0,0,187,
        188,1,0,0,0,188,189,5,9,0,0,189,190,5,66,0,0,190,192,5,79,0,0,191,
        193,3,10,5,0,192,191,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,
        197,5,80,0,0,195,196,5,10,0,0,196,198,3,52,26,0,197,195,1,0,0,0,
        197,198,1,0,0,0,198,199,1,0,0,0,199,201,5,3,0,0,200,168,1,0,0,0,
        200,174,1,0,0,0,200,186,1,0,0,0,201,9,1,0,0,0,202,207,3,12,6,0,203,
        204,5,78,0,0,204,206,3,12,6,0,205,203,1,0,0,0,206,209,1,0,0,0,207,
        205,1,0,0,0,207,208,1,0,0,0,208,212,1,0,0,0,209,207,1,0,0,0,210,
        211,5,78,0,0,211,213,5,83,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,
        216,1,0,0,0,214,216,5,83,0,0,215,202,1,0,0,0,215,214,1,0,0,0,216,
        11,1,0,0,0,217,219,7,0,0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,220,
        1,0,0,0,220,223,5,82,0,0,221,224,3,52,26,0,222,224,5,83,0,0,223,
        221,1,0,0,0,223,222,1,0,0,0,224,13,1,0,0,0,225,226,5,11,0,0,226,
        15,1,0,0,0,227,229,3,18,9,0,228,227,1,0,0,0,229,230,1,0,0,0,230,
        228,1,0,0,0,230,231,1,0,0,0,231,17,1,0,0,0,232,234,5,75,0,0,233,
        235,5,73,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,
        237,5,76,0,0,237,238,3,20,10,0,238,239,5,77,0,0,239,19,1,0,0,0,240,
        250,5,66,0,0,241,242,5,66,0,0,242,243,5,2,0,0,243,250,3,26,13,0,
        244,245,5,66,0,0,245,246,5,79,0,0,246,247,3,22,11,0,247,248,5,80,
        0,0,248,250,1,0,0,0,249,240,1,0,0,0,249,241,1,0,0,0,249,244,1,0,
        0,0,250,21,1,0,0,0,251,256,3,24,12,0,252,253,5,78,0,0,253,255,3,
        24,12,0,254,252,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,
        1,0,0,0,257,23,1,0,0,0,258,256,1,0,0,0,259,262,5,66,0,0,260,261,
        5,2,0,0,261,263,3,26,13,0,262,260,1,0,0,0,262,263,1,0,0,0,263,25,
        1,0,0,0,264,265,7,1,0,0,265,27,1,0,0,0,266,268,3,14,7,0,267,266,
        1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,270,5,12,0,0,270,271,
        5,66,0,0,271,275,5,5,0,0,272,274,3,30,15,0,273,272,1,0,0,0,274,277,
        1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,275,
        1,0,0,0,278,279,5,6,0,0,279,29,1,0,0,0,280,282,3,14,7,0,281,280,
        1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,284,5,66,0,0,284,285,
        5,82,0,0,285,287,3,52,26,0,286,288,5,78,0,0,287,286,1,0,0,0,287,
        288,1,0,0,0,288,31,1,0,0,0,289,291,3,14,7,0,290,289,1,0,0,0,290,
        291,1,0,0,0,291,293,1,0,0,0,292,294,3,34,17,0,293,292,1,0,0,0,293,
        294,1,0,0,0,294,296,1,0,0,0,295,297,3,36,18,0,296,295,1,0,0,0,296,
        297,1,0,0,0,297,298,1,0,0,0,298,299,5,9,0,0,299,306,5,66,0,0,300,
        307,5,13,0,0,301,303,5,79,0,0,302,304,3,38,19,0,303,302,1,0,0,0,
        303,304,1,0,0,0,304,305,1,0,0,0,305,307,5,80,0,0,306,300,1,0,0,0,
        306,301,1,0,0,0,307,309,1,0,0,0,308,310,5,10,0,0,309,308,1,0,0,0,
        309,310,1,0,0,0,310,312,1,0,0,0,311,313,3,52,26,0,312,311,1,0,0,
        0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,3,60,30,0,315,33,1,0,0,
        0,316,317,5,14,0,0,317,35,1,0,0,0,318,320,5,4,0,0,319,321,5,65,0,
        0,320,319,1,0,0,0,320,321,1,0,0,0,321,37,1,0,0,0,322,327,3,40,20,
        0,323,324,5,78,0,0,324,326,3,40,20,0,325,323,1,0,0,0,326,329,1,0,
        0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,331,1,0,0,0,329,327,1,0,
        0,0,330,332,5,78,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,39,1,0,
        0,0,333,335,5,8,0,0,334,333,1,0,0,0,334,335,1,0,0,0,335,336,1,0,
        0,0,336,337,5,66,0,0,337,338,5,82,0,0,338,339,3,52,26,0,339,41,1,
        0,0,0,340,342,3,14,7,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,
        0,0,0,343,344,5,15,0,0,344,345,5,66,0,0,345,346,5,82,0,0,346,347,
        3,52,26,0,347,348,5,2,0,0,348,349,3,94,47,0,349,350,5,3,0,0,350,
        43,1,0,0,0,351,353,3,14,7,0,352,351,1,0,0,0,352,353,1,0,0,0,353,
        354,1,0,0,0,354,355,5,16,0,0,355,370,5,66,0,0,356,357,5,82,0,0,357,
        358,3,52,26,0,358,359,5,2,0,0,359,360,3,94,47,0,360,361,5,3,0,0,
        361,371,1,0,0,0,362,366,5,5,0,0,363,365,3,46,23,0,364,363,1,0,0,
        0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,
        0,368,366,1,0,0,0,369,371,5,6,0,0,370,356,1,0,0,0,370,362,1,0,0,
        0,371,45,1,0,0,0,372,374,3,14,7,0,373,372,1,0,0,0,373,374,1,0,0,
        0,374,375,1,0,0,0,375,376,5,66,0,0,376,377,5,82,0,0,377,379,3,52,
        26,0,378,380,5,78,0,0,379,378,1,0,0,0,379,380,1,0,0,0,380,47,1,0,
        0,0,381,383,3,14,7,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,0,
        0,0,384,385,5,14,0,0,385,386,5,66,0,0,386,387,5,82,0,0,387,388,3,
        52,26,0,388,389,5,2,0,0,389,390,3,94,47,0,390,391,5,3,0,0,391,49,
        1,0,0,0,392,393,5,17,0,0,393,394,3,52,26,0,394,51,1,0,0,0,395,398,
        3,58,29,0,396,398,3,56,28,0,397,395,1,0,0,0,397,396,1,0,0,0,398,
        53,1,0,0,0,399,400,5,66,0,0,400,413,5,72,0,0,401,403,5,72,0,0,402,
        401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,409,5,66,0,0,405,
        406,5,72,0,0,406,408,5,66,0,0,407,405,1,0,0,0,408,411,1,0,0,0,409,
        407,1,0,0,0,409,410,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,412,
        399,1,0,0,0,412,402,1,0,0,0,413,55,1,0,0,0,414,415,5,18,0,0,415,
        417,7,2,0,0,416,418,3,52,26,0,417,416,1,0,0,0,417,418,1,0,0,0,418,
        57,1,0,0,0,419,470,5,19,0,0,420,470,5,20,0,0,421,470,5,21,0,0,422,
        470,5,22,0,0,423,470,5,13,0,0,424,436,3,54,27,0,425,426,5,23,0,0,
        426,431,3,52,26,0,427,428,5,78,0,0,428,430,3,52,26,0,429,427,1,0,
        0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,434,1,0,
        0,0,433,431,1,0,0,0,434,435,5,74,0,0,435,437,1,0,0,0,436,425,1,0,
        0,0,436,437,1,0,0,0,437,470,1,0,0,0,438,450,5,66,0,0,439,440,5,23,
        0,0,440,445,3,52,26,0,441,442,5,78,0,0,442,444,3,52,26,0,443,441,
        1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,448,
        1,0,0,0,447,445,1,0,0,0,448,449,5,74,0,0,449,451,1,0,0,0,450,439,
        1,0,0,0,450,451,1,0,0,0,451,470,1,0,0,0,452,453,5,17,0,0,453,470,
        3,52,26,0,454,456,3,54,27,0,455,454,1,0,0,0,455,456,1,0,0,0,456,
        457,1,0,0,0,457,458,5,76,0,0,458,459,3,52,26,0,459,460,5,3,0,0,460,
        461,5,67,0,0,461,462,5,77,0,0,462,470,1,0,0,0,463,470,3,54,27,0,
        464,465,5,76,0,0,465,466,3,52,26,0,466,467,5,77,0,0,467,470,1,0,
        0,0,468,470,5,66,0,0,469,419,1,0,0,0,469,420,1,0,0,0,469,421,1,0,
        0,0,469,422,1,0,0,0,469,423,1,0,0,0,469,424,1,0,0,0,469,438,1,0,
        0,0,469,452,1,0,0,0,469,455,1,0,0,0,469,463,1,0,0,0,469,464,1,0,
        0,0,469,468,1,0,0,0,470,59,1,0,0,0,471,475,5,5,0,0,472,474,3,62,
        31,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,
        0,0,476,479,1,0,0,0,477,475,1,0,0,0,478,480,3,90,45,0,479,478,1,
        0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,482,5,6,0,0,482,61,1,0,
        0,0,483,512,3,78,39,0,484,512,3,74,37,0,485,512,3,82,41,0,486,487,
        5,66,0,0,487,512,5,3,0,0,488,512,3,66,33,0,489,512,3,84,42,0,490,
        512,3,86,43,0,491,512,3,88,44,0,492,512,3,72,36,0,493,512,3,90,45,
        0,494,512,3,92,46,0,495,496,5,24,0,0,496,512,5,3,0,0,497,498,5,25,
        0,0,498,512,5,3,0,0,499,512,3,68,34,0,500,505,3,104,52,0,501,502,
        5,26,0,0,502,504,3,104,52,0,503,501,1,0,0,0,504,507,1,0,0,0,505,
        503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,
        509,5,3,0,0,509,512,1,0,0,0,510,512,3,70,35,0,511,483,1,0,0,0,511,
        484,1,0,0,0,511,485,1,0,0,0,511,486,1,0,0,0,511,488,1,0,0,0,511,
        489,1,0,0,0,511,490,1,0,0,0,511,491,1,0,0,0,511,492,1,0,0,0,511,
        493,1,0,0,0,511,494,1,0,0,0,511,495,1,0,0,0,511,497,1,0,0,0,511,
        499,1,0,0,0,511,500,1,0,0,0,511,510,1,0,0,0,512,63,1,0,0,0,513,514,
        7,3,0,0,514,65,1,0,0,0,515,516,3,94,47,0,516,517,3,64,32,0,517,518,
        3,94,47,0,518,519,5,3,0,0,519,67,1,0,0,0,520,521,5,35,0,0,521,522,
        3,94,47,0,522,524,5,5,0,0,523,525,3,110,55,0,524,523,1,0,0,0,525,
        526,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,0,528,
        529,5,6,0,0,529,69,1,0,0,0,530,531,5,14,0,0,531,532,3,60,30,0,532,
        71,1,0,0,0,533,534,5,36,0,0,534,535,3,94,47,0,535,536,3,60,30,0,
        536,73,1,0,0,0,537,539,3,14,7,0,538,537,1,0,0,0,538,539,1,0,0,0,
        539,540,1,0,0,0,540,542,5,7,0,0,541,543,5,8,0,0,542,541,1,0,0,0,
        542,543,1,0,0,0,543,544,1,0,0,0,544,545,5,66,0,0,545,548,5,82,0,
        0,546,549,3,52,26,0,547,549,5,66,0,0,548,546,1,0,0,0,548,547,1,0,
        0,0,549,550,1,0,0,0,550,551,5,2,0,0,551,552,3,76,38,0,552,553,5,
        3,0,0,553,75,1,0,0,0,554,557,3,94,47,0,555,557,3,60,30,0,556,554,
        1,0,0,0,556,555,1,0,0,0,557,77,1,0,0,0,558,559,5,37,0,0,559,560,
        3,80,40,0,560,561,5,2,0,0,561,562,3,94,47,0,562,563,5,3,0,0,563,
        79,1,0,0,0,564,566,5,38,0,0,565,567,5,8,0,0,566,565,1,0,0,0,566,
        567,1,0,0,0,567,568,1,0,0,0,568,571,5,66,0,0,569,570,5,82,0,0,570,
        572,3,52,26,0,571,569,1,0,0,0,571,572,1,0,0,0,572,585,1,0,0,0,573,
        574,5,8,0,0,574,577,5,66,0,0,575,576,5,82,0,0,576,578,3,52,26,0,
        577,575,1,0,0,0,577,578,1,0,0,0,578,585,1,0,0,0,579,582,5,66,0,0,
        580,581,5,82,0,0,581,583,3,52,26,0,582,580,1,0,0,0,582,583,1,0,0,
        0,583,585,1,0,0,0,584,564,1,0,0,0,584,573,1,0,0,0,584,579,1,0,0,
        0,585,81,1,0,0,0,586,587,3,94,47,0,587,588,5,2,0,0,588,589,3,94,
        47,0,589,590,5,3,0,0,590,83,1,0,0,0,591,592,5,39,0,0,592,593,5,66,
        0,0,593,594,5,40,0,0,594,595,3,94,47,0,595,596,3,60,30,0,596,85,
        1,0,0,0,597,598,5,41,0,0,598,599,3,94,47,0,599,602,3,60,30,0,600,
        601,5,42,0,0,601,603,3,60,30,0,602,600,1,0,0,0,602,603,1,0,0,0,603,
        87,1,0,0,0,604,605,3,94,47,0,605,606,5,3,0,0,606,89,1,0,0,0,607,
        609,5,43,0,0,608,610,3,94,47,0,609,608,1,0,0,0,609,610,1,0,0,0,610,
        611,1,0,0,0,611,614,5,3,0,0,612,614,5,66,0,0,613,607,1,0,0,0,613,
        612,1,0,0,0,614,91,1,0,0,0,615,616,5,44,0,0,616,617,3,60,30,0,617,
        93,1,0,0,0,618,619,6,47,-1,0,619,663,3,100,50,0,620,663,3,122,61,
        0,621,663,3,102,51,0,622,623,5,18,0,0,623,663,3,94,47,16,624,663,
        3,116,58,0,625,663,3,98,49,0,626,627,3,54,27,0,627,628,5,72,0,0,
        628,629,5,23,0,0,629,630,3,52,26,0,630,631,5,45,0,0,631,663,1,0,
        0,0,632,633,5,73,0,0,633,663,3,94,47,11,634,635,5,66,0,0,635,636,
        5,73,0,0,636,638,5,79,0,0,637,639,3,114,57,0,638,637,1,0,0,0,638,
        639,1,0,0,0,639,640,1,0,0,0,640,663,5,80,0,0,641,663,3,96,48,0,642,
        643,5,17,0,0,643,644,5,8,0,0,644,663,3,94,47,3,645,646,5,79,0,0,
        646,647,3,94,47,0,647,648,5,80,0,0,648,663,1,0,0,0,649,650,5,72,
        0,0,650,652,5,66,0,0,651,649,1,0,0,0,652,653,1,0,0,0,653,651,1,0,
        0,0,653,654,1,0,0,0,654,660,1,0,0,0,655,661,5,13,0,0,656,657,5,79,
        0,0,657,658,3,114,57,0,658,659,5,80,0,0,659,661,1,0,0,0,660,655,
        1,0,0,0,660,656,1,0,0,0,661,663,1,0,0,0,662,618,1,0,0,0,662,620,
        1,0,0,0,662,621,1,0,0,0,662,622,1,0,0,0,662,624,1,0,0,0,662,625,
        1,0,0,0,662,626,1,0,0,0,662,632,1,0,0,0,662,634,1,0,0,0,662,641,
        1,0,0,0,662,642,1,0,0,0,662,645,1,0,0,0,662,651,1,0,0,0,663,693,
        1,0,0,0,664,665,10,10,0,0,665,666,7,4,0,0,666,692,3,94,47,11,667,
        668,10,9,0,0,668,669,7,5,0,0,669,692,3,94,47,10,670,671,10,8,0,0,
        671,672,5,57,0,0,672,692,3,94,47,9,673,674,10,7,0,0,674,675,7,3,
        0,0,675,692,3,94,47,8,676,677,10,12,0,0,677,678,5,76,0,0,678,679,
        3,94,47,0,679,680,5,77,0,0,680,692,1,0,0,0,681,682,10,5,0,0,682,
        683,5,58,0,0,683,688,3,52,26,0,684,685,5,58,0,0,685,687,3,52,26,
        0,686,684,1,0,0,0,687,690,1,0,0,0,688,686,1,0,0,0,688,689,1,0,0,
        0,689,692,1,0,0,0,690,688,1,0,0,0,691,664,1,0,0,0,691,667,1,0,0,
        0,691,670,1,0,0,0,691,673,1,0,0,0,691,676,1,0,0,0,691,681,1,0,0,
        0,692,695,1,0,0,0,693,691,1,0,0,0,693,694,1,0,0,0,694,95,1,0,0,0,
        695,693,1,0,0,0,696,700,5,5,0,0,697,699,3,62,31,0,698,697,1,0,0,
        0,699,702,1,0,0,0,700,698,1,0,0,0,700,701,1,0,0,0,701,703,1,0,0,
        0,702,700,1,0,0,0,703,704,3,94,47,0,704,705,5,6,0,0,705,97,1,0,0,
        0,706,707,5,17,0,0,707,708,3,94,47,0,708,99,1,0,0,0,709,738,3,102,
        51,0,710,717,5,13,0,0,711,713,5,79,0,0,712,714,3,114,57,0,713,712,
        1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,717,5,80,0,0,716,710,
        1,0,0,0,716,711,1,0,0,0,717,739,1,0,0,0,718,719,5,26,0,0,719,721,
        5,66,0,0,720,718,1,0,0,0,721,722,1,0,0,0,722,720,1,0,0,0,722,723,
        1,0,0,0,723,739,1,0,0,0,724,725,5,26,0,0,725,732,5,66,0,0,726,728,
        5,79,0,0,727,729,3,114,57,0,728,727,1,0,0,0,728,729,1,0,0,0,729,
        730,1,0,0,0,730,733,5,80,0,0,731,733,5,13,0,0,732,726,1,0,0,0,732,
        731,1,0,0,0,733,739,1,0,0,0,734,735,5,76,0,0,735,736,3,94,47,0,736,
        737,5,77,0,0,737,739,1,0,0,0,738,716,1,0,0,0,738,720,1,0,0,0,738,
        724,1,0,0,0,738,734,1,0,0,0,739,740,1,0,0,0,740,738,1,0,0,0,740,
        741,1,0,0,0,741,101,1,0,0,0,742,771,3,122,61,0,743,771,5,66,0,0,
        744,771,3,104,52,0,745,746,5,66,0,0,746,748,5,79,0,0,747,749,3,114,
        57,0,748,747,1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,771,5,80,
        0,0,751,752,5,79,0,0,752,753,3,94,47,0,753,754,5,80,0,0,754,771,
        1,0,0,0,755,756,5,66,0,0,756,757,5,5,0,0,757,762,3,108,54,0,758,
        759,5,78,0,0,759,761,3,108,54,0,760,758,1,0,0,0,761,764,1,0,0,0,
        762,760,1,0,0,0,762,763,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,
        765,767,5,78,0,0,766,765,1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,
        768,769,5,6,0,0,769,771,1,0,0,0,770,742,1,0,0,0,770,743,1,0,0,0,
        770,744,1,0,0,0,770,745,1,0,0,0,770,751,1,0,0,0,770,755,1,0,0,0,
        771,103,1,0,0,0,772,773,5,72,0,0,773,774,3,54,27,0,774,776,5,66,
        0,0,775,777,3,106,53,0,776,775,1,0,0,0,776,777,1,0,0,0,777,784,1,
        0,0,0,778,785,5,13,0,0,779,781,5,79,0,0,780,782,3,114,57,0,781,780,
        1,0,0,0,781,782,1,0,0,0,782,783,1,0,0,0,783,785,5,80,0,0,784,778,
        1,0,0,0,784,779,1,0,0,0,785,817,1,0,0,0,786,791,5,66,0,0,787,788,
        5,26,0,0,788,790,5,66,0,0,789,787,1,0,0,0,790,793,1,0,0,0,791,789,
        1,0,0,0,791,792,1,0,0,0,792,798,1,0,0,0,793,791,1,0,0,0,794,795,
        5,72,0,0,795,797,5,66,0,0,796,794,1,0,0,0,797,800,1,0,0,0,798,796,
        1,0,0,0,798,799,1,0,0,0,799,814,1,0,0,0,800,798,1,0,0,0,801,815,
        5,13,0,0,802,810,5,79,0,0,803,804,5,66,0,0,804,805,5,79,0,0,805,
        806,5,65,0,0,806,809,5,80,0,0,807,809,3,114,57,0,808,803,1,0,0,0,
        808,807,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,
        811,813,1,0,0,0,812,810,1,0,0,0,813,815,5,80,0,0,814,801,1,0,0,0,
        814,802,1,0,0,0,815,817,1,0,0,0,816,772,1,0,0,0,816,786,1,0,0,0,
        817,105,1,0,0,0,818,819,5,23,0,0,819,824,3,52,26,0,820,821,5,78,
        0,0,821,823,3,52,26,0,822,820,1,0,0,0,823,826,1,0,0,0,824,822,1,
        0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,824,1,0,0,0,827,828,5,
        74,0,0,828,107,1,0,0,0,829,830,5,66,0,0,830,831,5,82,0,0,831,832,
        3,94,47,0,832,109,1,0,0,0,833,838,3,112,56,0,834,835,5,59,0,0,835,
        837,3,112,56,0,836,834,1,0,0,0,837,840,1,0,0,0,838,836,1,0,0,0,838,
        839,1,0,0,0,839,841,1,0,0,0,840,838,1,0,0,0,841,842,5,60,0,0,842,
        843,3,60,30,0,843,111,1,0,0,0,844,845,7,6,0,0,845,113,1,0,0,0,846,
        849,3,104,52,0,847,849,3,94,47,0,848,846,1,0,0,0,848,847,1,0,0,0,
        849,857,1,0,0,0,850,853,5,78,0,0,851,854,3,104,52,0,852,854,3,94,
        47,0,853,851,1,0,0,0,853,852,1,0,0,0,854,856,1,0,0,0,855,850,1,0,
        0,0,856,859,1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,861,1,0,
        0,0,859,857,1,0,0,0,860,862,5,78,0,0,861,860,1,0,0,0,861,862,1,0,
        0,0,862,877,1,0,0,0,863,864,5,72,0,0,864,866,5,66,0,0,865,863,1,
        0,0,0,866,867,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,874,1,
        0,0,0,869,875,5,13,0,0,870,871,5,79,0,0,871,872,3,114,57,0,872,873,
        5,80,0,0,873,875,1,0,0,0,874,869,1,0,0,0,874,870,1,0,0,0,875,877,
        1,0,0,0,876,848,1,0,0,0,876,865,1,0,0,0,877,115,1,0,0,0,878,879,
        5,66,0,0,879,880,5,73,0,0,880,881,3,118,59,0,881,117,1,0,0,0,882,
        884,5,76,0,0,883,885,3,120,60,0,884,883,1,0,0,0,884,885,1,0,0,0,
        885,886,1,0,0,0,886,893,5,77,0,0,887,889,5,79,0,0,888,890,3,120,
        60,0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,893,5,80,
        0,0,892,882,1,0,0,0,892,887,1,0,0,0,893,119,1,0,0,0,894,897,3,94,
        47,0,895,896,5,3,0,0,896,898,3,94,47,0,897,895,1,0,0,0,897,898,1,
        0,0,0,898,121,1,0,0,0,899,909,3,126,63,0,900,909,5,70,0,0,901,909,
        5,67,0,0,902,909,5,68,0,0,903,909,5,69,0,0,904,909,5,64,0,0,905,
        909,5,65,0,0,906,909,3,124,62,0,907,909,5,71,0,0,908,899,1,0,0,0,
        908,900,1,0,0,0,908,901,1,0,0,0,908,902,1,0,0,0,908,903,1,0,0,0,
        908,904,1,0,0,0,908,905,1,0,0,0,908,906,1,0,0,0,908,907,1,0,0,0,
        909,123,1,0,0,0,910,911,7,7,0,0,911,125,1,0,0,0,912,913,5,76,0,0,
        913,918,3,94,47,0,914,915,5,78,0,0,915,917,3,94,47,0,916,914,1,0,
        0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,921,1,0,
        0,0,920,918,1,0,0,0,921,922,5,77,0,0,922,930,1,0,0,0,923,924,5,76,
        0,0,924,925,3,94,47,0,925,926,5,3,0,0,926,927,3,94,47,0,927,928,
        5,77,0,0,928,930,1,0,0,0,929,912,1,0,0,0,929,923,1,0,0,0,930,127,
        1,0,0,0,931,935,5,61,0,0,932,934,9,0,0,0,933,932,1,0,0,0,934,937,
        1,0,0,0,935,936,1,0,0,0,935,933,1,0,0,0,936,938,1,0,0,0,937,935,
        1,0,0,0,938,939,5,61,0,0,939,129,1,0,0,0,116,133,145,148,162,168,
        174,178,186,192,197,200,207,212,215,218,223,230,234,249,256,262,
        267,275,281,287,290,293,296,303,306,309,312,320,327,331,334,341,
        352,366,370,373,379,382,397,402,409,412,417,431,436,445,450,455,
        469,475,479,505,511,526,538,542,548,556,566,571,577,582,584,602,
        609,613,638,653,660,662,688,691,693,700,713,716,722,728,732,738,
        740,748,762,766,770,776,781,784,791,798,808,810,814,816,824,838,
        848,853,857,861,867,874,876,884,889,892,897,908,918,929,935
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'extern'", "'{'", 
                     "'}'", "'static'", "'mut'", "'fn'", "'->'", "'pub'", 
                     "'struct'", "'()'", "'unsafe'", "'const'", "'union'", 
                     "'&'", "'*'", "'i32'", "'String'", "'bool'", "'u8'", 
                     "'<'", "'break'", "'continue'", "'.'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'match'", 
                     "'while'", "'let'", "'ref'", "'for'", "'in'", "'if'", 
                     "'else'", "'return'", "'loop'", "'>()'", "'/'", "'%'", 
                     "'+'", "'-'", "'>>'", "'>='", "'<='", "'=='", "'!='", 
                     "'||'", "'&&'", "'..'", "'as'", "'|'", "'=>'", "'\"'", 
                     "'true'", "'false'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'::'", "'!'", "'>'", "'#'", "'['", "']'", 
                     "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "Binary", 
                      "STRING_LITERAL", "Identifier", "Number", "SignedNumber", 
                      "BYTE_STRING_LITERAL", "HexNumber", "CHAR_LITERAL", 
                      "DOUBLE_COLON", "EXCL", "GT", "POUND", "LBRACK", "RBRACK", 
                      "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", "COLON", 
                      "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_typeAlias = 2
    RULE_externBlock = 3
    RULE_externItem = 4
    RULE_externParams = 5
    RULE_externParam = 6
    RULE_visibility = 7
    RULE_attributes = 8
    RULE_innerAttribute = 9
    RULE_attribute = 10
    RULE_attrArgs = 11
    RULE_attrArg = 12
    RULE_attrValue = 13
    RULE_structDef = 14
    RULE_structField = 15
    RULE_functionDef = 16
    RULE_unsafeModifier = 17
    RULE_externAbi = 18
    RULE_paramList = 19
    RULE_param = 20
    RULE_constDef = 21
    RULE_unionDef = 22
    RULE_unionField = 23
    RULE_unsafeDef = 24
    RULE_referenceType = 25
    RULE_type = 26
    RULE_typePath = 27
    RULE_pointerType = 28
    RULE_basicType = 29
    RULE_block = 30
    RULE_statement = 31
    RULE_compoundOp = 32
    RULE_compoundAssignment = 33
    RULE_matchStmt = 34
    RULE_unsafeBlock = 35
    RULE_whileStmt = 36
    RULE_staticVarDecl = 37
    RULE_initializer = 38
    RULE_letStmt = 39
    RULE_varDef = 40
    RULE_assignStmt = 41
    RULE_forStmt = 42
    RULE_ifStmt = 43
    RULE_exprStmt = 44
    RULE_returnStmt = 45
    RULE_loopStmt = 46
    RULE_expression = 47
    RULE_expressionBlock = 48
    RULE_borrowExpression = 49
    RULE_postfixExpression = 50
    RULE_primaryExpression = 51
    RULE_qualifiedFunctionCall = 52
    RULE_genericArgs = 53
    RULE_structLiteralField = 54
    RULE_matchArm = 55
    RULE_matchPattern = 56
    RULE_argumentList = 57
    RULE_macroCall = 58
    RULE_macroArgs = 59
    RULE_macroInner = 60
    RULE_literal = 61
    RULE_booleanLiteral = 62
    RULE_arrayLiteral = 63
    RULE_stringLiteral = 64

    ruleNames =  [ "program", "topLevelItem", "typeAlias", "externBlock", 
                   "externItem", "externParams", "externParam", "visibility", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "functionDef", 
                   "unsafeModifier", "externAbi", "paramList", "param", 
                   "constDef", "unionDef", "unionField", "unsafeDef", "referenceType", 
                   "type", "typePath", "pointerType", "basicType", "block", 
                   "statement", "compoundOp", "compoundAssignment", "matchStmt", 
                   "unsafeBlock", "whileStmt", "staticVarDecl", "initializer", 
                   "letStmt", "varDef", "assignStmt", "forStmt", "ifStmt", 
                   "exprStmt", "returnStmt", "loopStmt", "expression", "expressionBlock", 
                   "borrowExpression", "postfixExpression", "primaryExpression", 
                   "qualifiedFunctionCall", "genericArgs", "structLiteralField", 
                   "matchArm", "matchPattern", "argumentList", "macroCall", 
                   "macroArgs", "macroInner", "literal", "booleanLiteral", 
                   "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    TRUE=62
    FALSE=63
    Binary=64
    STRING_LITERAL=65
    Identifier=66
    Number=67
    SignedNumber=68
    BYTE_STRING_LITERAL=69
    HexNumber=70
    CHAR_LITERAL=71
    DOUBLE_COLON=72
    EXCL=73
    GT=74
    POUND=75
    LBRACK=76
    RBRACK=77
    COMMA=78
    LPAREN=79
    RPAREN=80
    UNDERSCORE=81
    COLON=82
    ELLIPSIS=83
    WS=84
    COMMENT=85

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 121490) != 0) or _la==75:
                self.state = 130
                self.topLevelItem()
                self.state = 135
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 136
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 137
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 138
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 139
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 140
                self.typeAlias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 141
                self.constDef()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 142
                self.unionDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 143
                self.unsafeDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 144
                self.staticVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 147
                self.visibility()


            self.state = 150
            self.match(RustParser.T__0)
            self.state = 151
            self.match(RustParser.Identifier)
            self.state = 152
            self.match(RustParser.T__1)
            self.state = 153
            self.type_()
            self.state = 154
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self.match(RustParser.T__3)
            self.state = 157
            self.match(RustParser.STRING_LITERAL)
            self.state = 158
            self.match(RustParser.T__4)
            self.state = 162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2690) != 0):
                self.state = 159
                self.externItem()
                self.state = 164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 165
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 167
                    self.visibility()


                self.state = 170
                self.match(RustParser.T__0)
                self.state = 171
                self.match(RustParser.Identifier)
                self.state = 172
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 173
                    self.visibility()


                self.state = 176
                self.match(RustParser.T__6)
                self.state = 178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 177
                    self.match(RustParser.T__7)


                self.state = 180
                self.match(RustParser.Identifier)
                self.state = 181
                self.match(RustParser.COLON)
                self.state = 182
                self.type_()
                self.state = 183
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 185
                    self.visibility()


                self.state = 188
                self.match(RustParser.T__8)
                self.state = 189
                self.match(RustParser.Identifier)
                self.state = 190
                self.match(RustParser.LPAREN)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 229377) != 0):
                    self.state = 191
                    self.externParams()


                self.state = 194
                self.match(RustParser.RPAREN)
                self.state = 197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 195
                    self.match(RustParser.T__9)
                    self.state = 196
                    self.type_()


                self.state = 199
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 81, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 202
                self.externParam()
                self.state = 207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 203
                        self.match(RustParser.COMMA)
                        self.state = 204
                        self.externParam() 
                    self.state = 209
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 210
                    self.match(RustParser.COMMA)
                    self.state = 211
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66 or _la==81:
                self.state = 217
                _la = self._input.LA(1)
                if not(_la==66 or _la==81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 220
            self.match(RustParser.COLON)
            self.state = 223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 18, 19, 20, 21, 22, 66, 72, 76]:
                self.state = 221
                self.type_()
                pass
            elif token in [83]:
                self.state = 222
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(RustParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 227
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 230 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.match(RustParser.POUND)

            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 233
                self.match(RustParser.EXCL)


            self.state = 236
            self.match(RustParser.LBRACK)
            self.state = 237
            self.attribute()
            self.state = 238
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_attribute)
        try:
            self.state = 249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 240
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 241
                self.match(RustParser.Identifier)
                self.state = 242
                self.match(RustParser.T__1)
                self.state = 243
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 244
                self.match(RustParser.Identifier)
                self.state = 245
                self.match(RustParser.LPAREN)
                self.state = 246
                self.attrArgs()
                self.state = 247
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.attrArg()
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 252
                self.match(RustParser.COMMA)
                self.state = 253
                self.attrArg()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(RustParser.Identifier)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 260
                self.match(RustParser.T__1)
                self.state = 261
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 266
                self.visibility()


            self.state = 269
            self.match(RustParser.T__11)
            self.state = 270
            self.match(RustParser.Identifier)
            self.state = 271
            self.match(RustParser.T__4)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==66:
                self.state = 272
                self.structField()
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 278
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 280
                self.visibility()


            self.state = 283
            self.match(RustParser.Identifier)
            self.state = 284
            self.match(RustParser.COLON)
            self.state = 285
            self.type_()
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 286
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 289
                self.visibility()


            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 292
                self.unsafeModifier()


            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 295
                self.externAbi()


            self.state = 298
            self.match(RustParser.T__8)
            self.state = 299
            self.match(RustParser.Identifier)
            self.state = 306
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 300
                self.match(RustParser.T__12)
                pass
            elif token in [79]:
                self.state = 301
                self.match(RustParser.LPAREN)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==66:
                    self.state = 302
                    self.paramList()


                self.state = 305
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 308
                self.match(RustParser.T__9)


            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & -8637904085296610319) != 0):
                self.state = 311
                self.type_()


            self.state = 314
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self.match(RustParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(RustParser.T__3)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 319
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.param()
            self.state = 327
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 323
                    self.match(RustParser.COMMA)
                    self.state = 324
                    self.param() 
                self.state = 329
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 330
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 333
                self.match(RustParser.T__7)


            self.state = 336
            self.match(RustParser.Identifier)
            self.state = 337
            self.match(RustParser.COLON)
            self.state = 338
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 340
                self.visibility()


            self.state = 343
            self.match(RustParser.T__14)
            self.state = 344
            self.match(RustParser.Identifier)
            self.state = 345
            self.match(RustParser.COLON)
            self.state = 346
            self.type_()
            self.state = 347
            self.match(RustParser.T__1)
            self.state = 348
            self.expression(0)
            self.state = 349
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 351
                self.visibility()


            self.state = 354
            self.match(RustParser.T__15)
            self.state = 355
            self.match(RustParser.Identifier)
            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.state = 356
                self.match(RustParser.COLON)
                self.state = 357
                self.type_()
                self.state = 358
                self.match(RustParser.T__1)
                self.state = 359
                self.expression(0)
                self.state = 360
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 362
                self.match(RustParser.T__4)
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11 or _la==66:
                    self.state = 363
                    self.unionField()
                    self.state = 368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 369
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 372
                self.visibility()


            self.state = 375
            self.match(RustParser.Identifier)
            self.state = 376
            self.match(RustParser.COLON)
            self.state = 377
            self.type_()
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 378
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 381
                self.visibility()


            self.state = 384
            self.match(RustParser.T__13)
            self.state = 385
            self.match(RustParser.Identifier)
            self.state = 386
            self.match(RustParser.COLON)
            self.state = 387
            self.type_()
            self.state = 388
            self.match(RustParser.T__1)
            self.state = 389
            self.expression(0)
            self.state = 390
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceType" ):
                return visitor.visitReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def referenceType(self):

        localctx = RustParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_referenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(RustParser.T__16)
            self.state = 393
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_type)
        try:
            self.state = 397
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 19, 20, 21, 22, 66, 72, 76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 395
                self.basicType()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 399
                self.match(RustParser.Identifier)
                self.state = 400
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 401
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 404
                self.match(RustParser.Identifier)
                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 405
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 406
                        self.match(RustParser.Identifier) 
                    self.state = 411
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(RustParser.T__17)
            self.state = 415
            _la = self._input.LA(1)
            if not(_la==8 or _la==15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 416
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.match(RustParser.T__18)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 420
                self.match(RustParser.T__19)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self.match(RustParser.T__20)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 422
                self.match(RustParser.T__21)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 423
                self.match(RustParser.T__12)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 424
                self.typePath()
                self.state = 436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 425
                    self.match(RustParser.T__22)
                    self.state = 426
                    self.type_()
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==78:
                        self.state = 427
                        self.match(RustParser.COMMA)
                        self.state = 428
                        self.type_()
                        self.state = 433
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 434
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 438
                self.match(RustParser.Identifier)
                self.state = 450
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 439
                    self.match(RustParser.T__22)
                    self.state = 440
                    self.type_()
                    self.state = 445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==78:
                        self.state = 441
                        self.match(RustParser.COMMA)
                        self.state = 442
                        self.type_()
                        self.state = 447
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 448
                    self.match(RustParser.GT)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 452
                self.match(RustParser.T__16)
                self.state = 453
                self.type_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66 or _la==72:
                    self.state = 454
                    self.typePath()


                self.state = 457
                self.match(RustParser.LBRACK)
                self.state = 458
                self.type_()
                self.state = 459
                self.match(RustParser.T__2)
                self.state = 460
                self.match(RustParser.Number)
                self.state = 461
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 463
                self.typePath()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 464
                self.match(RustParser.LBRACK)
                self.state = 465
                self.type_()
                self.state = 466
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 468
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(RustParser.T__4)
            self.state = 475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 472
                    self.statement() 
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43 or _la==66:
                self.state = 478
                self.returnStmt()


            self.state = 481
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def unsafeBlock(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 485
                self.assignStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 486
                self.match(RustParser.Identifier)
                self.state = 487
                self.match(RustParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 488
                self.compoundAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 489
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 490
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 491
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 492
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 493
                self.returnStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 494
                self.loopStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 495
                self.match(RustParser.T__23)
                self.state = 496
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 497
                self.match(RustParser.T__24)
                self.state = 498
                self.match(RustParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 499
                self.matchStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 500
                self.qualifiedFunctionCall()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==26:
                    self.state = 501
                    self.match(RustParser.T__25)
                    self.state = 502
                    self.qualifiedFunctionCall()
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 508
                self.match(RustParser.T__2)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 510
                self.unsafeBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 34225520640) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.expression(0)
            self.state = 516
            self.compoundOp()
            self.state = 517
            self.expression(0)
            self.state = 518
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(RustParser.T__34)
            self.state = 521
            self.expression(0)
            self.state = 522
            self.match(RustParser.T__4)
            self.state = 524 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 523
                self.matchArm()
                self.state = 526 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32771) != 0)):
                    break

            self.state = 528
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(RustParser.T__13)
            self.state = 531
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(RustParser.T__35)
            self.state = 534
            self.expression(0)
            self.state = 535
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 537
                self.visibility()


            self.state = 540
            self.match(RustParser.T__6)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 541
                self.match(RustParser.T__7)


            self.state = 544
            self.match(RustParser.Identifier)
            self.state = 545
            self.match(RustParser.COLON)
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 546
                self.type_()
                pass

            elif la_ == 2:
                self.state = 547
                self.match(RustParser.Identifier)
                pass


            self.state = 550
            self.match(RustParser.T__1)
            self.state = 551
            self.initializer()
            self.state = 552
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_initializer)
        try:
            self.state = 556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_letStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(RustParser.T__36)
            self.state = 559
            self.varDef()
            self.state = 560
            self.match(RustParser.T__1)
            self.state = 561
            self.expression(0)
            self.state = 562
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.match(RustParser.T__37)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 565
                    self.match(RustParser.T__7)


                self.state = 568
                self.match(RustParser.Identifier)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 569
                    self.match(RustParser.COLON)
                    self.state = 570
                    self.type_()


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.match(RustParser.T__7)
                self.state = 574
                self.match(RustParser.Identifier)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 575
                    self.match(RustParser.COLON)
                    self.state = 576
                    self.type_()


                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.match(RustParser.Identifier)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 580
                    self.match(RustParser.COLON)
                    self.state = 581
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.expression(0)
            self.state = 587
            self.match(RustParser.T__1)
            self.state = 588
            self.expression(0)
            self.state = 589
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(RustParser.T__38)
            self.state = 592
            self.match(RustParser.Identifier)
            self.state = 593
            self.match(RustParser.T__39)
            self.state = 594
            self.expression(0)
            self.state = 595
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(RustParser.T__40)
            self.state = 598
            self.expression(0)
            self.state = 599
            self.block()
            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 600
                self.match(RustParser.T__41)
                self.state = 601
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.expression(0)
            self.state = 605
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.match(RustParser.T__42)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 608
                    self.expression(0)


                self.state = 611
                self.match(RustParser.T__2)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(RustParser.T__43)
            self.state = 616
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def macroCall(self):
            return self.getTypedRuleContext(RustParser.MacroCallContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 619
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.state = 620
                self.literal()
                pass

            elif la_ == 3:
                self.state = 621
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 622
                self.match(RustParser.T__17)
                self.state = 623
                self.expression(16)
                pass

            elif la_ == 5:
                self.state = 624
                self.macroCall()
                pass

            elif la_ == 6:
                self.state = 625
                self.borrowExpression()
                pass

            elif la_ == 7:
                self.state = 626
                self.typePath()
                self.state = 627
                self.match(RustParser.DOUBLE_COLON)
                self.state = 628
                self.match(RustParser.T__22)
                self.state = 629
                self.type_()
                self.state = 630
                self.match(RustParser.T__44)
                pass

            elif la_ == 8:
                self.state = 632
                self.match(RustParser.EXCL)
                self.state = 633
                self.expression(11)
                pass

            elif la_ == 9:
                self.state = 634
                self.match(RustParser.Identifier)
                self.state = 635
                self.match(RustParser.EXCL)
                self.state = 636
                self.match(RustParser.LPAREN)
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 637
                    self.argumentList()


                self.state = 640
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 10:
                self.state = 641
                self.expressionBlock()
                pass

            elif la_ == 11:
                self.state = 642
                self.match(RustParser.T__16)
                self.state = 643
                self.match(RustParser.T__7)
                self.state = 644
                self.expression(3)
                pass

            elif la_ == 12:
                self.state = 645
                self.match(RustParser.LPAREN)
                self.state = 646
                self.expression(0)
                self.state = 647
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 13:
                self.state = 651 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 649
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 650
                    self.match(RustParser.Identifier)
                    self.state = 653 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==72):
                        break

                self.state = 660
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 655
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 656
                    self.match(RustParser.LPAREN)
                    self.state = 657
                    self.argumentList()
                    self.state = 658
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 693
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 691
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 664
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 665
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8936830510956544) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 666
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 667
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 668
                        _la = self._input.LA(1)
                        if not(((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 2251815919812609) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 669
                        self.expression(10)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 670
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 671
                        self.match(RustParser.T__56)
                        self.state = 672
                        self.expression(9)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 673
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 674
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 34225520640) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 675
                        self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 676
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 677
                        self.match(RustParser.LBRACK)
                        self.state = 678
                        self.expression(0)
                        self.state = 679
                        self.match(RustParser.RBRACK)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 681
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 682
                        self.match(RustParser.T__57)
                        self.state = 683
                        self.type_()
                        self.state = 688
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 684
                                self.match(RustParser.T__57)
                                self.state = 685
                                self.type_() 
                            self.state = 690
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                        pass

             
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(RustParser.T__4)
            self.state = 700
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 697
                    self.statement() 
                self.state = 702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 703
            self.expression(0)
            self.state = 704
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(RustParser.T__16)
            self.state = 707
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LBRACK)
            else:
                return self.getToken(RustParser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RBRACK)
            else:
                return self.getToken(RustParser.RBRACK, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.primaryExpression()
            self.state = 738 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 738
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 716
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [13]:
                            self.state = 710
                            self.match(RustParser.T__12)
                            pass
                        elif token in [79]:
                            self.state = 711
                            self.match(RustParser.LPAREN)
                            self.state = 713
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                                self.state = 712
                                self.argumentList()


                            self.state = 715
                            self.match(RustParser.RPAREN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 720 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 718
                                self.match(RustParser.T__25)
                                self.state = 719
                                self.match(RustParser.Identifier)

                            else:
                                raise NoViableAltException(self)
                            self.state = 722 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 724
                        self.match(RustParser.T__25)
                        self.state = 725
                        self.match(RustParser.Identifier)
                        self.state = 732
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [79]:
                            self.state = 726
                            self.match(RustParser.LPAREN)
                            self.state = 728
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                                self.state = 727
                                self.argumentList()


                            self.state = 730
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [13]:
                            self.state = 731
                            self.match(RustParser.T__12)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        self.state = 734
                        self.match(RustParser.LBRACK)
                        self.state = 735
                        self.expression(0)
                        self.state = 736
                        self.match(RustParser.RBRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 740 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def qualifiedFunctionCall(self):
            return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.match(RustParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self.qualifiedFunctionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 745
                self.match(RustParser.Identifier)
                self.state = 746
                self.match(RustParser.LPAREN)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 747
                    self.argumentList()


                self.state = 750
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 751
                self.match(RustParser.LPAREN)
                self.state = 752
                self.expression(0)
                self.state = 753
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 755
                self.match(RustParser.Identifier)
                self.state = 756
                self.match(RustParser.T__4)
                self.state = 757
                self.structLiteralField()
                self.state = 762
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 758
                        self.match(RustParser.COMMA)
                        self.state = 759
                        self.structLiteralField() 
                    self.state = 764
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 765
                    self.match(RustParser.COMMA)


                self.state = 768
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.STRING_LITERAL)
            else:
                return self.getToken(RustParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.match(RustParser.DOUBLE_COLON)
                self.state = 773
                self.typePath()
                self.state = 774
                self.match(RustParser.Identifier)
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 775
                    self.genericArgs()


                self.state = 784
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 778
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 779
                    self.match(RustParser.LPAREN)
                    self.state = 781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                        self.state = 780
                        self.argumentList()


                    self.state = 783
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.match(RustParser.Identifier)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==26:
                    self.state = 787
                    self.match(RustParser.T__25)
                    self.state = 788
                    self.match(RustParser.Identifier)
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==72:
                    self.state = 794
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 795
                    self.match(RustParser.Identifier)
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 814
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 801
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 802
                    self.match(RustParser.LPAREN)
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                        self.state = 808
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 803
                            self.match(RustParser.Identifier)
                            self.state = 804
                            self.match(RustParser.LPAREN)
                            self.state = 805
                            self.match(RustParser.STRING_LITERAL)
                            self.state = 806
                            self.match(RustParser.RPAREN)
                            pass

                        elif la_ == 2:
                            self.state = 807
                            self.argumentList()
                            pass


                        self.state = 812
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 813
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(RustParser.T__22)
            self.state = 819
            self.type_()
            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 820
                self.match(RustParser.COMMA)
                self.state = 821
                self.type_()
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 827
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_structLiteralField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(RustParser.Identifier)
            self.state = 830
            self.match(RustParser.COLON)
            self.state = 831
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.matchPattern()
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 834
                self.match(RustParser.T__58)
                self.state = 835
                self.matchPattern()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 841
            self.match(RustParser.T__59)
            self.state = 842
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 846
                    self.qualifiedFunctionCall()
                    pass

                elif la_ == 2:
                    self.state = 847
                    self.expression(0)
                    pass


                self.state = 857
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 850
                        self.match(RustParser.COMMA)
                        self.state = 853
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                        if la_ == 1:
                            self.state = 851
                            self.qualifiedFunctionCall()
                            pass

                        elif la_ == 2:
                            self.state = 852
                            self.expression(0)
                            pass

                 
                    self.state = 859
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 860
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 865 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 863
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 864
                    self.match(RustParser.Identifier)
                    self.state = 867 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==72):
                        break

                self.state = 874
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 869
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 870
                    self.match(RustParser.LPAREN)
                    self.state = 871
                    self.argumentList()
                    self.state = 872
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(RustParser.Identifier)
            self.state = 879
            self.match(RustParser.EXCL)
            self.state = 880
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 882
                self.match(RustParser.LBRACK)
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 883
                    self.macroInner()


                self.state = 886
                self.match(RustParser.RBRACK)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.match(RustParser.LPAREN)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 888
                    self.macroInner()


                self.state = 891
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.expression(0)
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 895
                self.match(RustParser.T__2)
                self.state = 896
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_literal)
        try:
            self.state = 908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.arrayLiteral()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.match(RustParser.HexNumber)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 901
                self.match(RustParser.Number)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 902
                self.match(RustParser.SignedNumber)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 5)
                self.state = 903
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 6)
                self.state = 904
                self.match(RustParser.Binary)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 7)
                self.state = 905
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [62, 63]:
                self.enterOuterAlt(localctx, 8)
                self.state = 906
                self.booleanLiteral()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 9)
                self.state = 907
                self.match(RustParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            _la = self._input.LA(1)
            if not(_la==62 or _la==63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 929
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                self.match(RustParser.LBRACK)
                self.state = 913
                self.expression(0)
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78:
                    self.state = 914
                    self.match(RustParser.COMMA)
                    self.state = 915
                    self.expression(0)
                    self.state = 920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 921
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self.match(RustParser.LBRACK)
                self.state = 924
                self.expression(0)
                self.state = 925
                self.match(RustParser.T__2)
                self.state = 926
                self.expression(0)
                self.state = 927
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(RustParser.T__60)
            self.state = 935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 932
                    self.matchWildcard() 
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 938
            self.match(RustParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[47] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         




