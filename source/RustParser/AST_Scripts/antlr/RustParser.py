# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,97,1126,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,1,0,5,0,188,8,0,10,0,12,0,191,9,0,1,1,1,1,1,1,1,1,1,
        1,1,1,3,1,199,8,1,1,2,1,2,1,2,1,2,3,2,205,8,2,1,2,1,2,3,2,209,8,
        2,5,2,211,8,2,10,2,12,2,214,9,2,1,2,1,2,5,2,218,8,2,10,2,12,2,221,
        9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,231,8,3,1,4,3,4,234,8,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,4,5,246,8,5,11,5,12,5,247,
        1,5,1,5,1,6,1,6,1,6,1,6,5,6,256,8,6,10,6,12,6,259,9,6,1,6,1,6,1,
        7,3,7,264,8,7,1,7,1,7,1,7,1,7,3,7,270,8,7,1,7,1,7,3,7,274,8,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,282,8,7,1,7,1,7,1,7,1,7,3,7,288,8,7,1,
        7,1,7,1,7,3,7,293,8,7,1,7,3,7,296,8,7,1,8,1,8,1,8,5,8,301,8,8,10,
        8,12,8,304,9,8,1,8,1,8,3,8,308,8,8,1,8,3,8,311,8,8,1,9,3,9,314,8,
        9,1,9,1,9,1,9,3,9,319,8,9,1,10,1,10,1,11,1,11,1,12,1,12,3,12,327,
        8,12,1,13,4,13,330,8,13,11,13,12,13,331,1,14,1,14,3,14,336,8,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        3,15,351,8,15,1,16,1,16,1,16,5,16,356,8,16,10,16,12,16,359,9,16,
        1,17,1,17,1,17,3,17,364,8,17,1,18,1,18,1,19,3,19,369,8,19,1,19,1,
        19,1,19,1,19,5,19,375,8,19,10,19,12,19,378,9,19,1,19,1,19,1,20,3,
        20,383,8,20,1,20,1,20,1,20,1,20,3,20,389,8,20,1,21,1,21,1,21,5,21,
        394,8,21,10,21,12,21,397,9,21,1,21,1,21,1,22,1,22,1,22,3,22,404,
        8,22,1,22,3,22,407,8,22,1,23,3,23,410,8,23,1,23,3,23,413,8,23,1,
        23,3,23,416,8,23,1,23,1,23,1,23,1,23,1,23,3,23,423,8,23,1,23,3,23,
        426,8,23,1,23,3,23,429,8,23,1,23,3,23,432,8,23,1,23,1,23,1,24,1,
        24,1,24,5,24,439,8,24,10,24,12,24,442,9,24,1,24,3,24,445,8,24,1,
        25,3,25,448,8,25,1,25,3,25,451,8,25,1,25,1,25,1,25,3,25,456,8,25,
        1,26,3,26,459,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
        3,27,470,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        5,27,482,8,27,10,27,12,27,485,9,27,1,27,3,27,488,8,27,1,28,3,28,
        491,8,28,1,28,1,28,1,28,1,28,3,28,497,8,28,1,29,3,29,500,8,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,3,30,512,8,30,1,
        31,1,31,1,31,3,31,517,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,3,32,528,8,32,1,32,1,32,1,32,1,32,5,32,534,8,32,10,32,12,
        32,537,9,32,1,32,1,32,3,32,541,8,32,1,32,1,32,1,32,1,32,1,32,5,32,
        548,8,32,10,32,12,32,551,9,32,1,32,1,32,3,32,555,8,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,569,8,32,
        1,33,1,33,1,33,3,33,574,8,33,1,33,1,33,1,33,5,33,579,8,33,10,33,
        12,33,582,9,33,3,33,584,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,
        1,35,5,35,594,8,35,10,35,12,35,597,9,35,1,35,3,35,600,8,35,1,35,
        1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,
        628,8,37,1,38,3,38,631,8,38,1,38,1,38,3,38,635,8,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,661,8,40,5,40,663,
        8,40,10,40,12,40,666,9,40,1,40,1,40,1,40,1,40,1,40,3,40,673,8,40,
        5,40,675,8,40,10,40,12,40,678,9,40,1,40,1,40,3,40,682,8,40,1,41,
        3,41,685,8,41,1,41,3,41,688,8,41,1,41,1,41,1,41,3,41,693,8,41,1,
        42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,4,44,706,8,
        44,11,44,12,44,707,1,44,1,44,1,45,1,45,1,45,5,45,715,8,45,10,45,
        12,45,718,9,45,1,45,1,45,1,45,1,45,3,45,724,8,45,3,45,726,8,45,1,
        46,1,46,1,46,1,46,3,46,732,8,46,1,47,1,47,1,47,1,47,1,48,1,48,1,
        48,3,48,741,8,48,1,49,3,49,744,8,49,1,49,1,49,3,49,748,8,49,1,49,
        1,49,1,49,1,49,3,49,754,8,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,
        1,50,1,50,1,50,5,50,766,8,50,10,50,12,50,769,9,50,1,50,1,50,1,50,
        1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,
        1,53,1,53,1,53,1,53,1,53,1,53,5,53,793,8,53,10,53,12,53,796,9,53,
        1,53,1,53,3,53,800,8,53,1,54,1,54,1,54,1,55,1,55,3,55,807,8,55,1,
        55,1,55,3,55,811,8,55,1,56,1,56,1,56,1,57,1,57,3,57,818,8,57,1,57,
        1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,3,59,831,8,59,
        1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,3,61,860,8,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,5,61,890,8,61,10,61,12,61,893,9,61,
        1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,
        1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,3,67,918,8,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,4,68,928,8,68,11,68,12,68,
        929,1,69,3,69,933,8,69,1,69,1,69,1,69,1,70,3,70,939,8,70,1,70,3,
        70,942,8,70,1,70,1,70,1,70,1,70,3,70,948,8,70,1,70,3,70,951,8,70,
        1,70,1,70,3,70,955,8,70,1,71,1,71,1,71,1,71,5,71,961,8,71,10,71,
        12,71,964,9,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,
        1,77,1,77,1,77,1,77,1,77,5,77,981,8,77,10,77,12,77,984,9,77,1,77,
        3,77,987,8,77,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,80,1,80,
        1,81,1,81,1,81,1,82,1,82,5,82,1004,8,82,10,82,12,82,1007,9,82,1,
        82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,3,84,1017,8,84,1,85,1,85,1,
        85,1,85,1,85,1,85,4,85,1025,8,85,11,85,12,85,1026,3,85,1029,8,85,
        1,86,3,86,1032,8,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,5,87,1041,
        8,87,10,87,12,87,1044,9,87,1,87,1,87,3,87,1048,8,87,1,88,1,88,1,
        88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1061,8,88,1,89,1,
        89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1074,8,89,1,
        90,1,90,1,91,3,91,1079,8,91,1,91,3,91,1082,8,91,1,91,1,91,1,91,1,
        91,5,91,1088,8,91,10,91,12,91,1091,9,91,1,91,1,91,1,91,3,91,1096,
        8,91,1,91,3,91,1099,8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,
        1108,8,91,1,91,3,91,1111,8,91,1,91,1,91,3,91,1115,8,91,1,92,1,92,
        5,92,1119,8,92,10,92,12,92,1122,9,92,1,92,1,92,1,92,1,1120,1,122,
        93,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,0,9,
        2,0,78,78,93,93,1,0,77,79,2,0,10,10,18,18,1,0,31,38,3,0,25,25,53,
        56,86,86,2,0,17,17,57,59,2,0,20,20,60,63,2,0,62,63,85,85,1,0,73,
        74,1235,0,189,1,0,0,0,2,198,1,0,0,0,4,200,1,0,0,0,6,230,1,0,0,0,
        8,233,1,0,0,0,10,241,1,0,0,0,12,251,1,0,0,0,14,295,1,0,0,0,16,310,
        1,0,0,0,18,313,1,0,0,0,20,320,1,0,0,0,22,322,1,0,0,0,24,324,1,0,
        0,0,26,329,1,0,0,0,28,333,1,0,0,0,30,350,1,0,0,0,32,352,1,0,0,0,
        34,360,1,0,0,0,36,365,1,0,0,0,38,368,1,0,0,0,40,382,1,0,0,0,42,390,
        1,0,0,0,44,400,1,0,0,0,46,409,1,0,0,0,48,435,1,0,0,0,50,447,1,0,
        0,0,52,458,1,0,0,0,54,469,1,0,0,0,56,490,1,0,0,0,58,499,1,0,0,0,
        60,511,1,0,0,0,62,513,1,0,0,0,64,568,1,0,0,0,66,583,1,0,0,0,68,585,
        1,0,0,0,70,591,1,0,0,0,72,603,1,0,0,0,74,627,1,0,0,0,76,630,1,0,
        0,0,78,642,1,0,0,0,80,681,1,0,0,0,82,684,1,0,0,0,84,694,1,0,0,0,
        86,696,1,0,0,0,88,701,1,0,0,0,90,711,1,0,0,0,92,731,1,0,0,0,94,733,
        1,0,0,0,96,740,1,0,0,0,98,743,1,0,0,0,100,759,1,0,0,0,102,774,1,
        0,0,0,104,779,1,0,0,0,106,785,1,0,0,0,108,801,1,0,0,0,110,810,1,
        0,0,0,112,812,1,0,0,0,114,815,1,0,0,0,116,823,1,0,0,0,118,828,1,
        0,0,0,120,832,1,0,0,0,122,859,1,0,0,0,124,894,1,0,0,0,126,897,1,
        0,0,0,128,902,1,0,0,0,130,906,1,0,0,0,132,908,1,0,0,0,134,915,1,
        0,0,0,136,927,1,0,0,0,138,932,1,0,0,0,140,954,1,0,0,0,142,956,1,
        0,0,0,144,965,1,0,0,0,146,967,1,0,0,0,148,969,1,0,0,0,150,971,1,
        0,0,0,152,973,1,0,0,0,154,975,1,0,0,0,156,990,1,0,0,0,158,992,1,
        0,0,0,160,994,1,0,0,0,162,998,1,0,0,0,164,1001,1,0,0,0,166,1011,
        1,0,0,0,168,1016,1,0,0,0,170,1028,1,0,0,0,172,1031,1,0,0,0,174,1047,
        1,0,0,0,176,1060,1,0,0,0,178,1073,1,0,0,0,180,1075,1,0,0,0,182,1114,
        1,0,0,0,184,1116,1,0,0,0,186,188,3,2,1,0,187,186,1,0,0,0,188,191,
        1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,1,1,0,0,0,191,189,1,
        0,0,0,192,199,3,6,3,0,193,199,3,98,49,0,194,199,3,26,13,0,195,199,
        3,12,6,0,196,199,3,4,2,0,197,199,3,8,4,0,198,192,1,0,0,0,198,193,
        1,0,0,0,198,194,1,0,0,0,198,195,1,0,0,0,198,196,1,0,0,0,198,197,
        1,0,0,0,199,3,1,0,0,0,200,201,5,1,0,0,201,219,3,66,33,0,202,212,
        5,2,0,0,203,205,3,66,33,0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,
        1,0,0,0,206,208,5,78,0,0,207,209,5,90,0,0,208,207,1,0,0,0,208,209,
        1,0,0,0,209,211,1,0,0,0,210,204,1,0,0,0,211,214,1,0,0,0,212,210,
        1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,
        5,3,0,0,216,218,5,90,0,0,217,202,1,0,0,0,218,221,1,0,0,0,219,217,
        1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,223,
        5,4,0,0,223,5,1,0,0,0,224,231,3,46,23,0,225,231,3,38,19,0,226,231,
        3,10,5,0,227,231,3,52,26,0,228,231,3,54,27,0,229,231,3,58,29,0,230,
        224,1,0,0,0,230,225,1,0,0,0,230,226,1,0,0,0,230,227,1,0,0,0,230,
        228,1,0,0,0,230,229,1,0,0,0,231,7,1,0,0,0,232,234,3,20,10,0,233,
        232,1,0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,236,5,5,0,0,236,
        237,5,78,0,0,237,238,5,6,0,0,238,239,3,60,30,0,239,240,5,4,0,0,240,
        9,1,0,0,0,241,242,5,7,0,0,242,243,5,78,0,0,243,245,5,2,0,0,244,246,
        3,46,23,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,
        1,0,0,0,248,249,1,0,0,0,249,250,5,3,0,0,250,11,1,0,0,0,251,252,5,
        8,0,0,252,253,5,77,0,0,253,257,5,2,0,0,254,256,3,14,7,0,255,254,
        1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,
        1,0,0,0,259,257,1,0,0,0,260,261,5,3,0,0,261,13,1,0,0,0,262,264,3,
        20,10,0,263,262,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,
        5,5,0,0,266,267,5,78,0,0,267,296,5,4,0,0,268,270,3,20,10,0,269,268,
        1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,273,5,9,0,0,272,274,
        5,10,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,
        5,78,0,0,276,277,5,94,0,0,277,278,3,60,30,0,278,279,5,4,0,0,279,
        296,1,0,0,0,280,282,3,20,10,0,281,280,1,0,0,0,281,282,1,0,0,0,282,
        283,1,0,0,0,283,284,5,11,0,0,284,285,5,78,0,0,285,287,5,91,0,0,286,
        288,3,16,8,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,
        292,5,92,0,0,290,291,5,12,0,0,291,293,3,60,30,0,292,290,1,0,0,0,
        292,293,1,0,0,0,293,294,1,0,0,0,294,296,5,4,0,0,295,263,1,0,0,0,
        295,269,1,0,0,0,295,281,1,0,0,0,296,15,1,0,0,0,297,302,3,18,9,0,
        298,299,5,90,0,0,299,301,3,18,9,0,300,298,1,0,0,0,301,304,1,0,0,
        0,302,300,1,0,0,0,302,303,1,0,0,0,303,307,1,0,0,0,304,302,1,0,0,
        0,305,306,5,90,0,0,306,308,5,95,0,0,307,305,1,0,0,0,307,308,1,0,
        0,0,308,311,1,0,0,0,309,311,5,95,0,0,310,297,1,0,0,0,310,309,1,0,
        0,0,311,17,1,0,0,0,312,314,7,0,0,0,313,312,1,0,0,0,313,314,1,0,0,
        0,314,315,1,0,0,0,315,318,5,94,0,0,316,319,3,60,30,0,317,319,5,95,
        0,0,318,316,1,0,0,0,318,317,1,0,0,0,319,19,1,0,0,0,320,321,5,13,
        0,0,321,21,1,0,0,0,322,323,5,14,0,0,323,23,1,0,0,0,324,326,5,8,0,
        0,325,327,5,77,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,25,1,0,0,
        0,328,330,3,28,14,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,
        0,0,331,332,1,0,0,0,332,27,1,0,0,0,333,335,5,87,0,0,334,336,5,85,
        0,0,335,334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,5,88,
        0,0,338,339,3,30,15,0,339,340,5,89,0,0,340,29,1,0,0,0,341,351,5,
        78,0,0,342,343,5,78,0,0,343,344,5,6,0,0,344,351,3,36,18,0,345,346,
        5,78,0,0,346,347,5,91,0,0,347,348,3,32,16,0,348,349,5,92,0,0,349,
        351,1,0,0,0,350,341,1,0,0,0,350,342,1,0,0,0,350,345,1,0,0,0,351,
        31,1,0,0,0,352,357,3,34,17,0,353,354,5,90,0,0,354,356,3,34,17,0,
        355,353,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,
        358,33,1,0,0,0,359,357,1,0,0,0,360,363,5,78,0,0,361,362,5,6,0,0,
        362,364,3,36,18,0,363,361,1,0,0,0,363,364,1,0,0,0,364,35,1,0,0,0,
        365,366,7,1,0,0,366,37,1,0,0,0,367,369,3,20,10,0,368,367,1,0,0,0,
        368,369,1,0,0,0,369,370,1,0,0,0,370,371,5,15,0,0,371,372,5,78,0,
        0,372,376,5,2,0,0,373,375,3,40,20,0,374,373,1,0,0,0,375,378,1,0,
        0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,379,1,0,0,0,378,376,1,0,
        0,0,379,380,5,3,0,0,380,39,1,0,0,0,381,383,3,20,10,0,382,381,1,0,
        0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,5,78,0,0,385,386,5,94,
        0,0,386,388,3,60,30,0,387,389,5,90,0,0,388,387,1,0,0,0,388,389,1,
        0,0,0,389,41,1,0,0,0,390,391,5,78,0,0,391,395,5,2,0,0,392,394,3,
        44,22,0,393,392,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,
        1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,0,398,399,5,3,0,0,399,43,1,
        0,0,0,400,403,5,78,0,0,401,402,5,94,0,0,402,404,3,122,61,0,403,401,
        1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,407,5,90,0,0,406,405,
        1,0,0,0,406,407,1,0,0,0,407,45,1,0,0,0,408,410,3,20,10,0,409,408,
        1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,0,411,413,3,22,11,0,412,411,
        1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,416,3,24,12,0,415,414,
        1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,11,0,0,418,425,
        5,78,0,0,419,426,5,16,0,0,420,422,5,91,0,0,421,423,3,48,24,0,422,
        421,1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,426,5,92,0,0,425,
        419,1,0,0,0,425,420,1,0,0,0,426,428,1,0,0,0,427,429,5,12,0,0,428,
        427,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,432,3,60,30,0,431,
        430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,3,70,35,0,434,
        47,1,0,0,0,435,440,3,50,25,0,436,437,5,90,0,0,437,439,3,50,25,0,
        438,436,1,0,0,0,439,442,1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,
        441,444,1,0,0,0,442,440,1,0,0,0,443,445,5,90,0,0,444,443,1,0,0,0,
        444,445,1,0,0,0,445,49,1,0,0,0,446,448,5,17,0,0,447,446,1,0,0,0,
        447,448,1,0,0,0,448,450,1,0,0,0,449,451,5,10,0,0,450,449,1,0,0,0,
        450,451,1,0,0,0,451,452,1,0,0,0,452,455,5,78,0,0,453,454,5,94,0,
        0,454,456,3,60,30,0,455,453,1,0,0,0,455,456,1,0,0,0,456,51,1,0,0,
        0,457,459,3,20,10,0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,1,0,
        0,0,460,461,5,18,0,0,461,462,5,78,0,0,462,463,5,94,0,0,463,464,3,
        60,30,0,464,465,5,6,0,0,465,466,3,122,61,0,466,467,5,4,0,0,467,53,
        1,0,0,0,468,470,3,20,10,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,
        1,0,0,0,471,472,5,19,0,0,472,487,5,78,0,0,473,474,5,94,0,0,474,475,
        3,60,30,0,475,476,5,6,0,0,476,477,3,122,61,0,477,478,5,4,0,0,478,
        488,1,0,0,0,479,483,5,2,0,0,480,482,3,56,28,0,481,480,1,0,0,0,482,
        485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,
        483,1,0,0,0,486,488,5,3,0,0,487,473,1,0,0,0,487,479,1,0,0,0,488,
        55,1,0,0,0,489,491,3,20,10,0,490,489,1,0,0,0,490,491,1,0,0,0,491,
        492,1,0,0,0,492,493,5,78,0,0,493,494,5,94,0,0,494,496,3,60,30,0,
        495,497,5,90,0,0,496,495,1,0,0,0,496,497,1,0,0,0,497,57,1,0,0,0,
        498,500,3,20,10,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,
        0,501,502,5,14,0,0,502,503,5,78,0,0,503,504,5,94,0,0,504,505,3,60,
        30,0,505,506,5,6,0,0,506,507,3,122,61,0,507,508,5,4,0,0,508,59,1,
        0,0,0,509,512,3,64,32,0,510,512,3,62,31,0,511,509,1,0,0,0,511,510,
        1,0,0,0,512,61,1,0,0,0,513,514,5,20,0,0,514,516,7,2,0,0,515,517,
        3,60,30,0,516,515,1,0,0,0,516,517,1,0,0,0,517,63,1,0,0,0,518,569,
        5,21,0,0,519,569,5,22,0,0,520,569,5,23,0,0,521,569,5,24,0,0,522,
        569,3,68,34,0,523,524,3,66,33,0,524,525,3,64,32,0,525,569,1,0,0,
        0,526,528,5,84,0,0,527,526,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,
        0,529,530,5,25,0,0,530,535,3,60,30,0,531,532,5,90,0,0,532,534,3,
        60,30,0,533,531,1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,536,
        1,0,0,0,536,538,1,0,0,0,537,535,1,0,0,0,538,540,5,86,0,0,539,541,
        5,16,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,569,1,0,0,0,542,554,
        5,78,0,0,543,544,5,25,0,0,544,549,3,60,30,0,545,546,5,90,0,0,546,
        548,3,60,30,0,547,545,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,
        550,1,0,0,0,550,552,1,0,0,0,551,549,1,0,0,0,552,553,5,86,0,0,553,
        555,1,0,0,0,554,543,1,0,0,0,554,555,1,0,0,0,555,569,1,0,0,0,556,
        557,5,78,0,0,557,558,5,25,0,0,558,559,3,60,30,0,559,560,5,86,0,0,
        560,569,1,0,0,0,561,562,5,17,0,0,562,569,3,60,30,0,563,564,5,88,
        0,0,564,565,3,60,30,0,565,566,5,89,0,0,566,569,1,0,0,0,567,569,5,
        78,0,0,568,518,1,0,0,0,568,519,1,0,0,0,568,520,1,0,0,0,568,521,1,
        0,0,0,568,522,1,0,0,0,568,523,1,0,0,0,568,527,1,0,0,0,568,542,1,
        0,0,0,568,556,1,0,0,0,568,561,1,0,0,0,568,563,1,0,0,0,568,567,1,
        0,0,0,569,65,1,0,0,0,570,571,5,78,0,0,571,584,5,84,0,0,572,574,5,
        84,0,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,580,5,
        78,0,0,576,577,5,84,0,0,577,579,5,78,0,0,578,576,1,0,0,0,579,582,
        1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,584,1,0,0,0,582,580,
        1,0,0,0,583,570,1,0,0,0,583,573,1,0,0,0,584,67,1,0,0,0,585,586,5,
        88,0,0,586,587,3,64,32,0,587,588,5,4,0,0,588,589,5,79,0,0,589,590,
        5,89,0,0,590,69,1,0,0,0,591,595,5,2,0,0,592,594,3,74,37,0,593,592,
        1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,599,
        1,0,0,0,597,595,1,0,0,0,598,600,3,110,55,0,599,598,1,0,0,0,599,600,
        1,0,0,0,600,601,1,0,0,0,601,602,5,3,0,0,602,71,1,0,0,0,603,604,3,
        22,11,0,604,605,3,70,35,0,605,73,1,0,0,0,606,628,3,72,36,0,607,628,
        3,80,40,0,608,628,3,76,38,0,609,628,3,42,21,0,610,628,3,38,19,0,
        611,628,3,98,49,0,612,628,3,116,58,0,613,628,3,102,51,0,614,628,
        3,86,43,0,615,628,3,104,52,0,616,628,3,106,53,0,617,628,3,78,39,
        0,618,628,3,108,54,0,619,628,3,94,47,0,620,628,3,110,55,0,621,628,
        3,112,56,0,622,623,5,26,0,0,623,628,5,4,0,0,624,625,5,27,0,0,625,
        628,5,4,0,0,626,628,3,88,44,0,627,606,1,0,0,0,627,607,1,0,0,0,627,
        608,1,0,0,0,627,609,1,0,0,0,627,610,1,0,0,0,627,611,1,0,0,0,627,
        612,1,0,0,0,627,613,1,0,0,0,627,614,1,0,0,0,627,615,1,0,0,0,627,
        616,1,0,0,0,627,617,1,0,0,0,627,618,1,0,0,0,627,619,1,0,0,0,627,
        620,1,0,0,0,627,621,1,0,0,0,627,622,1,0,0,0,627,624,1,0,0,0,627,
        626,1,0,0,0,628,75,1,0,0,0,629,631,5,28,0,0,630,629,1,0,0,0,630,
        631,1,0,0,0,631,634,1,0,0,0,632,635,3,116,58,0,633,635,3,122,61,
        0,634,632,1,0,0,0,634,633,1,0,0,0,635,636,1,0,0,0,636,637,5,6,0,
        0,637,638,3,122,61,0,638,639,5,29,0,0,639,640,3,70,35,0,640,641,
        5,4,0,0,641,77,1,0,0,0,642,643,3,122,61,0,643,644,3,172,86,0,644,
        645,5,4,0,0,645,79,1,0,0,0,646,647,5,28,0,0,647,648,3,82,41,0,648,
        649,5,6,0,0,649,650,3,122,61,0,650,651,5,4,0,0,651,682,1,0,0,0,652,
        653,5,28,0,0,653,654,3,82,41,0,654,655,3,100,50,0,655,682,1,0,0,
        0,656,657,5,28,0,0,657,664,5,91,0,0,658,660,3,82,41,0,659,661,5,
        90,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,658,1,
        0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,667,1,
        0,0,0,666,664,1,0,0,0,667,668,5,92,0,0,668,669,5,6,0,0,669,676,5,
        91,0,0,670,672,3,122,61,0,671,673,5,90,0,0,672,671,1,0,0,0,672,673,
        1,0,0,0,673,675,1,0,0,0,674,670,1,0,0,0,675,678,1,0,0,0,676,674,
        1,0,0,0,676,677,1,0,0,0,677,679,1,0,0,0,678,676,1,0,0,0,679,680,
        5,92,0,0,680,682,5,4,0,0,681,646,1,0,0,0,681,652,1,0,0,0,681,656,
        1,0,0,0,682,81,1,0,0,0,683,685,5,30,0,0,684,683,1,0,0,0,684,685,
        1,0,0,0,685,687,1,0,0,0,686,688,5,10,0,0,687,686,1,0,0,0,687,688,
        1,0,0,0,688,689,1,0,0,0,689,692,5,78,0,0,690,691,5,94,0,0,691,693,
        3,60,30,0,692,690,1,0,0,0,692,693,1,0,0,0,693,83,1,0,0,0,694,695,
        7,3,0,0,695,85,1,0,0,0,696,697,3,122,61,0,697,698,3,84,42,0,698,
        699,3,122,61,0,699,700,5,4,0,0,700,87,1,0,0,0,701,702,5,39,0,0,702,
        703,3,122,61,0,703,705,5,2,0,0,704,706,3,90,45,0,705,704,1,0,0,0,
        706,707,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,
        709,710,5,3,0,0,710,89,1,0,0,0,711,716,3,92,46,0,712,713,5,40,0,
        0,713,715,3,92,46,0,714,712,1,0,0,0,715,718,1,0,0,0,716,714,1,0,
        0,0,716,717,1,0,0,0,717,719,1,0,0,0,718,716,1,0,0,0,719,725,5,41,
        0,0,720,726,3,70,35,0,721,723,5,42,0,0,722,724,3,122,61,0,723,722,
        1,0,0,0,723,724,1,0,0,0,724,726,1,0,0,0,725,720,1,0,0,0,725,721,
        1,0,0,0,726,91,1,0,0,0,727,732,3,178,89,0,728,732,5,79,0,0,729,732,
        5,93,0,0,730,732,5,78,0,0,731,727,1,0,0,0,731,728,1,0,0,0,731,729,
        1,0,0,0,731,730,1,0,0,0,732,93,1,0,0,0,733,734,5,43,0,0,734,735,
        3,122,61,0,735,736,3,70,35,0,736,95,1,0,0,0,737,741,3,100,50,0,738,
        741,3,70,35,0,739,741,3,122,61,0,740,737,1,0,0,0,740,738,1,0,0,0,
        740,739,1,0,0,0,741,97,1,0,0,0,742,744,3,20,10,0,743,742,1,0,0,0,
        743,744,1,0,0,0,744,745,1,0,0,0,745,747,5,9,0,0,746,748,5,10,0,0,
        747,746,1,0,0,0,747,748,1,0,0,0,748,749,1,0,0,0,749,750,5,78,0,0,
        750,753,5,94,0,0,751,754,3,60,30,0,752,754,5,78,0,0,753,751,1,0,
        0,0,753,752,1,0,0,0,754,755,1,0,0,0,755,756,5,6,0,0,756,757,3,96,
        48,0,757,758,5,4,0,0,758,99,1,0,0,0,759,767,5,2,0,0,760,761,5,78,
        0,0,761,762,5,94,0,0,762,763,3,122,61,0,763,764,5,90,0,0,764,766,
        1,0,0,0,765,760,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,0,767,768,
        1,0,0,0,768,770,1,0,0,0,769,767,1,0,0,0,770,771,5,3,0,0,771,772,
        5,4,0,0,772,773,3,122,61,0,773,101,1,0,0,0,774,775,3,122,61,0,775,
        776,5,6,0,0,776,777,3,122,61,0,777,778,5,4,0,0,778,103,1,0,0,0,779,
        780,5,44,0,0,780,781,5,78,0,0,781,782,5,45,0,0,782,783,3,122,61,
        0,783,784,3,70,35,0,784,105,1,0,0,0,785,786,5,46,0,0,786,787,3,122,
        61,0,787,794,3,70,35,0,788,789,5,47,0,0,789,790,3,122,61,0,790,791,
        3,70,35,0,791,793,1,0,0,0,792,788,1,0,0,0,793,796,1,0,0,0,794,792,
        1,0,0,0,794,795,1,0,0,0,795,799,1,0,0,0,796,794,1,0,0,0,797,798,
        5,29,0,0,798,800,3,70,35,0,799,797,1,0,0,0,799,800,1,0,0,0,800,107,
        1,0,0,0,801,802,3,122,61,0,802,803,5,4,0,0,803,109,1,0,0,0,804,806,
        5,42,0,0,805,807,3,122,61,0,806,805,1,0,0,0,806,807,1,0,0,0,807,
        808,1,0,0,0,808,811,5,4,0,0,809,811,5,78,0,0,810,804,1,0,0,0,810,
        809,1,0,0,0,811,111,1,0,0,0,812,813,5,48,0,0,813,814,3,70,35,0,814,
        113,1,0,0,0,815,817,5,49,0,0,816,818,3,60,30,0,817,816,1,0,0,0,817,
        818,1,0,0,0,818,819,1,0,0,0,819,820,5,91,0,0,820,821,3,122,61,0,
        821,822,5,92,0,0,822,115,1,0,0,0,823,824,5,50,0,0,824,825,5,91,0,
        0,825,826,3,122,61,0,826,827,5,92,0,0,827,117,1,0,0,0,828,830,5,
        49,0,0,829,831,3,60,30,0,830,829,1,0,0,0,830,831,1,0,0,0,831,119,
        1,0,0,0,832,833,5,50,0,0,833,121,1,0,0,0,834,835,6,61,-1,0,835,836,
        3,156,78,0,836,837,3,122,61,25,837,860,1,0,0,0,838,860,3,168,84,
        0,839,860,3,42,21,0,840,841,3,136,68,0,841,842,3,122,61,21,842,860,
        1,0,0,0,843,860,3,160,80,0,844,860,3,154,77,0,845,860,3,132,66,0,
        846,847,3,158,79,0,847,848,3,122,61,17,848,860,1,0,0,0,849,860,3,
        166,83,0,850,860,3,126,63,0,851,860,3,124,62,0,852,860,3,164,82,
        0,853,860,3,128,64,0,854,855,3,138,69,0,855,856,3,122,61,3,856,860,
        1,0,0,0,857,860,3,134,67,0,858,860,3,162,81,0,859,834,1,0,0,0,859,
        838,1,0,0,0,859,839,1,0,0,0,859,840,1,0,0,0,859,843,1,0,0,0,859,
        844,1,0,0,0,859,845,1,0,0,0,859,846,1,0,0,0,859,849,1,0,0,0,859,
        850,1,0,0,0,859,851,1,0,0,0,859,852,1,0,0,0,859,853,1,0,0,0,859,
        854,1,0,0,0,859,857,1,0,0,0,859,858,1,0,0,0,860,891,1,0,0,0,861,
        862,10,11,0,0,862,863,3,146,73,0,863,864,3,122,61,12,864,890,1,0,
        0,0,865,866,10,10,0,0,866,867,3,150,75,0,867,868,3,122,61,11,868,
        890,1,0,0,0,869,870,10,9,0,0,870,871,3,152,76,0,871,872,3,122,61,
        10,872,890,1,0,0,0,873,874,10,8,0,0,874,875,3,148,74,0,875,876,3,
        122,61,9,876,890,1,0,0,0,877,878,10,7,0,0,878,879,3,144,72,0,879,
        880,3,122,61,8,880,890,1,0,0,0,881,882,10,22,0,0,882,890,3,142,71,
        0,883,884,10,14,0,0,884,890,3,170,85,0,885,886,10,13,0,0,886,890,
        3,130,65,0,887,888,10,4,0,0,888,890,3,172,86,0,889,861,1,0,0,0,889,
        865,1,0,0,0,889,869,1,0,0,0,889,873,1,0,0,0,889,877,1,0,0,0,889,
        881,1,0,0,0,889,883,1,0,0,0,889,885,1,0,0,0,889,887,1,0,0,0,890,
        893,1,0,0,0,891,889,1,0,0,0,891,892,1,0,0,0,892,123,1,0,0,0,893,
        891,1,0,0,0,894,895,3,60,30,0,895,896,3,66,33,0,896,125,1,0,0,0,
        897,898,5,14,0,0,898,899,5,2,0,0,899,900,3,122,61,0,900,901,5,3,
        0,0,901,127,1,0,0,0,902,903,5,25,0,0,903,904,3,122,61,0,904,905,
        5,86,0,0,905,129,1,0,0,0,906,907,3,60,30,0,907,131,1,0,0,0,908,909,
        5,78,0,0,909,910,5,6,0,0,910,911,5,2,0,0,911,912,3,122,61,0,912,
        913,5,3,0,0,913,914,5,4,0,0,914,133,1,0,0,0,915,917,5,78,0,0,916,
        918,5,85,0,0,917,916,1,0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,919,
        920,5,88,0,0,920,921,5,79,0,0,921,922,5,4,0,0,922,923,3,122,61,0,
        923,924,5,89,0,0,924,135,1,0,0,0,925,926,5,78,0,0,926,928,5,84,0,
        0,927,925,1,0,0,0,928,929,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,
        0,930,137,1,0,0,0,931,933,5,28,0,0,932,931,1,0,0,0,932,933,1,0,0,
        0,933,934,1,0,0,0,934,935,3,140,70,0,935,936,5,6,0,0,936,139,1,0,
        0,0,937,939,5,30,0,0,938,937,1,0,0,0,938,939,1,0,0,0,939,941,1,0,
        0,0,940,942,5,10,0,0,941,940,1,0,0,0,941,942,1,0,0,0,942,943,1,0,
        0,0,943,955,5,78,0,0,944,945,5,78,0,0,945,947,5,91,0,0,946,948,5,
        30,0,0,947,946,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,951,5,
        10,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,953,5,
        78,0,0,953,955,5,92,0,0,954,938,1,0,0,0,954,944,1,0,0,0,955,141,
        1,0,0,0,956,957,5,51,0,0,957,962,3,60,30,0,958,959,5,51,0,0,959,
        961,3,60,30,0,960,958,1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,962,
        963,1,0,0,0,963,143,1,0,0,0,964,962,1,0,0,0,965,966,7,3,0,0,966,
        145,1,0,0,0,967,968,5,52,0,0,968,147,1,0,0,0,969,970,7,4,0,0,970,
        149,1,0,0,0,971,972,7,5,0,0,972,151,1,0,0,0,973,974,7,6,0,0,974,
        153,1,0,0,0,975,976,5,78,0,0,976,977,5,2,0,0,977,982,3,44,22,0,978,
        979,5,90,0,0,979,981,3,44,22,0,980,978,1,0,0,0,981,984,1,0,0,0,982,
        980,1,0,0,0,982,983,1,0,0,0,983,986,1,0,0,0,984,982,1,0,0,0,985,
        987,5,90,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,
        989,5,3,0,0,989,155,1,0,0,0,990,991,5,10,0,0,991,157,1,0,0,0,992,
        993,7,7,0,0,993,159,1,0,0,0,994,995,5,91,0,0,995,996,3,122,61,0,
        996,997,5,92,0,0,997,161,1,0,0,0,998,999,5,20,0,0,999,1000,3,122,
        61,0,1000,163,1,0,0,0,1001,1005,5,2,0,0,1002,1004,3,74,37,0,1003,
        1002,1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,1005,1006,1,0,0,
        0,1006,1008,1,0,0,0,1007,1005,1,0,0,0,1008,1009,3,122,61,0,1009,
        1010,5,3,0,0,1010,165,1,0,0,0,1011,1012,5,17,0,0,1012,1013,3,122,
        61,0,1013,167,1,0,0,0,1014,1017,3,176,88,0,1015,1017,5,78,0,0,1016,
        1014,1,0,0,0,1016,1015,1,0,0,0,1017,169,1,0,0,0,1018,1019,5,88,0,
        0,1019,1020,3,168,84,0,1020,1021,5,89,0,0,1021,1029,1,0,0,0,1022,
        1023,5,64,0,0,1023,1025,3,168,84,0,1024,1022,1,0,0,0,1025,1026,1,
        0,0,0,1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,1029,1,0,0,0,1028,
        1018,1,0,0,0,1028,1024,1,0,0,0,1029,171,1,0,0,0,1030,1032,5,85,0,
        0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,1033,1034,
        3,174,87,0,1034,173,1,0,0,0,1035,1048,5,16,0,0,1036,1037,5,91,0,
        0,1037,1042,3,122,61,0,1038,1039,5,90,0,0,1039,1041,3,122,61,0,1040,
        1038,1,0,0,0,1041,1044,1,0,0,0,1042,1040,1,0,0,0,1042,1043,1,0,0,
        0,1043,1045,1,0,0,0,1044,1042,1,0,0,0,1045,1046,5,92,0,0,1046,1048,
        1,0,0,0,1047,1035,1,0,0,0,1047,1036,1,0,0,0,1048,175,1,0,0,0,1049,
        1061,3,182,91,0,1050,1061,5,82,0,0,1051,1061,5,79,0,0,1052,1061,
        5,80,0,0,1053,1061,5,81,0,0,1054,1061,5,76,0,0,1055,1061,5,77,0,
        0,1056,1061,3,180,90,0,1057,1061,5,83,0,0,1058,1061,3,178,89,0,1059,
        1061,5,75,0,0,1060,1049,1,0,0,0,1060,1050,1,0,0,0,1060,1051,1,0,
        0,0,1060,1052,1,0,0,0,1060,1053,1,0,0,0,1060,1054,1,0,0,0,1060,1055,
        1,0,0,0,1060,1056,1,0,0,0,1060,1057,1,0,0,0,1060,1058,1,0,0,0,1060,
        1059,1,0,0,0,1061,177,1,0,0,0,1062,1074,5,65,0,0,1063,1074,5,66,
        0,0,1064,1074,5,67,0,0,1065,1066,5,68,0,0,1066,1067,5,91,0,0,1067,
        1074,5,69,0,0,1068,1069,5,68,0,0,1069,1070,5,92,0,0,1070,1074,5,
        69,0,0,1071,1074,5,70,0,0,1072,1074,5,71,0,0,1073,1062,1,0,0,0,1073,
        1063,1,0,0,0,1073,1064,1,0,0,0,1073,1065,1,0,0,0,1073,1068,1,0,0,
        0,1073,1071,1,0,0,0,1073,1072,1,0,0,0,1074,179,1,0,0,0,1075,1076,
        7,8,0,0,1076,181,1,0,0,0,1077,1079,5,78,0,0,1078,1077,1,0,0,0,1078,
        1079,1,0,0,0,1079,1081,1,0,0,0,1080,1082,5,85,0,0,1081,1080,1,0,
        0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1084,5,88,0,0,1084,
        1089,3,122,61,0,1085,1086,5,90,0,0,1086,1088,3,122,61,0,1087,1085,
        1,0,0,0,1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,
        1092,1,0,0,0,1091,1089,1,0,0,0,1092,1093,5,89,0,0,1093,1115,1,0,
        0,0,1094,1096,5,78,0,0,1095,1094,1,0,0,0,1095,1096,1,0,0,0,1096,
        1098,1,0,0,0,1097,1099,5,85,0,0,1098,1097,1,0,0,0,1098,1099,1,0,
        0,0,1099,1100,1,0,0,0,1100,1101,5,88,0,0,1101,1102,3,122,61,0,1102,
        1103,5,4,0,0,1103,1104,3,122,61,0,1104,1105,5,89,0,0,1105,1115,1,
        0,0,0,1106,1108,5,78,0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,
        1110,1,0,0,0,1109,1111,5,85,0,0,1110,1109,1,0,0,0,1110,1111,1,0,
        0,0,1111,1112,1,0,0,0,1112,1113,5,88,0,0,1113,1115,5,89,0,0,1114,
        1078,1,0,0,0,1114,1095,1,0,0,0,1114,1107,1,0,0,0,1115,183,1,0,0,
        0,1116,1120,5,72,0,0,1117,1119,9,0,0,0,1118,1117,1,0,0,0,1119,1122,
        1,0,0,0,1120,1121,1,0,0,0,1120,1118,1,0,0,0,1121,1123,1,0,0,0,1122,
        1120,1,0,0,0,1123,1124,5,72,0,0,1124,185,1,0,0,0,126,189,198,204,
        208,212,219,230,233,247,257,263,269,273,281,287,292,295,302,307,
        310,313,318,326,331,335,350,357,363,368,376,382,388,395,403,406,
        409,412,415,422,425,428,431,440,444,447,450,455,458,469,483,487,
        490,496,499,511,516,527,535,540,549,554,568,573,580,583,595,599,
        627,630,634,660,664,672,676,681,684,687,692,707,716,723,725,731,
        740,743,747,753,767,794,799,806,810,817,830,859,889,891,917,929,
        932,938,941,947,950,954,962,982,986,1005,1016,1026,1028,1031,1042,
        1047,1060,1073,1078,1081,1089,1095,1098,1107,1110,1114,1120
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'use'", "'{'", "'}'", "';'", "'type'", 
                     "'='", "'impl'", "'extern'", "'static'", "'mut'", "'fn'", 
                     "'->'", "'pub'", "'unsafe'", "'struct'", "'()'", "'&'", 
                     "'const'", "'union'", "'*'", "'i32'", "'String'", "'bool'", 
                     "'u8'", "'<'", "'break'", "'continue'", "'let'", "'else'", 
                     "'ref'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'match'", "'|'", "'=>'", "'return'", 
                     "'while'", "'for'", "'in'", "'if'", "'else if'", "'loop'", 
                     "'Box'", "'Some'", "'as'", "'..'", "'=='", "'!='", 
                     "'||'", "'&&'", "'>>'", "'>='", "'<='", "'/'", "'%'", 
                     "'+'", "'-'", "'.'", "'b'.''", "'b'|''", "'b'*''", 
                     "'b''", "'''", "'b'+''", "'b'?''", "'\"'", "'true'", 
                     "'false'", "'None'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'::'", "'!'", "'>'", "'#'", "'['", "']'", 
                     "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "TRUE", "FALSE", "NONE", "Binary", "STRING_LITERAL", 
                      "Identifier", "Number", "SignedNumber", "BYTE_STRING_LITERAL", 
                      "HexNumber", "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", 
                      "GT", "POUND", "LBRACK", "RBRACK", "COMMA", "LPAREN", 
                      "RPAREN", "UNDERSCORE", "COLON", "ELLIPSIS", "WS", 
                      "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_useDecl = 2
    RULE_topLevelDef = 3
    RULE_typeAlias = 4
    RULE_interfaceDef = 5
    RULE_externBlock = 6
    RULE_externItem = 7
    RULE_externParams = 8
    RULE_externParam = 9
    RULE_visibility = 10
    RULE_unsafeModifier = 11
    RULE_externAbi = 12
    RULE_attributes = 13
    RULE_innerAttribute = 14
    RULE_attribute = 15
    RULE_attrArgs = 16
    RULE_attrArg = 17
    RULE_attrValue = 18
    RULE_structDef = 19
    RULE_structField = 20
    RULE_structLiteral = 21
    RULE_structLiteralField = 22
    RULE_functionDef = 23
    RULE_paramList = 24
    RULE_param = 25
    RULE_constDef = 26
    RULE_unionDef = 27
    RULE_unionField = 28
    RULE_unsafeDef = 29
    RULE_typeExpr = 30
    RULE_pointerType = 31
    RULE_basicType = 32
    RULE_typePath = 33
    RULE_arrayType = 34
    RULE_block = 35
    RULE_unsafeBlock = 36
    RULE_statement = 37
    RULE_conditionalAssignmentStmt = 38
    RULE_callStmt = 39
    RULE_letStmt = 40
    RULE_varDef = 41
    RULE_compoundOp = 42
    RULE_compoundAssignment = 43
    RULE_matchStmt = 44
    RULE_matchArm = 45
    RULE_matchPattern = 46
    RULE_whileStmt = 47
    RULE_initializer = 48
    RULE_staticVarDecl = 49
    RULE_initBlock = 50
    RULE_assignStmt = 51
    RULE_forStmt = 52
    RULE_ifStmt = 53
    RULE_exprStmt = 54
    RULE_returnStmt = 55
    RULE_loopStmt = 56
    RULE_boxWrappwer = 57
    RULE_typeWrapper = 58
    RULE_boxWrapperPrefix = 59
    RULE_typeWrapperPrefix = 60
    RULE_expression = 61
    RULE_basicTypeCastExpr = 62
    RULE_unsafeExpression = 63
    RULE_qualifiedExpression = 64
    RULE_typeAccessPostfix = 65
    RULE_structDefInit = 66
    RULE_arrayDeclaration = 67
    RULE_typePathExpression = 68
    RULE_patternPrefix = 69
    RULE_pattern = 70
    RULE_castExpressionPostFix = 71
    RULE_compoundOps = 72
    RULE_rangeSymbol = 73
    RULE_conditionalOps = 74
    RULE_booleanOps = 75
    RULE_binaryOps = 76
    RULE_structFieldDec = 77
    RULE_mutableExpression = 78
    RULE_unaryOpes = 79
    RULE_parenExpression = 80
    RULE_dereferenceExpression = 81
    RULE_expressionBlock = 82
    RULE_borrowExpression = 83
    RULE_primaryExpression = 84
    RULE_fieldAccessPostFix = 85
    RULE_callExpressionPostFix = 86
    RULE_functionCallArgs = 87
    RULE_literal = 88
    RULE_byteLiteral = 89
    RULE_booleanLiteral = 90
    RULE_arrayLiteral = 91
    RULE_stringLiteral = 92

    ruleNames =  [ "program", "topLevelItem", "useDecl", "topLevelDef", 
                   "typeAlias", "interfaceDef", "externBlock", "externItem", 
                   "externParams", "externParam", "visibility", "unsafeModifier", 
                   "externAbi", "attributes", "innerAttribute", "attribute", 
                   "attrArgs", "attrArg", "attrValue", "structDef", "structField", 
                   "structLiteral", "structLiteralField", "functionDef", 
                   "paramList", "param", "constDef", "unionDef", "unionField", 
                   "unsafeDef", "typeExpr", "pointerType", "basicType", 
                   "typePath", "arrayType", "block", "unsafeBlock", "statement", 
                   "conditionalAssignmentStmt", "callStmt", "letStmt", "varDef", 
                   "compoundOp", "compoundAssignment", "matchStmt", "matchArm", 
                   "matchPattern", "whileStmt", "initializer", "staticVarDecl", 
                   "initBlock", "assignStmt", "forStmt", "ifStmt", "exprStmt", 
                   "returnStmt", "loopStmt", "boxWrappwer", "typeWrapper", 
                   "boxWrapperPrefix", "typeWrapperPrefix", "expression", 
                   "basicTypeCastExpr", "unsafeExpression", "qualifiedExpression", 
                   "typeAccessPostfix", "structDefInit", "arrayDeclaration", 
                   "typePathExpression", "patternPrefix", "pattern", "castExpressionPostFix", 
                   "compoundOps", "rangeSymbol", "conditionalOps", "booleanOps", 
                   "binaryOps", "structFieldDec", "mutableExpression", "unaryOpes", 
                   "parenExpression", "dereferenceExpression", "expressionBlock", 
                   "borrowExpression", "primaryExpression", "fieldAccessPostFix", 
                   "callExpressionPostFix", "functionCallArgs", "literal", 
                   "byteLiteral", "booleanLiteral", "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    TRUE=73
    FALSE=74
    NONE=75
    Binary=76
    STRING_LITERAL=77
    Identifier=78
    Number=79
    SignedNumber=80
    BYTE_STRING_LITERAL=81
    HexNumber=82
    CHAR_LITERAL=83
    DOUBLE_COLON=84
    EXCL=85
    GT=86
    POUND=87
    LBRACK=88
    RBRACK=89
    COMMA=90
    LPAREN=91
    RPAREN=92
    UNDERSCORE=93
    COLON=94
    ELLIPSIS=95
    WS=96
    COMMENT=97

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 846754) != 0) or _la==87:
                self.state = 186
                self.topLevelItem()
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def useDecl(self):
            return self.getTypedRuleContext(RustParser.UseDeclContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 192
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 193
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 195
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 196
                self.useDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 197
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypePathContext)
            else:
                return self.getTypedRuleContext(RustParser.TypePathContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_useDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDecl" ):
                listener.enterUseDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDecl" ):
                listener.exitUseDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDecl" ):
                return visitor.visitUseDecl(self)
            else:
                return visitor.visitChildren(self)




    def useDecl(self):

        localctx = RustParser.UseDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_useDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.match(RustParser.T__0)
            self.state = 201
            self.typePath()
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 202
                self.match(RustParser.T__1)
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78 or _la==84:
                    self.state = 204
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 203
                        self.typePath()


                    self.state = 206
                    self.match(RustParser.Identifier)
                    self.state = 208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 207
                        self.match(RustParser.COMMA)


                    self.state = 214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 215
                self.match(RustParser.T__2)
                self.state = 216
                self.match(RustParser.COMMA)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelDef" ):
                return visitor.visitTopLevelDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_topLevelDef)
        try:
            self.state = 230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 227
                self.constDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 228
                self.unionDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 229
                self.unsafeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 232
                self.visibility()


            self.state = 235
            self.match(RustParser.T__4)
            self.state = 236
            self.match(RustParser.Identifier)
            self.state = 237
            self.match(RustParser.T__5)
            self.state = 238
            self.typeExpr()
            self.state = 239
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDef" ):
                return visitor.visitInterfaceDef(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(RustParser.T__6)
            self.state = 242
            self.match(RustParser.Identifier)
            self.state = 243
            self.match(RustParser.T__1)
            self.state = 245 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 244
                self.functionDef()
                self.state = 247 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 26880) != 0)):
                    break

            self.state = 249
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(RustParser.T__7)
            self.state = 252
            self.match(RustParser.STRING_LITERAL)
            self.state = 253
            self.match(RustParser.T__1)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 10784) != 0):
                self.state = 254
                self.externItem()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 260
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 262
                    self.visibility()


                self.state = 265
                self.match(RustParser.T__4)
                self.state = 266
                self.match(RustParser.Identifier)
                self.state = 267
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 268
                    self.visibility()


                self.state = 271
                self.match(RustParser.T__8)
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 272
                    self.match(RustParser.T__9)


                self.state = 275
                self.match(RustParser.Identifier)
                self.state = 276
                self.match(RustParser.COLON)
                self.state = 277
                self.typeExpr()
                self.state = 278
                self.match(RustParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 280
                    self.visibility()


                self.state = 283
                self.match(RustParser.T__10)
                self.state = 284
                self.match(RustParser.Identifier)
                self.state = 285
                self.match(RustParser.LPAREN)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 229377) != 0):
                    self.state = 286
                    self.externParams()


                self.state = 289
                self.match(RustParser.RPAREN)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 290
                    self.match(RustParser.T__11)
                    self.state = 291
                    self.typeExpr()


                self.state = 294
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 93, 94]:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.externParam()
                self.state = 302
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 298
                        self.match(RustParser.COMMA)
                        self.state = 299
                        self.externParam() 
                    self.state = 304
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 305
                    self.match(RustParser.COMMA)
                    self.state = 306
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 309
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78 or _la==93:
                self.state = 312
                _la = self._input.LA(1)
                if not(_la==78 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 315
            self.match(RustParser.COLON)
            self.state = 318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 20, 21, 22, 23, 24, 25, 78, 84, 88]:
                self.state = 316
                self.typeExpr()
                pass
            elif token in [95]:
                self.state = 317
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(RustParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(RustParser.T__7)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 325
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 328
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 331 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(RustParser.POUND)

            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 334
                self.match(RustParser.EXCL)


            self.state = 337
            self.match(RustParser.LBRACK)
            self.state = 338
            self.attribute()
            self.state = 339
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attribute)
        try:
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 341
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 342
                self.match(RustParser.Identifier)
                self.state = 343
                self.match(RustParser.T__5)
                self.state = 344
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 345
                self.match(RustParser.Identifier)
                self.state = 346
                self.match(RustParser.LPAREN)
                self.state = 347
                self.attrArgs()
                self.state = 348
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.attrArg()
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 353
                self.match(RustParser.COMMA)
                self.state = 354
                self.attrArg()
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(RustParser.Identifier)
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 361
                self.match(RustParser.T__5)
                self.state = 362
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            _la = self._input.LA(1)
            if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 367
                self.visibility()


            self.state = 370
            self.match(RustParser.T__14)
            self.state = 371
            self.match(RustParser.Identifier)
            self.state = 372
            self.match(RustParser.T__1)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13 or _la==78:
                self.state = 373
                self.structField()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 379
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 381
                self.visibility()


            self.state = 384
            self.match(RustParser.Identifier)
            self.state = 385
            self.match(RustParser.COLON)
            self.state = 386
            self.typeExpr()
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 387
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteral" ):
                return visitor.visitStructLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(RustParser.Identifier)
            self.state = 391
            self.match(RustParser.T__1)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 392
                self.structLiteralField()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 398
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(RustParser.Identifier)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 401
                self.match(RustParser.COLON)
                self.state = 402
                self.expression(0)


            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 405
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 408
                self.visibility()


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 411
                self.unsafeModifier()


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 414
                self.externAbi()


            self.state = 417
            self.match(RustParser.T__10)
            self.state = 418
            self.match(RustParser.Identifier)
            self.state = 425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.state = 419
                self.match(RustParser.T__15)
                pass
            elif token in [91]:
                self.state = 420
                self.match(RustParser.LPAREN)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10 or _la==17 or _la==78:
                    self.state = 421
                    self.paramList()


                self.state = 424
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 427
                self.match(RustParser.T__11)


            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 66191360) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1089) != 0):
                self.state = 430
                self.typeExpr()


            self.state = 433
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.param()
            self.state = 440
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 436
                    self.match(RustParser.COMMA)
                    self.state = 437
                    self.param() 
                self.state = 442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 443
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 446
                self.match(RustParser.T__16)


            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 449
                self.match(RustParser.T__9)


            self.state = 452
            self.match(RustParser.Identifier)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 453
                self.match(RustParser.COLON)
                self.state = 454
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 457
                self.visibility()


            self.state = 460
            self.match(RustParser.T__17)
            self.state = 461
            self.match(RustParser.Identifier)
            self.state = 462
            self.match(RustParser.COLON)
            self.state = 463
            self.typeExpr()
            self.state = 464
            self.match(RustParser.T__5)
            self.state = 465
            self.expression(0)
            self.state = 466
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 468
                self.visibility()


            self.state = 471
            self.match(RustParser.T__18)
            self.state = 472
            self.match(RustParser.Identifier)
            self.state = 487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [94]:
                self.state = 473
                self.match(RustParser.COLON)
                self.state = 474
                self.typeExpr()
                self.state = 475
                self.match(RustParser.T__5)
                self.state = 476
                self.expression(0)
                self.state = 477
                self.match(RustParser.T__3)
                pass
            elif token in [2]:
                self.state = 479
                self.match(RustParser.T__1)
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13 or _la==78:
                    self.state = 480
                    self.unionField()
                    self.state = 485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 486
                self.match(RustParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 489
                self.visibility()


            self.state = 492
            self.match(RustParser.Identifier)
            self.state = 493
            self.match(RustParser.COLON)
            self.state = 494
            self.typeExpr()
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 495
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 498
                self.visibility()


            self.state = 501
            self.match(RustParser.T__13)
            self.state = 502
            self.match(RustParser.Identifier)
            self.state = 503
            self.match(RustParser.COLON)
            self.state = 504
            self.typeExpr()
            self.state = 505
            self.match(RustParser.T__5)
            self.state = 506
            self.expression(0)
            self.state = 507
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpr" ):
                listener.enterTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpr" ):
                listener.exitTypeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpr" ):
                return visitor.visitTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def typeExpr(self):

        localctx = RustParser.TypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_typeExpr)
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 21, 22, 23, 24, 25, 78, 84, 88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 509
                self.basicType()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 510
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(RustParser.T__19)
            self.state = 514
            _la = self._input.LA(1)
            if not(_la==10 or _la==18):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 515
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(RustParser.ArrayTypeContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.match(RustParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.match(RustParser.T__21)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 520
                self.match(RustParser.T__22)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 521
                self.match(RustParser.T__23)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 522
                self.arrayType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 523
                self.typePath()
                self.state = 524
                self.basicType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 526
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 529
                self.match(RustParser.T__24)
                self.state = 530
                self.typeExpr()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 531
                    self.match(RustParser.COMMA)
                    self.state = 532
                    self.typeExpr()
                    self.state = 537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 538
                self.match(RustParser.GT)
                self.state = 540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 539
                    self.match(RustParser.T__15)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 542
                self.match(RustParser.Identifier)
                self.state = 554
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 543
                    self.match(RustParser.T__24)
                    self.state = 544
                    self.typeExpr()
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==90:
                        self.state = 545
                        self.match(RustParser.COMMA)
                        self.state = 546
                        self.typeExpr()
                        self.state = 551
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 552
                    self.match(RustParser.GT)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 556
                self.match(RustParser.Identifier)
                self.state = 557
                self.match(RustParser.T__24)
                self.state = 558
                self.typeExpr()
                self.state = 559
                self.match(RustParser.GT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 561
                self.match(RustParser.T__16)
                self.state = 562
                self.typeExpr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 563
                self.match(RustParser.LBRACK)
                self.state = 564
                self.typeExpr()
                self.state = 565
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 567
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 570
                self.match(RustParser.Identifier)
                self.state = 571
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 572
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 575
                self.match(RustParser.Identifier)
                self.state = 580
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 576
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 577
                        self.match(RustParser.Identifier) 
                    self.state = 582
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = RustParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(RustParser.LBRACK)
            self.state = 586
            self.basicType()
            self.state = 587
            self.match(RustParser.T__3)
            self.state = 588
            self.match(RustParser.Number)
            self.state = 589
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self.match(RustParser.T__1)
            self.state = 595
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 592
                    self.statement() 
                self.state = 597
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42 or _la==78:
                self.state = 598
                self.returnStmt()


            self.state = 601
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.unsafeModifier()
            self.state = 604
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeBlock(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlockContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def conditionalAssignmentStmt(self):
            return self.getTypedRuleContext(RustParser.ConditionalAssignmentStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def callStmt(self):
            return self.getTypedRuleContext(RustParser.CallStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_statement)
        try:
            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.unsafeBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self.letStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 608
                self.conditionalAssignmentStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 609
                self.structLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 610
                self.structDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 611
                self.staticVarDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 612
                self.typeWrapper()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 613
                self.assignStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 614
                self.compoundAssignment()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 615
                self.forStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 616
                self.ifStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 617
                self.callStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 618
                self.exprStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 619
                self.whileStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 620
                self.returnStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 621
                self.loopStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 622
                self.match(RustParser.T__25)
                self.state = 623
                self.match(RustParser.T__3)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 624
                self.match(RustParser.T__26)
                self.state = 625
                self.match(RustParser.T__3)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 626
                self.matchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalAssignmentStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_conditionalAssignmentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAssignmentStmt" ):
                listener.enterConditionalAssignmentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAssignmentStmt" ):
                listener.exitConditionalAssignmentStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalAssignmentStmt" ):
                return visitor.visitConditionalAssignmentStmt(self)
            else:
                return visitor.visitChildren(self)




    def conditionalAssignmentStmt(self):

        localctx = RustParser.ConditionalAssignmentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conditionalAssignmentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 629
                self.match(RustParser.T__27)


            self.state = 634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.state = 632
                self.typeWrapper()
                pass
            elif token in [2, 10, 14, 17, 20, 21, 22, 23, 24, 25, 28, 30, 62, 63, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 91]:
                self.state = 633
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 636
            self.match(RustParser.T__5)
            self.state = 637
            self.expression(0)
            self.state = 638
            self.match(RustParser.T__28)
            self.state = 639
            self.block()
            self.state = 640
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStmt" ):
                listener.enterCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStmt" ):
                listener.exitCallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStmt" ):
                return visitor.visitCallStmt(self)
            else:
                return visitor.visitChildren(self)




    def callStmt(self):

        localctx = RustParser.CallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_callStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.expression(0)
            self.state = 643
            self.callExpressionPostFix()
            self.state = 644
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.match(RustParser.T__27)
                self.state = 647
                self.varDef()
                self.state = 648
                self.match(RustParser.T__5)
                self.state = 649
                self.expression(0)
                self.state = 650
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 652
                self.match(RustParser.T__27)
                self.state = 653
                self.varDef()
                self.state = 654
                self.initBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 656
                self.match(RustParser.T__27)
                self.state = 657
                self.match(RustParser.LPAREN)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==10 or _la==30 or _la==78:
                    self.state = 658
                    self.varDef()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 659
                        self.match(RustParser.COMMA)


                    self.state = 666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 667
                self.match(RustParser.RPAREN)
                self.state = 668
                self.match(RustParser.T__5)
                self.state = 669
                self.match(RustParser.LPAREN)
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686017019001852) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 77594479) != 0):
                    self.state = 670
                    self.expression(0)
                    self.state = 672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==90:
                        self.state = 671
                        self.match(RustParser.COMMA)


                    self.state = 678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 679
                self.match(RustParser.RPAREN)
                self.state = 680
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 683
                self.match(RustParser.T__29)


            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 686
                self.match(RustParser.T__9)


            self.state = 689
            self.match(RustParser.Identifier)
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 690
                self.match(RustParser.COLON)
                self.state = 691
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 547608330240) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.expression(0)
            self.state = 697
            self.compoundOp()
            self.state = 698
            self.expression(0)
            self.state = 699
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.match(RustParser.T__38)
            self.state = 702
            self.expression(0)
            self.state = 703
            self.match(RustParser.T__1)
            self.state = 705 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 704
                self.matchArm()
                self.state = 707 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 268460143) != 0)):
                    break

            self.state = 709
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.matchPattern()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==40:
                self.state = 712
                self.match(RustParser.T__39)
                self.state = 713
                self.matchPattern()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 719
            self.match(RustParser.T__40)
            self.state = 725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.state = 720
                self.block()
                pass
            elif token in [42]:
                self.state = 721
                self.match(RustParser.T__41)
                self.state = 723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 722
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_matchPattern)
        try:
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 66, 67, 68, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.byteLiteral()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.match(RustParser.Number)
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.match(RustParser.UNDERSCORE)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 4)
                self.state = 730
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(RustParser.T__42)
            self.state = 734
            self.expression(0)
            self.state = 735
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_initializer)
        try:
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 739
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 742
                self.visibility()


            self.state = 745
            self.match(RustParser.T__8)
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 746
                self.match(RustParser.T__9)


            self.state = 749
            self.match(RustParser.Identifier)
            self.state = 750
            self.match(RustParser.COLON)
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 751
                self.typeExpr()
                pass

            elif la_ == 2:
                self.state = 752
                self.match(RustParser.Identifier)
                pass


            self.state = 755
            self.match(RustParser.T__5)
            self.state = 756
            self.initializer()
            self.state = 757
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(RustParser.T__1)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 760
                self.match(RustParser.Identifier)
                self.state = 761
                self.match(RustParser.COLON)
                self.state = 762
                self.expression(0)
                self.state = 763
                self.match(RustParser.COMMA)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 770
            self.match(RustParser.T__2)
            self.state = 771
            self.match(RustParser.T__3)
            self.state = 772
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.expression(0)
            self.state = 775
            self.match(RustParser.T__5)
            self.state = 776
            self.expression(0)
            self.state = 777
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(RustParser.T__43)
            self.state = 780
            self.match(RustParser.Identifier)
            self.state = 781
            self.match(RustParser.T__44)
            self.state = 782
            self.expression(0)
            self.state = 783
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(RustParser.T__45)
            self.state = 786
            self.expression(0)
            self.state = 787
            self.block()
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==47:
                self.state = 788
                self.match(RustParser.T__46)
                self.state = 789
                self.expression(0)
                self.state = 790
                self.block()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 797
                self.match(RustParser.T__28)
                self.state = 798
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.expression(0)
            self.state = 802
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 810
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 804
                self.match(RustParser.T__41)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686017019001852) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 77594479) != 0):
                    self.state = 805
                    self.expression(0)


                self.state = 808
                self.match(RustParser.T__3)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 809
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(RustParser.T__47)
            self.state = 813
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrappwerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrappwer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrappwer" ):
                listener.enterBoxWrappwer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrappwer" ):
                listener.exitBoxWrappwer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWrappwer" ):
                return visitor.visitBoxWrappwer(self)
            else:
                return visitor.visitChildren(self)




    def boxWrappwer(self):

        localctx = RustParser.BoxWrappwerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_boxWrappwer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(RustParser.T__48)
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 66191360) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1089) != 0):
                self.state = 816
                self.typeExpr()


            self.state = 819
            self.match(RustParser.LPAREN)
            self.state = 820
            self.expression(0)
            self.state = 821
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_typeWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapper" ):
                listener.enterTypeWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapper" ):
                listener.exitTypeWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWrapper" ):
                return visitor.visitTypeWrapper(self)
            else:
                return visitor.visitChildren(self)




    def typeWrapper(self):

        localctx = RustParser.TypeWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeWrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(RustParser.T__49)
            self.state = 824
            self.match(RustParser.LPAREN)
            self.state = 825
            self.expression(0)
            self.state = 826
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrapperPrefix" ):
                listener.enterBoxWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrapperPrefix" ):
                listener.exitBoxWrapperPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWrapperPrefix" ):
                return visitor.visitBoxWrapperPrefix(self)
            else:
                return visitor.visitChildren(self)




    def boxWrapperPrefix(self):

        localctx = RustParser.BoxWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_boxWrapperPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(RustParser.T__48)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 66191360) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 1089) != 0):
                self.state = 829
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_typeWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapperPrefix" ):
                listener.enterTypeWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapperPrefix" ):
                listener.exitTypeWrapperPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWrapperPrefix" ):
                return visitor.visitTypeWrapperPrefix(self)
            else:
                return visitor.visitChildren(self)




    def typeWrapperPrefix(self):

        localctx = RustParser.TypeWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typeWrapperPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(RustParser.T__49)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def typePathExpression(self):
            return self.getTypedRuleContext(RustParser.TypePathExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def structDefInit(self):
            return self.getTypedRuleContext(RustParser.StructDefInitContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def unsafeExpression(self):
            return self.getTypedRuleContext(RustParser.UnsafeExpressionContext,0)


        def basicTypeCastExpr(self):
            return self.getTypedRuleContext(RustParser.BasicTypeCastExprContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def qualifiedExpression(self):
            return self.getTypedRuleContext(RustParser.QualifiedExpressionContext,0)


        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(RustParser.ArrayDeclarationContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def rangeSymbol(self):
            return self.getTypedRuleContext(RustParser.RangeSymbolContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def typeAccessPostfix(self):
            return self.getTypedRuleContext(RustParser.TypeAccessPostfixContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 835
                self.mutableExpression()
                self.state = 836
                self.expression(25)
                pass

            elif la_ == 2:
                self.state = 838
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.state = 839
                self.structLiteral()
                pass

            elif la_ == 4:
                self.state = 840
                self.typePathExpression()
                self.state = 841
                self.expression(21)
                pass

            elif la_ == 5:
                self.state = 843
                self.parenExpression()
                pass

            elif la_ == 6:
                self.state = 844
                self.structFieldDec()
                pass

            elif la_ == 7:
                self.state = 845
                self.structDefInit()
                pass

            elif la_ == 8:
                self.state = 846
                self.unaryOpes()
                self.state = 847
                self.expression(17)
                pass

            elif la_ == 9:
                self.state = 849
                self.borrowExpression()
                pass

            elif la_ == 10:
                self.state = 850
                self.unsafeExpression()
                pass

            elif la_ == 11:
                self.state = 851
                self.basicTypeCastExpr()
                pass

            elif la_ == 12:
                self.state = 852
                self.expressionBlock()
                pass

            elif la_ == 13:
                self.state = 853
                self.qualifiedExpression()
                pass

            elif la_ == 14:
                self.state = 854
                self.patternPrefix()
                self.state = 855
                self.expression(3)
                pass

            elif la_ == 15:
                self.state = 857
                self.arrayDeclaration()
                pass

            elif la_ == 16:
                self.state = 858
                self.dereferenceExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 891
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 889
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 861
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 862
                        self.rangeSymbol()
                        self.state = 863
                        self.expression(12)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 865
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 866
                        self.booleanOps()
                        self.state = 867
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 869
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 870
                        self.binaryOps()
                        self.state = 871
                        self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 873
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 874
                        self.conditionalOps()
                        self.state = 875
                        self.expression(9)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 877
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 878
                        self.compoundOps()
                        self.state = 879
                        self.expression(8)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 881
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 882
                        self.castExpressionPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 883
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 884
                        self.fieldAccessPostFix()
                        pass

                    elif la_ == 8:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 885
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 886
                        self.typeAccessPostfix()
                        pass

                    elif la_ == 9:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 887
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 888
                        self.callExpressionPostFix()
                        pass

             
                self.state = 893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasicTypeCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_basicTypeCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicTypeCastExpr" ):
                listener.enterBasicTypeCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicTypeCastExpr" ):
                listener.exitBasicTypeCastExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicTypeCastExpr" ):
                return visitor.visitBasicTypeCastExpr(self)
            else:
                return visitor.visitChildren(self)




    def basicTypeCastExpr(self):

        localctx = RustParser.BasicTypeCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_basicTypeCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.typeExpr()
            self.state = 895
            self.typePath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeExpression" ):
                listener.enterUnsafeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeExpression" ):
                listener.exitUnsafeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeExpression" ):
                return visitor.visitUnsafeExpression(self)
            else:
                return visitor.visitChildren(self)




    def unsafeExpression(self):

        localctx = RustParser.UnsafeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_unsafeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(RustParser.T__13)
            self.state = 898
            self.match(RustParser.T__1)
            self.state = 899
            self.expression(0)
            self.state = 900
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedExpression" ):
                listener.enterQualifiedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedExpression" ):
                listener.exitQualifiedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedExpression" ):
                return visitor.visitQualifiedExpression(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedExpression(self):

        localctx = RustParser.QualifiedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_qualifiedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(RustParser.T__24)
            self.state = 903
            self.expression(0)
            self.state = 904
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAccessPostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAccessPostfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAccessPostfix" ):
                listener.enterTypeAccessPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAccessPostfix" ):
                listener.exitTypeAccessPostfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAccessPostfix" ):
                return visitor.visitTypeAccessPostfix(self)
            else:
                return visitor.visitChildren(self)




    def typeAccessPostfix(self):

        localctx = RustParser.TypeAccessPostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_typeAccessPostfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.typeExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structDefInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefInit" ):
                listener.enterStructDefInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefInit" ):
                listener.exitStructDefInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefInit" ):
                return visitor.visitStructDefInit(self)
            else:
                return visitor.visitChildren(self)




    def structDefInit(self):

        localctx = RustParser.StructDefInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_structDefInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.match(RustParser.Identifier)
            self.state = 909
            self.match(RustParser.T__5)
            self.state = 910
            self.match(RustParser.T__1)
            self.state = 911
            self.expression(0)
            self.state = 912
            self.match(RustParser.T__2)
            self.state = 913
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = RustParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(RustParser.Identifier)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 916
                self.match(RustParser.EXCL)


            self.state = 919
            self.match(RustParser.LBRACK)
            self.state = 920
            self.match(RustParser.Number)
            self.state = 921
            self.match(RustParser.T__3)
            self.state = 922
            self.expression(0)
            self.state = 923
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathExpression" ):
                listener.enterTypePathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathExpression" ):
                listener.exitTypePathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePathExpression" ):
                return visitor.visitTypePathExpression(self)
            else:
                return visitor.visitChildren(self)




    def typePathExpression(self):

        localctx = RustParser.TypePathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typePathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 925
                    self.match(RustParser.Identifier)
                    self.state = 926
                    self.match(RustParser.DOUBLE_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 929 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPrefix" ):
                return visitor.visitPatternPrefix(self)
            else:
                return visitor.visitChildren(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 931
                self.match(RustParser.T__27)


            self.state = 934
            self.pattern()
            self.state = 935
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 937
                    self.match(RustParser.T__29)


                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 940
                    self.match(RustParser.T__9)


                self.state = 943
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.match(RustParser.Identifier)
                self.state = 945
                self.match(RustParser.LPAREN)
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 946
                    self.match(RustParser.T__29)


                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 949
                    self.match(RustParser.T__9)


                self.state = 952
                self.match(RustParser.Identifier)
                self.state = 953
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpressionPostFix" ):
                return visitor.visitCastExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(RustParser.T__50)
            self.state = 957
            self.typeExpr()
            self.state = 962
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 958
                    self.match(RustParser.T__50)
                    self.state = 959
                    self.typeExpr() 
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOps" ):
                return visitor.visitCompoundOps(self)
            else:
                return visitor.visitChildren(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 547608330240) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeSymbol" ):
                listener.enterRangeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeSymbol" ):
                listener.exitRangeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeSymbol" ):
                return visitor.visitRangeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def rangeSymbol(self):

        localctx = RustParser.RangeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_rangeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(RustParser.T__51)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalOps" ):
                return visitor.visitConditionalOps(self)
            else:
                return visitor.visitChildren(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 2305843013240225793) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOps" ):
                return visitor.visitBooleanOps(self)
            else:
                return visitor.visitChildren(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1008806316531122176) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOps" ):
                return visitor.visitBinaryOps(self)
            else:
                return visitor.visitChildren(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504605798400) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFieldDec" ):
                return visitor.visitStructFieldDec(self)
            else:
                return visitor.visitChildren(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(RustParser.Identifier)
            self.state = 976
            self.match(RustParser.T__1)
            self.state = 977
            self.structLiteralField()
            self.state = 982
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 978
                    self.match(RustParser.COMMA)
                    self.state = 979
                    self.structLiteralField() 
                self.state = 984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 985
                self.match(RustParser.COMMA)


            self.state = 988
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableExpression" ):
                return visitor.visitMutableExpression(self)
            else:
                return visitor.visitChildren(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(RustParser.T__9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOpes" ):
                return visitor.visitUnaryOpes(self)
            else:
                return visitor.visitChildren(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            _la = self._input.LA(1)
            if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 8388611) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(RustParser.LPAREN)
            self.state = 995
            self.expression(0)
            self.state = 996
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.match(RustParser.T__19)
            self.state = 999
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(RustParser.T__1)
            self.state = 1005
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1002
                    self.statement() 
                self.state = 1007
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

            self.state = 1008
            self.expression(0)
            self.state = 1009
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(RustParser.T__16)
            self.state = 1012
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_primaryExpression)
        try:
            self.state = 1016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldAccessPostFix" ):
                return visitor.visitFieldAccessPostFix(self)
            else:
                return visitor.visitChildren(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_fieldAccessPostFix)
        try:
            self.state = 1028
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1018
                self.match(RustParser.LBRACK)
                self.state = 1019
                self.primaryExpression()
                self.state = 1020
                self.match(RustParser.RBRACK)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1024 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1022
                        self.match(RustParser.T__63)
                        self.state = 1023
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1026 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallArgs(self):
            return self.getTypedRuleContext(RustParser.FunctionCallArgsContext,0)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_callExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpressionPostFix" ):
                listener.enterCallExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpressionPostFix" ):
                listener.exitCallExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpressionPostFix" ):
                return visitor.visitCallExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def callExpressionPostFix(self):

        localctx = RustParser.CallExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_callExpressionPostFix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 1030
                self.match(RustParser.EXCL)


            self.state = 1033
            self.functionCallArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_functionCallArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArgs" ):
                listener.enterFunctionCallArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArgs" ):
                listener.exitFunctionCallArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArgs" ):
                return visitor.visitFunctionCallArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArgs(self):

        localctx = RustParser.FunctionCallArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_functionCallArgs)
        self._la = 0 # Token type
        try:
            self.state = 1047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1035
                self.match(RustParser.T__15)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.match(RustParser.LPAREN)
                self.state = 1037
                self.expression(0)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1038
                    self.match(RustParser.COMMA)
                    self.state = 1039
                    self.expression(0)
                    self.state = 1044
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1045
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_literal)
        try:
            self.state = 1060
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 85, 88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.arrayLiteral()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                self.match(RustParser.HexNumber)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1051
                self.match(RustParser.Number)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1052
                self.match(RustParser.SignedNumber)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1053
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1054
                self.match(RustParser.Binary)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1055
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [73, 74]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1056
                self.booleanLiteral()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1057
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [65, 66, 67, 68, 70, 71]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1058
                self.byteLiteral()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1059
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_byteLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteLiteral" ):
                listener.enterByteLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteLiteral" ):
                listener.exitByteLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteLiteral" ):
                return visitor.visitByteLiteral(self)
            else:
                return visitor.visitChildren(self)




    def byteLiteral(self):

        localctx = RustParser.ByteLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_byteLiteral)
        try:
            self.state = 1073
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.match(RustParser.T__64)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.match(RustParser.T__65)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1064
                self.match(RustParser.T__66)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1065
                self.match(RustParser.T__67)
                self.state = 1066
                self.match(RustParser.LPAREN)
                self.state = 1067
                self.match(RustParser.T__68)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1068
                self.match(RustParser.T__67)
                self.state = 1069
                self.match(RustParser.RPAREN)
                self.state = 1070
                self.match(RustParser.T__68)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1071
                self.match(RustParser.T__69)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1072
                self.match(RustParser.T__70)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            _la = self._input.LA(1)
            if not(_la==73 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1077
                    self.match(RustParser.Identifier)


                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1080
                    self.match(RustParser.EXCL)


                self.state = 1083
                self.match(RustParser.LBRACK)
                self.state = 1084
                self.expression(0)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1085
                    self.match(RustParser.COMMA)
                    self.state = 1086
                    self.expression(0)
                    self.state = 1091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1092
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1094
                    self.match(RustParser.Identifier)


                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1097
                    self.match(RustParser.EXCL)


                self.state = 1100
                self.match(RustParser.LBRACK)
                self.state = 1101
                self.expression(0)
                self.state = 1102
                self.match(RustParser.T__3)
                self.state = 1103
                self.expression(0)
                self.state = 1104
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 1106
                    self.match(RustParser.Identifier)


                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 1109
                    self.match(RustParser.EXCL)


                self.state = 1112
                self.match(RustParser.LBRACK)
                self.state = 1113
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.match(RustParser.T__71)
            self.state = 1120
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1117
                    self.matchWildcard() 
                self.state = 1122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

            self.state = 1123
            self.match(RustParser.T__71)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[61] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         




