# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,98,1140,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,1,0,5,0,188,8,0,10,0,12,0,191,9,0,1,1,1,1,1,1,1,1,1,
        1,1,1,3,1,199,8,1,1,2,1,2,1,2,1,2,3,2,205,8,2,1,2,1,2,3,2,209,8,
        2,5,2,211,8,2,10,2,12,2,214,9,2,1,2,1,2,5,2,218,8,2,10,2,12,2,221,
        9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,229,8,3,1,4,3,4,232,8,4,1,4,3,4,
        235,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,246,8,4,10,4,12,
        4,249,9,4,1,4,3,4,252,8,4,1,5,1,5,1,6,3,6,257,8,6,1,6,1,6,1,6,1,
        6,3,6,263,8,6,1,7,3,7,266,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,4,8,278,8,8,11,8,12,8,279,1,8,1,8,1,9,1,9,1,9,1,9,5,9,288,
        8,9,10,9,12,9,291,9,9,1,9,1,9,1,10,3,10,296,8,10,1,10,1,10,1,10,
        1,10,3,10,302,8,10,1,10,1,10,3,10,306,8,10,1,10,1,10,1,10,1,10,1,
        10,1,10,3,10,314,8,10,1,10,1,10,1,10,1,10,3,10,320,8,10,1,10,1,10,
        1,10,3,10,325,8,10,1,10,3,10,328,8,10,1,11,1,11,1,11,5,11,333,8,
        11,10,11,12,11,336,9,11,1,11,1,11,3,11,340,8,11,1,11,3,11,343,8,
        11,1,12,3,12,346,8,12,1,12,1,12,1,12,3,12,351,8,12,1,13,1,13,1,14,
        1,14,1,15,1,15,3,15,359,8,15,1,16,4,16,362,8,16,11,16,12,16,363,
        1,17,1,17,3,17,368,8,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,3,18,383,8,18,1,19,1,19,1,19,5,19,388,8,
        19,10,19,12,19,391,9,19,1,20,1,20,1,20,3,20,396,8,20,1,21,1,21,1,
        22,3,22,401,8,22,1,22,1,22,1,22,1,22,5,22,407,8,22,10,22,12,22,410,
        9,22,1,22,1,22,1,23,3,23,415,8,23,1,23,1,23,1,23,1,23,3,23,421,8,
        23,1,24,1,24,1,24,5,24,426,8,24,10,24,12,24,429,9,24,1,24,1,24,1,
        25,1,25,1,25,3,25,436,8,25,1,25,3,25,439,8,25,1,26,3,26,442,8,26,
        1,26,3,26,445,8,26,1,26,3,26,448,8,26,1,26,1,26,1,26,1,26,1,26,3,
        26,455,8,26,1,26,3,26,458,8,26,1,26,3,26,461,8,26,1,26,3,26,464,
        8,26,1,26,1,26,1,27,1,27,1,27,5,27,471,8,27,10,27,12,27,474,9,27,
        1,27,3,27,477,8,27,1,28,3,28,480,8,28,1,28,3,28,483,8,28,1,28,1,
        28,1,28,3,28,488,8,28,1,29,1,29,3,29,492,8,29,1,30,1,30,1,30,3,30,
        497,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,
        509,8,31,1,31,1,31,1,31,1,31,5,31,515,8,31,10,31,12,31,518,9,31,
        1,31,1,31,3,31,522,8,31,1,31,1,31,1,31,1,31,1,31,5,31,529,8,31,10,
        31,12,31,532,9,31,1,31,1,31,3,31,536,8,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,550,8,31,1,32,1,32,1,
        32,1,32,1,32,3,32,557,8,32,1,33,1,33,1,33,3,33,562,8,33,1,33,1,33,
        1,33,5,33,567,8,33,10,33,12,33,570,9,33,3,33,572,8,33,1,34,1,34,
        1,34,1,34,1,34,1,34,1,35,3,35,581,8,35,1,35,1,35,5,35,585,8,35,10,
        35,12,35,588,9,35,1,35,3,35,591,8,35,1,35,1,35,1,36,1,36,1,36,5,
        36,598,8,36,10,36,12,36,601,9,36,1,36,3,36,604,8,36,1,36,1,36,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,629,8,37,1,38,3,38,632,
        8,38,1,38,1,38,3,38,636,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,655,8,39,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,3,40,671,8,40,5,40,673,8,40,10,40,12,40,676,9,40,1,40,1,40,
        1,40,1,40,1,40,3,40,683,8,40,5,40,685,8,40,10,40,12,40,688,9,40,
        1,40,1,40,3,40,692,8,40,1,41,3,41,695,8,41,1,41,3,41,698,8,41,1,
        41,1,41,1,41,3,41,703,8,41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,
        44,1,44,1,44,1,44,4,44,716,8,44,11,44,12,44,717,1,44,1,44,1,45,1,
        45,1,45,5,45,725,8,45,10,45,12,45,728,9,45,1,45,1,45,1,45,1,45,3,
        45,734,8,45,3,45,736,8,45,1,46,1,46,1,46,1,46,3,46,742,8,46,1,47,
        1,47,1,47,1,47,1,48,1,48,1,48,3,48,751,8,48,1,49,3,49,754,8,49,1,
        49,1,49,3,49,758,8,49,1,49,1,49,1,49,1,49,3,49,764,8,49,1,49,1,49,
        1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,5,50,776,8,50,10,50,12,50,
        779,9,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,
        1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,5,53,803,
        8,53,10,53,12,53,806,9,53,1,53,1,53,3,53,810,8,53,1,54,1,54,1,54,
        1,55,1,55,3,55,817,8,55,1,55,1,55,3,55,821,8,55,1,56,1,56,1,56,1,
        57,1,57,3,57,828,8,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,
        58,1,59,1,59,3,59,841,8,59,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,870,8,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,900,
        8,61,10,61,12,61,903,9,61,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,
        1,64,1,64,1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,67,1,67,3,67,928,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,
        4,68,938,8,68,11,68,12,68,939,1,69,3,69,943,8,69,1,69,1,69,1,69,
        1,70,3,70,949,8,70,1,70,3,70,952,8,70,1,70,1,70,1,70,1,70,3,70,958,
        8,70,1,70,3,70,961,8,70,1,70,1,70,3,70,965,8,70,1,71,1,71,1,71,1,
        71,5,71,971,8,71,10,71,12,71,974,9,71,1,72,1,72,1,73,1,73,1,74,1,
        74,1,75,1,75,1,76,1,76,1,77,1,77,1,77,1,77,1,77,5,77,991,8,77,10,
        77,12,77,994,9,77,1,77,3,77,997,8,77,1,77,1,77,1,78,1,78,1,79,1,
        79,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,5,82,1014,8,82,10,
        82,12,82,1017,9,82,1,82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,3,84,
        1027,8,84,1,85,1,85,1,85,1,85,1,85,1,85,4,85,1035,8,85,11,85,12,
        85,1036,3,85,1039,8,85,1,86,1,86,3,86,1043,8,86,1,86,3,86,1046,8,
        86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,5,87,1055,8,87,10,87,12,87,
        1058,9,87,1,87,1,87,3,87,1062,8,87,1,88,1,88,1,88,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,3,88,1075,8,88,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,3,89,1088,8,89,1,90,1,90,1,91,3,91,
        1093,8,91,1,91,3,91,1096,8,91,1,91,1,91,1,91,1,91,5,91,1102,8,91,
        10,91,12,91,1105,9,91,1,91,1,91,1,91,3,91,1110,8,91,1,91,3,91,1113,
        8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1122,8,91,1,91,3,91,
        1125,8,91,1,91,1,91,3,91,1129,8,91,1,92,1,92,5,92,1133,8,92,10,92,
        12,92,1136,9,92,1,92,1,92,1,92,1,1134,1,122,93,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,0,10,1,0,6,8,2,0,79,79,94,
        94,1,0,78,80,2,0,6,6,13,13,1,0,34,41,3,0,25,25,56,59,87,87,3,0,19,
        19,27,27,60,61,2,0,20,20,62,65,2,0,64,65,86,86,1,0,74,75,1253,0,
        189,1,0,0,0,2,198,1,0,0,0,4,200,1,0,0,0,6,228,1,0,0,0,8,231,1,0,
        0,0,10,253,1,0,0,0,12,256,1,0,0,0,14,265,1,0,0,0,16,273,1,0,0,0,
        18,283,1,0,0,0,20,327,1,0,0,0,22,342,1,0,0,0,24,345,1,0,0,0,26,352,
        1,0,0,0,28,354,1,0,0,0,30,356,1,0,0,0,32,361,1,0,0,0,34,365,1,0,
        0,0,36,382,1,0,0,0,38,384,1,0,0,0,40,392,1,0,0,0,42,397,1,0,0,0,
        44,400,1,0,0,0,46,414,1,0,0,0,48,422,1,0,0,0,50,432,1,0,0,0,52,441,
        1,0,0,0,54,467,1,0,0,0,56,479,1,0,0,0,58,491,1,0,0,0,60,493,1,0,
        0,0,62,549,1,0,0,0,64,551,1,0,0,0,66,571,1,0,0,0,68,573,1,0,0,0,
        70,580,1,0,0,0,72,594,1,0,0,0,74,628,1,0,0,0,76,631,1,0,0,0,78,654,
        1,0,0,0,80,691,1,0,0,0,82,694,1,0,0,0,84,704,1,0,0,0,86,706,1,0,
        0,0,88,711,1,0,0,0,90,721,1,0,0,0,92,741,1,0,0,0,94,743,1,0,0,0,
        96,750,1,0,0,0,98,753,1,0,0,0,100,769,1,0,0,0,102,784,1,0,0,0,104,
        789,1,0,0,0,106,795,1,0,0,0,108,811,1,0,0,0,110,820,1,0,0,0,112,
        822,1,0,0,0,114,825,1,0,0,0,116,833,1,0,0,0,118,838,1,0,0,0,120,
        842,1,0,0,0,122,869,1,0,0,0,124,904,1,0,0,0,126,907,1,0,0,0,128,
        912,1,0,0,0,130,916,1,0,0,0,132,918,1,0,0,0,134,925,1,0,0,0,136,
        937,1,0,0,0,138,942,1,0,0,0,140,964,1,0,0,0,142,966,1,0,0,0,144,
        975,1,0,0,0,146,977,1,0,0,0,148,979,1,0,0,0,150,981,1,0,0,0,152,
        983,1,0,0,0,154,985,1,0,0,0,156,1000,1,0,0,0,158,1002,1,0,0,0,160,
        1004,1,0,0,0,162,1008,1,0,0,0,164,1011,1,0,0,0,166,1021,1,0,0,0,
        168,1026,1,0,0,0,170,1038,1,0,0,0,172,1042,1,0,0,0,174,1061,1,0,
        0,0,176,1074,1,0,0,0,178,1087,1,0,0,0,180,1089,1,0,0,0,182,1128,
        1,0,0,0,184,1130,1,0,0,0,186,188,3,2,1,0,187,186,1,0,0,0,188,191,
        1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,1,1,0,0,0,191,189,1,
        0,0,0,192,199,3,6,3,0,193,199,3,98,49,0,194,199,3,32,16,0,195,199,
        3,18,9,0,196,199,3,4,2,0,197,199,3,14,7,0,198,192,1,0,0,0,198,193,
        1,0,0,0,198,194,1,0,0,0,198,195,1,0,0,0,198,196,1,0,0,0,198,197,
        1,0,0,0,199,3,1,0,0,0,200,201,5,1,0,0,201,219,3,66,33,0,202,212,
        5,2,0,0,203,205,3,66,33,0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,
        1,0,0,0,206,208,5,79,0,0,207,209,5,91,0,0,208,207,1,0,0,0,208,209,
        1,0,0,0,209,211,1,0,0,0,210,204,1,0,0,0,211,214,1,0,0,0,212,210,
        1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,
        5,3,0,0,216,218,5,91,0,0,217,202,1,0,0,0,218,221,1,0,0,0,219,217,
        1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,223,
        5,4,0,0,223,5,1,0,0,0,224,229,3,52,26,0,225,229,3,44,22,0,226,229,
        3,16,8,0,227,229,3,8,4,0,228,224,1,0,0,0,228,225,1,0,0,0,228,226,
        1,0,0,0,228,227,1,0,0,0,229,7,1,0,0,0,230,232,3,26,13,0,231,230,
        1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,235,3,10,5,0,234,233,
        1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,251,5,79,0,0,237,238,
        5,95,0,0,238,239,3,58,29,0,239,240,5,5,0,0,240,241,3,122,61,0,241,
        242,5,4,0,0,242,252,1,0,0,0,243,247,5,2,0,0,244,246,3,12,6,0,245,
        244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,
        250,1,0,0,0,249,247,1,0,0,0,250,252,5,3,0,0,251,237,1,0,0,0,251,
        243,1,0,0,0,252,9,1,0,0,0,253,254,7,0,0,0,254,11,1,0,0,0,255,257,
        3,26,13,0,256,255,1,0,0,0,256,257,1,0,0,0,257,258,1,0,0,0,258,259,
        5,79,0,0,259,260,5,95,0,0,260,262,3,58,29,0,261,263,5,91,0,0,262,
        261,1,0,0,0,262,263,1,0,0,0,263,13,1,0,0,0,264,266,3,26,13,0,265,
        264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,9,0,0,268,
        269,5,79,0,0,269,270,5,5,0,0,270,271,3,58,29,0,271,272,5,4,0,0,272,
        15,1,0,0,0,273,274,5,10,0,0,274,275,5,79,0,0,275,277,5,2,0,0,276,
        278,3,52,26,0,277,276,1,0,0,0,278,279,1,0,0,0,279,277,1,0,0,0,279,
        280,1,0,0,0,280,281,1,0,0,0,281,282,5,3,0,0,282,17,1,0,0,0,283,284,
        5,11,0,0,284,285,5,78,0,0,285,289,5,2,0,0,286,288,3,20,10,0,287,
        286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,
        292,1,0,0,0,291,289,1,0,0,0,292,293,5,3,0,0,293,19,1,0,0,0,294,296,
        3,26,13,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,
        5,9,0,0,298,299,5,79,0,0,299,328,5,4,0,0,300,302,3,26,13,0,301,300,
        1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,305,5,12,0,0,304,306,
        5,13,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,
        5,79,0,0,308,309,5,95,0,0,309,310,3,58,29,0,310,311,5,4,0,0,311,
        328,1,0,0,0,312,314,3,26,13,0,313,312,1,0,0,0,313,314,1,0,0,0,314,
        315,1,0,0,0,315,316,5,14,0,0,316,317,5,79,0,0,317,319,5,92,0,0,318,
        320,3,22,11,0,319,318,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,
        324,5,93,0,0,322,323,5,15,0,0,323,325,3,58,29,0,324,322,1,0,0,0,
        324,325,1,0,0,0,325,326,1,0,0,0,326,328,5,4,0,0,327,295,1,0,0,0,
        327,301,1,0,0,0,327,313,1,0,0,0,328,21,1,0,0,0,329,334,3,24,12,0,
        330,331,5,91,0,0,331,333,3,24,12,0,332,330,1,0,0,0,333,336,1,0,0,
        0,334,332,1,0,0,0,334,335,1,0,0,0,335,339,1,0,0,0,336,334,1,0,0,
        0,337,338,5,91,0,0,338,340,5,96,0,0,339,337,1,0,0,0,339,340,1,0,
        0,0,340,343,1,0,0,0,341,343,5,96,0,0,342,329,1,0,0,0,342,341,1,0,
        0,0,343,23,1,0,0,0,344,346,7,1,0,0,345,344,1,0,0,0,345,346,1,0,0,
        0,346,347,1,0,0,0,347,350,5,95,0,0,348,351,3,58,29,0,349,351,5,96,
        0,0,350,348,1,0,0,0,350,349,1,0,0,0,351,25,1,0,0,0,352,353,5,16,
        0,0,353,27,1,0,0,0,354,355,5,8,0,0,355,29,1,0,0,0,356,358,5,11,0,
        0,357,359,5,78,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,31,1,0,0,
        0,360,362,3,34,17,0,361,360,1,0,0,0,362,363,1,0,0,0,363,361,1,0,
        0,0,363,364,1,0,0,0,364,33,1,0,0,0,365,367,5,88,0,0,366,368,5,86,
        0,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,5,89,
        0,0,370,371,3,36,18,0,371,372,5,90,0,0,372,35,1,0,0,0,373,383,5,
        79,0,0,374,375,5,79,0,0,375,376,5,5,0,0,376,383,3,42,21,0,377,378,
        5,79,0,0,378,379,5,92,0,0,379,380,3,38,19,0,380,381,5,93,0,0,381,
        383,1,0,0,0,382,373,1,0,0,0,382,374,1,0,0,0,382,377,1,0,0,0,383,
        37,1,0,0,0,384,389,3,40,20,0,385,386,5,91,0,0,386,388,3,40,20,0,
        387,385,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,
        390,39,1,0,0,0,391,389,1,0,0,0,392,395,5,79,0,0,393,394,5,5,0,0,
        394,396,3,42,21,0,395,393,1,0,0,0,395,396,1,0,0,0,396,41,1,0,0,0,
        397,398,7,2,0,0,398,43,1,0,0,0,399,401,3,26,13,0,400,399,1,0,0,0,
        400,401,1,0,0,0,401,402,1,0,0,0,402,403,5,17,0,0,403,404,5,79,0,
        0,404,408,5,2,0,0,405,407,3,46,23,0,406,405,1,0,0,0,407,410,1,0,
        0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,408,1,0,
        0,0,411,412,5,3,0,0,412,45,1,0,0,0,413,415,3,26,13,0,414,413,1,0,
        0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,5,79,0,0,417,418,5,95,
        0,0,418,420,3,58,29,0,419,421,5,91,0,0,420,419,1,0,0,0,420,421,1,
        0,0,0,421,47,1,0,0,0,422,423,5,79,0,0,423,427,5,2,0,0,424,426,3,
        50,25,0,425,424,1,0,0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,
        1,0,0,0,428,430,1,0,0,0,429,427,1,0,0,0,430,431,5,3,0,0,431,49,1,
        0,0,0,432,435,5,79,0,0,433,434,5,95,0,0,434,436,3,122,61,0,435,433,
        1,0,0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,439,5,91,0,0,438,437,
        1,0,0,0,438,439,1,0,0,0,439,51,1,0,0,0,440,442,3,26,13,0,441,440,
        1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,445,3,28,14,0,444,443,
        1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,448,3,30,15,0,447,446,
        1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,450,5,14,0,0,450,457,
        5,79,0,0,451,458,5,18,0,0,452,454,5,92,0,0,453,455,3,54,27,0,454,
        453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,458,5,93,0,0,457,
        451,1,0,0,0,457,452,1,0,0,0,458,460,1,0,0,0,459,461,5,15,0,0,460,
        459,1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,464,3,58,29,0,463,
        462,1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,466,3,70,35,0,466,
        53,1,0,0,0,467,472,3,56,28,0,468,469,5,91,0,0,469,471,3,56,28,0,
        470,468,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,
        473,476,1,0,0,0,474,472,1,0,0,0,475,477,5,91,0,0,476,475,1,0,0,0,
        476,477,1,0,0,0,477,55,1,0,0,0,478,480,5,19,0,0,479,478,1,0,0,0,
        479,480,1,0,0,0,480,482,1,0,0,0,481,483,5,13,0,0,482,481,1,0,0,0,
        482,483,1,0,0,0,483,484,1,0,0,0,484,487,5,79,0,0,485,486,5,95,0,
        0,486,488,3,58,29,0,487,485,1,0,0,0,487,488,1,0,0,0,488,57,1,0,0,
        0,489,492,3,62,31,0,490,492,3,60,30,0,491,489,1,0,0,0,491,490,1,
        0,0,0,492,59,1,0,0,0,493,494,5,20,0,0,494,496,7,3,0,0,495,497,3,
        58,29,0,496,495,1,0,0,0,496,497,1,0,0,0,497,61,1,0,0,0,498,550,5,
        21,0,0,499,550,3,64,32,0,500,550,5,22,0,0,501,550,5,23,0,0,502,550,
        5,24,0,0,503,550,3,68,34,0,504,505,3,66,33,0,505,506,3,62,31,0,506,
        550,1,0,0,0,507,509,5,85,0,0,508,507,1,0,0,0,508,509,1,0,0,0,509,
        510,1,0,0,0,510,511,5,25,0,0,511,516,3,58,29,0,512,513,5,91,0,0,
        513,515,3,58,29,0,514,512,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,
        0,516,517,1,0,0,0,517,519,1,0,0,0,518,516,1,0,0,0,519,521,5,87,0,
        0,520,522,5,18,0,0,521,520,1,0,0,0,521,522,1,0,0,0,522,550,1,0,0,
        0,523,535,5,79,0,0,524,525,5,25,0,0,525,530,3,58,29,0,526,527,5,
        91,0,0,527,529,3,58,29,0,528,526,1,0,0,0,529,532,1,0,0,0,530,528,
        1,0,0,0,530,531,1,0,0,0,531,533,1,0,0,0,532,530,1,0,0,0,533,534,
        5,87,0,0,534,536,1,0,0,0,535,524,1,0,0,0,535,536,1,0,0,0,536,550,
        1,0,0,0,537,538,5,79,0,0,538,539,5,25,0,0,539,540,3,58,29,0,540,
        541,5,87,0,0,541,550,1,0,0,0,542,543,5,19,0,0,543,550,3,58,29,0,
        544,545,5,89,0,0,545,546,3,58,29,0,546,547,5,90,0,0,547,550,1,0,
        0,0,548,550,5,79,0,0,549,498,1,0,0,0,549,499,1,0,0,0,549,500,1,0,
        0,0,549,501,1,0,0,0,549,502,1,0,0,0,549,503,1,0,0,0,549,504,1,0,
        0,0,549,508,1,0,0,0,549,523,1,0,0,0,549,537,1,0,0,0,549,542,1,0,
        0,0,549,544,1,0,0,0,549,548,1,0,0,0,550,63,1,0,0,0,551,552,5,26,
        0,0,552,556,3,58,29,0,553,557,5,27,0,0,554,555,5,87,0,0,555,557,
        5,87,0,0,556,553,1,0,0,0,556,554,1,0,0,0,557,65,1,0,0,0,558,559,
        5,79,0,0,559,572,5,85,0,0,560,562,5,85,0,0,561,560,1,0,0,0,561,562,
        1,0,0,0,562,563,1,0,0,0,563,568,5,79,0,0,564,565,5,85,0,0,565,567,
        5,79,0,0,566,564,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,568,569,
        1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,571,558,1,0,0,0,571,561,
        1,0,0,0,572,67,1,0,0,0,573,574,5,89,0,0,574,575,3,62,31,0,575,576,
        5,4,0,0,576,577,5,80,0,0,577,578,5,90,0,0,578,69,1,0,0,0,579,581,
        3,28,14,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,1,0,0,0,582,586,
        5,2,0,0,583,585,3,74,37,0,584,583,1,0,0,0,585,588,1,0,0,0,586,584,
        1,0,0,0,586,587,1,0,0,0,587,590,1,0,0,0,588,586,1,0,0,0,589,591,
        3,110,55,0,590,589,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,593,
        5,3,0,0,593,71,1,0,0,0,594,595,3,28,14,0,595,599,5,2,0,0,596,598,
        3,74,37,0,597,596,1,0,0,0,598,601,1,0,0,0,599,597,1,0,0,0,599,600,
        1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,602,604,3,110,55,0,603,602,
        1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,606,5,3,0,0,606,73,1,
        0,0,0,607,629,3,72,36,0,608,629,3,80,40,0,609,629,3,76,38,0,610,
        629,3,48,24,0,611,629,3,44,22,0,612,629,3,98,49,0,613,629,3,116,
        58,0,614,629,3,102,51,0,615,629,3,86,43,0,616,629,3,104,52,0,617,
        629,3,106,53,0,618,629,3,78,39,0,619,629,3,108,54,0,620,629,3,94,
        47,0,621,629,3,110,55,0,622,629,3,112,56,0,623,624,5,28,0,0,624,
        629,5,4,0,0,625,626,5,29,0,0,626,629,5,4,0,0,627,629,3,88,44,0,628,
        607,1,0,0,0,628,608,1,0,0,0,628,609,1,0,0,0,628,610,1,0,0,0,628,
        611,1,0,0,0,628,612,1,0,0,0,628,613,1,0,0,0,628,614,1,0,0,0,628,
        615,1,0,0,0,628,616,1,0,0,0,628,617,1,0,0,0,628,618,1,0,0,0,628,
        619,1,0,0,0,628,620,1,0,0,0,628,621,1,0,0,0,628,622,1,0,0,0,628,
        623,1,0,0,0,628,625,1,0,0,0,628,627,1,0,0,0,629,75,1,0,0,0,630,632,
        5,30,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,635,1,0,0,0,633,636,
        3,116,58,0,634,636,3,122,61,0,635,633,1,0,0,0,635,634,1,0,0,0,636,
        637,1,0,0,0,637,638,5,5,0,0,638,639,3,122,61,0,639,640,5,31,0,0,
        640,641,3,70,35,0,641,642,5,4,0,0,642,77,1,0,0,0,643,644,3,122,61,
        0,644,645,5,32,0,0,645,646,3,122,61,0,646,647,1,0,0,0,647,648,3,
        172,86,0,648,649,5,4,0,0,649,655,1,0,0,0,650,651,3,122,61,0,651,
        652,3,172,86,0,652,653,5,4,0,0,653,655,1,0,0,0,654,643,1,0,0,0,654,
        650,1,0,0,0,655,79,1,0,0,0,656,657,5,30,0,0,657,658,3,82,41,0,658,
        659,5,5,0,0,659,660,3,122,61,0,660,661,5,4,0,0,661,692,1,0,0,0,662,
        663,5,30,0,0,663,664,3,82,41,0,664,665,3,100,50,0,665,692,1,0,0,
        0,666,667,5,30,0,0,667,674,5,92,0,0,668,670,3,82,41,0,669,671,5,
        91,0,0,670,669,1,0,0,0,670,671,1,0,0,0,671,673,1,0,0,0,672,668,1,
        0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,677,1,
        0,0,0,676,674,1,0,0,0,677,678,5,93,0,0,678,679,5,5,0,0,679,686,5,
        92,0,0,680,682,3,122,61,0,681,683,5,91,0,0,682,681,1,0,0,0,682,683,
        1,0,0,0,683,685,1,0,0,0,684,680,1,0,0,0,685,688,1,0,0,0,686,684,
        1,0,0,0,686,687,1,0,0,0,687,689,1,0,0,0,688,686,1,0,0,0,689,690,
        5,93,0,0,690,692,5,4,0,0,691,656,1,0,0,0,691,662,1,0,0,0,691,666,
        1,0,0,0,692,81,1,0,0,0,693,695,5,33,0,0,694,693,1,0,0,0,694,695,
        1,0,0,0,695,697,1,0,0,0,696,698,5,13,0,0,697,696,1,0,0,0,697,698,
        1,0,0,0,698,699,1,0,0,0,699,702,5,79,0,0,700,701,5,95,0,0,701,703,
        3,58,29,0,702,700,1,0,0,0,702,703,1,0,0,0,703,83,1,0,0,0,704,705,
        7,4,0,0,705,85,1,0,0,0,706,707,3,122,61,0,707,708,3,84,42,0,708,
        709,3,122,61,0,709,710,5,4,0,0,710,87,1,0,0,0,711,712,5,42,0,0,712,
        713,3,122,61,0,713,715,5,2,0,0,714,716,3,90,45,0,715,714,1,0,0,0,
        716,717,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,
        719,720,5,3,0,0,720,89,1,0,0,0,721,726,3,92,46,0,722,723,5,43,0,
        0,723,725,3,92,46,0,724,722,1,0,0,0,725,728,1,0,0,0,726,724,1,0,
        0,0,726,727,1,0,0,0,727,729,1,0,0,0,728,726,1,0,0,0,729,735,5,44,
        0,0,730,736,3,70,35,0,731,733,5,45,0,0,732,734,3,122,61,0,733,732,
        1,0,0,0,733,734,1,0,0,0,734,736,1,0,0,0,735,730,1,0,0,0,735,731,
        1,0,0,0,736,91,1,0,0,0,737,742,3,178,89,0,738,742,5,80,0,0,739,742,
        5,94,0,0,740,742,5,79,0,0,741,737,1,0,0,0,741,738,1,0,0,0,741,739,
        1,0,0,0,741,740,1,0,0,0,742,93,1,0,0,0,743,744,5,46,0,0,744,745,
        3,122,61,0,745,746,3,70,35,0,746,95,1,0,0,0,747,751,3,100,50,0,748,
        751,3,70,35,0,749,751,3,122,61,0,750,747,1,0,0,0,750,748,1,0,0,0,
        750,749,1,0,0,0,751,97,1,0,0,0,752,754,3,26,13,0,753,752,1,0,0,0,
        753,754,1,0,0,0,754,755,1,0,0,0,755,757,5,12,0,0,756,758,5,13,0,
        0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,760,5,79,0,
        0,760,763,5,95,0,0,761,764,3,58,29,0,762,764,5,79,0,0,763,761,1,
        0,0,0,763,762,1,0,0,0,764,765,1,0,0,0,765,766,5,5,0,0,766,767,3,
        96,48,0,767,768,5,4,0,0,768,99,1,0,0,0,769,777,5,2,0,0,770,771,5,
        79,0,0,771,772,5,95,0,0,772,773,3,122,61,0,773,774,5,91,0,0,774,
        776,1,0,0,0,775,770,1,0,0,0,776,779,1,0,0,0,777,775,1,0,0,0,777,
        778,1,0,0,0,778,780,1,0,0,0,779,777,1,0,0,0,780,781,5,3,0,0,781,
        782,5,4,0,0,782,783,3,122,61,0,783,101,1,0,0,0,784,785,3,122,61,
        0,785,786,5,5,0,0,786,787,3,122,61,0,787,788,5,4,0,0,788,103,1,0,
        0,0,789,790,5,47,0,0,790,791,5,79,0,0,791,792,5,48,0,0,792,793,3,
        122,61,0,793,794,3,70,35,0,794,105,1,0,0,0,795,796,5,49,0,0,796,
        797,3,122,61,0,797,804,3,70,35,0,798,799,5,50,0,0,799,800,3,122,
        61,0,800,801,3,70,35,0,801,803,1,0,0,0,802,798,1,0,0,0,803,806,1,
        0,0,0,804,802,1,0,0,0,804,805,1,0,0,0,805,809,1,0,0,0,806,804,1,
        0,0,0,807,808,5,31,0,0,808,810,3,70,35,0,809,807,1,0,0,0,809,810,
        1,0,0,0,810,107,1,0,0,0,811,812,3,168,84,0,812,813,5,4,0,0,813,109,
        1,0,0,0,814,816,5,45,0,0,815,817,3,122,61,0,816,815,1,0,0,0,816,
        817,1,0,0,0,817,818,1,0,0,0,818,821,5,4,0,0,819,821,5,79,0,0,820,
        814,1,0,0,0,820,819,1,0,0,0,821,111,1,0,0,0,822,823,5,51,0,0,823,
        824,3,70,35,0,824,113,1,0,0,0,825,827,5,52,0,0,826,828,3,58,29,0,
        827,826,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,5,92,0,0,
        830,831,3,122,61,0,831,832,5,93,0,0,832,115,1,0,0,0,833,834,5,53,
        0,0,834,835,5,92,0,0,835,836,3,122,61,0,836,837,5,93,0,0,837,117,
        1,0,0,0,838,840,5,52,0,0,839,841,3,58,29,0,840,839,1,0,0,0,840,841,
        1,0,0,0,841,119,1,0,0,0,842,843,5,53,0,0,843,121,1,0,0,0,844,845,
        6,61,-1,0,845,846,3,156,78,0,846,847,3,122,61,25,847,870,1,0,0,0,
        848,870,3,168,84,0,849,870,3,48,24,0,850,851,3,136,68,0,851,852,
        3,122,61,20,852,870,1,0,0,0,853,870,3,160,80,0,854,870,3,154,77,
        0,855,870,3,132,66,0,856,857,3,158,79,0,857,858,3,122,61,16,858,
        870,1,0,0,0,859,870,3,166,83,0,860,870,3,126,63,0,861,870,3,124,
        62,0,862,870,3,162,81,0,863,870,3,164,82,0,864,870,3,128,64,0,865,
        866,3,138,69,0,866,867,3,122,61,3,867,870,1,0,0,0,868,870,3,134,
        67,0,869,844,1,0,0,0,869,848,1,0,0,0,869,849,1,0,0,0,869,850,1,0,
        0,0,869,853,1,0,0,0,869,854,1,0,0,0,869,855,1,0,0,0,869,856,1,0,
        0,0,869,859,1,0,0,0,869,860,1,0,0,0,869,861,1,0,0,0,869,862,1,0,
        0,0,869,863,1,0,0,0,869,864,1,0,0,0,869,865,1,0,0,0,869,868,1,0,
        0,0,870,901,1,0,0,0,871,872,10,23,0,0,872,873,3,152,76,0,873,874,
        3,122,61,24,874,900,1,0,0,0,875,876,10,10,0,0,876,877,3,146,73,0,
        877,878,3,122,61,11,878,900,1,0,0,0,879,880,10,9,0,0,880,881,3,150,
        75,0,881,882,3,122,61,10,882,900,1,0,0,0,883,884,10,8,0,0,884,885,
        3,148,74,0,885,886,3,122,61,9,886,900,1,0,0,0,887,888,10,6,0,0,888,
        889,3,144,72,0,889,890,3,122,61,7,890,900,1,0,0,0,891,892,10,21,
        0,0,892,900,3,142,71,0,893,894,10,13,0,0,894,900,3,172,86,0,895,
        896,10,12,0,0,896,900,3,130,65,0,897,898,10,1,0,0,898,900,3,170,
        85,0,899,871,1,0,0,0,899,875,1,0,0,0,899,879,1,0,0,0,899,883,1,0,
        0,0,899,887,1,0,0,0,899,891,1,0,0,0,899,893,1,0,0,0,899,895,1,0,
        0,0,899,897,1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,0,901,902,1,0,
        0,0,902,123,1,0,0,0,903,901,1,0,0,0,904,905,3,58,29,0,905,906,3,
        66,33,0,906,125,1,0,0,0,907,908,5,8,0,0,908,909,5,2,0,0,909,910,
        3,122,61,0,910,911,5,3,0,0,911,127,1,0,0,0,912,913,5,25,0,0,913,
        914,3,122,61,0,914,915,5,87,0,0,915,129,1,0,0,0,916,917,3,58,29,
        0,917,131,1,0,0,0,918,919,5,79,0,0,919,920,5,5,0,0,920,921,5,2,0,
        0,921,922,3,122,61,0,922,923,5,3,0,0,923,924,5,4,0,0,924,133,1,0,
        0,0,925,927,5,79,0,0,926,928,5,86,0,0,927,926,1,0,0,0,927,928,1,
        0,0,0,928,929,1,0,0,0,929,930,5,89,0,0,930,931,5,80,0,0,931,932,
        5,4,0,0,932,933,3,122,61,0,933,934,5,90,0,0,934,135,1,0,0,0,935,
        936,5,79,0,0,936,938,5,85,0,0,937,935,1,0,0,0,938,939,1,0,0,0,939,
        937,1,0,0,0,939,940,1,0,0,0,940,137,1,0,0,0,941,943,5,30,0,0,942,
        941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,945,3,140,70,0,945,
        946,5,5,0,0,946,139,1,0,0,0,947,949,5,33,0,0,948,947,1,0,0,0,948,
        949,1,0,0,0,949,951,1,0,0,0,950,952,5,13,0,0,951,950,1,0,0,0,951,
        952,1,0,0,0,952,953,1,0,0,0,953,965,5,79,0,0,954,955,5,79,0,0,955,
        957,5,92,0,0,956,958,5,33,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,
        960,1,0,0,0,959,961,5,13,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,
        962,1,0,0,0,962,963,5,79,0,0,963,965,5,93,0,0,964,948,1,0,0,0,964,
        954,1,0,0,0,965,141,1,0,0,0,966,967,5,54,0,0,967,972,3,58,29,0,968,
        969,5,54,0,0,969,971,3,58,29,0,970,968,1,0,0,0,971,974,1,0,0,0,972,
        970,1,0,0,0,972,973,1,0,0,0,973,143,1,0,0,0,974,972,1,0,0,0,975,
        976,7,4,0,0,976,145,1,0,0,0,977,978,5,55,0,0,978,147,1,0,0,0,979,
        980,7,5,0,0,980,149,1,0,0,0,981,982,7,6,0,0,982,151,1,0,0,0,983,
        984,7,7,0,0,984,153,1,0,0,0,985,986,5,79,0,0,986,987,5,2,0,0,987,
        992,3,50,25,0,988,989,5,91,0,0,989,991,3,50,25,0,990,988,1,0,0,0,
        991,994,1,0,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,996,1,0,0,0,
        994,992,1,0,0,0,995,997,5,91,0,0,996,995,1,0,0,0,996,997,1,0,0,0,
        997,998,1,0,0,0,998,999,5,3,0,0,999,155,1,0,0,0,1000,1001,5,13,0,
        0,1001,157,1,0,0,0,1002,1003,7,8,0,0,1003,159,1,0,0,0,1004,1005,
        5,92,0,0,1005,1006,3,122,61,0,1006,1007,5,93,0,0,1007,161,1,0,0,
        0,1008,1009,5,20,0,0,1009,1010,3,122,61,0,1010,163,1,0,0,0,1011,
        1015,5,2,0,0,1012,1014,3,74,37,0,1013,1012,1,0,0,0,1014,1017,1,0,
        0,0,1015,1013,1,0,0,0,1015,1016,1,0,0,0,1016,1018,1,0,0,0,1017,1015,
        1,0,0,0,1018,1019,3,122,61,0,1019,1020,5,3,0,0,1020,165,1,0,0,0,
        1021,1022,5,19,0,0,1022,1023,3,122,61,0,1023,167,1,0,0,0,1024,1027,
        3,176,88,0,1025,1027,5,79,0,0,1026,1024,1,0,0,0,1026,1025,1,0,0,
        0,1027,169,1,0,0,0,1028,1029,5,89,0,0,1029,1030,3,168,84,0,1030,
        1031,5,90,0,0,1031,1039,1,0,0,0,1032,1033,5,32,0,0,1033,1035,3,168,
        84,0,1034,1032,1,0,0,0,1035,1036,1,0,0,0,1036,1034,1,0,0,0,1036,
        1037,1,0,0,0,1037,1039,1,0,0,0,1038,1028,1,0,0,0,1038,1034,1,0,0,
        0,1039,171,1,0,0,0,1040,1041,5,32,0,0,1041,1043,3,122,61,0,1042,
        1040,1,0,0,0,1042,1043,1,0,0,0,1043,1045,1,0,0,0,1044,1046,5,86,
        0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1047,1,0,0,0,1047,1048,
        3,174,87,0,1048,173,1,0,0,0,1049,1062,5,18,0,0,1050,1051,5,92,0,
        0,1051,1056,3,122,61,0,1052,1053,5,91,0,0,1053,1055,3,122,61,0,1054,
        1052,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,1057,1,0,0,
        0,1057,1059,1,0,0,0,1058,1056,1,0,0,0,1059,1060,5,93,0,0,1060,1062,
        1,0,0,0,1061,1049,1,0,0,0,1061,1050,1,0,0,0,1062,175,1,0,0,0,1063,
        1075,3,182,91,0,1064,1075,5,83,0,0,1065,1075,5,80,0,0,1066,1075,
        5,81,0,0,1067,1075,5,82,0,0,1068,1075,5,77,0,0,1069,1075,5,78,0,
        0,1070,1075,3,180,90,0,1071,1075,5,84,0,0,1072,1075,3,178,89,0,1073,
        1075,5,76,0,0,1074,1063,1,0,0,0,1074,1064,1,0,0,0,1074,1065,1,0,
        0,0,1074,1066,1,0,0,0,1074,1067,1,0,0,0,1074,1068,1,0,0,0,1074,1069,
        1,0,0,0,1074,1070,1,0,0,0,1074,1071,1,0,0,0,1074,1072,1,0,0,0,1074,
        1073,1,0,0,0,1075,177,1,0,0,0,1076,1088,5,66,0,0,1077,1088,5,67,
        0,0,1078,1088,5,68,0,0,1079,1080,5,69,0,0,1080,1081,5,92,0,0,1081,
        1088,5,70,0,0,1082,1083,5,69,0,0,1083,1084,5,93,0,0,1084,1088,5,
        70,0,0,1085,1088,5,71,0,0,1086,1088,5,72,0,0,1087,1076,1,0,0,0,1087,
        1077,1,0,0,0,1087,1078,1,0,0,0,1087,1079,1,0,0,0,1087,1082,1,0,0,
        0,1087,1085,1,0,0,0,1087,1086,1,0,0,0,1088,179,1,0,0,0,1089,1090,
        7,9,0,0,1090,181,1,0,0,0,1091,1093,5,79,0,0,1092,1091,1,0,0,0,1092,
        1093,1,0,0,0,1093,1095,1,0,0,0,1094,1096,5,86,0,0,1095,1094,1,0,
        0,0,1095,1096,1,0,0,0,1096,1097,1,0,0,0,1097,1098,5,89,0,0,1098,
        1103,3,122,61,0,1099,1100,5,91,0,0,1100,1102,3,122,61,0,1101,1099,
        1,0,0,0,1102,1105,1,0,0,0,1103,1101,1,0,0,0,1103,1104,1,0,0,0,1104,
        1106,1,0,0,0,1105,1103,1,0,0,0,1106,1107,5,90,0,0,1107,1129,1,0,
        0,0,1108,1110,5,79,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,
        1112,1,0,0,0,1111,1113,5,86,0,0,1112,1111,1,0,0,0,1112,1113,1,0,
        0,0,1113,1114,1,0,0,0,1114,1115,5,89,0,0,1115,1116,3,122,61,0,1116,
        1117,5,4,0,0,1117,1118,3,122,61,0,1118,1119,5,90,0,0,1119,1129,1,
        0,0,0,1120,1122,5,79,0,0,1121,1120,1,0,0,0,1121,1122,1,0,0,0,1122,
        1124,1,0,0,0,1123,1125,5,86,0,0,1124,1123,1,0,0,0,1124,1125,1,0,
        0,0,1125,1126,1,0,0,0,1126,1127,5,89,0,0,1127,1129,5,90,0,0,1128,
        1092,1,0,0,0,1128,1109,1,0,0,0,1128,1121,1,0,0,0,1129,183,1,0,0,
        0,1130,1134,5,73,0,0,1131,1133,9,0,0,0,1132,1131,1,0,0,0,1133,1136,
        1,0,0,0,1134,1135,1,0,0,0,1134,1132,1,0,0,0,1135,1137,1,0,0,0,1136,
        1134,1,0,0,0,1137,1138,5,73,0,0,1138,185,1,0,0,0,131,189,198,204,
        208,212,219,228,231,234,247,251,256,262,265,279,289,295,301,305,
        313,319,324,327,334,339,342,345,350,358,363,367,382,389,395,400,
        408,414,420,427,435,438,441,444,447,454,457,460,463,472,476,479,
        482,487,491,496,508,516,521,530,535,549,556,561,568,571,580,586,
        590,599,603,628,631,635,654,670,674,682,686,691,694,697,702,717,
        726,733,735,741,750,753,757,763,777,804,809,816,820,827,840,869,
        899,901,927,939,942,948,951,957,960,964,972,992,996,1015,1026,1036,
        1038,1042,1045,1056,1061,1074,1087,1092,1095,1103,1109,1112,1121,
        1124,1128,1134
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'use'", "'{'", "'}'", "';'", "'='", "'const'", 
                     "'union'", "'unsafe'", "'type'", "'impl'", "'extern'", 
                     "'static'", "'mut'", "'fn'", "'->'", "'pub'", "'struct'", 
                     "'()'", "'&'", "'*'", "'i32'", "'String'", "'bool'", 
                     "'u8'", "'<'", "'Option<NonNull<'", "'>>'", "'break'", 
                     "'continue'", "'let'", "'else'", "'.'", "'ref'", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'match'", "'|'", "'=>'", "'return'", "'while'", "'for'", 
                     "'in'", "'if'", "'else if'", "'loop'", "'Box'", "'Some'", 
                     "'as'", "'..'", "'=='", "'!='", "'||'", "'&&'", "'>='", 
                     "'<='", "'/'", "'%'", "'+'", "'-'", "'b'.''", "'b'|''", 
                     "'b'*''", "'b''", "'''", "'b'+''", "'b'?''", "'\"'", 
                     "'true'", "'false'", "'None'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'::'", "'!'", "'>'", "'#'", 
                     "'['", "']'", "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "NONE", 
                      "Binary", "STRING_LITERAL", "Identifier", "Number", 
                      "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_useDecl = 2
    RULE_topLevelDef = 3
    RULE_topLevelVarDef = 4
    RULE_defKind = 5
    RULE_varDefField = 6
    RULE_typeAlias = 7
    RULE_interfaceDef = 8
    RULE_externBlock = 9
    RULE_externItem = 10
    RULE_externParams = 11
    RULE_externParam = 12
    RULE_visibility = 13
    RULE_unsafeModifier = 14
    RULE_externAbi = 15
    RULE_attributes = 16
    RULE_innerAttribute = 17
    RULE_attribute = 18
    RULE_attrArgs = 19
    RULE_attrArg = 20
    RULE_attrValue = 21
    RULE_structDef = 22
    RULE_structField = 23
    RULE_structLiteral = 24
    RULE_structLiteralField = 25
    RULE_functionDef = 26
    RULE_paramList = 27
    RULE_param = 28
    RULE_typeExpr = 29
    RULE_pointerType = 30
    RULE_basicType = 31
    RULE_safeNonNullWrapper = 32
    RULE_typePath = 33
    RULE_arrayType = 34
    RULE_block = 35
    RULE_unsafeBlcok = 36
    RULE_statement = 37
    RULE_conditionalAssignmentStmt = 38
    RULE_callStmt = 39
    RULE_letStmt = 40
    RULE_varDef = 41
    RULE_compoundOp = 42
    RULE_compoundAssignment = 43
    RULE_matchStmt = 44
    RULE_matchArm = 45
    RULE_matchPattern = 46
    RULE_whileStmt = 47
    RULE_initializer = 48
    RULE_staticVarDecl = 49
    RULE_initBlock = 50
    RULE_assignStmt = 51
    RULE_forStmt = 52
    RULE_ifStmt = 53
    RULE_exprStmt = 54
    RULE_returnStmt = 55
    RULE_loopStmt = 56
    RULE_boxWrappwer = 57
    RULE_typeWrapper = 58
    RULE_boxWrapperPrefix = 59
    RULE_typeWrapperPrefix = 60
    RULE_expression = 61
    RULE_basicTypeCastExpr = 62
    RULE_unsafeExpression = 63
    RULE_qualifiedExpression = 64
    RULE_typeAccessPostfix = 65
    RULE_structDefInit = 66
    RULE_arrayDeclaration = 67
    RULE_typePathExpression = 68
    RULE_patternPrefix = 69
    RULE_pattern = 70
    RULE_castExpressionPostFix = 71
    RULE_compoundOps = 72
    RULE_rangeSymbol = 73
    RULE_conditionalOps = 74
    RULE_booleanOps = 75
    RULE_binaryOps = 76
    RULE_structFieldDec = 77
    RULE_mutableExpression = 78
    RULE_unaryOpes = 79
    RULE_parenExpression = 80
    RULE_dereferenceExpression = 81
    RULE_expressionBlock = 82
    RULE_borrowExpression = 83
    RULE_primaryExpression = 84
    RULE_fieldAccessPostFix = 85
    RULE_callExpressionPostFix = 86
    RULE_functionCallArgs = 87
    RULE_literal = 88
    RULE_byteLiteral = 89
    RULE_booleanLiteral = 90
    RULE_arrayLiteral = 91
    RULE_stringLiteral = 92

    ruleNames =  [ "program", "topLevelItem", "useDecl", "topLevelDef", 
                   "topLevelVarDef", "defKind", "varDefField", "typeAlias", 
                   "interfaceDef", "externBlock", "externItem", "externParams", 
                   "externParam", "visibility", "unsafeModifier", "externAbi", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "structLiteral", 
                   "structLiteralField", "functionDef", "paramList", "param", 
                   "typeExpr", "pointerType", "basicType", "safeNonNullWrapper", 
                   "typePath", "arrayType", "block", "unsafeBlcok", "statement", 
                   "conditionalAssignmentStmt", "callStmt", "letStmt", "varDef", 
                   "compoundOp", "compoundAssignment", "matchStmt", "matchArm", 
                   "matchPattern", "whileStmt", "initializer", "staticVarDecl", 
                   "initBlock", "assignStmt", "forStmt", "ifStmt", "exprStmt", 
                   "returnStmt", "loopStmt", "boxWrappwer", "typeWrapper", 
                   "boxWrapperPrefix", "typeWrapperPrefix", "expression", 
                   "basicTypeCastExpr", "unsafeExpression", "qualifiedExpression", 
                   "typeAccessPostfix", "structDefInit", "arrayDeclaration", 
                   "typePathExpression", "patternPrefix", "pattern", "castExpressionPostFix", 
                   "compoundOps", "rangeSymbol", "conditionalOps", "booleanOps", 
                   "binaryOps", "structFieldDec", "mutableExpression", "unaryOpes", 
                   "parenExpression", "dereferenceExpression", "expressionBlock", 
                   "borrowExpression", "primaryExpression", "fieldAccessPostFix", 
                   "callExpressionPostFix", "functionCallArgs", "literal", 
                   "byteLiteral", "booleanLiteral", "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    TRUE=74
    FALSE=75
    NONE=76
    Binary=77
    STRING_LITERAL=78
    Identifier=79
    Number=80
    SignedNumber=81
    BYTE_STRING_LITERAL=82
    HexNumber=83
    CHAR_LITERAL=84
    DOUBLE_COLON=85
    EXCL=86
    GT=87
    POUND=88
    LBRACK=89
    RBRACK=90
    COMMA=91
    LPAREN=92
    RPAREN=93
    UNDERSCORE=94
    COLON=95
    ELLIPSIS=96
    WS=97
    COMMENT=98

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 221122) != 0) or _la==79 or _la==88:
                self.state = 186
                self.topLevelItem()
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def useDecl(self):
            return self.getTypedRuleContext(RustParser.UseDeclContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 192
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 193
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 195
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 196
                self.useDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 197
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypePathContext)
            else:
                return self.getTypedRuleContext(RustParser.TypePathContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_useDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDecl" ):
                listener.enterUseDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDecl" ):
                listener.exitUseDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDecl" ):
                return visitor.visitUseDecl(self)
            else:
                return visitor.visitChildren(self)




    def useDecl(self):

        localctx = RustParser.UseDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_useDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self.match(RustParser.T__0)
            self.state = 201
            self.typePath()
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 202
                self.match(RustParser.T__1)
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==79 or _la==85:
                    self.state = 204
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 203
                        self.typePath()


                    self.state = 206
                    self.match(RustParser.Identifier)
                    self.state = 208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 207
                        self.match(RustParser.COMMA)


                    self.state = 214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 215
                self.match(RustParser.T__2)
                self.state = 216
                self.match(RustParser.COMMA)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def topLevelVarDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelVarDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelDef" ):
                return visitor.visitTopLevelDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_topLevelDef)
        try:
            self.state = 228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 224
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 225
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 227
                self.topLevelVarDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelVarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def defKind(self):
            return self.getTypedRuleContext(RustParser.DefKindContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def varDefField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelVarDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelVarDef" ):
                listener.enterTopLevelVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelVarDef" ):
                listener.exitTopLevelVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelVarDef" ):
                return visitor.visitTopLevelVarDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelVarDef(self):

        localctx = RustParser.TopLevelVarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_topLevelVarDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 230
                self.visibility()


            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0):
                self.state = 233
                self.defKind()


            self.state = 236
            self.match(RustParser.Identifier)
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.state = 237
                self.match(RustParser.COLON)
                self.state = 238
                self.typeExpr()
                self.state = 239
                self.match(RustParser.T__4)
                self.state = 240
                self.expression(0)
                self.state = 241
                self.match(RustParser.T__3)
                pass
            elif token in [2]:
                self.state = 243
                self.match(RustParser.T__1)
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16 or _la==79:
                    self.state = 244
                    self.varDefField()
                    self.state = 249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 250
                self.match(RustParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_defKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefKind" ):
                listener.enterDefKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefKind" ):
                listener.exitDefKind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefKind" ):
                return visitor.visitDefKind(self)
            else:
                return visitor.visitChildren(self)




    def defKind(self):

        localctx = RustParser.DefKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_defKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_varDefField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDefField" ):
                listener.enterVarDefField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDefField" ):
                listener.exitVarDefField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDefField" ):
                return visitor.visitVarDefField(self)
            else:
                return visitor.visitChildren(self)




    def varDefField(self):

        localctx = RustParser.VarDefFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_varDefField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 255
                self.visibility()


            self.state = 258
            self.match(RustParser.Identifier)
            self.state = 259
            self.match(RustParser.COLON)
            self.state = 260
            self.typeExpr()
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 261
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 264
                self.visibility()


            self.state = 267
            self.match(RustParser.T__8)
            self.state = 268
            self.match(RustParser.Identifier)
            self.state = 269
            self.match(RustParser.T__4)
            self.state = 270
            self.typeExpr()
            self.state = 271
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDef" ):
                return visitor.visitInterfaceDef(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(RustParser.T__9)
            self.state = 274
            self.match(RustParser.Identifier)
            self.state = 275
            self.match(RustParser.T__1)
            self.state = 277 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 276
                self.functionDef()
                self.state = 279 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 84224) != 0)):
                    break

            self.state = 281
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(RustParser.T__10)
            self.state = 284
            self.match(RustParser.STRING_LITERAL)
            self.state = 285
            self.match(RustParser.T__1)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 86528) != 0):
                self.state = 286
                self.externItem()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 292
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 294
                    self.visibility()


                self.state = 297
                self.match(RustParser.T__8)
                self.state = 298
                self.match(RustParser.Identifier)
                self.state = 299
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 300
                    self.visibility()


                self.state = 303
                self.match(RustParser.T__11)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 304
                    self.match(RustParser.T__12)


                self.state = 307
                self.match(RustParser.Identifier)
                self.state = 308
                self.match(RustParser.COLON)
                self.state = 309
                self.typeExpr()
                self.state = 310
                self.match(RustParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 312
                    self.visibility()


                self.state = 315
                self.match(RustParser.T__13)
                self.state = 316
                self.match(RustParser.Identifier)
                self.state = 317
                self.match(RustParser.LPAREN)
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 229377) != 0):
                    self.state = 318
                    self.externParams()


                self.state = 321
                self.match(RustParser.RPAREN)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 322
                    self.match(RustParser.T__14)
                    self.state = 323
                    self.typeExpr()


                self.state = 326
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79, 94, 95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 329
                self.externParam()
                self.state = 334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 330
                        self.match(RustParser.COMMA)
                        self.state = 331
                        self.externParam() 
                    self.state = 336
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 337
                    self.match(RustParser.COMMA)
                    self.state = 338
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79 or _la==94:
                self.state = 344
                _la = self._input.LA(1)
                if not(_la==79 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 347
            self.match(RustParser.COLON)
            self.state = 350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 22, 23, 24, 25, 26, 79, 85, 89]:
                self.state = 348
                self.typeExpr()
                pass
            elif token in [96]:
                self.state = 349
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(RustParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(RustParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(RustParser.T__10)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 357
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 360
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 363 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(RustParser.POUND)

            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 366
                self.match(RustParser.EXCL)


            self.state = 369
            self.match(RustParser.LBRACK)
            self.state = 370
            self.attribute()
            self.state = 371
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attribute)
        try:
            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.match(RustParser.Identifier)
                self.state = 375
                self.match(RustParser.T__4)
                self.state = 376
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 377
                self.match(RustParser.Identifier)
                self.state = 378
                self.match(RustParser.LPAREN)
                self.state = 379
                self.attrArgs()
                self.state = 380
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.attrArg()
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==91:
                self.state = 385
                self.match(RustParser.COMMA)
                self.state = 386
                self.attrArg()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(RustParser.Identifier)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 393
                self.match(RustParser.T__4)
                self.state = 394
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 399
                self.visibility()


            self.state = 402
            self.match(RustParser.T__16)
            self.state = 403
            self.match(RustParser.Identifier)
            self.state = 404
            self.match(RustParser.T__1)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16 or _la==79:
                self.state = 405
                self.structField()
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 411
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 413
                self.visibility()


            self.state = 416
            self.match(RustParser.Identifier)
            self.state = 417
            self.match(RustParser.COLON)
            self.state = 418
            self.typeExpr()
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 419
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteral" ):
                return visitor.visitStructLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(RustParser.Identifier)
            self.state = 423
            self.match(RustParser.T__1)
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 424
                self.structLiteralField()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 430
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.match(RustParser.Identifier)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 433
                self.match(RustParser.COLON)
                self.state = 434
                self.expression(0)


            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 437
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 440
                self.visibility()


            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 443
                self.unsafeModifier()


            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 446
                self.externAbi()


            self.state = 449
            self.match(RustParser.T__13)
            self.state = 450
            self.match(RustParser.Identifier)
            self.state = 457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.state = 451
                self.match(RustParser.T__17)
                pass
            elif token in [92]:
                self.state = 452
                self.match(RustParser.LPAREN)
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==19 or _la==79:
                    self.state = 453
                    self.paramList()


                self.state = 456
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 459
                self.match(RustParser.T__14)


            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 462
                self.typeExpr()


            self.state = 465
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.param()
            self.state = 472
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 468
                    self.match(RustParser.COMMA)
                    self.state = 469
                    self.param() 
                self.state = 474
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 475
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 478
                self.match(RustParser.T__18)


            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 481
                self.match(RustParser.T__12)


            self.state = 484
            self.match(RustParser.Identifier)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 485
                self.match(RustParser.COLON)
                self.state = 486
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpr" ):
                listener.enterTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpr" ):
                listener.exitTypeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpr" ):
                return visitor.visitTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def typeExpr(self):

        localctx = RustParser.TypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_typeExpr)
        try:
            self.state = 491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 21, 22, 23, 24, 25, 26, 79, 85, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.basicType()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(RustParser.T__19)
            self.state = 494
            _la = self._input.LA(1)
            if not(_la==6 or _la==13):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 495
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def safeNonNullWrapper(self):
            return self.getTypedRuleContext(RustParser.SafeNonNullWrapperContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(RustParser.ArrayTypeContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self.match(RustParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 499
                self.safeNonNullWrapper()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 500
                self.match(RustParser.T__21)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 501
                self.match(RustParser.T__22)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 502
                self.match(RustParser.T__23)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 503
                self.arrayType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 504
                self.typePath()
                self.state = 505
                self.basicType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 507
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 510
                self.match(RustParser.T__24)
                self.state = 511
                self.typeExpr()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 512
                    self.match(RustParser.COMMA)
                    self.state = 513
                    self.typeExpr()
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 519
                self.match(RustParser.GT)
                self.state = 521
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 520
                    self.match(RustParser.T__17)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 523
                self.match(RustParser.Identifier)
                self.state = 535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 524
                    self.match(RustParser.T__24)
                    self.state = 525
                    self.typeExpr()
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==91:
                        self.state = 526
                        self.match(RustParser.COMMA)
                        self.state = 527
                        self.typeExpr()
                        self.state = 532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 533
                    self.match(RustParser.GT)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 537
                self.match(RustParser.Identifier)
                self.state = 538
                self.match(RustParser.T__24)
                self.state = 539
                self.typeExpr()
                self.state = 540
                self.match(RustParser.GT)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 542
                self.match(RustParser.T__18)
                self.state = 543
                self.typeExpr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 544
                self.match(RustParser.LBRACK)
                self.state = 545
                self.typeExpr()
                self.state = 546
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 548
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SafeNonNullWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.GT)
            else:
                return self.getToken(RustParser.GT, i)

        def getRuleIndex(self):
            return RustParser.RULE_safeNonNullWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafeNonNullWrapper" ):
                listener.enterSafeNonNullWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafeNonNullWrapper" ):
                listener.exitSafeNonNullWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSafeNonNullWrapper" ):
                return visitor.visitSafeNonNullWrapper(self)
            else:
                return visitor.visitChildren(self)




    def safeNonNullWrapper(self):

        localctx = RustParser.SafeNonNullWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_safeNonNullWrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(RustParser.T__25)
            self.state = 552
            self.typeExpr()
            self.state = 556
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 553
                self.match(RustParser.T__26)
                pass
            elif token in [87]:
                self.state = 554
                self.match(RustParser.GT)
                self.state = 555
                self.match(RustParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self.match(RustParser.Identifier)
                self.state = 559
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 560
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 563
                self.match(RustParser.Identifier)
                self.state = 568
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 564
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 565
                        self.match(RustParser.Identifier) 
                    self.state = 570
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = RustParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(RustParser.LBRACK)
            self.state = 574
            self.basicType()
            self.state = 575
            self.match(RustParser.T__3)
            self.state = 576
            self.match(RustParser.Number)
            self.state = 577
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 579
                self.unsafeModifier()


            self.state = 582
            self.match(RustParser.T__1)
            self.state = 586
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 583
                    self.statement() 
                self.state = 588
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==79:
                self.state = 589
                self.returnStmt()


            self.state = 592
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlcokContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlcok

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlcok" ):
                listener.enterUnsafeBlcok(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlcok" ):
                listener.exitUnsafeBlcok(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlcok" ):
                return visitor.visitUnsafeBlcok(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlcok(self):

        localctx = RustParser.UnsafeBlcokContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_unsafeBlcok)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.unsafeModifier()
            self.state = 595
            self.match(RustParser.T__1)
            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 596
                    self.statement() 
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==79:
                self.state = 602
                self.returnStmt()


            self.state = 605
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeBlcok(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlcokContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def conditionalAssignmentStmt(self):
            return self.getTypedRuleContext(RustParser.ConditionalAssignmentStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def callStmt(self):
            return self.getTypedRuleContext(RustParser.CallStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_statement)
        try:
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.unsafeBlcok()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self.letStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 609
                self.conditionalAssignmentStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 610
                self.structLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 611
                self.structDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 612
                self.staticVarDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 613
                self.typeWrapper()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 614
                self.assignStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 615
                self.compoundAssignment()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 616
                self.forStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 617
                self.ifStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 618
                self.callStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 619
                self.exprStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 620
                self.whileStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 621
                self.returnStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 622
                self.loopStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 623
                self.match(RustParser.T__27)
                self.state = 624
                self.match(RustParser.T__3)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 625
                self.match(RustParser.T__28)
                self.state = 626
                self.match(RustParser.T__3)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 627
                self.matchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalAssignmentStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_conditionalAssignmentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAssignmentStmt" ):
                listener.enterConditionalAssignmentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAssignmentStmt" ):
                listener.exitConditionalAssignmentStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalAssignmentStmt" ):
                return visitor.visitConditionalAssignmentStmt(self)
            else:
                return visitor.visitChildren(self)




    def conditionalAssignmentStmt(self):

        localctx = RustParser.ConditionalAssignmentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conditionalAssignmentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 630
                self.match(RustParser.T__29)


            self.state = 635
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.state = 633
                self.typeWrapper()
                pass
            elif token in [2, 8, 13, 19, 20, 21, 22, 23, 24, 25, 26, 30, 33, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 92]:
                self.state = 634
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 637
            self.match(RustParser.T__4)
            self.state = 638
            self.expression(0)
            self.state = 639
            self.match(RustParser.T__30)
            self.state = 640
            self.block()
            self.state = 641
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStmt" ):
                listener.enterCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStmt" ):
                listener.exitCallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStmt" ):
                return visitor.visitCallStmt(self)
            else:
                return visitor.visitChildren(self)




    def callStmt(self):

        localctx = RustParser.CallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_callStmt)
        try:
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 643
                self.expression(0)

                self.state = 644
                self.match(RustParser.T__31)
                self.state = 645
                self.expression(0)
                self.state = 647
                self.callExpressionPostFix()
                self.state = 648
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 650
                self.expression(0)
                self.state = 651
                self.callExpressionPostFix()
                self.state = 652
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                self.match(RustParser.T__29)
                self.state = 657
                self.varDef()
                self.state = 658
                self.match(RustParser.T__4)
                self.state = 659
                self.expression(0)
                self.state = 660
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.match(RustParser.T__29)
                self.state = 663
                self.varDef()
                self.state = 664
                self.initBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 666
                self.match(RustParser.T__29)
                self.state = 667
                self.match(RustParser.LPAREN)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13 or _la==33 or _la==79:
                    self.state = 668
                    self.varDef()
                    self.state = 670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 669
                        self.match(RustParser.COMMA)


                    self.state = 676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 677
                self.match(RustParser.RPAREN)
                self.state = 678
                self.match(RustParser.T__4)
                self.state = 679
                self.match(RustParser.LPAREN)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9797378308) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 310377919) != 0):
                    self.state = 680
                    self.expression(0)
                    self.state = 682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 681
                        self.match(RustParser.COMMA)


                    self.state = 688
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 689
                self.match(RustParser.RPAREN)
                self.state = 690
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 693
                self.match(RustParser.T__32)


            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 696
                self.match(RustParser.T__12)


            self.state = 699
            self.match(RustParser.Identifier)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 700
                self.match(RustParser.COLON)
                self.state = 701
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4380866641920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.expression(0)
            self.state = 707
            self.compoundOp()
            self.state = 708
            self.expression(0)
            self.state = 709
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(RustParser.T__41)
            self.state = 712
            self.expression(0)
            self.state = 713
            self.match(RustParser.T__1)
            self.state = 715 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 714
                self.matchArm()
                self.state = 717 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 268460143) != 0)):
                    break

            self.state = 719
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.matchPattern()
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 722
                self.match(RustParser.T__42)
                self.state = 723
                self.matchPattern()
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 729
            self.match(RustParser.T__43)
            self.state = 735
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 8]:
                self.state = 730
                self.block()
                pass
            elif token in [45]:
                self.state = 731
                self.match(RustParser.T__44)
                self.state = 733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 732
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_matchPattern)
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 67, 68, 69, 71, 72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 737
                self.byteLiteral()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.match(RustParser.Number)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 3)
                self.state = 739
                self.match(RustParser.UNDERSCORE)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 4)
                self.state = 740
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(RustParser.T__45)
            self.state = 744
            self.expression(0)
            self.state = 745
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_initializer)
        try:
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 749
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 752
                self.visibility()


            self.state = 755
            self.match(RustParser.T__11)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 756
                self.match(RustParser.T__12)


            self.state = 759
            self.match(RustParser.Identifier)
            self.state = 760
            self.match(RustParser.COLON)
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 761
                self.typeExpr()
                pass

            elif la_ == 2:
                self.state = 762
                self.match(RustParser.Identifier)
                pass


            self.state = 765
            self.match(RustParser.T__4)
            self.state = 766
            self.initializer()
            self.state = 767
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(RustParser.T__1)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 770
                self.match(RustParser.Identifier)
                self.state = 771
                self.match(RustParser.COLON)
                self.state = 772
                self.expression(0)
                self.state = 773
                self.match(RustParser.COMMA)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 780
            self.match(RustParser.T__2)
            self.state = 781
            self.match(RustParser.T__3)
            self.state = 782
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.expression(0)
            self.state = 785
            self.match(RustParser.T__4)
            self.state = 786
            self.expression(0)
            self.state = 787
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(RustParser.T__46)
            self.state = 790
            self.match(RustParser.Identifier)
            self.state = 791
            self.match(RustParser.T__47)
            self.state = 792
            self.expression(0)
            self.state = 793
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(RustParser.T__48)
            self.state = 796
            self.expression(0)
            self.state = 797
            self.block()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50:
                self.state = 798
                self.match(RustParser.T__49)
                self.state = 799
                self.expression(0)
                self.state = 800
                self.block()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 807
                self.match(RustParser.T__30)
                self.state = 808
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.primaryExpression()
            self.state = 812
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.match(RustParser.T__44)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9797378308) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 310377919) != 0):
                    self.state = 815
                    self.expression(0)


                self.state = 818
                self.match(RustParser.T__3)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(RustParser.T__50)
            self.state = 823
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrappwerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrappwer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrappwer" ):
                listener.enterBoxWrappwer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrappwer" ):
                listener.exitBoxWrappwer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWrappwer" ):
                return visitor.visitBoxWrappwer(self)
            else:
                return visitor.visitChildren(self)




    def boxWrappwer(self):

        localctx = RustParser.BoxWrappwerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_boxWrappwer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(RustParser.T__51)
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 826
                self.typeExpr()


            self.state = 829
            self.match(RustParser.LPAREN)
            self.state = 830
            self.expression(0)
            self.state = 831
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_typeWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapper" ):
                listener.enterTypeWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapper" ):
                listener.exitTypeWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWrapper" ):
                return visitor.visitTypeWrapper(self)
            else:
                return visitor.visitChildren(self)




    def typeWrapper(self):

        localctx = RustParser.TypeWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeWrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(RustParser.T__52)
            self.state = 834
            self.match(RustParser.LPAREN)
            self.state = 835
            self.expression(0)
            self.state = 836
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrapperPrefix" ):
                listener.enterBoxWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrapperPrefix" ):
                listener.exitBoxWrapperPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWrapperPrefix" ):
                return visitor.visitBoxWrapperPrefix(self)
            else:
                return visitor.visitChildren(self)




    def boxWrapperPrefix(self):

        localctx = RustParser.BoxWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_boxWrapperPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(RustParser.T__51)
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 839
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_typeWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapperPrefix" ):
                listener.enterTypeWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapperPrefix" ):
                listener.exitTypeWrapperPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWrapperPrefix" ):
                return visitor.visitTypeWrapperPrefix(self)
            else:
                return visitor.visitChildren(self)




    def typeWrapperPrefix(self):

        localctx = RustParser.TypeWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typeWrapperPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(RustParser.T__52)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def typePathExpression(self):
            return self.getTypedRuleContext(RustParser.TypePathExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def structDefInit(self):
            return self.getTypedRuleContext(RustParser.StructDefInitContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def unsafeExpression(self):
            return self.getTypedRuleContext(RustParser.UnsafeExpressionContext,0)


        def basicTypeCastExpr(self):
            return self.getTypedRuleContext(RustParser.BasicTypeCastExprContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def qualifiedExpression(self):
            return self.getTypedRuleContext(RustParser.QualifiedExpressionContext,0)


        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(RustParser.ArrayDeclarationContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def rangeSymbol(self):
            return self.getTypedRuleContext(RustParser.RangeSymbolContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def typeAccessPostfix(self):
            return self.getTypedRuleContext(RustParser.TypeAccessPostfixContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 845
                self.mutableExpression()
                self.state = 846
                self.expression(25)
                pass

            elif la_ == 2:
                self.state = 848
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.state = 849
                self.structLiteral()
                pass

            elif la_ == 4:
                self.state = 850
                self.typePathExpression()
                self.state = 851
                self.expression(20)
                pass

            elif la_ == 5:
                self.state = 853
                self.parenExpression()
                pass

            elif la_ == 6:
                self.state = 854
                self.structFieldDec()
                pass

            elif la_ == 7:
                self.state = 855
                self.structDefInit()
                pass

            elif la_ == 8:
                self.state = 856
                self.unaryOpes()
                self.state = 857
                self.expression(16)
                pass

            elif la_ == 9:
                self.state = 859
                self.borrowExpression()
                pass

            elif la_ == 10:
                self.state = 860
                self.unsafeExpression()
                pass

            elif la_ == 11:
                self.state = 861
                self.basicTypeCastExpr()
                pass

            elif la_ == 12:
                self.state = 862
                self.dereferenceExpression()
                pass

            elif la_ == 13:
                self.state = 863
                self.expressionBlock()
                pass

            elif la_ == 14:
                self.state = 864
                self.qualifiedExpression()
                pass

            elif la_ == 15:
                self.state = 865
                self.patternPrefix()
                self.state = 866
                self.expression(3)
                pass

            elif la_ == 16:
                self.state = 868
                self.arrayDeclaration()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 901
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 899
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 871
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 872
                        self.binaryOps()
                        self.state = 873
                        self.expression(24)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 875
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 876
                        self.rangeSymbol()
                        self.state = 877
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 879
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 880
                        self.booleanOps()
                        self.state = 881
                        self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 883
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 884
                        self.conditionalOps()
                        self.state = 885
                        self.expression(9)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 887
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 888
                        self.compoundOps()
                        self.state = 889
                        self.expression(7)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 891
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 892
                        self.castExpressionPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 893
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 894
                        self.callExpressionPostFix()
                        pass

                    elif la_ == 8:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 895
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 896
                        self.typeAccessPostfix()
                        pass

                    elif la_ == 9:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 897
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 898
                        self.fieldAccessPostFix()
                        pass

             
                self.state = 903
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasicTypeCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_basicTypeCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicTypeCastExpr" ):
                listener.enterBasicTypeCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicTypeCastExpr" ):
                listener.exitBasicTypeCastExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicTypeCastExpr" ):
                return visitor.visitBasicTypeCastExpr(self)
            else:
                return visitor.visitChildren(self)




    def basicTypeCastExpr(self):

        localctx = RustParser.BasicTypeCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_basicTypeCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.typeExpr()
            self.state = 905
            self.typePath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeExpression" ):
                listener.enterUnsafeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeExpression" ):
                listener.exitUnsafeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeExpression" ):
                return visitor.visitUnsafeExpression(self)
            else:
                return visitor.visitChildren(self)




    def unsafeExpression(self):

        localctx = RustParser.UnsafeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_unsafeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(RustParser.T__7)
            self.state = 908
            self.match(RustParser.T__1)
            self.state = 909
            self.expression(0)
            self.state = 910
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedExpression" ):
                listener.enterQualifiedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedExpression" ):
                listener.exitQualifiedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedExpression" ):
                return visitor.visitQualifiedExpression(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedExpression(self):

        localctx = RustParser.QualifiedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_qualifiedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(RustParser.T__24)
            self.state = 913
            self.expression(0)
            self.state = 914
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAccessPostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAccessPostfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAccessPostfix" ):
                listener.enterTypeAccessPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAccessPostfix" ):
                listener.exitTypeAccessPostfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAccessPostfix" ):
                return visitor.visitTypeAccessPostfix(self)
            else:
                return visitor.visitChildren(self)




    def typeAccessPostfix(self):

        localctx = RustParser.TypeAccessPostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_typeAccessPostfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.typeExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structDefInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefInit" ):
                listener.enterStructDefInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefInit" ):
                listener.exitStructDefInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefInit" ):
                return visitor.visitStructDefInit(self)
            else:
                return visitor.visitChildren(self)




    def structDefInit(self):

        localctx = RustParser.StructDefInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_structDefInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(RustParser.Identifier)
            self.state = 919
            self.match(RustParser.T__4)
            self.state = 920
            self.match(RustParser.T__1)
            self.state = 921
            self.expression(0)
            self.state = 922
            self.match(RustParser.T__2)
            self.state = 923
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = RustParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(RustParser.Identifier)
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 926
                self.match(RustParser.EXCL)


            self.state = 929
            self.match(RustParser.LBRACK)
            self.state = 930
            self.match(RustParser.Number)
            self.state = 931
            self.match(RustParser.T__3)
            self.state = 932
            self.expression(0)
            self.state = 933
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathExpression" ):
                listener.enterTypePathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathExpression" ):
                listener.exitTypePathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePathExpression" ):
                return visitor.visitTypePathExpression(self)
            else:
                return visitor.visitChildren(self)




    def typePathExpression(self):

        localctx = RustParser.TypePathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typePathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 935
                    self.match(RustParser.Identifier)
                    self.state = 936
                    self.match(RustParser.DOUBLE_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 939 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPrefix" ):
                return visitor.visitPatternPrefix(self)
            else:
                return visitor.visitChildren(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 941
                self.match(RustParser.T__29)


            self.state = 944
            self.pattern()
            self.state = 945
            self.match(RustParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 947
                    self.match(RustParser.T__32)


                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 950
                    self.match(RustParser.T__12)


                self.state = 953
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self.match(RustParser.Identifier)
                self.state = 955
                self.match(RustParser.LPAREN)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 956
                    self.match(RustParser.T__32)


                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 959
                    self.match(RustParser.T__12)


                self.state = 962
                self.match(RustParser.Identifier)
                self.state = 963
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpressionPostFix" ):
                return visitor.visitCastExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(RustParser.T__53)
            self.state = 967
            self.typeExpr()
            self.state = 972
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 968
                    self.match(RustParser.T__53)
                    self.state = 969
                    self.typeExpr() 
                self.state = 974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOps" ):
                return visitor.visitCompoundOps(self)
            else:
                return visitor.visitChildren(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4380866641920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeSymbol" ):
                listener.enterRangeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeSymbol" ):
                listener.exitRangeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeSymbol" ):
                return visitor.visitRangeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def rangeSymbol(self):

        localctx = RustParser.RangeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_rangeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(RustParser.T__54)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalOps" ):
                return visitor.visitConditionalOps(self)
            else:
                return visitor.visitChildren(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 4611686050639642625) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOps" ):
                return visitor.visitBooleanOps(self)
            else:
                return visitor.visitChildren(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3458764513955282944) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOps" ):
                return visitor.visitBinaryOps(self)
            else:
                return visitor.visitChildren(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            _la = self._input.LA(1)
            if not(((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 65970697666561) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFieldDec" ):
                return visitor.visitStructFieldDec(self)
            else:
                return visitor.visitChildren(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(RustParser.Identifier)
            self.state = 986
            self.match(RustParser.T__1)
            self.state = 987
            self.structLiteralField()
            self.state = 992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 988
                    self.match(RustParser.COMMA)
                    self.state = 989
                    self.structLiteralField() 
                self.state = 994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 995
                self.match(RustParser.COMMA)


            self.state = 998
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableExpression" ):
                return visitor.visitMutableExpression(self)
            else:
                return visitor.visitChildren(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOpes" ):
                return visitor.visitUnaryOpes(self)
            else:
                return visitor.visitChildren(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4194307) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(RustParser.LPAREN)
            self.state = 1005
            self.expression(0)
            self.state = 1006
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(RustParser.T__19)
            self.state = 1009
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(RustParser.T__1)
            self.state = 1015
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1012
                    self.statement() 
                self.state = 1017
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

            self.state = 1018
            self.expression(0)
            self.state = 1019
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(RustParser.T__18)
            self.state = 1022
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_primaryExpression)
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldAccessPostFix" ):
                return visitor.visitFieldAccessPostFix(self)
            else:
                return visitor.visitChildren(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_fieldAccessPostFix)
        try:
            self.state = 1038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.match(RustParser.LBRACK)
                self.state = 1029
                self.primaryExpression()
                self.state = 1030
                self.match(RustParser.RBRACK)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1034 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1032
                        self.match(RustParser.T__31)
                        self.state = 1033
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1036 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallArgs(self):
            return self.getTypedRuleContext(RustParser.FunctionCallArgsContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_callExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpressionPostFix" ):
                listener.enterCallExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpressionPostFix" ):
                listener.exitCallExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpressionPostFix" ):
                return visitor.visitCallExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def callExpressionPostFix(self):

        localctx = RustParser.CallExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_callExpressionPostFix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 1040
                self.match(RustParser.T__31)
                self.state = 1041
                self.expression(0)


            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1044
                self.match(RustParser.EXCL)


            self.state = 1047
            self.functionCallArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_functionCallArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArgs" ):
                listener.enterFunctionCallArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArgs" ):
                listener.exitFunctionCallArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArgs" ):
                return visitor.visitFunctionCallArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArgs(self):

        localctx = RustParser.FunctionCallArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_functionCallArgs)
        self._la = 0 # Token type
        try:
            self.state = 1061
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.match(RustParser.T__17)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                self.match(RustParser.LPAREN)
                self.state = 1051
                self.expression(0)
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 1052
                    self.match(RustParser.COMMA)
                    self.state = 1053
                    self.expression(0)
                    self.state = 1058
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1059
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_literal)
        try:
            self.state = 1074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79, 86, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.arrayLiteral()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.match(RustParser.HexNumber)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1065
                self.match(RustParser.Number)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1066
                self.match(RustParser.SignedNumber)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1067
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1068
                self.match(RustParser.Binary)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1069
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [74, 75]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1070
                self.booleanLiteral()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1071
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [66, 67, 68, 69, 71, 72]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1072
                self.byteLiteral()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1073
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_byteLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteLiteral" ):
                listener.enterByteLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteLiteral" ):
                listener.exitByteLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteLiteral" ):
                return visitor.visitByteLiteral(self)
            else:
                return visitor.visitChildren(self)




    def byteLiteral(self):

        localctx = RustParser.ByteLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_byteLiteral)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.match(RustParser.T__65)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.match(RustParser.T__66)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1078
                self.match(RustParser.T__67)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1079
                self.match(RustParser.T__68)
                self.state = 1080
                self.match(RustParser.LPAREN)
                self.state = 1081
                self.match(RustParser.T__69)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1082
                self.match(RustParser.T__68)
                self.state = 1083
                self.match(RustParser.RPAREN)
                self.state = 1084
                self.match(RustParser.T__69)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1085
                self.match(RustParser.T__70)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1086
                self.match(RustParser.T__71)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            _la = self._input.LA(1)
            if not(_la==74 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1128
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1091
                    self.match(RustParser.Identifier)


                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1094
                    self.match(RustParser.EXCL)


                self.state = 1097
                self.match(RustParser.LBRACK)
                self.state = 1098
                self.expression(0)
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 1099
                    self.match(RustParser.COMMA)
                    self.state = 1100
                    self.expression(0)
                    self.state = 1105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1106
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1108
                    self.match(RustParser.Identifier)


                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1111
                    self.match(RustParser.EXCL)


                self.state = 1114
                self.match(RustParser.LBRACK)
                self.state = 1115
                self.expression(0)
                self.state = 1116
                self.match(RustParser.T__3)
                self.state = 1117
                self.expression(0)
                self.state = 1118
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1120
                    self.match(RustParser.Identifier)


                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1123
                    self.match(RustParser.EXCL)


                self.state = 1126
                self.match(RustParser.LBRACK)
                self.state = 1127
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(RustParser.T__72)
            self.state = 1134
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1131
                    self.matchWildcard() 
                self.state = 1136
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

            self.state = 1137
            self.match(RustParser.T__72)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[61] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         




