# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,86,1033,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,1,0,5,0,166,8,0,10,0,12,0,169,9,
        0,1,1,1,1,1,1,1,1,1,1,3,1,176,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,184,
        8,2,1,3,3,3,187,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,4,4,
        199,8,4,11,4,12,4,200,1,4,1,4,1,5,1,5,1,5,1,5,5,5,209,8,5,10,5,12,
        5,212,9,5,1,5,1,5,1,6,3,6,217,8,6,1,6,1,6,1,6,1,6,3,6,223,8,6,1,
        6,1,6,3,6,227,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,235,8,6,1,6,1,6,1,
        6,1,6,3,6,241,8,6,1,6,1,6,1,6,3,6,246,8,6,1,6,3,6,249,8,6,1,7,1,
        7,1,7,5,7,254,8,7,10,7,12,7,257,9,7,1,7,1,7,3,7,261,8,7,1,7,3,7,
        264,8,7,1,8,3,8,267,8,8,1,8,1,8,1,8,3,8,272,8,8,1,9,1,9,1,10,1,10,
        1,11,1,11,3,11,280,8,11,1,12,4,12,283,8,12,11,12,12,12,284,1,13,
        1,13,3,13,289,8,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,3,14,304,8,14,1,15,1,15,1,15,5,15,309,8,15,10,
        15,12,15,312,9,15,1,16,1,16,1,16,3,16,317,8,16,1,17,1,17,1,18,3,
        18,322,8,18,1,18,1,18,1,18,1,18,5,18,328,8,18,10,18,12,18,331,9,
        18,1,18,1,18,1,19,3,19,336,8,19,1,19,1,19,1,19,1,19,3,19,342,8,19,
        1,20,1,20,1,20,5,20,347,8,20,10,20,12,20,350,9,20,1,20,1,20,1,21,
        3,21,355,8,21,1,21,3,21,358,8,21,1,21,3,21,361,8,21,1,21,1,21,1,
        21,1,21,1,21,3,21,368,8,21,1,21,3,21,371,8,21,1,21,3,21,374,8,21,
        1,21,3,21,377,8,21,1,21,1,21,1,22,1,22,1,22,5,22,384,8,22,10,22,
        12,22,387,9,22,1,22,3,22,390,8,22,1,23,3,23,393,8,23,1,23,1,23,1,
        23,1,23,1,24,3,24,400,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,1,25,3,25,411,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,5,25,423,8,25,10,25,12,25,426,9,25,1,25,3,25,429,8,25,1,
        26,3,26,432,8,26,1,26,1,26,1,26,1,26,3,26,438,8,26,1,27,3,27,441,
        8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,3,28,453,
        8,28,1,29,1,29,1,29,3,29,458,8,29,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,5,30,470,8,30,10,30,12,30,473,9,30,1,30,1,30,
        3,30,477,8,30,1,30,1,30,1,30,1,30,1,30,5,30,484,8,30,10,30,12,30,
        487,9,30,1,30,1,30,3,30,491,8,30,1,30,1,30,1,30,3,30,496,8,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,509,8,
        30,1,31,1,31,1,31,3,31,514,8,31,1,31,1,31,1,31,5,31,519,8,31,10,
        31,12,31,522,9,31,3,31,524,8,31,1,32,1,32,5,32,528,8,32,10,32,12,
        32,531,9,32,1,32,3,32,534,8,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,5,34,560,8,34,10,34,12,34,563,9,34,1,34,1,34,
        3,34,567,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,577,8,
        35,1,35,1,35,1,35,1,35,3,35,583,8,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,3,35,593,8,35,1,36,1,36,3,36,597,8,36,1,36,1,36,1,36,
        3,36,602,8,36,1,36,1,36,1,36,1,36,3,36,608,8,36,1,36,1,36,1,36,3,
        36,613,8,36,3,36,615,8,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,
        1,39,1,39,1,39,4,39,628,8,39,11,39,12,39,629,1,39,1,39,1,40,1,40,
        1,40,1,40,1,41,1,41,1,41,3,41,641,8,41,1,42,3,42,644,8,42,1,42,1,
        42,3,42,648,8,42,1,42,1,42,1,42,1,42,3,42,654,8,42,1,42,1,42,1,42,
        1,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,666,8,43,10,43,12,43,669,
        9,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
        1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,3,46,691,8,46,1,47,1,47,
        1,47,1,48,1,48,3,48,698,8,48,1,48,1,48,3,48,702,8,48,1,49,1,49,1,
        49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,3,50,721,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,5,50,747,8,50,10,50,12,50,750,9,50,1,51,1,51,1,51,1,
        51,5,51,756,8,51,10,51,12,51,759,9,51,1,52,1,52,1,53,1,53,1,54,1,
        54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,57,1,57,5,57,776,8,57,10,
        57,12,57,779,9,57,1,57,3,57,782,8,57,1,57,1,57,1,58,1,58,1,59,1,
        59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,5,
        63,802,8,63,10,63,12,63,805,9,63,1,63,1,63,1,63,1,64,1,64,1,64,1,
        65,1,65,3,65,815,8,65,1,66,1,66,1,66,1,66,1,66,1,66,4,66,823,8,66,
        11,66,12,66,824,3,66,827,8,66,1,67,1,67,1,68,1,68,1,68,1,68,3,68,
        835,8,68,1,68,3,68,838,8,68,1,68,1,68,4,68,842,8,68,11,68,12,68,
        843,1,68,1,68,1,68,1,68,3,68,850,8,68,1,68,1,68,3,68,854,8,68,4,
        68,856,8,68,11,68,12,68,857,1,69,1,69,1,69,1,69,1,69,3,69,865,8,
        69,1,69,1,69,1,69,3,69,870,8,69,1,69,3,69,873,8,69,1,69,1,69,1,69,
        5,69,878,8,69,10,69,12,69,881,9,69,1,69,1,69,5,69,885,8,69,10,69,
        12,69,888,9,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,69,897,8,69,
        10,69,12,69,900,9,69,1,69,3,69,903,8,69,3,69,905,8,69,1,70,1,70,
        1,70,1,70,1,71,1,71,3,71,913,8,71,1,71,1,71,1,71,3,71,918,8,71,1,
        71,3,71,921,8,71,1,72,1,72,1,72,3,72,926,8,72,1,73,1,73,1,73,1,73,
        5,73,932,8,73,10,73,12,73,935,9,73,1,73,1,73,1,74,1,74,1,74,3,74,
        942,8,74,1,74,1,74,1,75,1,75,1,75,5,75,949,8,75,10,75,12,75,952,
        9,75,1,75,1,75,1,75,1,76,1,76,1,77,1,77,3,77,961,8,77,1,77,1,77,
        1,77,3,77,966,8,77,5,77,968,8,77,10,77,12,77,971,9,77,1,77,3,77,
        974,8,77,1,77,1,77,4,77,978,8,77,11,77,12,77,979,1,77,1,77,1,77,
        1,77,1,77,3,77,987,8,77,3,77,989,8,77,1,78,1,78,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,1,78,3,78,1001,8,78,1,79,1,79,1,80,1,80,1,80,1,
        80,5,80,1009,8,80,10,80,12,80,1012,9,80,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,3,80,1022,8,80,1,81,1,81,5,81,1026,8,81,10,81,12,
        81,1029,9,81,1,81,1,81,1,81,1,1027,1,100,82,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,0,11,2,0,
        67,67,82,82,1,0,66,68,2,0,9,9,16,16,2,0,2,2,83,83,1,0,30,37,3,0,
        23,23,48,51,75,75,2,0,24,24,52,54,2,0,18,18,55,58,2,0,57,58,74,74,
        2,0,67,68,82,82,1,0,62,63,1127,0,167,1,0,0,0,2,175,1,0,0,0,4,183,
        1,0,0,0,6,186,1,0,0,0,8,194,1,0,0,0,10,204,1,0,0,0,12,248,1,0,0,
        0,14,263,1,0,0,0,16,266,1,0,0,0,18,273,1,0,0,0,20,275,1,0,0,0,22,
        277,1,0,0,0,24,282,1,0,0,0,26,286,1,0,0,0,28,303,1,0,0,0,30,305,
        1,0,0,0,32,313,1,0,0,0,34,318,1,0,0,0,36,321,1,0,0,0,38,335,1,0,
        0,0,40,343,1,0,0,0,42,354,1,0,0,0,44,380,1,0,0,0,46,392,1,0,0,0,
        48,399,1,0,0,0,50,410,1,0,0,0,52,431,1,0,0,0,54,440,1,0,0,0,56,452,
        1,0,0,0,58,454,1,0,0,0,60,508,1,0,0,0,62,523,1,0,0,0,64,525,1,0,
        0,0,66,537,1,0,0,0,68,566,1,0,0,0,70,592,1,0,0,0,72,614,1,0,0,0,
        74,616,1,0,0,0,76,618,1,0,0,0,78,623,1,0,0,0,80,633,1,0,0,0,82,640,
        1,0,0,0,84,643,1,0,0,0,86,659,1,0,0,0,88,674,1,0,0,0,90,679,1,0,
        0,0,92,685,1,0,0,0,94,692,1,0,0,0,96,701,1,0,0,0,98,703,1,0,0,0,
        100,720,1,0,0,0,102,751,1,0,0,0,104,760,1,0,0,0,106,762,1,0,0,0,
        108,764,1,0,0,0,110,766,1,0,0,0,112,768,1,0,0,0,114,770,1,0,0,0,
        116,785,1,0,0,0,118,787,1,0,0,0,120,789,1,0,0,0,122,793,1,0,0,0,
        124,796,1,0,0,0,126,799,1,0,0,0,128,809,1,0,0,0,130,814,1,0,0,0,
        132,826,1,0,0,0,134,828,1,0,0,0,136,830,1,0,0,0,138,904,1,0,0,0,
        140,906,1,0,0,0,142,920,1,0,0,0,144,922,1,0,0,0,146,927,1,0,0,0,
        148,938,1,0,0,0,150,945,1,0,0,0,152,956,1,0,0,0,154,988,1,0,0,0,
        156,1000,1,0,0,0,158,1002,1,0,0,0,160,1021,1,0,0,0,162,1023,1,0,
        0,0,164,166,3,2,1,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,
        0,0,167,168,1,0,0,0,168,1,1,0,0,0,169,167,1,0,0,0,170,176,3,4,2,
        0,171,176,3,84,42,0,172,176,3,24,12,0,173,176,3,10,5,0,174,176,3,
        6,3,0,175,170,1,0,0,0,175,171,1,0,0,0,175,172,1,0,0,0,175,173,1,
        0,0,0,175,174,1,0,0,0,176,3,1,0,0,0,177,184,3,42,21,0,178,184,3,
        36,18,0,179,184,3,8,4,0,180,184,3,48,24,0,181,184,3,50,25,0,182,
        184,3,54,27,0,183,177,1,0,0,0,183,178,1,0,0,0,183,179,1,0,0,0,183,
        180,1,0,0,0,183,181,1,0,0,0,183,182,1,0,0,0,184,5,1,0,0,0,185,187,
        3,18,9,0,186,185,1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,189,
        5,1,0,0,189,190,5,67,0,0,190,191,5,2,0,0,191,192,3,56,28,0,192,193,
        5,3,0,0,193,7,1,0,0,0,194,195,5,4,0,0,195,196,5,67,0,0,196,198,5,
        5,0,0,197,199,3,42,21,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,
        1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,203,5,6,0,0,203,9,1,
        0,0,0,204,205,5,7,0,0,205,206,5,66,0,0,206,210,5,5,0,0,207,209,3,
        12,6,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,
        0,0,0,211,213,1,0,0,0,212,210,1,0,0,0,213,214,5,6,0,0,214,11,1,0,
        0,0,215,217,3,18,9,0,216,215,1,0,0,0,216,217,1,0,0,0,217,218,1,0,
        0,0,218,219,5,1,0,0,219,220,5,67,0,0,220,249,5,3,0,0,221,223,3,18,
        9,0,222,221,1,0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,226,5,8,
        0,0,225,227,5,9,0,0,226,225,1,0,0,0,226,227,1,0,0,0,227,228,1,0,
        0,0,228,229,5,67,0,0,229,230,5,83,0,0,230,231,3,56,28,0,231,232,
        5,3,0,0,232,249,1,0,0,0,233,235,3,18,9,0,234,233,1,0,0,0,234,235,
        1,0,0,0,235,236,1,0,0,0,236,237,5,10,0,0,237,238,5,67,0,0,238,240,
        5,80,0,0,239,241,3,14,7,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,
        1,0,0,0,242,245,5,81,0,0,243,244,5,11,0,0,244,246,3,56,28,0,245,
        243,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,249,5,3,0,0,248,
        216,1,0,0,0,248,222,1,0,0,0,248,234,1,0,0,0,249,13,1,0,0,0,250,255,
        3,16,8,0,251,252,5,79,0,0,252,254,3,16,8,0,253,251,1,0,0,0,254,257,
        1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,260,1,0,0,0,257,255,
        1,0,0,0,258,259,5,79,0,0,259,261,5,84,0,0,260,258,1,0,0,0,260,261,
        1,0,0,0,261,264,1,0,0,0,262,264,5,84,0,0,263,250,1,0,0,0,263,262,
        1,0,0,0,264,15,1,0,0,0,265,267,7,0,0,0,266,265,1,0,0,0,266,267,1,
        0,0,0,267,268,1,0,0,0,268,271,5,83,0,0,269,272,3,56,28,0,270,272,
        5,84,0,0,271,269,1,0,0,0,271,270,1,0,0,0,272,17,1,0,0,0,273,274,
        5,12,0,0,274,19,1,0,0,0,275,276,5,13,0,0,276,21,1,0,0,0,277,279,
        5,7,0,0,278,280,5,66,0,0,279,278,1,0,0,0,279,280,1,0,0,0,280,23,
        1,0,0,0,281,283,3,26,13,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,
        1,0,0,0,284,285,1,0,0,0,285,25,1,0,0,0,286,288,5,76,0,0,287,289,
        5,74,0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,
        5,77,0,0,291,292,3,28,14,0,292,293,5,78,0,0,293,27,1,0,0,0,294,304,
        5,67,0,0,295,296,5,67,0,0,296,297,5,2,0,0,297,304,3,34,17,0,298,
        299,5,67,0,0,299,300,5,80,0,0,300,301,3,30,15,0,301,302,5,81,0,0,
        302,304,1,0,0,0,303,294,1,0,0,0,303,295,1,0,0,0,303,298,1,0,0,0,
        304,29,1,0,0,0,305,310,3,32,16,0,306,307,5,79,0,0,307,309,3,32,16,
        0,308,306,1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,
        0,311,31,1,0,0,0,312,310,1,0,0,0,313,316,5,67,0,0,314,315,5,2,0,
        0,315,317,3,34,17,0,316,314,1,0,0,0,316,317,1,0,0,0,317,33,1,0,0,
        0,318,319,7,1,0,0,319,35,1,0,0,0,320,322,3,18,9,0,321,320,1,0,0,
        0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,14,0,0,324,325,5,67,
        0,0,325,329,5,5,0,0,326,328,3,38,19,0,327,326,1,0,0,0,328,331,1,
        0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,332,1,0,0,0,331,329,1,
        0,0,0,332,333,5,6,0,0,333,37,1,0,0,0,334,336,3,18,9,0,335,334,1,
        0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,5,67,0,0,338,339,5,
        83,0,0,339,341,3,56,28,0,340,342,5,79,0,0,341,340,1,0,0,0,341,342,
        1,0,0,0,342,39,1,0,0,0,343,344,5,67,0,0,344,348,5,5,0,0,345,347,
        3,148,74,0,346,345,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,
        1,0,0,0,349,351,1,0,0,0,350,348,1,0,0,0,351,352,5,6,0,0,352,41,1,
        0,0,0,353,355,3,18,9,0,354,353,1,0,0,0,354,355,1,0,0,0,355,357,1,
        0,0,0,356,358,3,20,10,0,357,356,1,0,0,0,357,358,1,0,0,0,358,360,
        1,0,0,0,359,361,3,22,11,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,
        1,0,0,0,362,363,5,10,0,0,363,370,5,67,0,0,364,371,5,15,0,0,365,367,
        5,80,0,0,366,368,3,44,22,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,
        1,0,0,0,369,371,5,81,0,0,370,364,1,0,0,0,370,365,1,0,0,0,371,373,
        1,0,0,0,372,374,5,11,0,0,373,372,1,0,0,0,373,374,1,0,0,0,374,376,
        1,0,0,0,375,377,3,56,28,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,
        1,0,0,0,378,379,3,64,32,0,379,43,1,0,0,0,380,385,3,46,23,0,381,382,
        5,79,0,0,382,384,3,46,23,0,383,381,1,0,0,0,384,387,1,0,0,0,385,383,
        1,0,0,0,385,386,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,388,390,
        5,79,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,45,1,0,0,0,391,393,
        5,9,0,0,392,391,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,
        5,67,0,0,395,396,5,83,0,0,396,397,3,56,28,0,397,47,1,0,0,0,398,400,
        3,18,9,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,402,
        5,16,0,0,402,403,5,67,0,0,403,404,5,83,0,0,404,405,3,56,28,0,405,
        406,5,2,0,0,406,407,3,100,50,0,407,408,5,3,0,0,408,49,1,0,0,0,409,
        411,3,18,9,0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,
        413,5,17,0,0,413,428,5,67,0,0,414,415,5,83,0,0,415,416,3,56,28,0,
        416,417,5,2,0,0,417,418,3,100,50,0,418,419,5,3,0,0,419,429,1,0,0,
        0,420,424,5,5,0,0,421,423,3,52,26,0,422,421,1,0,0,0,423,426,1,0,
        0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,424,1,0,
        0,0,427,429,5,6,0,0,428,414,1,0,0,0,428,420,1,0,0,0,429,51,1,0,0,
        0,430,432,3,18,9,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,
        0,433,434,5,67,0,0,434,435,5,83,0,0,435,437,3,56,28,0,436,438,5,
        79,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,53,1,0,0,0,439,441,3,
        18,9,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,443,5,
        13,0,0,443,444,5,67,0,0,444,445,5,83,0,0,445,446,3,56,28,0,446,447,
        5,2,0,0,447,448,3,100,50,0,448,449,5,3,0,0,449,55,1,0,0,0,450,453,
        3,60,30,0,451,453,3,58,29,0,452,450,1,0,0,0,452,451,1,0,0,0,453,
        57,1,0,0,0,454,455,5,18,0,0,455,457,7,2,0,0,456,458,3,56,28,0,457,
        456,1,0,0,0,457,458,1,0,0,0,458,59,1,0,0,0,459,509,5,19,0,0,460,
        509,5,20,0,0,461,509,5,21,0,0,462,509,5,22,0,0,463,509,5,15,0,0,
        464,476,3,62,31,0,465,466,5,23,0,0,466,471,3,56,28,0,467,468,5,79,
        0,0,468,470,3,56,28,0,469,467,1,0,0,0,470,473,1,0,0,0,471,469,1,
        0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,5,
        75,0,0,475,477,1,0,0,0,476,465,1,0,0,0,476,477,1,0,0,0,477,509,1,
        0,0,0,478,490,5,67,0,0,479,480,5,23,0,0,480,485,3,56,28,0,481,482,
        5,79,0,0,482,484,3,56,28,0,483,481,1,0,0,0,484,487,1,0,0,0,485,483,
        1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,485,1,0,0,0,488,489,
        5,75,0,0,489,491,1,0,0,0,490,479,1,0,0,0,490,491,1,0,0,0,491,509,
        1,0,0,0,492,493,5,24,0,0,493,509,3,56,28,0,494,496,3,62,31,0,495,
        494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,498,5,77,0,0,498,
        499,3,56,28,0,499,500,5,3,0,0,500,501,5,68,0,0,501,502,5,78,0,0,
        502,509,1,0,0,0,503,504,5,77,0,0,504,505,3,56,28,0,505,506,5,78,
        0,0,506,509,1,0,0,0,507,509,5,67,0,0,508,459,1,0,0,0,508,460,1,0,
        0,0,508,461,1,0,0,0,508,462,1,0,0,0,508,463,1,0,0,0,508,464,1,0,
        0,0,508,478,1,0,0,0,508,492,1,0,0,0,508,495,1,0,0,0,508,503,1,0,
        0,0,508,507,1,0,0,0,509,61,1,0,0,0,510,511,5,67,0,0,511,524,5,73,
        0,0,512,514,5,73,0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,515,1,0,
        0,0,515,520,5,67,0,0,516,517,5,73,0,0,517,519,5,67,0,0,518,516,1,
        0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,524,1,
        0,0,0,522,520,1,0,0,0,523,510,1,0,0,0,523,513,1,0,0,0,524,63,1,0,
        0,0,525,529,5,5,0,0,526,528,3,68,34,0,527,526,1,0,0,0,528,531,1,
        0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,533,1,0,0,0,531,529,1,
        0,0,0,532,534,3,96,48,0,533,532,1,0,0,0,533,534,1,0,0,0,534,535,
        1,0,0,0,535,536,5,6,0,0,536,65,1,0,0,0,537,538,5,13,0,0,538,539,
        3,64,32,0,539,67,1,0,0,0,540,567,3,70,35,0,541,567,3,40,20,0,542,
        567,3,84,42,0,543,567,3,88,44,0,544,567,3,76,38,0,545,567,3,90,45,
        0,546,567,3,92,46,0,547,567,3,94,47,0,548,567,3,80,40,0,549,567,
        3,96,48,0,550,567,3,98,49,0,551,552,5,25,0,0,552,567,5,3,0,0,553,
        554,5,26,0,0,554,567,5,3,0,0,555,567,3,78,39,0,556,561,3,138,69,
        0,557,558,5,27,0,0,558,560,3,138,69,0,559,557,1,0,0,0,560,563,1,
        0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,564,1,0,0,0,563,561,1,
        0,0,0,564,565,5,3,0,0,565,567,1,0,0,0,566,540,1,0,0,0,566,541,1,
        0,0,0,566,542,1,0,0,0,566,543,1,0,0,0,566,544,1,0,0,0,566,545,1,
        0,0,0,566,546,1,0,0,0,566,547,1,0,0,0,566,548,1,0,0,0,566,549,1,
        0,0,0,566,550,1,0,0,0,566,551,1,0,0,0,566,553,1,0,0,0,566,555,1,
        0,0,0,566,556,1,0,0,0,567,69,1,0,0,0,568,569,5,28,0,0,569,570,3,
        72,36,0,570,571,5,2,0,0,571,572,3,100,50,0,572,573,5,3,0,0,573,593,
        1,0,0,0,574,576,5,28,0,0,575,577,5,9,0,0,576,575,1,0,0,0,576,577,
        1,0,0,0,577,578,1,0,0,0,578,579,5,67,0,0,579,582,5,83,0,0,580,583,
        3,56,28,0,581,583,5,67,0,0,582,580,1,0,0,0,582,581,1,0,0,0,583,584,
        1,0,0,0,584,585,5,2,0,0,585,586,3,82,41,0,586,587,5,3,0,0,587,593,
        1,0,0,0,588,589,5,28,0,0,589,590,3,72,36,0,590,591,3,86,43,0,591,
        593,1,0,0,0,592,568,1,0,0,0,592,574,1,0,0,0,592,588,1,0,0,0,593,
        71,1,0,0,0,594,596,5,29,0,0,595,597,5,9,0,0,596,595,1,0,0,0,596,
        597,1,0,0,0,597,598,1,0,0,0,598,601,5,67,0,0,599,600,5,83,0,0,600,
        602,3,56,28,0,601,599,1,0,0,0,601,602,1,0,0,0,602,615,1,0,0,0,603,
        604,5,9,0,0,604,607,5,67,0,0,605,606,7,3,0,0,606,608,3,56,28,0,607,
        605,1,0,0,0,607,608,1,0,0,0,608,615,1,0,0,0,609,612,5,67,0,0,610,
        611,5,83,0,0,611,613,3,56,28,0,612,610,1,0,0,0,612,613,1,0,0,0,613,
        615,1,0,0,0,614,594,1,0,0,0,614,603,1,0,0,0,614,609,1,0,0,0,615,
        73,1,0,0,0,616,617,7,4,0,0,617,75,1,0,0,0,618,619,3,100,50,0,619,
        620,3,74,37,0,620,621,3,100,50,0,621,622,5,3,0,0,622,77,1,0,0,0,
        623,624,5,38,0,0,624,625,3,100,50,0,625,627,5,5,0,0,626,628,3,150,
        75,0,627,626,1,0,0,0,628,629,1,0,0,0,629,627,1,0,0,0,629,630,1,0,
        0,0,630,631,1,0,0,0,631,632,5,6,0,0,632,79,1,0,0,0,633,634,5,39,
        0,0,634,635,3,100,50,0,635,636,3,64,32,0,636,81,1,0,0,0,637,641,
        3,86,43,0,638,641,3,64,32,0,639,641,3,100,50,0,640,637,1,0,0,0,640,
        638,1,0,0,0,640,639,1,0,0,0,641,83,1,0,0,0,642,644,3,18,9,0,643,
        642,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,647,5,8,0,0,646,
        648,5,9,0,0,647,646,1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,649,
        650,5,67,0,0,650,653,5,83,0,0,651,654,3,56,28,0,652,654,5,67,0,0,
        653,651,1,0,0,0,653,652,1,0,0,0,654,655,1,0,0,0,655,656,5,2,0,0,
        656,657,3,82,41,0,657,658,5,3,0,0,658,85,1,0,0,0,659,667,5,5,0,0,
        660,661,5,67,0,0,661,662,5,83,0,0,662,663,3,100,50,0,663,664,5,79,
        0,0,664,666,1,0,0,0,665,660,1,0,0,0,666,669,1,0,0,0,667,665,1,0,
        0,0,667,668,1,0,0,0,668,670,1,0,0,0,669,667,1,0,0,0,670,671,5,6,
        0,0,671,672,5,3,0,0,672,673,3,100,50,0,673,87,1,0,0,0,674,675,3,
        100,50,0,675,676,5,2,0,0,676,677,3,100,50,0,677,678,5,3,0,0,678,
        89,1,0,0,0,679,680,5,40,0,0,680,681,5,67,0,0,681,682,5,41,0,0,682,
        683,3,100,50,0,683,684,3,64,32,0,684,91,1,0,0,0,685,686,5,42,0,0,
        686,687,3,100,50,0,687,690,3,64,32,0,688,689,5,43,0,0,689,691,3,
        64,32,0,690,688,1,0,0,0,690,691,1,0,0,0,691,93,1,0,0,0,692,693,3,
        100,50,0,693,694,5,3,0,0,694,95,1,0,0,0,695,697,5,44,0,0,696,698,
        3,100,50,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,702,
        5,3,0,0,700,702,5,67,0,0,701,695,1,0,0,0,701,700,1,0,0,0,702,97,
        1,0,0,0,703,704,5,45,0,0,704,705,3,64,32,0,705,99,1,0,0,0,706,707,
        6,50,-1,0,707,708,3,116,58,0,708,709,3,100,50,16,709,721,1,0,0,0,
        710,721,3,130,65,0,711,721,3,124,62,0,712,721,3,120,60,0,713,721,
        3,114,57,0,714,715,3,118,59,0,715,716,3,100,50,11,716,721,1,0,0,
        0,717,721,3,128,64,0,718,721,3,126,63,0,719,721,3,134,67,0,720,706,
        1,0,0,0,720,710,1,0,0,0,720,711,1,0,0,0,720,712,1,0,0,0,720,713,
        1,0,0,0,720,714,1,0,0,0,720,717,1,0,0,0,720,718,1,0,0,0,720,719,
        1,0,0,0,721,748,1,0,0,0,722,723,10,8,0,0,723,724,3,110,55,0,724,
        725,3,100,50,9,725,747,1,0,0,0,726,727,10,7,0,0,727,728,3,112,56,
        0,728,729,3,100,50,8,729,747,1,0,0,0,730,731,10,6,0,0,731,732,3,
        108,54,0,732,733,3,100,50,7,733,747,1,0,0,0,734,735,10,5,0,0,735,
        736,3,106,53,0,736,737,3,100,50,6,737,747,1,0,0,0,738,739,10,4,0,
        0,739,740,3,104,52,0,740,741,3,100,50,5,741,747,1,0,0,0,742,743,
        10,9,0,0,743,747,3,132,66,0,744,745,10,3,0,0,745,747,3,102,51,0,
        746,722,1,0,0,0,746,726,1,0,0,0,746,730,1,0,0,0,746,734,1,0,0,0,
        746,738,1,0,0,0,746,742,1,0,0,0,746,744,1,0,0,0,747,750,1,0,0,0,
        748,746,1,0,0,0,748,749,1,0,0,0,749,101,1,0,0,0,750,748,1,0,0,0,
        751,752,5,46,0,0,752,757,3,56,28,0,753,754,5,46,0,0,754,756,3,56,
        28,0,755,753,1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,
        0,0,758,103,1,0,0,0,759,757,1,0,0,0,760,761,7,4,0,0,761,105,1,0,
        0,0,762,763,5,47,0,0,763,107,1,0,0,0,764,765,7,5,0,0,765,109,1,0,
        0,0,766,767,7,6,0,0,767,111,1,0,0,0,768,769,7,7,0,0,769,113,1,0,
        0,0,770,771,5,67,0,0,771,772,5,5,0,0,772,777,3,148,74,0,773,774,
        5,79,0,0,774,776,3,148,74,0,775,773,1,0,0,0,776,779,1,0,0,0,777,
        775,1,0,0,0,777,778,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,780,
        782,5,79,0,0,781,780,1,0,0,0,781,782,1,0,0,0,782,783,1,0,0,0,783,
        784,5,6,0,0,784,115,1,0,0,0,785,786,5,9,0,0,786,117,1,0,0,0,787,
        788,7,8,0,0,788,119,1,0,0,0,789,790,5,80,0,0,790,791,3,100,50,0,
        791,792,5,81,0,0,792,121,1,0,0,0,793,794,5,24,0,0,794,795,3,100,
        50,0,795,123,1,0,0,0,796,797,5,18,0,0,797,798,3,100,50,0,798,125,
        1,0,0,0,799,803,5,5,0,0,800,802,3,68,34,0,801,800,1,0,0,0,802,805,
        1,0,0,0,803,801,1,0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,803,
        1,0,0,0,806,807,3,100,50,0,807,808,5,6,0,0,808,127,1,0,0,0,809,810,
        5,24,0,0,810,811,3,100,50,0,811,129,1,0,0,0,812,815,3,156,78,0,813,
        815,5,67,0,0,814,812,1,0,0,0,814,813,1,0,0,0,815,131,1,0,0,0,816,
        817,5,77,0,0,817,818,3,130,65,0,818,819,5,78,0,0,819,827,1,0,0,0,
        820,821,5,27,0,0,821,823,3,130,65,0,822,820,1,0,0,0,823,824,1,0,
        0,0,824,822,1,0,0,0,824,825,1,0,0,0,825,827,1,0,0,0,826,816,1,0,
        0,0,826,822,1,0,0,0,827,133,1,0,0,0,828,829,3,136,68,0,829,135,1,
        0,0,0,830,855,3,130,65,0,831,838,5,15,0,0,832,834,5,80,0,0,833,835,
        3,154,77,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,838,
        5,81,0,0,837,831,1,0,0,0,837,832,1,0,0,0,838,856,1,0,0,0,839,840,
        5,27,0,0,840,842,5,67,0,0,841,839,1,0,0,0,842,843,1,0,0,0,843,841,
        1,0,0,0,843,844,1,0,0,0,844,856,1,0,0,0,845,846,5,27,0,0,846,853,
        5,67,0,0,847,849,5,80,0,0,848,850,3,154,77,0,849,848,1,0,0,0,849,
        850,1,0,0,0,850,851,1,0,0,0,851,854,5,81,0,0,852,854,5,15,0,0,853,
        847,1,0,0,0,853,852,1,0,0,0,854,856,1,0,0,0,855,837,1,0,0,0,855,
        841,1,0,0,0,855,845,1,0,0,0,856,857,1,0,0,0,857,855,1,0,0,0,857,
        858,1,0,0,0,858,137,1,0,0,0,859,860,5,73,0,0,860,861,3,62,31,0,861,
        862,5,67,0,0,862,864,5,73,0,0,863,865,3,146,73,0,864,863,1,0,0,0,
        864,865,1,0,0,0,865,872,1,0,0,0,866,873,5,15,0,0,867,869,5,80,0,
        0,868,870,3,154,77,0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,
        0,0,871,873,5,81,0,0,872,866,1,0,0,0,872,867,1,0,0,0,873,905,1,0,
        0,0,874,879,5,67,0,0,875,876,5,27,0,0,876,878,5,67,0,0,877,875,1,
        0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,879,880,1,0,0,0,880,886,1,
        0,0,0,881,879,1,0,0,0,882,883,5,73,0,0,883,885,5,67,0,0,884,882,
        1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,902,
        1,0,0,0,888,886,1,0,0,0,889,903,5,15,0,0,890,898,5,80,0,0,891,892,
        5,67,0,0,892,893,5,80,0,0,893,894,5,66,0,0,894,897,5,81,0,0,895,
        897,3,154,77,0,896,891,1,0,0,0,896,895,1,0,0,0,897,900,1,0,0,0,898,
        896,1,0,0,0,898,899,1,0,0,0,899,901,1,0,0,0,900,898,1,0,0,0,901,
        903,5,81,0,0,902,889,1,0,0,0,902,890,1,0,0,0,903,905,1,0,0,0,904,
        859,1,0,0,0,904,874,1,0,0,0,905,139,1,0,0,0,906,907,5,67,0,0,907,
        908,5,74,0,0,908,909,3,142,71,0,909,141,1,0,0,0,910,912,5,77,0,0,
        911,913,3,144,72,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,
        0,914,921,5,78,0,0,915,917,5,80,0,0,916,918,3,144,72,0,917,916,1,
        0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,919,921,5,81,0,0,920,910,1,
        0,0,0,920,915,1,0,0,0,921,143,1,0,0,0,922,925,3,100,50,0,923,924,
        5,3,0,0,924,926,3,100,50,0,925,923,1,0,0,0,925,926,1,0,0,0,926,145,
        1,0,0,0,927,928,5,23,0,0,928,933,3,56,28,0,929,930,5,79,0,0,930,
        932,3,56,28,0,931,929,1,0,0,0,932,935,1,0,0,0,933,931,1,0,0,0,933,
        934,1,0,0,0,934,936,1,0,0,0,935,933,1,0,0,0,936,937,5,75,0,0,937,
        147,1,0,0,0,938,941,5,67,0,0,939,940,5,83,0,0,940,942,3,100,50,0,
        941,939,1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,944,5,79,0,0,
        944,149,1,0,0,0,945,950,3,152,76,0,946,947,5,59,0,0,947,949,3,152,
        76,0,948,946,1,0,0,0,949,952,1,0,0,0,950,948,1,0,0,0,950,951,1,0,
        0,0,951,953,1,0,0,0,952,950,1,0,0,0,953,954,5,60,0,0,954,955,3,64,
        32,0,955,151,1,0,0,0,956,957,7,9,0,0,957,153,1,0,0,0,958,961,3,138,
        69,0,959,961,3,100,50,0,960,958,1,0,0,0,960,959,1,0,0,0,961,969,
        1,0,0,0,962,965,5,79,0,0,963,966,3,138,69,0,964,966,3,100,50,0,965,
        963,1,0,0,0,965,964,1,0,0,0,966,968,1,0,0,0,967,962,1,0,0,0,968,
        971,1,0,0,0,969,967,1,0,0,0,969,970,1,0,0,0,970,973,1,0,0,0,971,
        969,1,0,0,0,972,974,5,79,0,0,973,972,1,0,0,0,973,974,1,0,0,0,974,
        989,1,0,0,0,975,976,5,73,0,0,976,978,5,67,0,0,977,975,1,0,0,0,978,
        979,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,986,1,0,0,0,981,
        987,5,15,0,0,982,983,5,80,0,0,983,984,3,154,77,0,984,985,5,81,0,
        0,985,987,1,0,0,0,986,981,1,0,0,0,986,982,1,0,0,0,987,989,1,0,0,
        0,988,960,1,0,0,0,988,977,1,0,0,0,989,155,1,0,0,0,990,1001,3,160,
        80,0,991,1001,5,71,0,0,992,1001,5,68,0,0,993,1001,5,69,0,0,994,1001,
        5,70,0,0,995,1001,5,65,0,0,996,1001,5,66,0,0,997,1001,3,158,79,0,
        998,1001,5,72,0,0,999,1001,5,64,0,0,1000,990,1,0,0,0,1000,991,1,
        0,0,0,1000,992,1,0,0,0,1000,993,1,0,0,0,1000,994,1,0,0,0,1000,995,
        1,0,0,0,1000,996,1,0,0,0,1000,997,1,0,0,0,1000,998,1,0,0,0,1000,
        999,1,0,0,0,1001,157,1,0,0,0,1002,1003,7,10,0,0,1003,159,1,0,0,0,
        1004,1005,5,77,0,0,1005,1010,3,100,50,0,1006,1007,5,79,0,0,1007,
        1009,3,100,50,0,1008,1006,1,0,0,0,1009,1012,1,0,0,0,1010,1008,1,
        0,0,0,1010,1011,1,0,0,0,1011,1013,1,0,0,0,1012,1010,1,0,0,0,1013,
        1014,5,78,0,0,1014,1022,1,0,0,0,1015,1016,5,77,0,0,1016,1017,3,100,
        50,0,1017,1018,5,3,0,0,1018,1019,3,100,50,0,1019,1020,5,78,0,0,1020,
        1022,1,0,0,0,1021,1004,1,0,0,0,1021,1015,1,0,0,0,1022,161,1,0,0,
        0,1023,1027,5,61,0,0,1024,1026,9,0,0,0,1025,1024,1,0,0,0,1026,1029,
        1,0,0,0,1027,1028,1,0,0,0,1027,1025,1,0,0,0,1028,1030,1,0,0,0,1029,
        1027,1,0,0,0,1030,1031,5,61,0,0,1031,163,1,0,0,0,122,167,175,183,
        186,200,210,216,222,226,234,240,245,248,255,260,263,266,271,279,
        284,288,303,310,316,321,329,335,341,348,354,357,360,367,370,373,
        376,385,389,392,399,410,424,428,431,437,440,452,457,471,476,485,
        490,495,508,513,520,523,529,533,561,566,576,582,592,596,601,607,
        612,614,629,640,643,647,653,667,690,697,701,720,746,748,757,777,
        781,803,814,824,826,834,837,843,849,853,855,857,864,869,872,879,
        886,896,898,902,904,912,917,920,925,933,941,950,960,965,969,973,
        979,986,988,1000,1010,1021,1027
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'impl'", "'{'", 
                     "'}'", "'extern'", "'static'", "'mut'", "'fn'", "'->'", 
                     "'pub'", "'unsafe'", "'struct'", "'()'", "'const'", 
                     "'union'", "'*'", "'i32'", "'String'", "'bool'", "'u8'", 
                     "'<'", "'&'", "'break'", "'continue'", "'.'", "'let'", 
                     "'ref'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'match'", "'while'", "'for'", "'in'", 
                     "'if'", "'else'", "'return'", "'loop'", "'as'", "'..'", 
                     "'=='", "'!='", "'||'", "'&&'", "'>>'", "'>='", "'<='", 
                     "'/'", "'%'", "'+'", "'-'", "'|'", "'=>'", "'\"'", 
                     "'true'", "'false'", "'None'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'::'", "'!'", "'>'", "'#'", 
                     "'['", "']'", "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "NONE", 
                      "Binary", "STRING_LITERAL", "Identifier", "Number", 
                      "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_topLevelDef = 2
    RULE_typeAlias = 3
    RULE_interfaceDef = 4
    RULE_externBlock = 5
    RULE_externItem = 6
    RULE_externParams = 7
    RULE_externParam = 8
    RULE_visibility = 9
    RULE_unsafeModifier = 10
    RULE_externAbi = 11
    RULE_attributes = 12
    RULE_innerAttribute = 13
    RULE_attribute = 14
    RULE_attrArgs = 15
    RULE_attrArg = 16
    RULE_attrValue = 17
    RULE_structDef = 18
    RULE_structField = 19
    RULE_structLiteral = 20
    RULE_functionDef = 21
    RULE_paramList = 22
    RULE_param = 23
    RULE_constDef = 24
    RULE_unionDef = 25
    RULE_unionField = 26
    RULE_unsafeDef = 27
    RULE_type = 28
    RULE_pointerType = 29
    RULE_basicType = 30
    RULE_typePath = 31
    RULE_block = 32
    RULE_unsafeBlock = 33
    RULE_statement = 34
    RULE_letStmt = 35
    RULE_varDef = 36
    RULE_compoundOp = 37
    RULE_compoundAssignment = 38
    RULE_matchStmt = 39
    RULE_whileStmt = 40
    RULE_initializer = 41
    RULE_staticVarDecl = 42
    RULE_initBlock = 43
    RULE_assignStmt = 44
    RULE_forStmt = 45
    RULE_ifStmt = 46
    RULE_exprStmt = 47
    RULE_returnStmt = 48
    RULE_loopStmt = 49
    RULE_expression = 50
    RULE_castExpressionPostFix = 51
    RULE_compoundOps = 52
    RULE_patternSymbol = 53
    RULE_conditionalOps = 54
    RULE_booleanOps = 55
    RULE_binaryOps = 56
    RULE_structFieldDec = 57
    RULE_mutableExpression = 58
    RULE_unaryOpes = 59
    RULE_parenExpression = 60
    RULE_referenceExpression = 61
    RULE_dereferenceExpression = 62
    RULE_expressionBlock = 63
    RULE_borrowExpression = 64
    RULE_primaryExpression = 65
    RULE_fieldAccessPostFix = 66
    RULE_callExpression = 67
    RULE_postfixExpression = 68
    RULE_qualifiedFunctionCall = 69
    RULE_macroCall = 70
    RULE_macroArgs = 71
    RULE_macroInner = 72
    RULE_genericArgs = 73
    RULE_structLiteralField = 74
    RULE_matchArm = 75
    RULE_matchPattern = 76
    RULE_argumentList = 77
    RULE_literal = 78
    RULE_booleanLiteral = 79
    RULE_arrayLiteral = 80
    RULE_stringLiteral = 81

    ruleNames =  [ "program", "topLevelItem", "topLevelDef", "typeAlias", 
                   "interfaceDef", "externBlock", "externItem", "externParams", 
                   "externParam", "visibility", "unsafeModifier", "externAbi", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "structLiteral", 
                   "functionDef", "paramList", "param", "constDef", "unionDef", 
                   "unionField", "unsafeDef", "type", "pointerType", "basicType", 
                   "typePath", "block", "unsafeBlock", "statement", "letStmt", 
                   "varDef", "compoundOp", "compoundAssignment", "matchStmt", 
                   "whileStmt", "initializer", "staticVarDecl", "initBlock", 
                   "assignStmt", "forStmt", "ifStmt", "exprStmt", "returnStmt", 
                   "loopStmt", "expression", "castExpressionPostFix", "compoundOps", 
                   "patternSymbol", "conditionalOps", "booleanOps", "binaryOps", 
                   "structFieldDec", "mutableExpression", "unaryOpes", "parenExpression", 
                   "referenceExpression", "dereferenceExpression", "expressionBlock", 
                   "borrowExpression", "primaryExpression", "fieldAccessPostFix", 
                   "callExpression", "postfixExpression", "qualifiedFunctionCall", 
                   "macroCall", "macroArgs", "macroInner", "genericArgs", 
                   "structLiteralField", "matchArm", "matchPattern", "argumentList", 
                   "literal", "booleanLiteral", "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    TRUE=62
    FALSE=63
    NONE=64
    Binary=65
    STRING_LITERAL=66
    Identifier=67
    Number=68
    SignedNumber=69
    BYTE_STRING_LITERAL=70
    HexNumber=71
    CHAR_LITERAL=72
    DOUBLE_COLON=73
    EXCL=74
    GT=75
    POUND=76
    LBRACK=77
    RBRACK=78
    COMMA=79
    LPAREN=80
    RPAREN=81
    UNDERSCORE=82
    COLON=83
    ELLIPSIS=84
    WS=85
    COMMENT=86

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 226706) != 0) or _la==76:
                self.state = 164
                self.topLevelItem()
                self.state = 169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 170
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 171
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 172
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 173
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 174
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelDef" ):
                return visitor.visitTopLevelDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_topLevelDef)
        try:
            self.state = 183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 177
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 178
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 179
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 180
                self.constDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 181
                self.unionDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 182
                self.unsafeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 185
                self.visibility()


            self.state = 188
            self.match(RustParser.T__0)
            self.state = 189
            self.match(RustParser.Identifier)
            self.state = 190
            self.match(RustParser.T__1)
            self.state = 191
            self.type_()
            self.state = 192
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDef" ):
                return visitor.visitInterfaceDef(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.match(RustParser.T__3)
            self.state = 195
            self.match(RustParser.Identifier)
            self.state = 196
            self.match(RustParser.T__4)
            self.state = 198 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 197
                self.functionDef()
                self.state = 200 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 13440) != 0)):
                    break

            self.state = 202
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(RustParser.T__6)
            self.state = 205
            self.match(RustParser.STRING_LITERAL)
            self.state = 206
            self.match(RustParser.T__4)
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5378) != 0):
                self.state = 207
                self.externItem()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 213
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 215
                    self.visibility()


                self.state = 218
                self.match(RustParser.T__0)
                self.state = 219
                self.match(RustParser.Identifier)
                self.state = 220
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 221
                    self.visibility()


                self.state = 224
                self.match(RustParser.T__7)
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 225
                    self.match(RustParser.T__8)


                self.state = 228
                self.match(RustParser.Identifier)
                self.state = 229
                self.match(RustParser.COLON)
                self.state = 230
                self.type_()
                self.state = 231
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 233
                    self.visibility()


                self.state = 236
                self.match(RustParser.T__9)
                self.state = 237
                self.match(RustParser.Identifier)
                self.state = 238
                self.match(RustParser.LPAREN)
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 229377) != 0):
                    self.state = 239
                    self.externParams()


                self.state = 242
                self.match(RustParser.RPAREN)
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 243
                    self.match(RustParser.T__10)
                    self.state = 244
                    self.type_()


                self.state = 247
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 82, 83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 250
                self.externParam()
                self.state = 255
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 251
                        self.match(RustParser.COMMA)
                        self.state = 252
                        self.externParam() 
                    self.state = 257
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 258
                    self.match(RustParser.COMMA)
                    self.state = 259
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 262
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67 or _la==82:
                self.state = 265
                _la = self._input.LA(1)
                if not(_la==67 or _la==82):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 268
            self.match(RustParser.COLON)
            self.state = 271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 18, 19, 20, 21, 22, 24, 67, 73, 77]:
                self.state = 269
                self.type_()
                pass
            elif token in [84]:
                self.state = 270
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(RustParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(RustParser.T__6)
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 278
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 281
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 284 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(RustParser.POUND)

            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 287
                self.match(RustParser.EXCL)


            self.state = 290
            self.match(RustParser.LBRACK)
            self.state = 291
            self.attribute()
            self.state = 292
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_attribute)
        try:
            self.state = 303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 294
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 295
                self.match(RustParser.Identifier)
                self.state = 296
                self.match(RustParser.T__1)
                self.state = 297
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 298
                self.match(RustParser.Identifier)
                self.state = 299
                self.match(RustParser.LPAREN)
                self.state = 300
                self.attrArgs()
                self.state = 301
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.attrArg()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 306
                self.match(RustParser.COMMA)
                self.state = 307
                self.attrArg()
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(RustParser.Identifier)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 314
                self.match(RustParser.T__1)
                self.state = 315
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 320
                self.visibility()


            self.state = 323
            self.match(RustParser.T__13)
            self.state = 324
            self.match(RustParser.Identifier)
            self.state = 325
            self.match(RustParser.T__4)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12 or _la==67:
                self.state = 326
                self.structField()
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 332
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 334
                self.visibility()


            self.state = 337
            self.match(RustParser.Identifier)
            self.state = 338
            self.match(RustParser.COLON)
            self.state = 339
            self.type_()
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 340
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteral" ):
                return visitor.visitStructLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(RustParser.Identifier)
            self.state = 344
            self.match(RustParser.T__4)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==67:
                self.state = 345
                self.structLiteralField()
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 351
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 353
                self.visibility()


            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 356
                self.unsafeModifier()


            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 359
                self.externAbi()


            self.state = 362
            self.match(RustParser.T__9)
            self.state = 363
            self.match(RustParser.Identifier)
            self.state = 370
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 364
                self.match(RustParser.T__14)
                pass
            elif token in [80]:
                self.state = 365
                self.match(RustParser.LPAREN)
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9 or _la==67:
                    self.state = 366
                    self.paramList()


                self.state = 369
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 372
                self.match(RustParser.T__10)


            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & 4904419994206470905) != 0):
                self.state = 375
                self.type_()


            self.state = 378
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.param()
            self.state = 385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 381
                    self.match(RustParser.COMMA)
                    self.state = 382
                    self.param() 
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 388
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 391
                self.match(RustParser.T__8)


            self.state = 394
            self.match(RustParser.Identifier)
            self.state = 395
            self.match(RustParser.COLON)
            self.state = 396
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 398
                self.visibility()


            self.state = 401
            self.match(RustParser.T__15)
            self.state = 402
            self.match(RustParser.Identifier)
            self.state = 403
            self.match(RustParser.COLON)
            self.state = 404
            self.type_()
            self.state = 405
            self.match(RustParser.T__1)
            self.state = 406
            self.expression(0)
            self.state = 407
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 409
                self.visibility()


            self.state = 412
            self.match(RustParser.T__16)
            self.state = 413
            self.match(RustParser.Identifier)
            self.state = 428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.state = 414
                self.match(RustParser.COLON)
                self.state = 415
                self.type_()
                self.state = 416
                self.match(RustParser.T__1)
                self.state = 417
                self.expression(0)
                self.state = 418
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 420
                self.match(RustParser.T__4)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==12 or _la==67:
                    self.state = 421
                    self.unionField()
                    self.state = 426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 427
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 430
                self.visibility()


            self.state = 433
            self.match(RustParser.Identifier)
            self.state = 434
            self.match(RustParser.COLON)
            self.state = 435
            self.type_()
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 436
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 439
                self.visibility()


            self.state = 442
            self.match(RustParser.T__12)
            self.state = 443
            self.match(RustParser.Identifier)
            self.state = 444
            self.match(RustParser.COLON)
            self.state = 445
            self.type_()
            self.state = 446
            self.match(RustParser.T__1)
            self.state = 447
            self.expression(0)
            self.state = 448
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_type)
        try:
            self.state = 452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 19, 20, 21, 22, 24, 67, 73, 77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 450
                self.basicType()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(RustParser.T__17)
            self.state = 455
            _la = self._input.LA(1)
            if not(_la==9 or _la==16):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 456
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.match(RustParser.T__18)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.match(RustParser.T__19)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.match(RustParser.T__20)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 462
                self.match(RustParser.T__21)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 463
                self.match(RustParser.T__14)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 464
                self.typePath()
                self.state = 476
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 465
                    self.match(RustParser.T__22)
                    self.state = 466
                    self.type_()
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==79:
                        self.state = 467
                        self.match(RustParser.COMMA)
                        self.state = 468
                        self.type_()
                        self.state = 473
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 474
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 478
                self.match(RustParser.Identifier)
                self.state = 490
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 479
                    self.match(RustParser.T__22)
                    self.state = 480
                    self.type_()
                    self.state = 485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==79:
                        self.state = 481
                        self.match(RustParser.COMMA)
                        self.state = 482
                        self.type_()
                        self.state = 487
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 488
                    self.match(RustParser.GT)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 492
                self.match(RustParser.T__23)
                self.state = 493
                self.type_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==73:
                    self.state = 494
                    self.typePath()


                self.state = 497
                self.match(RustParser.LBRACK)
                self.state = 498
                self.type_()
                self.state = 499
                self.match(RustParser.T__2)
                self.state = 500
                self.match(RustParser.Number)
                self.state = 501
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 503
                self.match(RustParser.LBRACK)
                self.state = 504
                self.type_()
                self.state = 505
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 507
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.match(RustParser.Identifier)
                self.state = 511
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 512
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 515
                self.match(RustParser.Identifier)
                self.state = 520
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 516
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 517
                        self.match(RustParser.Identifier) 
                    self.state = 522
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(RustParser.T__4)
            self.state = 529
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 526
                    self.statement() 
                self.state = 531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44 or _la==67:
                self.state = 532
                self.returnStmt()


            self.state = 535
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(RustParser.T__12)
            self.state = 538
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.structLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 542
                self.staticVarDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 543
                self.assignStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 544
                self.compoundAssignment()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 545
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 546
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 547
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 548
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 549
                self.returnStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 550
                self.loopStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 551
                self.match(RustParser.T__24)
                self.state = 552
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 553
                self.match(RustParser.T__25)
                self.state = 554
                self.match(RustParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 555
                self.matchStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 556
                self.qualifiedFunctionCall()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 557
                    self.match(RustParser.T__26)
                    self.state = 558
                    self.qualifiedFunctionCall()
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 564
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 568
                self.match(RustParser.T__27)
                self.state = 569
                self.varDef()
                self.state = 570
                self.match(RustParser.T__1)
                self.state = 571
                self.expression(0)
                self.state = 572
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.match(RustParser.T__27)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 575
                    self.match(RustParser.T__8)


                self.state = 578
                self.match(RustParser.Identifier)
                self.state = 579
                self.match(RustParser.COLON)
                self.state = 582
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 580
                    self.type_()
                    pass

                elif la_ == 2:
                    self.state = 581
                    self.match(RustParser.Identifier)
                    pass


                self.state = 584
                self.match(RustParser.T__1)
                self.state = 585
                self.initializer()
                self.state = 586
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 588
                self.match(RustParser.T__27)
                self.state = 589
                self.varDef()
                self.state = 590
                self.initBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.match(RustParser.T__28)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 595
                    self.match(RustParser.T__8)


                self.state = 598
                self.match(RustParser.Identifier)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 599
                    self.match(RustParser.COLON)
                    self.state = 600
                    self.type_()


                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 603
                self.match(RustParser.T__8)
                self.state = 604
                self.match(RustParser.Identifier)
                self.state = 607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 605
                    _la = self._input.LA(1)
                    if not(_la==2 or _la==83):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 606
                    self.type_()


                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 609
                self.match(RustParser.Identifier)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==83:
                    self.state = 610
                    self.match(RustParser.COLON)
                    self.state = 611
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 273804165120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.expression(0)
            self.state = 619
            self.compoundOp()
            self.state = 620
            self.expression(0)
            self.state = 621
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(RustParser.T__37)
            self.state = 624
            self.expression(0)
            self.state = 625
            self.match(RustParser.T__4)
            self.state = 627 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 626
                self.matchArm()
                self.state = 629 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 32771) != 0)):
                    break

            self.state = 631
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(RustParser.T__38)
            self.state = 634
            self.expression(0)
            self.state = 635
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_initializer)
        try:
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 639
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 642
                self.visibility()


            self.state = 645
            self.match(RustParser.T__7)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 646
                self.match(RustParser.T__8)


            self.state = 649
            self.match(RustParser.Identifier)
            self.state = 650
            self.match(RustParser.COLON)
            self.state = 653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 651
                self.type_()
                pass

            elif la_ == 2:
                self.state = 652
                self.match(RustParser.Identifier)
                pass


            self.state = 655
            self.match(RustParser.T__1)
            self.state = 656
            self.initializer()
            self.state = 657
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(RustParser.T__4)
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==67:
                self.state = 660
                self.match(RustParser.Identifier)
                self.state = 661
                self.match(RustParser.COLON)
                self.state = 662
                self.expression(0)
                self.state = 663
                self.match(RustParser.COMMA)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 670
            self.match(RustParser.T__5)
            self.state = 671
            self.match(RustParser.T__2)
            self.state = 672
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.expression(0)
            self.state = 675
            self.match(RustParser.T__1)
            self.state = 676
            self.expression(0)
            self.state = 677
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(RustParser.T__39)
            self.state = 680
            self.match(RustParser.Identifier)
            self.state = 681
            self.match(RustParser.T__40)
            self.state = 682
            self.expression(0)
            self.state = 683
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(RustParser.T__41)
            self.state = 686
            self.expression(0)
            self.state = 687
            self.block()
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 688
                self.match(RustParser.T__42)
                self.state = 689
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.expression(0)
            self.state = 693
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.match(RustParser.T__43)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4179340454182780384) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75263) != 0):
                    self.state = 696
                    self.expression(0)


                self.state = 699
                self.match(RustParser.T__2)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(RustParser.T__44)
            self.state = 704
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def callExpression(self):
            return self.getTypedRuleContext(RustParser.CallExpressionContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def patternSymbol(self):
            return self.getTypedRuleContext(RustParser.PatternSymbolContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 707
                self.mutableExpression()
                self.state = 708
                self.expression(16)
                pass

            elif la_ == 2:
                self.state = 710
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.state = 711
                self.dereferenceExpression()
                pass

            elif la_ == 4:
                self.state = 712
                self.parenExpression()
                pass

            elif la_ == 5:
                self.state = 713
                self.structFieldDec()
                pass

            elif la_ == 6:
                self.state = 714
                self.unaryOpes()
                self.state = 715
                self.expression(11)
                pass

            elif la_ == 7:
                self.state = 717
                self.borrowExpression()
                pass

            elif la_ == 8:
                self.state = 718
                self.expressionBlock()
                pass

            elif la_ == 9:
                self.state = 719
                self.callExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 748
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 746
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 722
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 723
                        self.booleanOps()
                        self.state = 724
                        self.expression(9)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 726
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 727
                        self.binaryOps()
                        self.state = 728
                        self.expression(8)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 730
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 731
                        self.conditionalOps()
                        self.state = 732
                        self.expression(7)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 734
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 735
                        self.patternSymbol()
                        self.state = 736
                        self.expression(6)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 738
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 739
                        self.compoundOps()
                        self.state = 740
                        self.expression(5)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 742
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 743
                        self.fieldAccessPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 744
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 745
                        self.castExpressionPostFix()
                        pass

             
                self.state = 750
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpressionPostFix" ):
                return visitor.visitCastExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(RustParser.T__45)
            self.state = 752
            self.type_()
            self.state = 757
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 753
                    self.match(RustParser.T__45)
                    self.state = 754
                    self.type_() 
                self.state = 759
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOps" ):
                return visitor.visitCompoundOps(self)
            else:
                return visitor.visitChildren(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 273804165120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_patternSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternSymbol" ):
                listener.enterPatternSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternSymbol" ):
                listener.exitPatternSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternSymbol" ):
                return visitor.visitPatternSymbol(self)
            else:
                return visitor.visitChildren(self)




    def patternSymbol(self):

        localctx = RustParser.PatternSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_patternSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(RustParser.T__46)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalOps" ):
                return visitor.visitConditionalOps(self)
            else:
                return visitor.visitChildren(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            _la = self._input.LA(1)
            if not(((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 4503600130686977) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOps" ):
                return visitor.visitBooleanOps(self)
            else:
                return visitor.visitChildren(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 31525197408370688) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOps" ):
                return visitor.visitBinaryOps(self)
            else:
                return visitor.visitChildren(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 540431955284721664) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFieldDec" ):
                return visitor.visitStructFieldDec(self)
            else:
                return visitor.visitChildren(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(RustParser.Identifier)
            self.state = 771
            self.match(RustParser.T__4)
            self.state = 772
            self.structLiteralField()
            self.state = 777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 773
                    self.match(RustParser.COMMA)
                    self.state = 774
                    self.structLiteralField() 
                self.state = 779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 780
                self.match(RustParser.COMMA)


            self.state = 783
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableExpression" ):
                return visitor.visitMutableExpression(self)
            else:
                return visitor.visitChildren(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(RustParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOpes" ):
                return visitor.visitUnaryOpes(self)
            else:
                return visitor.visitChildren(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 131075) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(RustParser.LPAREN)
            self.state = 790
            self.expression(0)
            self.state = 791
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceExpression" ):
                listener.enterReferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceExpression" ):
                listener.exitReferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceExpression" ):
                return visitor.visitReferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def referenceExpression(self):

        localctx = RustParser.ReferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_referenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(RustParser.T__23)
            self.state = 794
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(RustParser.T__17)
            self.state = 797
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(RustParser.T__4)
            self.state = 803
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 800
                    self.statement() 
                self.state = 805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

            self.state = 806
            self.expression(0)
            self.state = 807
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(RustParser.T__23)
            self.state = 810
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_primaryExpression)
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.literal()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldAccessPostFix" ):
                return visitor.visitFieldAccessPostFix(self)
            else:
                return visitor.visitChildren(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_fieldAccessPostFix)
        try:
            self.state = 826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.match(RustParser.LBRACK)
                self.state = 817
                self.primaryExpression()
                self.state = 818
                self.match(RustParser.RBRACK)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 822 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 820
                        self.match(RustParser.T__26)
                        self.state = 821
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 824 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpression" ):
                listener.enterCallExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpression" ):
                listener.exitCallExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpression" ):
                return visitor.visitCallExpression(self)
            else:
                return visitor.visitChildren(self)




    def callExpression(self):

        localctx = RustParser.CallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_callExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.postfixExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.primaryExpression()
            self.state = 855 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 855
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                    if la_ == 1:
                        self.state = 837
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [15]:
                            self.state = 831
                            self.match(RustParser.T__14)
                            pass
                        elif token in [80]:
                            self.state = 832
                            self.match(RustParser.LPAREN)
                            self.state = 834
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4179340454182780384) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                                self.state = 833
                                self.argumentList()


                            self.state = 836
                            self.match(RustParser.RPAREN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 841 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 839
                                self.match(RustParser.T__26)
                                self.state = 840
                                self.match(RustParser.Identifier)

                            else:
                                raise NoViableAltException(self)
                            self.state = 843 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 845
                        self.match(RustParser.T__26)
                        self.state = 846
                        self.match(RustParser.Identifier)
                        self.state = 853
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [80]:
                            self.state = 847
                            self.match(RustParser.LPAREN)
                            self.state = 849
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4179340454182780384) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                                self.state = 848
                                self.argumentList()


                            self.state = 851
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [15]:
                            self.state = 852
                            self.match(RustParser.T__14)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 857 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.STRING_LITERAL)
            else:
                return self.getToken(RustParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 904
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 859
                self.match(RustParser.DOUBLE_COLON)
                self.state = 860
                self.typePath()
                self.state = 861
                self.match(RustParser.Identifier)
                self.state = 862
                self.match(RustParser.DOUBLE_COLON)
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 863
                    self.genericArgs()


                self.state = 872
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 866
                    self.match(RustParser.T__14)
                    pass
                elif token in [80]:
                    self.state = 867
                    self.match(RustParser.LPAREN)
                    self.state = 869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4179340454182780384) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                        self.state = 868
                        self.argumentList()


                    self.state = 871
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(RustParser.Identifier)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 875
                    self.match(RustParser.T__26)
                    self.state = 876
                    self.match(RustParser.Identifier)
                    self.state = 881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==73:
                    self.state = 882
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 883
                    self.match(RustParser.Identifier)
                    self.state = 888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 902
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 889
                    self.match(RustParser.T__14)
                    pass
                elif token in [80]:
                    self.state = 890
                    self.match(RustParser.LPAREN)
                    self.state = 898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4179340454182780384) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75775) != 0):
                        self.state = 896
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                        if la_ == 1:
                            self.state = 891
                            self.match(RustParser.Identifier)
                            self.state = 892
                            self.match(RustParser.LPAREN)
                            self.state = 893
                            self.match(RustParser.STRING_LITERAL)
                            self.state = 894
                            self.match(RustParser.RPAREN)
                            pass

                        elif la_ == 2:
                            self.state = 895
                            self.argumentList()
                            pass


                        self.state = 900
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 901
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(RustParser.Identifier)
            self.state = 907
            self.match(RustParser.EXCL)
            self.state = 908
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self.match(RustParser.LBRACK)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4179340454182780384) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75263) != 0):
                    self.state = 911
                    self.macroInner()


                self.state = 914
                self.match(RustParser.RBRACK)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(RustParser.LPAREN)
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4179340454182780384) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 75263) != 0):
                    self.state = 916
                    self.macroInner()


                self.state = 919
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.expression(0)
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 923
                self.match(RustParser.T__2)
                self.state = 924
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(RustParser.T__22)
            self.state = 928
            self.type_()
            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 929
                self.match(RustParser.COMMA)
                self.state = 930
                self.type_()
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 936
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(RustParser.Identifier)
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 939
                self.match(RustParser.COLON)
                self.state = 940
                self.expression(0)


            self.state = 943
            self.match(RustParser.COMMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.matchPattern()
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 946
                self.match(RustParser.T__58)
                self.state = 947
                self.matchPattern()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 953
            self.match(RustParser.T__59)
            self.state = 954
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 958
                    self.qualifiedFunctionCall()
                    pass

                elif la_ == 2:
                    self.state = 959
                    self.expression(0)
                    pass


                self.state = 969
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 962
                        self.match(RustParser.COMMA)
                        self.state = 965
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                        if la_ == 1:
                            self.state = 963
                            self.qualifiedFunctionCall()
                            pass

                        elif la_ == 2:
                            self.state = 964
                            self.expression(0)
                            pass

                 
                    self.state = 971
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 972
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 977 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 975
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 976
                    self.match(RustParser.Identifier)
                    self.state = 979 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==73):
                        break

                self.state = 986
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 981
                    self.match(RustParser.T__14)
                    pass
                elif token in [80]:
                    self.state = 982
                    self.match(RustParser.LPAREN)
                    self.state = 983
                    self.argumentList()
                    self.state = 984
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_literal)
        try:
            self.state = 1000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.arrayLiteral()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.match(RustParser.HexNumber)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self.match(RustParser.Number)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 4)
                self.state = 993
                self.match(RustParser.SignedNumber)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 5)
                self.state = 994
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 6)
                self.state = 995
                self.match(RustParser.Binary)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 7)
                self.state = 996
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [62, 63]:
                self.enterOuterAlt(localctx, 8)
                self.state = 997
                self.booleanLiteral()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 9)
                self.state = 998
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 10)
                self.state = 999
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            _la = self._input.LA(1)
            if not(_la==62 or _la==63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self.match(RustParser.LBRACK)
                self.state = 1005
                self.expression(0)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==79:
                    self.state = 1006
                    self.match(RustParser.COMMA)
                    self.state = 1007
                    self.expression(0)
                    self.state = 1012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1013
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(RustParser.LBRACK)
                self.state = 1016
                self.expression(0)
                self.state = 1017
                self.match(RustParser.T__2)
                self.state = 1018
                self.expression(0)
                self.state = 1019
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(RustParser.T__60)
            self.state = 1027
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1024
                    self.matchWildcard() 
                self.state = 1029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

            self.state = 1030
            self.match(RustParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[50] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         




