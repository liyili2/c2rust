# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,98,1170,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,1,0,5,0,190,8,0,10,0,12,0,193,9,0,1,1,1,1,
        1,1,1,1,1,1,1,1,3,1,201,8,1,1,2,1,2,1,2,1,2,3,2,207,8,2,1,2,1,2,
        1,2,1,2,3,2,213,8,2,5,2,215,8,2,10,2,12,2,218,9,2,1,2,3,2,221,8,
        2,1,2,3,2,224,8,2,5,2,226,8,2,10,2,12,2,229,9,2,1,2,1,2,5,2,233,
        8,2,10,2,12,2,236,9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,244,8,3,1,4,3,
        4,247,8,4,1,4,3,4,250,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,
        4,261,8,4,10,4,12,4,264,9,4,1,4,3,4,267,8,4,1,5,1,5,1,6,3,6,272,
        8,6,1,6,1,6,1,6,1,6,3,6,278,8,6,1,7,3,7,281,8,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,4,8,293,8,8,11,8,12,8,294,1,8,1,8,1,9,1,
        9,1,9,1,9,5,9,303,8,9,10,9,12,9,306,9,9,1,9,1,9,1,10,3,10,311,8,
        10,1,10,1,10,1,10,1,10,3,10,317,8,10,1,10,1,10,3,10,321,8,10,1,10,
        1,10,1,10,1,10,1,10,1,10,3,10,329,8,10,1,10,1,10,1,10,1,10,3,10,
        335,8,10,1,10,1,10,1,10,3,10,340,8,10,1,10,3,10,343,8,10,1,11,1,
        11,1,11,5,11,348,8,11,10,11,12,11,351,9,11,1,11,1,11,3,11,355,8,
        11,1,11,3,11,358,8,11,1,12,3,12,361,8,12,1,12,1,12,1,12,3,12,366,
        8,12,1,13,1,13,1,14,1,14,1,15,1,15,3,15,374,8,15,1,16,4,16,377,8,
        16,11,16,12,16,378,1,17,1,17,3,17,383,8,17,1,17,1,17,1,17,1,17,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,398,8,18,1,19,1,
        19,1,19,5,19,403,8,19,10,19,12,19,406,9,19,1,20,1,20,1,20,3,20,411,
        8,20,1,21,1,21,1,22,3,22,416,8,22,1,22,1,22,1,22,1,22,5,22,422,8,
        22,10,22,12,22,425,9,22,1,22,1,22,1,23,3,23,430,8,23,1,23,1,23,1,
        23,1,23,3,23,436,8,23,1,24,1,24,1,24,5,24,441,8,24,10,24,12,24,444,
        9,24,1,24,1,24,1,25,1,25,1,25,3,25,451,8,25,1,25,3,25,454,8,25,1,
        26,3,26,457,8,26,1,26,3,26,460,8,26,1,26,3,26,463,8,26,1,26,1,26,
        1,26,1,26,1,26,3,26,470,8,26,1,26,3,26,473,8,26,1,26,3,26,476,8,
        26,1,26,3,26,479,8,26,1,26,1,26,1,27,1,27,1,27,5,27,486,8,27,10,
        27,12,27,489,9,27,1,27,3,27,492,8,27,1,28,3,28,495,8,28,1,28,3,28,
        498,8,28,1,28,1,28,1,28,3,28,503,8,28,1,29,1,29,3,29,507,8,29,1,
        30,1,30,1,30,3,30,512,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,3,31,524,8,31,1,31,1,31,1,31,1,31,5,31,530,8,31,10,
        31,12,31,533,9,31,1,31,1,31,3,31,537,8,31,1,31,1,31,1,31,1,31,1,
        31,5,31,544,8,31,10,31,12,31,547,9,31,1,31,1,31,3,31,551,8,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,565,
        8,31,1,32,1,32,1,32,1,32,1,32,3,32,572,8,32,1,33,1,33,1,33,3,33,
        577,8,33,1,33,1,33,1,33,5,33,582,8,33,10,33,12,33,585,9,33,3,33,
        587,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,3,35,596,8,35,1,35,1,
        35,5,35,600,8,35,10,35,12,35,603,9,35,1,35,3,35,606,8,35,1,35,1,
        35,1,36,1,36,1,36,5,36,613,8,36,10,36,12,36,616,9,36,1,36,3,36,619,
        8,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,644,
        8,37,1,38,3,38,647,8,38,1,38,1,38,3,38,651,8,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,3,39,670,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,3,40,686,8,40,5,40,688,8,40,10,40,12,40,691,
        9,40,1,40,1,40,1,40,1,40,1,40,3,40,698,8,40,5,40,700,8,40,10,40,
        12,40,703,9,40,1,40,1,40,3,40,707,8,40,1,41,3,41,710,8,41,1,41,3,
        41,713,8,41,1,41,1,41,1,41,3,41,718,8,41,1,42,1,42,1,43,1,43,1,43,
        1,43,1,43,1,44,1,44,1,44,1,44,4,44,731,8,44,11,44,12,44,732,1,44,
        1,44,1,45,1,45,1,45,5,45,740,8,45,10,45,12,45,743,9,45,1,45,1,45,
        1,45,1,45,3,45,749,8,45,3,45,751,8,45,1,46,1,46,1,46,1,46,3,46,757,
        8,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,3,48,766,8,48,1,49,3,49,
        769,8,49,1,49,1,49,3,49,773,8,49,1,49,1,49,1,49,1,49,3,49,779,8,
        49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,5,50,791,8,
        50,10,50,12,50,794,9,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
        1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,5,53,818,8,53,10,53,12,53,821,9,53,1,53,1,53,3,53,825,8,53,
        1,54,1,54,1,54,1,55,1,55,3,55,832,8,55,1,55,1,55,3,55,836,8,55,1,
        56,1,56,1,56,1,57,1,57,3,57,843,8,57,1,57,1,57,1,57,1,57,1,58,1,
        58,1,58,1,58,1,58,1,59,1,59,3,59,856,8,59,1,60,1,60,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,872,8,61,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,
        62,900,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,5,62,930,8,62,10,62,12,62,933,9,62,1,63,1,
        63,1,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,1,66,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,3,68,958,8,68,1,68,1,
        68,1,68,1,68,1,68,1,68,1,69,1,69,4,69,968,8,69,11,69,12,69,969,1,
        70,3,70,973,8,70,1,70,1,70,1,70,1,71,3,71,979,8,71,1,71,3,71,982,
        8,71,1,71,1,71,1,71,1,71,3,71,988,8,71,1,71,3,71,991,8,71,1,71,1,
        71,3,71,995,8,71,1,72,1,72,1,72,1,72,5,72,1001,8,72,10,72,12,72,
        1004,9,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,
        1,78,1,78,1,78,1,78,5,78,1021,8,78,10,78,12,78,1024,9,78,1,78,3,
        78,1027,8,78,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,
        82,1,82,1,82,1,83,1,83,5,83,1044,8,83,10,83,12,83,1047,9,83,1,83,
        1,83,1,83,1,84,1,84,1,84,1,85,1,85,3,85,1057,8,85,1,86,1,86,1,86,
        1,86,1,86,1,86,4,86,1065,8,86,11,86,12,86,1066,3,86,1069,8,86,1,
        87,1,87,3,87,1073,8,87,1,87,3,87,1076,8,87,1,87,1,87,1,88,1,88,1,
        88,1,88,1,88,5,88,1085,8,88,10,88,12,88,1088,9,88,1,88,1,88,3,88,
        1092,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        3,89,1105,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,3,90,1118,8,90,1,91,1,91,1,92,3,92,1123,8,92,1,92,3,92,1126,
        8,92,1,92,1,92,1,92,1,92,5,92,1132,8,92,10,92,12,92,1135,9,92,1,
        92,1,92,1,92,3,92,1140,8,92,1,92,3,92,1143,8,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,3,92,1152,8,92,1,92,3,92,1155,8,92,1,92,1,92,3,
        92,1159,8,92,1,93,1,93,5,93,1163,8,93,10,93,12,93,1166,9,93,1,93,
        1,93,1,93,1,1164,1,124,94,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,0,10,1,0,6,8,2,0,79,79,94,94,1,0,78,80,2,0,6,
        6,13,13,1,0,34,41,3,0,25,25,56,59,87,87,3,0,19,19,27,27,60,61,2,
        0,20,20,62,65,2,0,64,65,86,86,1,0,74,75,1287,0,191,1,0,0,0,2,200,
        1,0,0,0,4,202,1,0,0,0,6,243,1,0,0,0,8,246,1,0,0,0,10,268,1,0,0,0,
        12,271,1,0,0,0,14,280,1,0,0,0,16,288,1,0,0,0,18,298,1,0,0,0,20,342,
        1,0,0,0,22,357,1,0,0,0,24,360,1,0,0,0,26,367,1,0,0,0,28,369,1,0,
        0,0,30,371,1,0,0,0,32,376,1,0,0,0,34,380,1,0,0,0,36,397,1,0,0,0,
        38,399,1,0,0,0,40,407,1,0,0,0,42,412,1,0,0,0,44,415,1,0,0,0,46,429,
        1,0,0,0,48,437,1,0,0,0,50,447,1,0,0,0,52,456,1,0,0,0,54,482,1,0,
        0,0,56,494,1,0,0,0,58,506,1,0,0,0,60,508,1,0,0,0,62,564,1,0,0,0,
        64,566,1,0,0,0,66,586,1,0,0,0,68,588,1,0,0,0,70,595,1,0,0,0,72,609,
        1,0,0,0,74,643,1,0,0,0,76,646,1,0,0,0,78,669,1,0,0,0,80,706,1,0,
        0,0,82,709,1,0,0,0,84,719,1,0,0,0,86,721,1,0,0,0,88,726,1,0,0,0,
        90,736,1,0,0,0,92,756,1,0,0,0,94,758,1,0,0,0,96,765,1,0,0,0,98,768,
        1,0,0,0,100,784,1,0,0,0,102,799,1,0,0,0,104,804,1,0,0,0,106,810,
        1,0,0,0,108,826,1,0,0,0,110,835,1,0,0,0,112,837,1,0,0,0,114,840,
        1,0,0,0,116,848,1,0,0,0,118,853,1,0,0,0,120,857,1,0,0,0,122,871,
        1,0,0,0,124,899,1,0,0,0,126,934,1,0,0,0,128,937,1,0,0,0,130,942,
        1,0,0,0,132,946,1,0,0,0,134,948,1,0,0,0,136,955,1,0,0,0,138,967,
        1,0,0,0,140,972,1,0,0,0,142,994,1,0,0,0,144,996,1,0,0,0,146,1005,
        1,0,0,0,148,1007,1,0,0,0,150,1009,1,0,0,0,152,1011,1,0,0,0,154,1013,
        1,0,0,0,156,1015,1,0,0,0,158,1030,1,0,0,0,160,1032,1,0,0,0,162,1034,
        1,0,0,0,164,1038,1,0,0,0,166,1041,1,0,0,0,168,1051,1,0,0,0,170,1056,
        1,0,0,0,172,1068,1,0,0,0,174,1072,1,0,0,0,176,1091,1,0,0,0,178,1104,
        1,0,0,0,180,1117,1,0,0,0,182,1119,1,0,0,0,184,1158,1,0,0,0,186,1160,
        1,0,0,0,188,190,3,2,1,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,
        1,0,0,0,191,192,1,0,0,0,192,1,1,0,0,0,193,191,1,0,0,0,194,201,3,
        6,3,0,195,201,3,98,49,0,196,201,3,32,16,0,197,201,3,18,9,0,198,201,
        3,4,2,0,199,201,3,14,7,0,200,194,1,0,0,0,200,195,1,0,0,0,200,196,
        1,0,0,0,200,197,1,0,0,0,200,198,1,0,0,0,200,199,1,0,0,0,201,3,1,
        0,0,0,202,203,5,1,0,0,203,234,3,66,33,0,204,227,5,2,0,0,205,207,
        3,66,33,0,206,205,1,0,0,0,206,207,1,0,0,0,207,220,1,0,0,0,208,221,
        5,79,0,0,209,216,5,2,0,0,210,212,5,79,0,0,211,213,5,91,0,0,212,211,
        1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,210,1,0,0,0,215,218,
        1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,
        1,0,0,0,219,221,5,3,0,0,220,208,1,0,0,0,220,209,1,0,0,0,221,223,
        1,0,0,0,222,224,5,91,0,0,223,222,1,0,0,0,223,224,1,0,0,0,224,226,
        1,0,0,0,225,206,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,
        1,0,0,0,228,230,1,0,0,0,229,227,1,0,0,0,230,231,5,3,0,0,231,233,
        5,91,0,0,232,204,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,
        1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,238,5,4,0,0,238,5,1,
        0,0,0,239,244,3,52,26,0,240,244,3,44,22,0,241,244,3,16,8,0,242,244,
        3,8,4,0,243,239,1,0,0,0,243,240,1,0,0,0,243,241,1,0,0,0,243,242,
        1,0,0,0,244,7,1,0,0,0,245,247,3,26,13,0,246,245,1,0,0,0,246,247,
        1,0,0,0,247,249,1,0,0,0,248,250,3,10,5,0,249,248,1,0,0,0,249,250,
        1,0,0,0,250,251,1,0,0,0,251,266,5,79,0,0,252,253,5,95,0,0,253,254,
        3,58,29,0,254,255,5,5,0,0,255,256,3,124,62,0,256,257,5,4,0,0,257,
        267,1,0,0,0,258,262,5,2,0,0,259,261,3,12,6,0,260,259,1,0,0,0,261,
        264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,
        262,1,0,0,0,265,267,5,3,0,0,266,252,1,0,0,0,266,258,1,0,0,0,267,
        9,1,0,0,0,268,269,7,0,0,0,269,11,1,0,0,0,270,272,3,26,13,0,271,270,
        1,0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,273,274,5,79,0,0,274,275,
        5,95,0,0,275,277,3,58,29,0,276,278,5,91,0,0,277,276,1,0,0,0,277,
        278,1,0,0,0,278,13,1,0,0,0,279,281,3,26,13,0,280,279,1,0,0,0,280,
        281,1,0,0,0,281,282,1,0,0,0,282,283,5,9,0,0,283,284,5,79,0,0,284,
        285,5,5,0,0,285,286,3,58,29,0,286,287,5,4,0,0,287,15,1,0,0,0,288,
        289,5,10,0,0,289,290,5,79,0,0,290,292,5,2,0,0,291,293,3,52,26,0,
        292,291,1,0,0,0,293,294,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,
        295,296,1,0,0,0,296,297,5,3,0,0,297,17,1,0,0,0,298,299,5,11,0,0,
        299,300,5,78,0,0,300,304,5,2,0,0,301,303,3,20,10,0,302,301,1,0,0,
        0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,
        0,306,304,1,0,0,0,307,308,5,3,0,0,308,19,1,0,0,0,309,311,3,26,13,
        0,310,309,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,5,9,0,
        0,313,314,5,79,0,0,314,343,5,4,0,0,315,317,3,26,13,0,316,315,1,0,
        0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,320,5,12,0,0,319,321,5,13,
        0,0,320,319,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,5,79,
        0,0,323,324,5,95,0,0,324,325,3,58,29,0,325,326,5,4,0,0,326,343,1,
        0,0,0,327,329,3,26,13,0,328,327,1,0,0,0,328,329,1,0,0,0,329,330,
        1,0,0,0,330,331,5,14,0,0,331,332,5,79,0,0,332,334,5,92,0,0,333,335,
        3,22,11,0,334,333,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,339,
        5,93,0,0,337,338,5,15,0,0,338,340,3,58,29,0,339,337,1,0,0,0,339,
        340,1,0,0,0,340,341,1,0,0,0,341,343,5,4,0,0,342,310,1,0,0,0,342,
        316,1,0,0,0,342,328,1,0,0,0,343,21,1,0,0,0,344,349,3,24,12,0,345,
        346,5,91,0,0,346,348,3,24,12,0,347,345,1,0,0,0,348,351,1,0,0,0,349,
        347,1,0,0,0,349,350,1,0,0,0,350,354,1,0,0,0,351,349,1,0,0,0,352,
        353,5,91,0,0,353,355,5,96,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,
        358,1,0,0,0,356,358,5,96,0,0,357,344,1,0,0,0,357,356,1,0,0,0,358,
        23,1,0,0,0,359,361,7,1,0,0,360,359,1,0,0,0,360,361,1,0,0,0,361,362,
        1,0,0,0,362,365,5,95,0,0,363,366,3,58,29,0,364,366,5,96,0,0,365,
        363,1,0,0,0,365,364,1,0,0,0,366,25,1,0,0,0,367,368,5,16,0,0,368,
        27,1,0,0,0,369,370,5,8,0,0,370,29,1,0,0,0,371,373,5,11,0,0,372,374,
        5,78,0,0,373,372,1,0,0,0,373,374,1,0,0,0,374,31,1,0,0,0,375,377,
        3,34,17,0,376,375,1,0,0,0,377,378,1,0,0,0,378,376,1,0,0,0,378,379,
        1,0,0,0,379,33,1,0,0,0,380,382,5,88,0,0,381,383,5,86,0,0,382,381,
        1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,5,89,0,0,385,386,
        3,36,18,0,386,387,5,90,0,0,387,35,1,0,0,0,388,398,5,79,0,0,389,390,
        5,79,0,0,390,391,5,5,0,0,391,398,3,42,21,0,392,393,5,79,0,0,393,
        394,5,92,0,0,394,395,3,38,19,0,395,396,5,93,0,0,396,398,1,0,0,0,
        397,388,1,0,0,0,397,389,1,0,0,0,397,392,1,0,0,0,398,37,1,0,0,0,399,
        404,3,40,20,0,400,401,5,91,0,0,401,403,3,40,20,0,402,400,1,0,0,0,
        403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,39,1,0,0,0,406,
        404,1,0,0,0,407,410,5,79,0,0,408,409,5,5,0,0,409,411,3,42,21,0,410,
        408,1,0,0,0,410,411,1,0,0,0,411,41,1,0,0,0,412,413,7,2,0,0,413,43,
        1,0,0,0,414,416,3,26,13,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,
        1,0,0,0,417,418,5,17,0,0,418,419,5,79,0,0,419,423,5,2,0,0,420,422,
        3,46,23,0,421,420,1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,
        1,0,0,0,424,426,1,0,0,0,425,423,1,0,0,0,426,427,5,3,0,0,427,45,1,
        0,0,0,428,430,3,26,13,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,
        1,0,0,0,431,432,5,79,0,0,432,433,5,95,0,0,433,435,3,58,29,0,434,
        436,5,91,0,0,435,434,1,0,0,0,435,436,1,0,0,0,436,47,1,0,0,0,437,
        438,5,79,0,0,438,442,5,2,0,0,439,441,3,50,25,0,440,439,1,0,0,0,441,
        444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,445,1,0,0,0,444,
        442,1,0,0,0,445,446,5,3,0,0,446,49,1,0,0,0,447,450,5,79,0,0,448,
        449,5,95,0,0,449,451,3,124,62,0,450,448,1,0,0,0,450,451,1,0,0,0,
        451,453,1,0,0,0,452,454,5,91,0,0,453,452,1,0,0,0,453,454,1,0,0,0,
        454,51,1,0,0,0,455,457,3,26,13,0,456,455,1,0,0,0,456,457,1,0,0,0,
        457,459,1,0,0,0,458,460,3,28,14,0,459,458,1,0,0,0,459,460,1,0,0,
        0,460,462,1,0,0,0,461,463,3,30,15,0,462,461,1,0,0,0,462,463,1,0,
        0,0,463,464,1,0,0,0,464,465,5,14,0,0,465,472,5,79,0,0,466,473,5,
        18,0,0,467,469,5,92,0,0,468,470,3,54,27,0,469,468,1,0,0,0,469,470,
        1,0,0,0,470,471,1,0,0,0,471,473,5,93,0,0,472,466,1,0,0,0,472,467,
        1,0,0,0,473,475,1,0,0,0,474,476,5,15,0,0,475,474,1,0,0,0,475,476,
        1,0,0,0,476,478,1,0,0,0,477,479,3,58,29,0,478,477,1,0,0,0,478,479,
        1,0,0,0,479,480,1,0,0,0,480,481,3,70,35,0,481,53,1,0,0,0,482,487,
        3,56,28,0,483,484,5,91,0,0,484,486,3,56,28,0,485,483,1,0,0,0,486,
        489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,491,1,0,0,0,489,
        487,1,0,0,0,490,492,5,91,0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,
        55,1,0,0,0,493,495,5,19,0,0,494,493,1,0,0,0,494,495,1,0,0,0,495,
        497,1,0,0,0,496,498,5,13,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,
        499,1,0,0,0,499,502,5,79,0,0,500,501,5,95,0,0,501,503,3,58,29,0,
        502,500,1,0,0,0,502,503,1,0,0,0,503,57,1,0,0,0,504,507,3,62,31,0,
        505,507,3,60,30,0,506,504,1,0,0,0,506,505,1,0,0,0,507,59,1,0,0,0,
        508,509,5,20,0,0,509,511,7,3,0,0,510,512,3,58,29,0,511,510,1,0,0,
        0,511,512,1,0,0,0,512,61,1,0,0,0,513,565,5,21,0,0,514,565,3,64,32,
        0,515,565,5,22,0,0,516,565,5,23,0,0,517,565,5,24,0,0,518,565,3,68,
        34,0,519,520,3,66,33,0,520,521,3,62,31,0,521,565,1,0,0,0,522,524,
        5,85,0,0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,526,
        5,25,0,0,526,531,3,58,29,0,527,528,5,91,0,0,528,530,3,58,29,0,529,
        527,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,
        534,1,0,0,0,533,531,1,0,0,0,534,536,5,87,0,0,535,537,5,18,0,0,536,
        535,1,0,0,0,536,537,1,0,0,0,537,565,1,0,0,0,538,550,5,79,0,0,539,
        540,5,25,0,0,540,545,3,58,29,0,541,542,5,91,0,0,542,544,3,58,29,
        0,543,541,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,
        0,546,548,1,0,0,0,547,545,1,0,0,0,548,549,5,87,0,0,549,551,1,0,0,
        0,550,539,1,0,0,0,550,551,1,0,0,0,551,565,1,0,0,0,552,553,5,79,0,
        0,553,554,5,25,0,0,554,555,3,58,29,0,555,556,5,87,0,0,556,565,1,
        0,0,0,557,558,5,19,0,0,558,565,3,58,29,0,559,560,5,89,0,0,560,561,
        3,58,29,0,561,562,5,90,0,0,562,565,1,0,0,0,563,565,5,79,0,0,564,
        513,1,0,0,0,564,514,1,0,0,0,564,515,1,0,0,0,564,516,1,0,0,0,564,
        517,1,0,0,0,564,518,1,0,0,0,564,519,1,0,0,0,564,523,1,0,0,0,564,
        538,1,0,0,0,564,552,1,0,0,0,564,557,1,0,0,0,564,559,1,0,0,0,564,
        563,1,0,0,0,565,63,1,0,0,0,566,567,5,26,0,0,567,571,3,58,29,0,568,
        572,5,27,0,0,569,570,5,87,0,0,570,572,5,87,0,0,571,568,1,0,0,0,571,
        569,1,0,0,0,572,65,1,0,0,0,573,574,5,79,0,0,574,587,5,85,0,0,575,
        577,5,85,0,0,576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,
        583,5,79,0,0,579,580,5,85,0,0,580,582,5,79,0,0,581,579,1,0,0,0,582,
        585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,587,1,0,0,0,585,
        583,1,0,0,0,586,573,1,0,0,0,586,576,1,0,0,0,587,67,1,0,0,0,588,589,
        5,89,0,0,589,590,3,62,31,0,590,591,5,4,0,0,591,592,5,80,0,0,592,
        593,5,90,0,0,593,69,1,0,0,0,594,596,3,28,14,0,595,594,1,0,0,0,595,
        596,1,0,0,0,596,597,1,0,0,0,597,601,5,2,0,0,598,600,3,74,37,0,599,
        598,1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,
        605,1,0,0,0,603,601,1,0,0,0,604,606,3,110,55,0,605,604,1,0,0,0,605,
        606,1,0,0,0,606,607,1,0,0,0,607,608,5,3,0,0,608,71,1,0,0,0,609,610,
        3,28,14,0,610,614,5,2,0,0,611,613,3,74,37,0,612,611,1,0,0,0,613,
        616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,618,1,0,0,0,616,
        614,1,0,0,0,617,619,3,110,55,0,618,617,1,0,0,0,618,619,1,0,0,0,619,
        620,1,0,0,0,620,621,5,3,0,0,621,73,1,0,0,0,622,644,3,72,36,0,623,
        644,3,80,40,0,624,644,3,76,38,0,625,644,3,48,24,0,626,644,3,44,22,
        0,627,644,3,98,49,0,628,644,3,116,58,0,629,644,3,102,51,0,630,644,
        3,86,43,0,631,644,3,104,52,0,632,644,3,106,53,0,633,644,3,78,39,
        0,634,644,3,108,54,0,635,644,3,94,47,0,636,644,3,110,55,0,637,644,
        3,112,56,0,638,639,5,28,0,0,639,644,5,4,0,0,640,641,5,29,0,0,641,
        644,5,4,0,0,642,644,3,88,44,0,643,622,1,0,0,0,643,623,1,0,0,0,643,
        624,1,0,0,0,643,625,1,0,0,0,643,626,1,0,0,0,643,627,1,0,0,0,643,
        628,1,0,0,0,643,629,1,0,0,0,643,630,1,0,0,0,643,631,1,0,0,0,643,
        632,1,0,0,0,643,633,1,0,0,0,643,634,1,0,0,0,643,635,1,0,0,0,643,
        636,1,0,0,0,643,637,1,0,0,0,643,638,1,0,0,0,643,640,1,0,0,0,643,
        642,1,0,0,0,644,75,1,0,0,0,645,647,5,30,0,0,646,645,1,0,0,0,646,
        647,1,0,0,0,647,650,1,0,0,0,648,651,3,116,58,0,649,651,3,124,62,
        0,650,648,1,0,0,0,650,649,1,0,0,0,651,652,1,0,0,0,652,653,5,5,0,
        0,653,654,3,124,62,0,654,655,5,31,0,0,655,656,3,70,35,0,656,657,
        5,4,0,0,657,77,1,0,0,0,658,659,3,124,62,0,659,660,5,32,0,0,660,661,
        3,124,62,0,661,662,1,0,0,0,662,663,3,174,87,0,663,664,5,4,0,0,664,
        670,1,0,0,0,665,666,3,124,62,0,666,667,3,174,87,0,667,668,5,4,0,
        0,668,670,1,0,0,0,669,658,1,0,0,0,669,665,1,0,0,0,670,79,1,0,0,0,
        671,672,5,30,0,0,672,673,3,82,41,0,673,674,5,5,0,0,674,675,3,124,
        62,0,675,676,5,4,0,0,676,707,1,0,0,0,677,678,5,30,0,0,678,679,3,
        82,41,0,679,680,3,100,50,0,680,707,1,0,0,0,681,682,5,30,0,0,682,
        689,5,92,0,0,683,685,3,82,41,0,684,686,5,91,0,0,685,684,1,0,0,0,
        685,686,1,0,0,0,686,688,1,0,0,0,687,683,1,0,0,0,688,691,1,0,0,0,
        689,687,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,689,1,0,0,0,
        692,693,5,93,0,0,693,694,5,5,0,0,694,701,5,92,0,0,695,697,3,124,
        62,0,696,698,5,91,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,700,1,
        0,0,0,699,695,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,701,702,1,
        0,0,0,702,704,1,0,0,0,703,701,1,0,0,0,704,705,5,93,0,0,705,707,5,
        4,0,0,706,671,1,0,0,0,706,677,1,0,0,0,706,681,1,0,0,0,707,81,1,0,
        0,0,708,710,5,33,0,0,709,708,1,0,0,0,709,710,1,0,0,0,710,712,1,0,
        0,0,711,713,5,13,0,0,712,711,1,0,0,0,712,713,1,0,0,0,713,714,1,0,
        0,0,714,717,5,79,0,0,715,716,5,95,0,0,716,718,3,58,29,0,717,715,
        1,0,0,0,717,718,1,0,0,0,718,83,1,0,0,0,719,720,7,4,0,0,720,85,1,
        0,0,0,721,722,3,124,62,0,722,723,3,84,42,0,723,724,3,124,62,0,724,
        725,5,4,0,0,725,87,1,0,0,0,726,727,5,42,0,0,727,728,3,124,62,0,728,
        730,5,2,0,0,729,731,3,90,45,0,730,729,1,0,0,0,731,732,1,0,0,0,732,
        730,1,0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,735,5,3,0,0,735,
        89,1,0,0,0,736,741,3,92,46,0,737,738,5,43,0,0,738,740,3,92,46,0,
        739,737,1,0,0,0,740,743,1,0,0,0,741,739,1,0,0,0,741,742,1,0,0,0,
        742,744,1,0,0,0,743,741,1,0,0,0,744,750,5,44,0,0,745,751,3,70,35,
        0,746,748,5,45,0,0,747,749,3,124,62,0,748,747,1,0,0,0,748,749,1,
        0,0,0,749,751,1,0,0,0,750,745,1,0,0,0,750,746,1,0,0,0,751,91,1,0,
        0,0,752,757,3,180,90,0,753,757,5,80,0,0,754,757,5,94,0,0,755,757,
        5,79,0,0,756,752,1,0,0,0,756,753,1,0,0,0,756,754,1,0,0,0,756,755,
        1,0,0,0,757,93,1,0,0,0,758,759,5,46,0,0,759,760,3,124,62,0,760,761,
        3,70,35,0,761,95,1,0,0,0,762,766,3,100,50,0,763,766,3,70,35,0,764,
        766,3,124,62,0,765,762,1,0,0,0,765,763,1,0,0,0,765,764,1,0,0,0,766,
        97,1,0,0,0,767,769,3,26,13,0,768,767,1,0,0,0,768,769,1,0,0,0,769,
        770,1,0,0,0,770,772,5,12,0,0,771,773,5,13,0,0,772,771,1,0,0,0,772,
        773,1,0,0,0,773,774,1,0,0,0,774,775,5,79,0,0,775,778,5,95,0,0,776,
        779,3,58,29,0,777,779,5,79,0,0,778,776,1,0,0,0,778,777,1,0,0,0,779,
        780,1,0,0,0,780,781,5,5,0,0,781,782,3,96,48,0,782,783,5,4,0,0,783,
        99,1,0,0,0,784,792,5,2,0,0,785,786,5,79,0,0,786,787,5,95,0,0,787,
        788,3,124,62,0,788,789,5,91,0,0,789,791,1,0,0,0,790,785,1,0,0,0,
        791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,
        794,792,1,0,0,0,795,796,5,3,0,0,796,797,5,4,0,0,797,798,3,124,62,
        0,798,101,1,0,0,0,799,800,3,124,62,0,800,801,5,5,0,0,801,802,3,124,
        62,0,802,803,5,4,0,0,803,103,1,0,0,0,804,805,5,47,0,0,805,806,5,
        79,0,0,806,807,5,48,0,0,807,808,3,124,62,0,808,809,3,70,35,0,809,
        105,1,0,0,0,810,811,5,49,0,0,811,812,3,124,62,0,812,819,3,70,35,
        0,813,814,5,50,0,0,814,815,3,124,62,0,815,816,3,70,35,0,816,818,
        1,0,0,0,817,813,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,
        1,0,0,0,820,824,1,0,0,0,821,819,1,0,0,0,822,823,5,31,0,0,823,825,
        3,70,35,0,824,822,1,0,0,0,824,825,1,0,0,0,825,107,1,0,0,0,826,827,
        3,170,85,0,827,828,5,4,0,0,828,109,1,0,0,0,829,831,5,45,0,0,830,
        832,3,124,62,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,0,0,0,833,
        836,5,4,0,0,834,836,5,79,0,0,835,829,1,0,0,0,835,834,1,0,0,0,836,
        111,1,0,0,0,837,838,5,51,0,0,838,839,3,70,35,0,839,113,1,0,0,0,840,
        842,5,52,0,0,841,843,3,58,29,0,842,841,1,0,0,0,842,843,1,0,0,0,843,
        844,1,0,0,0,844,845,5,92,0,0,845,846,3,124,62,0,846,847,5,93,0,0,
        847,115,1,0,0,0,848,849,5,53,0,0,849,850,5,92,0,0,850,851,3,124,
        62,0,851,852,5,93,0,0,852,117,1,0,0,0,853,855,5,52,0,0,854,856,3,
        58,29,0,855,854,1,0,0,0,855,856,1,0,0,0,856,119,1,0,0,0,857,858,
        5,53,0,0,858,121,1,0,0,0,859,860,5,53,0,0,860,861,5,92,0,0,861,862,
        3,124,62,0,862,863,5,93,0,0,863,872,1,0,0,0,864,865,5,52,0,0,865,
        866,5,85,0,0,866,867,5,79,0,0,867,868,5,92,0,0,868,869,3,124,62,
        0,869,870,5,93,0,0,870,872,1,0,0,0,871,859,1,0,0,0,871,864,1,0,0,
        0,872,123,1,0,0,0,873,874,6,62,-1,0,874,875,3,158,79,0,875,876,3,
        124,62,26,876,900,1,0,0,0,877,900,3,122,61,0,878,900,3,170,85,0,
        879,900,3,48,24,0,880,881,3,138,69,0,881,882,3,124,62,20,882,900,
        1,0,0,0,883,900,3,162,81,0,884,900,3,156,78,0,885,900,3,134,67,0,
        886,887,3,160,80,0,887,888,3,124,62,16,888,900,1,0,0,0,889,900,3,
        168,84,0,890,900,3,128,64,0,891,900,3,126,63,0,892,900,3,164,82,
        0,893,900,3,166,83,0,894,900,3,130,65,0,895,896,3,140,70,0,896,897,
        3,124,62,3,897,900,1,0,0,0,898,900,3,136,68,0,899,873,1,0,0,0,899,
        877,1,0,0,0,899,878,1,0,0,0,899,879,1,0,0,0,899,880,1,0,0,0,899,
        883,1,0,0,0,899,884,1,0,0,0,899,885,1,0,0,0,899,886,1,0,0,0,899,
        889,1,0,0,0,899,890,1,0,0,0,899,891,1,0,0,0,899,892,1,0,0,0,899,
        893,1,0,0,0,899,894,1,0,0,0,899,895,1,0,0,0,899,898,1,0,0,0,900,
        931,1,0,0,0,901,902,10,23,0,0,902,903,3,154,77,0,903,904,3,124,62,
        24,904,930,1,0,0,0,905,906,10,10,0,0,906,907,3,148,74,0,907,908,
        3,124,62,11,908,930,1,0,0,0,909,910,10,9,0,0,910,911,3,152,76,0,
        911,912,3,124,62,10,912,930,1,0,0,0,913,914,10,8,0,0,914,915,3,150,
        75,0,915,916,3,124,62,9,916,930,1,0,0,0,917,918,10,6,0,0,918,919,
        3,146,73,0,919,920,3,124,62,7,920,930,1,0,0,0,921,922,10,21,0,0,
        922,930,3,144,72,0,923,924,10,13,0,0,924,930,3,174,87,0,925,926,
        10,12,0,0,926,930,3,132,66,0,927,928,10,1,0,0,928,930,3,172,86,0,
        929,901,1,0,0,0,929,905,1,0,0,0,929,909,1,0,0,0,929,913,1,0,0,0,
        929,917,1,0,0,0,929,921,1,0,0,0,929,923,1,0,0,0,929,925,1,0,0,0,
        929,927,1,0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,
        932,125,1,0,0,0,933,931,1,0,0,0,934,935,3,58,29,0,935,936,3,66,33,
        0,936,127,1,0,0,0,937,938,5,8,0,0,938,939,5,2,0,0,939,940,3,124,
        62,0,940,941,5,3,0,0,941,129,1,0,0,0,942,943,5,25,0,0,943,944,3,
        124,62,0,944,945,5,87,0,0,945,131,1,0,0,0,946,947,3,58,29,0,947,
        133,1,0,0,0,948,949,5,79,0,0,949,950,5,5,0,0,950,951,5,2,0,0,951,
        952,3,124,62,0,952,953,5,3,0,0,953,954,5,4,0,0,954,135,1,0,0,0,955,
        957,5,79,0,0,956,958,5,86,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,
        959,1,0,0,0,959,960,5,89,0,0,960,961,5,80,0,0,961,962,5,4,0,0,962,
        963,3,124,62,0,963,964,5,90,0,0,964,137,1,0,0,0,965,966,5,79,0,0,
        966,968,5,85,0,0,967,965,1,0,0,0,968,969,1,0,0,0,969,967,1,0,0,0,
        969,970,1,0,0,0,970,139,1,0,0,0,971,973,5,30,0,0,972,971,1,0,0,0,
        972,973,1,0,0,0,973,974,1,0,0,0,974,975,3,142,71,0,975,976,5,5,0,
        0,976,141,1,0,0,0,977,979,5,33,0,0,978,977,1,0,0,0,978,979,1,0,0,
        0,979,981,1,0,0,0,980,982,5,13,0,0,981,980,1,0,0,0,981,982,1,0,0,
        0,982,983,1,0,0,0,983,995,5,79,0,0,984,985,5,79,0,0,985,987,5,92,
        0,0,986,988,5,33,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,990,1,0,
        0,0,989,991,5,13,0,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,1,0,
        0,0,992,993,5,79,0,0,993,995,5,93,0,0,994,978,1,0,0,0,994,984,1,
        0,0,0,995,143,1,0,0,0,996,997,5,54,0,0,997,1002,3,58,29,0,998,999,
        5,54,0,0,999,1001,3,58,29,0,1000,998,1,0,0,0,1001,1004,1,0,0,0,1002,
        1000,1,0,0,0,1002,1003,1,0,0,0,1003,145,1,0,0,0,1004,1002,1,0,0,
        0,1005,1006,7,4,0,0,1006,147,1,0,0,0,1007,1008,5,55,0,0,1008,149,
        1,0,0,0,1009,1010,7,5,0,0,1010,151,1,0,0,0,1011,1012,7,6,0,0,1012,
        153,1,0,0,0,1013,1014,7,7,0,0,1014,155,1,0,0,0,1015,1016,5,79,0,
        0,1016,1017,5,2,0,0,1017,1022,3,50,25,0,1018,1019,5,91,0,0,1019,
        1021,3,50,25,0,1020,1018,1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,
        0,0,1022,1023,1,0,0,0,1023,1026,1,0,0,0,1024,1022,1,0,0,0,1025,1027,
        5,91,0,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,
        1029,5,3,0,0,1029,157,1,0,0,0,1030,1031,5,13,0,0,1031,159,1,0,0,
        0,1032,1033,7,8,0,0,1033,161,1,0,0,0,1034,1035,5,92,0,0,1035,1036,
        3,124,62,0,1036,1037,5,93,0,0,1037,163,1,0,0,0,1038,1039,5,20,0,
        0,1039,1040,3,124,62,0,1040,165,1,0,0,0,1041,1045,5,2,0,0,1042,1044,
        3,74,37,0,1043,1042,1,0,0,0,1044,1047,1,0,0,0,1045,1043,1,0,0,0,
        1045,1046,1,0,0,0,1046,1048,1,0,0,0,1047,1045,1,0,0,0,1048,1049,
        3,124,62,0,1049,1050,5,3,0,0,1050,167,1,0,0,0,1051,1052,5,19,0,0,
        1052,1053,3,124,62,0,1053,169,1,0,0,0,1054,1057,3,178,89,0,1055,
        1057,5,79,0,0,1056,1054,1,0,0,0,1056,1055,1,0,0,0,1057,171,1,0,0,
        0,1058,1059,5,89,0,0,1059,1060,3,170,85,0,1060,1061,5,90,0,0,1061,
        1069,1,0,0,0,1062,1063,5,32,0,0,1063,1065,3,170,85,0,1064,1062,1,
        0,0,0,1065,1066,1,0,0,0,1066,1064,1,0,0,0,1066,1067,1,0,0,0,1067,
        1069,1,0,0,0,1068,1058,1,0,0,0,1068,1064,1,0,0,0,1069,173,1,0,0,
        0,1070,1071,5,32,0,0,1071,1073,3,124,62,0,1072,1070,1,0,0,0,1072,
        1073,1,0,0,0,1073,1075,1,0,0,0,1074,1076,5,86,0,0,1075,1074,1,0,
        0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1078,3,176,88,0,1078,
        175,1,0,0,0,1079,1092,5,18,0,0,1080,1081,5,92,0,0,1081,1086,3,124,
        62,0,1082,1083,5,91,0,0,1083,1085,3,124,62,0,1084,1082,1,0,0,0,1085,
        1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,0,
        0,1088,1086,1,0,0,0,1089,1090,5,93,0,0,1090,1092,1,0,0,0,1091,1079,
        1,0,0,0,1091,1080,1,0,0,0,1092,177,1,0,0,0,1093,1105,3,184,92,0,
        1094,1105,5,83,0,0,1095,1105,5,80,0,0,1096,1105,5,81,0,0,1097,1105,
        5,82,0,0,1098,1105,5,77,0,0,1099,1105,5,78,0,0,1100,1105,3,182,91,
        0,1101,1105,5,84,0,0,1102,1105,3,180,90,0,1103,1105,5,76,0,0,1104,
        1093,1,0,0,0,1104,1094,1,0,0,0,1104,1095,1,0,0,0,1104,1096,1,0,0,
        0,1104,1097,1,0,0,0,1104,1098,1,0,0,0,1104,1099,1,0,0,0,1104,1100,
        1,0,0,0,1104,1101,1,0,0,0,1104,1102,1,0,0,0,1104,1103,1,0,0,0,1105,
        179,1,0,0,0,1106,1118,5,66,0,0,1107,1118,5,67,0,0,1108,1118,5,68,
        0,0,1109,1110,5,69,0,0,1110,1111,5,92,0,0,1111,1118,5,70,0,0,1112,
        1113,5,69,0,0,1113,1114,5,93,0,0,1114,1118,5,70,0,0,1115,1118,5,
        71,0,0,1116,1118,5,72,0,0,1117,1106,1,0,0,0,1117,1107,1,0,0,0,1117,
        1108,1,0,0,0,1117,1109,1,0,0,0,1117,1112,1,0,0,0,1117,1115,1,0,0,
        0,1117,1116,1,0,0,0,1118,181,1,0,0,0,1119,1120,7,9,0,0,1120,183,
        1,0,0,0,1121,1123,5,79,0,0,1122,1121,1,0,0,0,1122,1123,1,0,0,0,1123,
        1125,1,0,0,0,1124,1126,5,86,0,0,1125,1124,1,0,0,0,1125,1126,1,0,
        0,0,1126,1127,1,0,0,0,1127,1128,5,89,0,0,1128,1133,3,124,62,0,1129,
        1130,5,91,0,0,1130,1132,3,124,62,0,1131,1129,1,0,0,0,1132,1135,1,
        0,0,0,1133,1131,1,0,0,0,1133,1134,1,0,0,0,1134,1136,1,0,0,0,1135,
        1133,1,0,0,0,1136,1137,5,90,0,0,1137,1159,1,0,0,0,1138,1140,5,79,
        0,0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,1142,1,0,0,0,1141,1143,
        5,86,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,
        1145,5,89,0,0,1145,1146,3,124,62,0,1146,1147,5,4,0,0,1147,1148,3,
        124,62,0,1148,1149,5,90,0,0,1149,1159,1,0,0,0,1150,1152,5,79,0,0,
        1151,1150,1,0,0,0,1151,1152,1,0,0,0,1152,1154,1,0,0,0,1153,1155,
        5,86,0,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,
        1157,5,89,0,0,1157,1159,5,90,0,0,1158,1122,1,0,0,0,1158,1139,1,0,
        0,0,1158,1151,1,0,0,0,1159,185,1,0,0,0,1160,1164,5,73,0,0,1161,1163,
        9,0,0,0,1162,1161,1,0,0,0,1163,1166,1,0,0,0,1164,1165,1,0,0,0,1164,
        1162,1,0,0,0,1165,1167,1,0,0,0,1166,1164,1,0,0,0,1167,1168,5,73,
        0,0,1168,187,1,0,0,0,135,191,200,206,212,216,220,223,227,234,243,
        246,249,262,266,271,277,280,294,304,310,316,320,328,334,339,342,
        349,354,357,360,365,373,378,382,397,404,410,415,423,429,435,442,
        450,453,456,459,462,469,472,475,478,487,491,494,497,502,506,511,
        523,531,536,545,550,564,571,576,583,586,595,601,605,614,618,643,
        646,650,669,685,689,697,701,706,709,712,717,732,741,748,750,756,
        765,768,772,778,792,819,824,831,835,842,855,871,899,929,931,957,
        969,972,978,981,987,990,994,1002,1022,1026,1045,1056,1066,1068,1072,
        1075,1086,1091,1104,1117,1122,1125,1133,1139,1142,1151,1154,1158,
        1164
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'use'", "'{'", "'}'", "';'", "'='", "'const'", 
                     "'union'", "'unsafe'", "'type'", "'impl'", "'extern'", 
                     "'static'", "'mut'", "'fn'", "'->'", "'pub'", "'struct'", 
                     "'()'", "'&'", "'*'", "'i32'", "'String'", "'bool'", 
                     "'u8'", "'<'", "'Option<NonNull<'", "'>>'", "'break'", 
                     "'continue'", "'let'", "'else'", "'.'", "'ref'", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'match'", "'|'", "'=>'", "'return'", "'while'", "'for'", 
                     "'in'", "'if'", "'else if'", "'loop'", "'Box'", "'Some'", 
                     "'as'", "'..'", "'=='", "'!='", "'||'", "'&&'", "'>='", 
                     "'<='", "'/'", "'%'", "'+'", "'-'", "'b'.''", "'b'|''", 
                     "'b'*''", "'b''", "'''", "'b'+''", "'b'?''", "'\"'", 
                     "'true'", "'false'", "'None'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'::'", "'!'", "'>'", "'#'", 
                     "'['", "']'", "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "NONE", 
                      "Binary", "STRING_LITERAL", "Identifier", "Number", 
                      "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_useDecl = 2
    RULE_topLevelDef = 3
    RULE_topLevelVarDef = 4
    RULE_defKind = 5
    RULE_varDefField = 6
    RULE_typeAlias = 7
    RULE_interfaceDef = 8
    RULE_externBlock = 9
    RULE_externItem = 10
    RULE_externParams = 11
    RULE_externParam = 12
    RULE_visibility = 13
    RULE_unsafeModifier = 14
    RULE_externAbi = 15
    RULE_attributes = 16
    RULE_innerAttribute = 17
    RULE_attribute = 18
    RULE_attrArgs = 19
    RULE_attrArg = 20
    RULE_attrValue = 21
    RULE_structDef = 22
    RULE_structField = 23
    RULE_structLiteral = 24
    RULE_structLiteralField = 25
    RULE_functionDef = 26
    RULE_paramList = 27
    RULE_param = 28
    RULE_typeExpr = 29
    RULE_pointerType = 30
    RULE_basicType = 31
    RULE_safeNonNullWrapper = 32
    RULE_typePath = 33
    RULE_arrayType = 34
    RULE_block = 35
    RULE_unsafeBlcok = 36
    RULE_statement = 37
    RULE_conditionalAssignmentStmt = 38
    RULE_callStmt = 39
    RULE_letStmt = 40
    RULE_varDef = 41
    RULE_compoundOp = 42
    RULE_compoundAssignment = 43
    RULE_matchStmt = 44
    RULE_matchArm = 45
    RULE_matchPattern = 46
    RULE_whileStmt = 47
    RULE_initializer = 48
    RULE_staticVarDecl = 49
    RULE_initBlock = 50
    RULE_assignStmt = 51
    RULE_forStmt = 52
    RULE_ifStmt = 53
    RULE_exprStmt = 54
    RULE_returnStmt = 55
    RULE_loopStmt = 56
    RULE_boxWrappwer = 57
    RULE_typeWrapper = 58
    RULE_boxWrapperPrefix = 59
    RULE_typeWrapperPrefix = 60
    RULE_safeWrapper = 61
    RULE_expression = 62
    RULE_basicTypeCastExpr = 63
    RULE_unsafeExpression = 64
    RULE_qualifiedExpression = 65
    RULE_typeAccessPostfix = 66
    RULE_structDefInit = 67
    RULE_arrayDeclaration = 68
    RULE_typePathExpression = 69
    RULE_patternPrefix = 70
    RULE_pattern = 71
    RULE_castExpressionPostFix = 72
    RULE_compoundOps = 73
    RULE_rangeSymbol = 74
    RULE_conditionalOps = 75
    RULE_booleanOps = 76
    RULE_binaryOps = 77
    RULE_structFieldDec = 78
    RULE_mutableExpression = 79
    RULE_unaryOpes = 80
    RULE_parenExpression = 81
    RULE_dereferenceExpression = 82
    RULE_expressionBlock = 83
    RULE_borrowExpression = 84
    RULE_primaryExpression = 85
    RULE_fieldAccessPostFix = 86
    RULE_callExpressionPostFix = 87
    RULE_functionCallArgs = 88
    RULE_literal = 89
    RULE_byteLiteral = 90
    RULE_booleanLiteral = 91
    RULE_arrayLiteral = 92
    RULE_stringLiteral = 93

    ruleNames =  [ "program", "topLevelItem", "useDecl", "topLevelDef", 
                   "topLevelVarDef", "defKind", "varDefField", "typeAlias", 
                   "interfaceDef", "externBlock", "externItem", "externParams", 
                   "externParam", "visibility", "unsafeModifier", "externAbi", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "structLiteral", 
                   "structLiteralField", "functionDef", "paramList", "param", 
                   "typeExpr", "pointerType", "basicType", "safeNonNullWrapper", 
                   "typePath", "arrayType", "block", "unsafeBlcok", "statement", 
                   "conditionalAssignmentStmt", "callStmt", "letStmt", "varDef", 
                   "compoundOp", "compoundAssignment", "matchStmt", "matchArm", 
                   "matchPattern", "whileStmt", "initializer", "staticVarDecl", 
                   "initBlock", "assignStmt", "forStmt", "ifStmt", "exprStmt", 
                   "returnStmt", "loopStmt", "boxWrappwer", "typeWrapper", 
                   "boxWrapperPrefix", "typeWrapperPrefix", "safeWrapper", 
                   "expression", "basicTypeCastExpr", "unsafeExpression", 
                   "qualifiedExpression", "typeAccessPostfix", "structDefInit", 
                   "arrayDeclaration", "typePathExpression", "patternPrefix", 
                   "pattern", "castExpressionPostFix", "compoundOps", "rangeSymbol", 
                   "conditionalOps", "booleanOps", "binaryOps", "structFieldDec", 
                   "mutableExpression", "unaryOpes", "parenExpression", 
                   "dereferenceExpression", "expressionBlock", "borrowExpression", 
                   "primaryExpression", "fieldAccessPostFix", "callExpressionPostFix", 
                   "functionCallArgs", "literal", "byteLiteral", "booleanLiteral", 
                   "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    TRUE=74
    FALSE=75
    NONE=76
    Binary=77
    STRING_LITERAL=78
    Identifier=79
    Number=80
    SignedNumber=81
    BYTE_STRING_LITERAL=82
    HexNumber=83
    CHAR_LITERAL=84
    DOUBLE_COLON=85
    EXCL=86
    GT=87
    POUND=88
    LBRACK=89
    RBRACK=90
    COMMA=91
    LPAREN=92
    RPAREN=93
    UNDERSCORE=94
    COLON=95
    ELLIPSIS=96
    WS=97
    COMMENT=98

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 221122) != 0) or _la==79 or _la==88:
                self.state = 188
                self.topLevelItem()
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def useDecl(self):
            return self.getTypedRuleContext(RustParser.UseDeclContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 194
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 195
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 196
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 197
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 198
                self.useDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 199
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypePathContext)
            else:
                return self.getTypedRuleContext(RustParser.TypePathContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_useDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDecl" ):
                listener.enterUseDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDecl" ):
                listener.exitUseDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseDecl" ):
                return visitor.visitUseDecl(self)
            else:
                return visitor.visitChildren(self)




    def useDecl(self):

        localctx = RustParser.UseDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_useDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.match(RustParser.T__0)
            self.state = 203
            self.typePath()
            self.state = 234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 204
                self.match(RustParser.T__1)
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2 or _la==79 or _la==85:
                    self.state = 206
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 205
                        self.typePath()


                    self.state = 220
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [79]:
                        self.state = 208
                        self.match(RustParser.Identifier)
                        pass
                    elif token in [2]:
                        self.state = 209
                        self.match(RustParser.T__1)
                        self.state = 216
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==79:
                            self.state = 210
                            self.match(RustParser.Identifier)
                            self.state = 212
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==91:
                                self.state = 211
                                self.match(RustParser.COMMA)


                            self.state = 218
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 219
                        self.match(RustParser.T__2)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 222
                        self.match(RustParser.COMMA)


                    self.state = 229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 230
                self.match(RustParser.T__2)
                self.state = 231
                self.match(RustParser.COMMA)
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 237
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def topLevelVarDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelVarDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelDef" ):
                return visitor.visitTopLevelDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_topLevelDef)
        try:
            self.state = 243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 239
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 240
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 241
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 242
                self.topLevelVarDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelVarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def defKind(self):
            return self.getTypedRuleContext(RustParser.DefKindContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def varDefField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelVarDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelVarDef" ):
                listener.enterTopLevelVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelVarDef" ):
                listener.exitTopLevelVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelVarDef" ):
                return visitor.visitTopLevelVarDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelVarDef(self):

        localctx = RustParser.TopLevelVarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_topLevelVarDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 245
                self.visibility()


            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0):
                self.state = 248
                self.defKind()


            self.state = 251
            self.match(RustParser.Identifier)
            self.state = 266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.state = 252
                self.match(RustParser.COLON)
                self.state = 253
                self.typeExpr()
                self.state = 254
                self.match(RustParser.T__4)
                self.state = 255
                self.expression(0)
                self.state = 256
                self.match(RustParser.T__3)
                pass
            elif token in [2]:
                self.state = 258
                self.match(RustParser.T__1)
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16 or _la==79:
                    self.state = 259
                    self.varDefField()
                    self.state = 264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 265
                self.match(RustParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_defKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefKind" ):
                listener.enterDefKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefKind" ):
                listener.exitDefKind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefKind" ):
                return visitor.visitDefKind(self)
            else:
                return visitor.visitChildren(self)




    def defKind(self):

        localctx = RustParser.DefKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_defKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 448) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_varDefField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDefField" ):
                listener.enterVarDefField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDefField" ):
                listener.exitVarDefField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDefField" ):
                return visitor.visitVarDefField(self)
            else:
                return visitor.visitChildren(self)




    def varDefField(self):

        localctx = RustParser.VarDefFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_varDefField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 270
                self.visibility()


            self.state = 273
            self.match(RustParser.Identifier)
            self.state = 274
            self.match(RustParser.COLON)
            self.state = 275
            self.typeExpr()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 276
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 279
                self.visibility()


            self.state = 282
            self.match(RustParser.T__8)
            self.state = 283
            self.match(RustParser.Identifier)
            self.state = 284
            self.match(RustParser.T__4)
            self.state = 285
            self.typeExpr()
            self.state = 286
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDef" ):
                return visitor.visitInterfaceDef(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(RustParser.T__9)
            self.state = 289
            self.match(RustParser.Identifier)
            self.state = 290
            self.match(RustParser.T__1)
            self.state = 292 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 291
                self.functionDef()
                self.state = 294 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 84224) != 0)):
                    break

            self.state = 296
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(RustParser.T__10)
            self.state = 299
            self.match(RustParser.STRING_LITERAL)
            self.state = 300
            self.match(RustParser.T__1)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 86528) != 0):
                self.state = 301
                self.externItem()
                self.state = 306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 307
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 309
                    self.visibility()


                self.state = 312
                self.match(RustParser.T__8)
                self.state = 313
                self.match(RustParser.Identifier)
                self.state = 314
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 315
                    self.visibility()


                self.state = 318
                self.match(RustParser.T__11)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 319
                    self.match(RustParser.T__12)


                self.state = 322
                self.match(RustParser.Identifier)
                self.state = 323
                self.match(RustParser.COLON)
                self.state = 324
                self.typeExpr()
                self.state = 325
                self.match(RustParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 327
                    self.visibility()


                self.state = 330
                self.match(RustParser.T__13)
                self.state = 331
                self.match(RustParser.Identifier)
                self.state = 332
                self.match(RustParser.LPAREN)
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 229377) != 0):
                    self.state = 333
                    self.externParams()


                self.state = 336
                self.match(RustParser.RPAREN)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 337
                    self.match(RustParser.T__14)
                    self.state = 338
                    self.typeExpr()


                self.state = 341
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79, 94, 95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 344
                self.externParam()
                self.state = 349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 345
                        self.match(RustParser.COMMA)
                        self.state = 346
                        self.externParam() 
                    self.state = 351
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 352
                    self.match(RustParser.COMMA)
                    self.state = 353
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 356
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79 or _la==94:
                self.state = 359
                _la = self._input.LA(1)
                if not(_la==79 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 362
            self.match(RustParser.COLON)
            self.state = 365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 20, 21, 22, 23, 24, 25, 26, 79, 85, 89]:
                self.state = 363
                self.typeExpr()
                pass
            elif token in [96]:
                self.state = 364
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(RustParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(RustParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(RustParser.T__10)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 372
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 375
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 378 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(RustParser.POUND)

            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 381
                self.match(RustParser.EXCL)


            self.state = 384
            self.match(RustParser.LBRACK)
            self.state = 385
            self.attribute()
            self.state = 386
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_attribute)
        try:
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 388
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 389
                self.match(RustParser.Identifier)
                self.state = 390
                self.match(RustParser.T__4)
                self.state = 391
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 392
                self.match(RustParser.Identifier)
                self.state = 393
                self.match(RustParser.LPAREN)
                self.state = 394
                self.attrArgs()
                self.state = 395
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.attrArg()
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==91:
                self.state = 400
                self.match(RustParser.COMMA)
                self.state = 401
                self.attrArg()
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(RustParser.Identifier)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 408
                self.match(RustParser.T__4)
                self.state = 409
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 414
                self.visibility()


            self.state = 417
            self.match(RustParser.T__16)
            self.state = 418
            self.match(RustParser.Identifier)
            self.state = 419
            self.match(RustParser.T__1)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16 or _la==79:
                self.state = 420
                self.structField()
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 426
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 428
                self.visibility()


            self.state = 431
            self.match(RustParser.Identifier)
            self.state = 432
            self.match(RustParser.COLON)
            self.state = 433
            self.typeExpr()
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 434
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteral" ):
                return visitor.visitStructLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(RustParser.Identifier)
            self.state = 438
            self.match(RustParser.T__1)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 439
                self.structLiteralField()
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 445
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(RustParser.Identifier)
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 448
                self.match(RustParser.COLON)
                self.state = 449
                self.expression(0)


            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 452
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 455
                self.visibility()


            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 458
                self.unsafeModifier()


            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 461
                self.externAbi()


            self.state = 464
            self.match(RustParser.T__13)
            self.state = 465
            self.match(RustParser.Identifier)
            self.state = 472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.state = 466
                self.match(RustParser.T__17)
                pass
            elif token in [92]:
                self.state = 467
                self.match(RustParser.LPAREN)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==19 or _la==79:
                    self.state = 468
                    self.paramList()


                self.state = 471
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 474
                self.match(RustParser.T__14)


            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 477
                self.typeExpr()


            self.state = 480
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.param()
            self.state = 487
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 483
                    self.match(RustParser.COMMA)
                    self.state = 484
                    self.param() 
                self.state = 489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 490
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 493
                self.match(RustParser.T__18)


            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 496
                self.match(RustParser.T__12)


            self.state = 499
            self.match(RustParser.Identifier)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 500
                self.match(RustParser.COLON)
                self.state = 501
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpr" ):
                listener.enterTypeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpr" ):
                listener.exitTypeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpr" ):
                return visitor.visitTypeExpr(self)
            else:
                return visitor.visitChildren(self)




    def typeExpr(self):

        localctx = RustParser.TypeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_typeExpr)
        try:
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19, 21, 22, 23, 24, 25, 26, 79, 85, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.basicType()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(RustParser.T__19)
            self.state = 509
            _la = self._input.LA(1)
            if not(_la==6 or _la==13):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 510
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def safeNonNullWrapper(self):
            return self.getTypedRuleContext(RustParser.SafeNonNullWrapperContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(RustParser.ArrayTypeContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.match(RustParser.T__20)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.safeNonNullWrapper()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 515
                self.match(RustParser.T__21)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 516
                self.match(RustParser.T__22)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 517
                self.match(RustParser.T__23)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 518
                self.arrayType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 519
                self.typePath()
                self.state = 520
                self.basicType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 522
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 525
                self.match(RustParser.T__24)
                self.state = 526
                self.typeExpr()
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 527
                    self.match(RustParser.COMMA)
                    self.state = 528
                    self.typeExpr()
                    self.state = 533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 534
                self.match(RustParser.GT)
                self.state = 536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 535
                    self.match(RustParser.T__17)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 538
                self.match(RustParser.Identifier)
                self.state = 550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 539
                    self.match(RustParser.T__24)
                    self.state = 540
                    self.typeExpr()
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==91:
                        self.state = 541
                        self.match(RustParser.COMMA)
                        self.state = 542
                        self.typeExpr()
                        self.state = 547
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 548
                    self.match(RustParser.GT)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 552
                self.match(RustParser.Identifier)
                self.state = 553
                self.match(RustParser.T__24)
                self.state = 554
                self.typeExpr()
                self.state = 555
                self.match(RustParser.GT)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 557
                self.match(RustParser.T__18)
                self.state = 558
                self.typeExpr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 559
                self.match(RustParser.LBRACK)
                self.state = 560
                self.typeExpr()
                self.state = 561
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 563
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SafeNonNullWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.GT)
            else:
                return self.getToken(RustParser.GT, i)

        def getRuleIndex(self):
            return RustParser.RULE_safeNonNullWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafeNonNullWrapper" ):
                listener.enterSafeNonNullWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafeNonNullWrapper" ):
                listener.exitSafeNonNullWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSafeNonNullWrapper" ):
                return visitor.visitSafeNonNullWrapper(self)
            else:
                return visitor.visitChildren(self)




    def safeNonNullWrapper(self):

        localctx = RustParser.SafeNonNullWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_safeNonNullWrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(RustParser.T__25)
            self.state = 567
            self.typeExpr()
            self.state = 571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 568
                self.match(RustParser.T__26)
                pass
            elif token in [87]:
                self.state = 569
                self.match(RustParser.GT)
                self.state = 570
                self.match(RustParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.match(RustParser.Identifier)
                self.state = 574
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 575
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 578
                self.match(RustParser.Identifier)
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 579
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 580
                        self.match(RustParser.Identifier) 
                    self.state = 585
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = RustParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(RustParser.LBRACK)
            self.state = 589
            self.basicType()
            self.state = 590
            self.match(RustParser.T__3)
            self.state = 591
            self.match(RustParser.Number)
            self.state = 592
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 594
                self.unsafeModifier()


            self.state = 597
            self.match(RustParser.T__1)
            self.state = 601
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 598
                    self.statement() 
                self.state = 603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==79:
                self.state = 604
                self.returnStmt()


            self.state = 607
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlcokContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlcok

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlcok" ):
                listener.enterUnsafeBlcok(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlcok" ):
                listener.exitUnsafeBlcok(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlcok" ):
                return visitor.visitUnsafeBlcok(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlcok(self):

        localctx = RustParser.UnsafeBlcokContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_unsafeBlcok)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.unsafeModifier()
            self.state = 610
            self.match(RustParser.T__1)
            self.state = 614
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 611
                    self.statement() 
                self.state = 616
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==79:
                self.state = 617
                self.returnStmt()


            self.state = 620
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsafeBlcok(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlcokContext,0)


        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def conditionalAssignmentStmt(self):
            return self.getTypedRuleContext(RustParser.ConditionalAssignmentStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def callStmt(self):
            return self.getTypedRuleContext(RustParser.CallStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_statement)
        try:
            self.state = 643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 622
                self.unsafeBlcok()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 623
                self.letStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 624
                self.conditionalAssignmentStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 625
                self.structLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 626
                self.structDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 627
                self.staticVarDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 628
                self.typeWrapper()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 629
                self.assignStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 630
                self.compoundAssignment()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 631
                self.forStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 632
                self.ifStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 633
                self.callStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 634
                self.exprStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 635
                self.whileStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 636
                self.returnStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 637
                self.loopStmt()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 638
                self.match(RustParser.T__27)
                self.state = 639
                self.match(RustParser.T__3)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 640
                self.match(RustParser.T__28)
                self.state = 641
                self.match(RustParser.T__3)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 642
                self.matchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalAssignmentStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def typeWrapper(self):
            return self.getTypedRuleContext(RustParser.TypeWrapperContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_conditionalAssignmentStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAssignmentStmt" ):
                listener.enterConditionalAssignmentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAssignmentStmt" ):
                listener.exitConditionalAssignmentStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalAssignmentStmt" ):
                return visitor.visitConditionalAssignmentStmt(self)
            else:
                return visitor.visitChildren(self)




    def conditionalAssignmentStmt(self):

        localctx = RustParser.ConditionalAssignmentStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conditionalAssignmentStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 645
                self.match(RustParser.T__29)


            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 648
                self.typeWrapper()
                pass

            elif la_ == 2:
                self.state = 649
                self.expression(0)
                pass


            self.state = 652
            self.match(RustParser.T__4)
            self.state = 653
            self.expression(0)
            self.state = 654
            self.match(RustParser.T__30)
            self.state = 655
            self.block()
            self.state = 656
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStmt" ):
                listener.enterCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStmt" ):
                listener.exitCallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStmt" ):
                return visitor.visitCallStmt(self)
            else:
                return visitor.visitChildren(self)




    def callStmt(self):

        localctx = RustParser.CallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_callStmt)
        try:
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.expression(0)

                self.state = 659
                self.match(RustParser.T__31)
                self.state = 660
                self.expression(0)
                self.state = 662
                self.callExpressionPostFix()
                self.state = 663
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.expression(0)
                self.state = 666
                self.callExpressionPostFix()
                self.state = 667
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.VarDefContext)
            else:
                return self.getTypedRuleContext(RustParser.VarDefContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_letStmt)
        self._la = 0 # Token type
        try:
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.match(RustParser.T__29)
                self.state = 672
                self.varDef()
                self.state = 673
                self.match(RustParser.T__4)
                self.state = 674
                self.expression(0)
                self.state = 675
                self.match(RustParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 677
                self.match(RustParser.T__29)
                self.state = 678
                self.varDef()
                self.state = 679
                self.initBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 681
                self.match(RustParser.T__29)
                self.state = 682
                self.match(RustParser.LPAREN)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==13 or _la==33 or _la==79:
                    self.state = 683
                    self.varDef()
                    self.state = 685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 684
                        self.match(RustParser.COMMA)


                    self.state = 691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 692
                self.match(RustParser.RPAREN)
                self.state = 693
                self.match(RustParser.T__4)
                self.state = 694
                self.match(RustParser.LPAREN)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 13510808679489796) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 310377919) != 0):
                    self.state = 695
                    self.expression(0)
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 696
                        self.match(RustParser.COMMA)


                    self.state = 703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 704
                self.match(RustParser.RPAREN)
                self.state = 705
                self.match(RustParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 708
                self.match(RustParser.T__32)


            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 711
                self.match(RustParser.T__12)


            self.state = 714
            self.match(RustParser.Identifier)
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 715
                self.match(RustParser.COLON)
                self.state = 716
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4380866641920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.expression(0)
            self.state = 722
            self.compoundOp()
            self.state = 723
            self.expression(0)
            self.state = 724
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(RustParser.T__41)
            self.state = 727
            self.expression(0)
            self.state = 728
            self.match(RustParser.T__1)
            self.state = 730 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 729
                self.matchArm()
                self.state = 732 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 268460143) != 0)):
                    break

            self.state = 734
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.matchPattern()
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 737
                self.match(RustParser.T__42)
                self.state = 738
                self.matchPattern()
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 744
            self.match(RustParser.T__43)
            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 8]:
                self.state = 745
                self.block()
                pass
            elif token in [45]:
                self.state = 746
                self.match(RustParser.T__44)
                self.state = 748
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 747
                    self.expression(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_matchPattern)
        try:
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 67, 68, 69, 71, 72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.byteLiteral()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.match(RustParser.Number)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 3)
                self.state = 754
                self.match(RustParser.UNDERSCORE)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 4)
                self.state = 755
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(RustParser.T__45)
            self.state = 759
            self.expression(0)
            self.state = 760
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_initializer)
        try:
            self.state = 765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 764
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 767
                self.visibility()


            self.state = 770
            self.match(RustParser.T__11)
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 771
                self.match(RustParser.T__12)


            self.state = 774
            self.match(RustParser.Identifier)
            self.state = 775
            self.match(RustParser.COLON)
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 776
                self.typeExpr()
                pass

            elif la_ == 2:
                self.state = 777
                self.match(RustParser.Identifier)
                pass


            self.state = 780
            self.match(RustParser.T__4)
            self.state = 781
            self.initializer()
            self.state = 782
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(RustParser.T__1)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==79:
                self.state = 785
                self.match(RustParser.Identifier)
                self.state = 786
                self.match(RustParser.COLON)
                self.state = 787
                self.expression(0)
                self.state = 788
                self.match(RustParser.COMMA)
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 795
            self.match(RustParser.T__2)
            self.state = 796
            self.match(RustParser.T__3)
            self.state = 797
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.expression(0)
            self.state = 800
            self.match(RustParser.T__4)
            self.state = 801
            self.expression(0)
            self.state = 802
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(RustParser.T__46)
            self.state = 805
            self.match(RustParser.Identifier)
            self.state = 806
            self.match(RustParser.T__47)
            self.state = 807
            self.expression(0)
            self.state = 808
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(RustParser.T__48)
            self.state = 811
            self.expression(0)
            self.state = 812
            self.block()
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50:
                self.state = 813
                self.match(RustParser.T__49)
                self.state = 814
                self.expression(0)
                self.state = 815
                self.block()
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==31:
                self.state = 822
                self.match(RustParser.T__30)
                self.state = 823
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.primaryExpression()
            self.state = 827
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 835
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.match(RustParser.T__44)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13510808679489796) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 310377919) != 0):
                    self.state = 830
                    self.expression(0)


                self.state = 833
                self.match(RustParser.T__3)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(RustParser.T__50)
            self.state = 838
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrappwerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrappwer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrappwer" ):
                listener.enterBoxWrappwer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrappwer" ):
                listener.exitBoxWrappwer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWrappwer" ):
                return visitor.visitBoxWrappwer(self)
            else:
                return visitor.visitChildren(self)




    def boxWrappwer(self):

        localctx = RustParser.BoxWrappwerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_boxWrappwer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(RustParser.T__51)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 841
                self.typeExpr()


            self.state = 844
            self.match(RustParser.LPAREN)
            self.state = 845
            self.expression(0)
            self.state = 846
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_typeWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapper" ):
                listener.enterTypeWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapper" ):
                listener.exitTypeWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWrapper" ):
                return visitor.visitTypeWrapper(self)
            else:
                return visitor.visitChildren(self)




    def typeWrapper(self):

        localctx = RustParser.TypeWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeWrapper)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(RustParser.T__52)
            self.state = 849
            self.match(RustParser.LPAREN)
            self.state = 850
            self.expression(0)
            self.state = 851
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_boxWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoxWrapperPrefix" ):
                listener.enterBoxWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoxWrapperPrefix" ):
                listener.exitBoxWrapperPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoxWrapperPrefix" ):
                return visitor.visitBoxWrapperPrefix(self)
            else:
                return visitor.visitChildren(self)




    def boxWrapperPrefix(self):

        localctx = RustParser.BoxWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_boxWrapperPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(RustParser.T__51)
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 133693440) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 1089) != 0):
                self.state = 854
                self.typeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeWrapperPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_typeWrapperPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeWrapperPrefix" ):
                listener.enterTypeWrapperPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeWrapperPrefix" ):
                listener.exitTypeWrapperPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeWrapperPrefix" ):
                return visitor.visitTypeWrapperPrefix(self)
            else:
                return visitor.visitChildren(self)




    def typeWrapperPrefix(self):

        localctx = RustParser.TypeWrapperPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typeWrapperPrefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(RustParser.T__52)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SafeWrapperContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_safeWrapper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSafeWrapper" ):
                listener.enterSafeWrapper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSafeWrapper" ):
                listener.exitSafeWrapper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSafeWrapper" ):
                return visitor.visitSafeWrapper(self)
            else:
                return visitor.visitChildren(self)




    def safeWrapper(self):

        localctx = RustParser.SafeWrapperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_safeWrapper)
        try:
            self.state = 871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 859
                self.match(RustParser.T__52)
                self.state = 860
                self.match(RustParser.LPAREN)
                self.state = 861
                self.expression(0)
                self.state = 862
                self.match(RustParser.RPAREN)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self.match(RustParser.T__51)
                self.state = 865
                self.match(RustParser.DOUBLE_COLON)
                self.state = 866
                self.match(RustParser.Identifier)
                self.state = 867
                self.match(RustParser.LPAREN)
                self.state = 868
                self.expression(0)
                self.state = 869
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def safeWrapper(self):
            return self.getTypedRuleContext(RustParser.SafeWrapperContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def typePathExpression(self):
            return self.getTypedRuleContext(RustParser.TypePathExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def structDefInit(self):
            return self.getTypedRuleContext(RustParser.StructDefInitContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def unsafeExpression(self):
            return self.getTypedRuleContext(RustParser.UnsafeExpressionContext,0)


        def basicTypeCastExpr(self):
            return self.getTypedRuleContext(RustParser.BasicTypeCastExprContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def qualifiedExpression(self):
            return self.getTypedRuleContext(RustParser.QualifiedExpressionContext,0)


        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(RustParser.ArrayDeclarationContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def rangeSymbol(self):
            return self.getTypedRuleContext(RustParser.RangeSymbolContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def typeAccessPostfix(self):
            return self.getTypedRuleContext(RustParser.TypeAccessPostfixContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 874
                self.mutableExpression()
                self.state = 875
                self.expression(26)
                pass

            elif la_ == 2:
                self.state = 877
                self.safeWrapper()
                pass

            elif la_ == 3:
                self.state = 878
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 879
                self.structLiteral()
                pass

            elif la_ == 5:
                self.state = 880
                self.typePathExpression()
                self.state = 881
                self.expression(20)
                pass

            elif la_ == 6:
                self.state = 883
                self.parenExpression()
                pass

            elif la_ == 7:
                self.state = 884
                self.structFieldDec()
                pass

            elif la_ == 8:
                self.state = 885
                self.structDefInit()
                pass

            elif la_ == 9:
                self.state = 886
                self.unaryOpes()
                self.state = 887
                self.expression(16)
                pass

            elif la_ == 10:
                self.state = 889
                self.borrowExpression()
                pass

            elif la_ == 11:
                self.state = 890
                self.unsafeExpression()
                pass

            elif la_ == 12:
                self.state = 891
                self.basicTypeCastExpr()
                pass

            elif la_ == 13:
                self.state = 892
                self.dereferenceExpression()
                pass

            elif la_ == 14:
                self.state = 893
                self.expressionBlock()
                pass

            elif la_ == 15:
                self.state = 894
                self.qualifiedExpression()
                pass

            elif la_ == 16:
                self.state = 895
                self.patternPrefix()
                self.state = 896
                self.expression(3)
                pass

            elif la_ == 17:
                self.state = 898
                self.arrayDeclaration()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 929
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 901
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 902
                        self.binaryOps()
                        self.state = 903
                        self.expression(24)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 905
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 906
                        self.rangeSymbol()
                        self.state = 907
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 909
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 910
                        self.booleanOps()
                        self.state = 911
                        self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 913
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 914
                        self.conditionalOps()
                        self.state = 915
                        self.expression(9)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 917
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 918
                        self.compoundOps()
                        self.state = 919
                        self.expression(7)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 921
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 922
                        self.castExpressionPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 923
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 924
                        self.callExpressionPostFix()
                        pass

                    elif la_ == 8:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 925
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 926
                        self.typeAccessPostfix()
                        pass

                    elif la_ == 9:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 927
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 928
                        self.fieldAccessPostFix()
                        pass

             
                self.state = 933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasicTypeCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_basicTypeCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicTypeCastExpr" ):
                listener.enterBasicTypeCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicTypeCastExpr" ):
                listener.exitBasicTypeCastExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicTypeCastExpr" ):
                return visitor.visitBasicTypeCastExpr(self)
            else:
                return visitor.visitChildren(self)




    def basicTypeCastExpr(self):

        localctx = RustParser.BasicTypeCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_basicTypeCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.typeExpr()
            self.state = 935
            self.typePath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeExpression" ):
                listener.enterUnsafeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeExpression" ):
                listener.exitUnsafeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeExpression" ):
                return visitor.visitUnsafeExpression(self)
            else:
                return visitor.visitChildren(self)




    def unsafeExpression(self):

        localctx = RustParser.UnsafeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_unsafeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self.match(RustParser.T__7)
            self.state = 938
            self.match(RustParser.T__1)
            self.state = 939
            self.expression(0)
            self.state = 940
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedExpression" ):
                listener.enterQualifiedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedExpression" ):
                listener.exitQualifiedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedExpression" ):
                return visitor.visitQualifiedExpression(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedExpression(self):

        localctx = RustParser.QualifiedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_qualifiedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(RustParser.T__24)
            self.state = 943
            self.expression(0)
            self.state = 944
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAccessPostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self):
            return self.getTypedRuleContext(RustParser.TypeExprContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAccessPostfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAccessPostfix" ):
                listener.enterTypeAccessPostfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAccessPostfix" ):
                listener.exitTypeAccessPostfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAccessPostfix" ):
                return visitor.visitTypeAccessPostfix(self)
            else:
                return visitor.visitChildren(self)




    def typeAccessPostfix(self):

        localctx = RustParser.TypeAccessPostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_typeAccessPostfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.typeExpr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structDefInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefInit" ):
                listener.enterStructDefInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefInit" ):
                listener.exitStructDefInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefInit" ):
                return visitor.visitStructDefInit(self)
            else:
                return visitor.visitChildren(self)




    def structDefInit(self):

        localctx = RustParser.StructDefInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_structDefInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(RustParser.Identifier)
            self.state = 949
            self.match(RustParser.T__4)
            self.state = 950
            self.match(RustParser.T__1)
            self.state = 951
            self.expression(0)
            self.state = 952
            self.match(RustParser.T__2)
            self.state = 953
            self.match(RustParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = RustParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(RustParser.Identifier)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 956
                self.match(RustParser.EXCL)


            self.state = 959
            self.match(RustParser.LBRACK)
            self.state = 960
            self.match(RustParser.Number)
            self.state = 961
            self.match(RustParser.T__3)
            self.state = 962
            self.expression(0)
            self.state = 963
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathExpression" ):
                listener.enterTypePathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathExpression" ):
                listener.exitTypePathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePathExpression" ):
                return visitor.visitTypePathExpression(self)
            else:
                return visitor.visitChildren(self)




    def typePathExpression(self):

        localctx = RustParser.TypePathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_typePathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 965
                    self.match(RustParser.Identifier)
                    self.state = 966
                    self.match(RustParser.DOUBLE_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 969 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPrefix" ):
                return visitor.visitPatternPrefix(self)
            else:
                return visitor.visitChildren(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 971
                self.match(RustParser.T__29)


            self.state = 974
            self.pattern()
            self.state = 975
            self.match(RustParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 977
                    self.match(RustParser.T__32)


                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 980
                    self.match(RustParser.T__12)


                self.state = 983
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 984
                self.match(RustParser.Identifier)
                self.state = 985
                self.match(RustParser.LPAREN)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==33:
                    self.state = 986
                    self.match(RustParser.T__32)


                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 989
                    self.match(RustParser.T__12)


                self.state = 992
                self.match(RustParser.Identifier)
                self.state = 993
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeExprContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeExprContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpressionPostFix" ):
                return visitor.visitCastExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(RustParser.T__53)
            self.state = 997
            self.typeExpr()
            self.state = 1002
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 998
                    self.match(RustParser.T__53)
                    self.state = 999
                    self.typeExpr() 
                self.state = 1004
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOps" ):
                return visitor.visitCompoundOps(self)
            else:
                return visitor.visitChildren(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4380866641920) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeSymbol" ):
                listener.enterRangeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeSymbol" ):
                listener.exitRangeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeSymbol" ):
                return visitor.visitRangeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def rangeSymbol(self):

        localctx = RustParser.RangeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_rangeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(RustParser.T__54)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalOps" ):
                return visitor.visitConditionalOps(self)
            else:
                return visitor.visitChildren(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 4611686050639642625) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOps" ):
                return visitor.visitBooleanOps(self)
            else:
                return visitor.visitChildren(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3458764513955282944) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOps" ):
                return visitor.visitBinaryOps(self)
            else:
                return visitor.visitChildren(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            _la = self._input.LA(1)
            if not(((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 65970697666561) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFieldDec" ):
                return visitor.visitStructFieldDec(self)
            else:
                return visitor.visitChildren(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(RustParser.Identifier)
            self.state = 1016
            self.match(RustParser.T__1)
            self.state = 1017
            self.structLiteralField()
            self.state = 1022
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1018
                    self.match(RustParser.COMMA)
                    self.state = 1019
                    self.structLiteralField() 
                self.state = 1024
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 1025
                self.match(RustParser.COMMA)


            self.state = 1028
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableExpression" ):
                return visitor.visitMutableExpression(self)
            else:
                return visitor.visitChildren(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOpes" ):
                return visitor.visitUnaryOpes(self)
            else:
                return visitor.visitChildren(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4194307) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(RustParser.LPAREN)
            self.state = 1035
            self.expression(0)
            self.state = 1036
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(RustParser.T__19)
            self.state = 1039
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(RustParser.T__1)
            self.state = 1045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1042
                    self.statement() 
                self.state = 1047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

            self.state = 1048
            self.expression(0)
            self.state = 1049
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.match(RustParser.T__18)
            self.state = 1052
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_primaryExpression)
        try:
            self.state = 1056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1055
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldAccessPostFix" ):
                return visitor.visitFieldAccessPostFix(self)
            else:
                return visitor.visitChildren(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_fieldAccessPostFix)
        try:
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.match(RustParser.LBRACK)
                self.state = 1059
                self.primaryExpression()
                self.state = 1060
                self.match(RustParser.RBRACK)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1062
                        self.match(RustParser.T__31)
                        self.state = 1063
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1066 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallArgs(self):
            return self.getTypedRuleContext(RustParser.FunctionCallArgsContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_callExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpressionPostFix" ):
                listener.enterCallExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpressionPostFix" ):
                listener.exitCallExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpressionPostFix" ):
                return visitor.visitCallExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def callExpressionPostFix(self):

        localctx = RustParser.CallExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_callExpressionPostFix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 1070
                self.match(RustParser.T__31)
                self.state = 1071
                self.expression(0)


            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1074
                self.match(RustParser.EXCL)


            self.state = 1077
            self.functionCallArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_functionCallArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArgs" ):
                listener.enterFunctionCallArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArgs" ):
                listener.exitFunctionCallArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArgs" ):
                return visitor.visitFunctionCallArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArgs(self):

        localctx = RustParser.FunctionCallArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_functionCallArgs)
        self._la = 0 # Token type
        try:
            self.state = 1091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1079
                self.match(RustParser.T__17)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.match(RustParser.LPAREN)
                self.state = 1081
                self.expression(0)
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 1082
                    self.match(RustParser.COMMA)
                    self.state = 1083
                    self.expression(0)
                    self.state = 1088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1089
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def byteLiteral(self):
            return self.getTypedRuleContext(RustParser.ByteLiteralContext,0)


        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_literal)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79, 86, 89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1093
                self.arrayLiteral()
                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1094
                self.match(RustParser.HexNumber)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1095
                self.match(RustParser.Number)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1096
                self.match(RustParser.SignedNumber)
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1097
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1098
                self.match(RustParser.Binary)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1099
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [74, 75]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1100
                self.booleanLiteral()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1101
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [66, 67, 68, 69, 71, 72]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1102
                self.byteLiteral()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1103
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByteLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_byteLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByteLiteral" ):
                listener.enterByteLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByteLiteral" ):
                listener.exitByteLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitByteLiteral" ):
                return visitor.visitByteLiteral(self)
            else:
                return visitor.visitChildren(self)




    def byteLiteral(self):

        localctx = RustParser.ByteLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_byteLiteral)
        try:
            self.state = 1117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.match(RustParser.T__65)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.match(RustParser.T__66)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1108
                self.match(RustParser.T__67)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1109
                self.match(RustParser.T__68)
                self.state = 1110
                self.match(RustParser.LPAREN)
                self.state = 1111
                self.match(RustParser.T__69)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1112
                self.match(RustParser.T__68)
                self.state = 1113
                self.match(RustParser.RPAREN)
                self.state = 1114
                self.match(RustParser.T__69)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1115
                self.match(RustParser.T__70)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1116
                self.match(RustParser.T__71)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            _la = self._input.LA(1)
            if not(_la==74 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1121
                    self.match(RustParser.Identifier)


                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1124
                    self.match(RustParser.EXCL)


                self.state = 1127
                self.match(RustParser.LBRACK)
                self.state = 1128
                self.expression(0)
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==91:
                    self.state = 1129
                    self.match(RustParser.COMMA)
                    self.state = 1130
                    self.expression(0)
                    self.state = 1135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1136
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1138
                    self.match(RustParser.Identifier)


                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1141
                    self.match(RustParser.EXCL)


                self.state = 1144
                self.match(RustParser.LBRACK)
                self.state = 1145
                self.expression(0)
                self.state = 1146
                self.match(RustParser.T__3)
                self.state = 1147
                self.expression(0)
                self.state = 1148
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1150
                    self.match(RustParser.Identifier)


                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 1153
                    self.match(RustParser.EXCL)


                self.state = 1156
                self.match(RustParser.LBRACK)
                self.state = 1157
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(RustParser.T__72)
            self.state = 1164
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1161
                    self.matchWildcard() 
                self.state = 1166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

            self.state = 1167
            self.match(RustParser.T__72)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[62] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         




