# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,83,835,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,1,0,5,0,124,8,0,10,0,12,0,127,9,0,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,3,1,138,8,1,1,2,3,2,141,8,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,3,1,3,1,3,1,3,5,3,153,8,3,10,3,12,3,156,9,3,1,3,1,3,1,
        4,3,4,161,8,4,1,4,1,4,1,4,1,4,3,4,167,8,4,1,4,1,4,3,4,171,8,4,1,
        4,1,4,1,4,1,4,1,4,1,4,3,4,179,8,4,1,4,1,4,1,4,1,4,3,4,185,8,4,1,
        4,1,4,1,4,3,4,190,8,4,1,4,3,4,193,8,4,1,5,1,5,1,5,5,5,198,8,5,10,
        5,12,5,201,9,5,1,5,1,5,3,5,205,8,5,1,5,3,5,208,8,5,1,6,3,6,211,8,
        6,1,6,1,6,1,6,3,6,216,8,6,1,7,1,7,1,8,4,8,221,8,8,11,8,12,8,222,
        1,9,1,9,3,9,227,8,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,3,10,242,8,10,1,11,1,11,1,11,5,11,247,8,11,10,11,
        12,11,250,9,11,1,12,1,12,1,12,3,12,255,8,12,1,13,1,13,1,14,3,14,
        260,8,14,1,14,1,14,1,14,1,14,5,14,266,8,14,10,14,12,14,269,9,14,
        1,14,1,14,1,15,3,15,274,8,15,1,15,1,15,1,15,1,15,3,15,280,8,15,1,
        16,3,16,283,8,16,1,16,3,16,286,8,16,1,16,3,16,289,8,16,1,16,1,16,
        1,16,1,16,3,16,295,8,16,1,16,1,16,3,16,299,8,16,1,16,3,16,302,8,
        16,1,16,1,16,1,17,1,17,1,18,1,18,3,18,310,8,18,1,19,1,19,1,19,5,
        19,315,8,19,10,19,12,19,318,9,19,1,19,3,19,321,8,19,1,20,3,20,324,
        8,20,1,20,1,20,1,20,1,20,1,21,3,21,331,8,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,22,3,22,342,8,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,5,22,354,8,22,10,22,12,22,357,9,22,1,22,
        3,22,360,8,22,1,23,3,23,363,8,23,1,23,1,23,1,23,1,23,3,23,369,8,
        23,1,24,3,24,372,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        25,1,25,1,25,1,26,1,26,3,26,387,8,26,1,27,3,27,390,8,27,1,27,1,27,
        1,27,5,27,395,8,27,10,27,12,27,398,9,27,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,413,8,29,10,29,12,29,
        416,9,29,1,29,1,29,3,29,420,8,29,1,29,1,29,1,29,1,29,1,29,5,29,427,
        8,29,10,29,12,29,430,9,29,1,29,1,29,3,29,434,8,29,1,29,1,29,1,29,
        3,29,439,8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,3,29,453,8,29,1,30,1,30,5,30,457,8,30,10,30,12,30,460,
        9,30,1,30,3,30,463,8,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,4,31,490,8,31,11,31,12,31,491,1,31,1,31,3,31,
        496,8,31,1,32,1,32,1,32,1,32,1,33,3,33,503,8,33,1,33,1,33,3,33,507,
        8,33,1,33,1,33,1,33,1,33,3,33,513,8,33,1,33,1,33,1,33,1,33,1,34,
        1,34,3,34,521,8,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,3,36,
        531,8,36,1,36,1,36,1,36,3,36,536,8,36,1,36,1,36,1,36,1,36,3,36,542,
        8,36,1,36,1,36,1,36,3,36,547,8,36,3,36,549,8,36,1,37,1,37,1,37,1,
        37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,3,
        39,567,8,39,1,40,1,40,1,40,1,41,1,41,3,41,574,8,41,1,41,1,41,3,41,
        578,8,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,
        603,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,614,8,
        43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,5,43,638,8,43,10,
        43,12,43,641,9,43,5,43,643,8,43,10,43,12,43,646,9,43,1,44,1,44,5,
        44,650,8,44,10,44,12,44,653,9,44,1,44,1,44,1,44,1,45,1,45,1,45,1,
        46,1,46,1,46,1,46,3,46,665,8,46,1,46,3,46,668,8,46,1,46,1,46,4,46,
        672,8,46,11,46,12,46,673,1,46,1,46,1,46,1,46,3,46,680,8,46,1,46,
        1,46,3,46,684,8,46,1,46,1,46,1,46,1,46,5,46,690,8,46,10,46,12,46,
        693,9,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,701,8,47,1,47,1,47,1,
        47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,713,8,47,10,47,12,47,
        716,9,47,1,47,3,47,719,8,47,1,47,1,47,3,47,723,8,47,1,48,1,48,1,
        48,1,48,1,48,3,48,730,8,48,1,48,1,48,3,48,734,8,48,1,48,1,48,1,49,
        1,49,1,49,1,49,5,49,742,8,49,10,49,12,49,745,9,49,1,49,1,49,1,50,
        1,50,1,50,1,50,1,51,1,51,1,51,5,51,756,8,51,10,51,12,51,759,9,51,
        1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,53,5,53,769,8,53,10,53,12,53,
        772,9,53,1,54,1,54,1,54,1,54,1,55,1,55,3,55,780,8,55,1,55,1,55,1,
        55,3,55,785,8,55,1,55,3,55,788,8,55,1,56,1,56,1,56,3,56,793,8,56,
        1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,803,8,57,1,58,1,58,
        1,59,1,59,1,59,1,59,5,59,811,8,59,10,59,12,59,814,9,59,1,59,1,59,
        1,59,1,59,1,59,1,59,1,59,1,59,3,59,824,8,59,1,60,1,60,5,60,828,8,
        60,10,60,12,60,831,9,60,1,60,1,60,1,60,1,829,1,86,61,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,0,8,2,0,65,65,79,79,
        1,0,64,66,2,0,8,8,14,14,1,0,23,30,2,0,16,17,44,50,3,0,22,22,51,54,
        72,72,2,0,65,66,79,79,1,0,61,62,926,0,125,1,0,0,0,2,137,1,0,0,0,
        4,140,1,0,0,0,6,148,1,0,0,0,8,192,1,0,0,0,10,207,1,0,0,0,12,210,
        1,0,0,0,14,217,1,0,0,0,16,220,1,0,0,0,18,224,1,0,0,0,20,241,1,0,
        0,0,22,243,1,0,0,0,24,251,1,0,0,0,26,256,1,0,0,0,28,259,1,0,0,0,
        30,273,1,0,0,0,32,282,1,0,0,0,34,305,1,0,0,0,36,307,1,0,0,0,38,311,
        1,0,0,0,40,323,1,0,0,0,42,330,1,0,0,0,44,341,1,0,0,0,46,362,1,0,
        0,0,48,371,1,0,0,0,50,381,1,0,0,0,52,386,1,0,0,0,54,389,1,0,0,0,
        56,399,1,0,0,0,58,452,1,0,0,0,60,454,1,0,0,0,62,495,1,0,0,0,64,497,
        1,0,0,0,66,502,1,0,0,0,68,520,1,0,0,0,70,522,1,0,0,0,72,548,1,0,
        0,0,74,550,1,0,0,0,76,555,1,0,0,0,78,561,1,0,0,0,80,568,1,0,0,0,
        82,577,1,0,0,0,84,579,1,0,0,0,86,613,1,0,0,0,88,647,1,0,0,0,90,657,
        1,0,0,0,92,660,1,0,0,0,94,722,1,0,0,0,96,724,1,0,0,0,98,737,1,0,
        0,0,100,748,1,0,0,0,102,752,1,0,0,0,104,763,1,0,0,0,106,765,1,0,
        0,0,108,773,1,0,0,0,110,787,1,0,0,0,112,789,1,0,0,0,114,802,1,0,
        0,0,116,804,1,0,0,0,118,823,1,0,0,0,120,825,1,0,0,0,122,124,3,2,
        1,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,
        0,0,126,1,1,0,0,0,127,125,1,0,0,0,128,138,3,32,16,0,129,138,3,28,
        14,0,130,138,3,16,8,0,131,138,3,6,3,0,132,138,3,4,2,0,133,138,3,
        42,21,0,134,138,3,44,22,0,135,138,3,48,24,0,136,138,3,66,33,0,137,
        128,1,0,0,0,137,129,1,0,0,0,137,130,1,0,0,0,137,131,1,0,0,0,137,
        132,1,0,0,0,137,133,1,0,0,0,137,134,1,0,0,0,137,135,1,0,0,0,137,
        136,1,0,0,0,138,3,1,0,0,0,139,141,3,14,7,0,140,139,1,0,0,0,140,141,
        1,0,0,0,141,142,1,0,0,0,142,143,5,1,0,0,143,144,5,65,0,0,144,145,
        5,2,0,0,145,146,3,52,26,0,146,147,5,3,0,0,147,5,1,0,0,0,148,149,
        5,4,0,0,149,150,5,64,0,0,150,154,5,5,0,0,151,153,3,8,4,0,152,151,
        1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,157,
        1,0,0,0,156,154,1,0,0,0,157,158,5,6,0,0,158,7,1,0,0,0,159,161,3,
        14,7,0,160,159,1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,5,
        1,0,0,163,164,5,65,0,0,164,193,5,3,0,0,165,167,3,14,7,0,166,165,
        1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,170,5,7,0,0,169,171,
        5,8,0,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,
        5,65,0,0,173,174,5,80,0,0,174,175,3,52,26,0,175,176,5,3,0,0,176,
        193,1,0,0,0,177,179,3,14,7,0,178,177,1,0,0,0,178,179,1,0,0,0,179,
        180,1,0,0,0,180,181,5,9,0,0,181,182,5,65,0,0,182,184,5,77,0,0,183,
        185,3,10,5,0,184,183,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,
        189,5,78,0,0,187,188,5,10,0,0,188,190,3,52,26,0,189,187,1,0,0,0,
        189,190,1,0,0,0,190,191,1,0,0,0,191,193,5,3,0,0,192,160,1,0,0,0,
        192,166,1,0,0,0,192,178,1,0,0,0,193,9,1,0,0,0,194,199,3,12,6,0,195,
        196,5,76,0,0,196,198,3,12,6,0,197,195,1,0,0,0,198,201,1,0,0,0,199,
        197,1,0,0,0,199,200,1,0,0,0,200,204,1,0,0,0,201,199,1,0,0,0,202,
        203,5,76,0,0,203,205,5,81,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,
        208,1,0,0,0,206,208,5,81,0,0,207,194,1,0,0,0,207,206,1,0,0,0,208,
        11,1,0,0,0,209,211,7,0,0,0,210,209,1,0,0,0,210,211,1,0,0,0,211,212,
        1,0,0,0,212,215,5,80,0,0,213,216,3,52,26,0,214,216,5,81,0,0,215,
        213,1,0,0,0,215,214,1,0,0,0,216,13,1,0,0,0,217,218,5,11,0,0,218,
        15,1,0,0,0,219,221,3,18,9,0,220,219,1,0,0,0,221,222,1,0,0,0,222,
        220,1,0,0,0,222,223,1,0,0,0,223,17,1,0,0,0,224,226,5,73,0,0,225,
        227,5,71,0,0,226,225,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,
        229,5,74,0,0,229,230,3,20,10,0,230,231,5,75,0,0,231,19,1,0,0,0,232,
        242,5,65,0,0,233,234,5,65,0,0,234,235,5,2,0,0,235,242,3,26,13,0,
        236,237,5,65,0,0,237,238,5,77,0,0,238,239,3,22,11,0,239,240,5,78,
        0,0,240,242,1,0,0,0,241,232,1,0,0,0,241,233,1,0,0,0,241,236,1,0,
        0,0,242,21,1,0,0,0,243,248,3,24,12,0,244,245,5,76,0,0,245,247,3,
        24,12,0,246,244,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,
        1,0,0,0,249,23,1,0,0,0,250,248,1,0,0,0,251,254,5,65,0,0,252,253,
        5,2,0,0,253,255,3,26,13,0,254,252,1,0,0,0,254,255,1,0,0,0,255,25,
        1,0,0,0,256,257,7,1,0,0,257,27,1,0,0,0,258,260,3,14,7,0,259,258,
        1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,262,5,12,0,0,262,263,
        5,65,0,0,263,267,5,5,0,0,264,266,3,30,15,0,265,264,1,0,0,0,266,269,
        1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,
        1,0,0,0,270,271,5,6,0,0,271,29,1,0,0,0,272,274,3,14,7,0,273,272,
        1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,276,5,65,0,0,276,277,
        5,80,0,0,277,279,3,52,26,0,278,280,5,76,0,0,279,278,1,0,0,0,279,
        280,1,0,0,0,280,31,1,0,0,0,281,283,3,14,7,0,282,281,1,0,0,0,282,
        283,1,0,0,0,283,285,1,0,0,0,284,286,3,34,17,0,285,284,1,0,0,0,285,
        286,1,0,0,0,286,288,1,0,0,0,287,289,3,36,18,0,288,287,1,0,0,0,288,
        289,1,0,0,0,289,290,1,0,0,0,290,291,5,9,0,0,291,292,5,65,0,0,292,
        294,5,77,0,0,293,295,3,38,19,0,294,293,1,0,0,0,294,295,1,0,0,0,295,
        296,1,0,0,0,296,298,5,78,0,0,297,299,5,10,0,0,298,297,1,0,0,0,298,
        299,1,0,0,0,299,301,1,0,0,0,300,302,3,52,26,0,301,300,1,0,0,0,301,
        302,1,0,0,0,302,303,1,0,0,0,303,304,3,60,30,0,304,33,1,0,0,0,305,
        306,5,13,0,0,306,35,1,0,0,0,307,309,5,4,0,0,308,310,5,64,0,0,309,
        308,1,0,0,0,309,310,1,0,0,0,310,37,1,0,0,0,311,316,3,40,20,0,312,
        313,5,76,0,0,313,315,3,40,20,0,314,312,1,0,0,0,315,318,1,0,0,0,316,
        314,1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,319,
        321,5,76,0,0,320,319,1,0,0,0,320,321,1,0,0,0,321,39,1,0,0,0,322,
        324,5,8,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,
        326,5,65,0,0,326,327,5,80,0,0,327,328,3,52,26,0,328,41,1,0,0,0,329,
        331,3,14,7,0,330,329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,
        333,5,14,0,0,333,334,5,65,0,0,334,335,5,80,0,0,335,336,3,52,26,0,
        336,337,5,2,0,0,337,338,3,86,43,0,338,339,5,3,0,0,339,43,1,0,0,0,
        340,342,3,14,7,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,
        343,344,5,15,0,0,344,359,5,65,0,0,345,346,5,80,0,0,346,347,3,52,
        26,0,347,348,5,2,0,0,348,349,3,86,43,0,349,350,5,3,0,0,350,360,1,
        0,0,0,351,355,5,5,0,0,352,354,3,46,23,0,353,352,1,0,0,0,354,357,
        1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,355,
        1,0,0,0,358,360,5,6,0,0,359,345,1,0,0,0,359,351,1,0,0,0,360,45,1,
        0,0,0,361,363,3,14,7,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,1,
        0,0,0,364,365,5,65,0,0,365,366,5,80,0,0,366,368,3,52,26,0,367,369,
        5,76,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,47,1,0,0,0,370,372,
        3,14,7,0,371,370,1,0,0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,
        5,13,0,0,374,375,5,65,0,0,375,376,5,80,0,0,376,377,3,52,26,0,377,
        378,5,2,0,0,378,379,3,86,43,0,379,380,5,3,0,0,380,49,1,0,0,0,381,
        382,5,16,0,0,382,383,3,52,26,0,383,51,1,0,0,0,384,387,3,58,29,0,
        385,387,3,56,28,0,386,384,1,0,0,0,386,385,1,0,0,0,387,53,1,0,0,0,
        388,390,5,70,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,
        391,396,5,65,0,0,392,393,5,70,0,0,393,395,5,65,0,0,394,392,1,0,0,
        0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,55,1,0,0,0,
        398,396,1,0,0,0,399,400,5,17,0,0,400,401,7,2,0,0,401,402,3,52,26,
        0,402,57,1,0,0,0,403,453,5,18,0,0,404,453,5,19,0,0,405,453,5,20,
        0,0,406,453,5,21,0,0,407,419,3,54,27,0,408,409,5,22,0,0,409,414,
        3,52,26,0,410,411,5,76,0,0,411,413,3,52,26,0,412,410,1,0,0,0,413,
        416,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,
        414,1,0,0,0,417,418,5,72,0,0,418,420,1,0,0,0,419,408,1,0,0,0,419,
        420,1,0,0,0,420,453,1,0,0,0,421,433,5,65,0,0,422,423,5,22,0,0,423,
        428,3,52,26,0,424,425,5,76,0,0,425,427,3,52,26,0,426,424,1,0,0,0,
        427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,
        430,428,1,0,0,0,431,432,5,72,0,0,432,434,1,0,0,0,433,422,1,0,0,0,
        433,434,1,0,0,0,434,453,1,0,0,0,435,436,5,16,0,0,436,453,3,52,26,
        0,437,439,3,54,27,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,1,0,
        0,0,440,441,5,74,0,0,441,442,3,52,26,0,442,443,5,3,0,0,443,444,5,
        66,0,0,444,445,5,75,0,0,445,453,1,0,0,0,446,453,3,54,27,0,447,448,
        5,74,0,0,448,449,3,52,26,0,449,450,5,75,0,0,450,453,1,0,0,0,451,
        453,5,65,0,0,452,403,1,0,0,0,452,404,1,0,0,0,452,405,1,0,0,0,452,
        406,1,0,0,0,452,407,1,0,0,0,452,421,1,0,0,0,452,435,1,0,0,0,452,
        438,1,0,0,0,452,446,1,0,0,0,452,447,1,0,0,0,452,451,1,0,0,0,453,
        59,1,0,0,0,454,458,5,5,0,0,455,457,3,62,31,0,456,455,1,0,0,0,457,
        460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,462,1,0,0,0,460,
        458,1,0,0,0,461,463,3,82,41,0,462,461,1,0,0,0,462,463,1,0,0,0,463,
        464,1,0,0,0,464,465,5,6,0,0,465,61,1,0,0,0,466,496,3,70,35,0,467,
        496,3,66,33,0,468,496,3,74,37,0,469,470,5,65,0,0,470,496,5,3,0,0,
        471,472,3,86,43,0,472,473,7,3,0,0,473,474,3,86,43,0,474,475,5,3,
        0,0,475,496,1,0,0,0,476,496,3,76,38,0,477,496,3,78,39,0,478,496,
        3,80,40,0,479,496,3,64,32,0,480,496,3,84,42,0,481,482,5,31,0,0,482,
        496,5,3,0,0,483,484,5,32,0,0,484,496,5,3,0,0,485,486,5,33,0,0,486,
        487,3,86,43,0,487,489,5,5,0,0,488,490,3,102,51,0,489,488,1,0,0,0,
        490,491,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,
        493,494,5,6,0,0,494,496,1,0,0,0,495,466,1,0,0,0,495,467,1,0,0,0,
        495,468,1,0,0,0,495,469,1,0,0,0,495,471,1,0,0,0,495,476,1,0,0,0,
        495,477,1,0,0,0,495,478,1,0,0,0,495,479,1,0,0,0,495,480,1,0,0,0,
        495,481,1,0,0,0,495,483,1,0,0,0,495,485,1,0,0,0,496,63,1,0,0,0,497,
        498,5,34,0,0,498,499,3,86,43,0,499,500,3,60,30,0,500,65,1,0,0,0,
        501,503,3,14,7,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,
        504,506,5,7,0,0,505,507,5,8,0,0,506,505,1,0,0,0,506,507,1,0,0,0,
        507,508,1,0,0,0,508,509,5,65,0,0,509,512,5,80,0,0,510,513,3,52,26,
        0,511,513,5,65,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,514,1,0,0,
        0,514,515,5,2,0,0,515,516,3,68,34,0,516,517,5,3,0,0,517,67,1,0,0,
        0,518,521,3,86,43,0,519,521,3,60,30,0,520,518,1,0,0,0,520,519,1,
        0,0,0,521,69,1,0,0,0,522,523,5,35,0,0,523,524,3,72,36,0,524,525,
        5,2,0,0,525,526,3,86,43,0,526,527,5,3,0,0,527,71,1,0,0,0,528,530,
        5,36,0,0,529,531,5,8,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,532,
        1,0,0,0,532,535,5,65,0,0,533,534,5,80,0,0,534,536,3,52,26,0,535,
        533,1,0,0,0,535,536,1,0,0,0,536,549,1,0,0,0,537,538,5,8,0,0,538,
        541,5,65,0,0,539,540,5,80,0,0,540,542,3,52,26,0,541,539,1,0,0,0,
        541,542,1,0,0,0,542,549,1,0,0,0,543,546,5,65,0,0,544,545,5,80,0,
        0,545,547,3,52,26,0,546,544,1,0,0,0,546,547,1,0,0,0,547,549,1,0,
        0,0,548,528,1,0,0,0,548,537,1,0,0,0,548,543,1,0,0,0,549,73,1,0,0,
        0,550,551,3,86,43,0,551,552,5,2,0,0,552,553,3,86,43,0,553,554,5,
        3,0,0,554,75,1,0,0,0,555,556,5,37,0,0,556,557,5,65,0,0,557,558,5,
        38,0,0,558,559,3,86,43,0,559,560,3,60,30,0,560,77,1,0,0,0,561,562,
        5,39,0,0,562,563,3,86,43,0,563,566,3,60,30,0,564,565,5,40,0,0,565,
        567,3,60,30,0,566,564,1,0,0,0,566,567,1,0,0,0,567,79,1,0,0,0,568,
        569,3,86,43,0,569,570,5,3,0,0,570,81,1,0,0,0,571,573,5,41,0,0,572,
        574,3,86,43,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,
        578,5,3,0,0,576,578,3,86,43,0,577,571,1,0,0,0,577,576,1,0,0,0,578,
        83,1,0,0,0,579,580,5,42,0,0,580,581,3,60,30,0,581,85,1,0,0,0,582,
        583,6,43,-1,0,583,614,3,92,46,0,584,614,3,114,57,0,585,614,3,94,
        47,0,586,587,5,17,0,0,587,614,3,86,43,15,588,614,3,108,54,0,589,
        614,3,90,45,0,590,591,3,54,27,0,591,592,5,70,0,0,592,593,5,22,0,
        0,593,594,3,52,26,0,594,595,5,43,0,0,595,614,1,0,0,0,596,597,5,71,
        0,0,597,614,3,86,43,10,598,599,5,65,0,0,599,600,5,71,0,0,600,602,
        5,77,0,0,601,603,3,106,53,0,602,601,1,0,0,0,602,603,1,0,0,0,603,
        604,1,0,0,0,604,614,5,78,0,0,605,614,3,88,44,0,606,607,5,16,0,0,
        607,608,5,8,0,0,608,614,3,86,43,2,609,610,5,77,0,0,610,611,3,86,
        43,0,611,612,5,78,0,0,612,614,1,0,0,0,613,582,1,0,0,0,613,584,1,
        0,0,0,613,585,1,0,0,0,613,586,1,0,0,0,613,588,1,0,0,0,613,589,1,
        0,0,0,613,590,1,0,0,0,613,596,1,0,0,0,613,598,1,0,0,0,613,605,1,
        0,0,0,613,606,1,0,0,0,613,609,1,0,0,0,614,644,1,0,0,0,615,616,10,
        9,0,0,616,617,7,4,0,0,617,643,3,86,43,10,618,619,10,8,0,0,619,620,
        7,5,0,0,620,643,3,86,43,9,621,622,10,7,0,0,622,623,5,55,0,0,623,
        643,3,86,43,8,624,625,10,6,0,0,625,626,7,3,0,0,626,643,3,86,43,7,
        627,628,10,11,0,0,628,629,5,74,0,0,629,630,3,86,43,0,630,631,5,75,
        0,0,631,643,1,0,0,0,632,633,10,4,0,0,633,634,5,56,0,0,634,639,3,
        52,26,0,635,636,5,56,0,0,636,638,3,52,26,0,637,635,1,0,0,0,638,641,
        1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,643,1,0,0,0,641,639,
        1,0,0,0,642,615,1,0,0,0,642,618,1,0,0,0,642,621,1,0,0,0,642,624,
        1,0,0,0,642,627,1,0,0,0,642,632,1,0,0,0,643,646,1,0,0,0,644,642,
        1,0,0,0,644,645,1,0,0,0,645,87,1,0,0,0,646,644,1,0,0,0,647,651,5,
        5,0,0,648,650,3,62,31,0,649,648,1,0,0,0,650,653,1,0,0,0,651,649,
        1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,0,653,651,1,0,0,0,654,655,
        3,86,43,0,655,656,5,6,0,0,656,89,1,0,0,0,657,658,5,16,0,0,658,659,
        3,86,43,0,659,91,1,0,0,0,660,691,3,94,47,0,661,668,5,21,0,0,662,
        664,5,77,0,0,663,665,3,106,53,0,664,663,1,0,0,0,664,665,1,0,0,0,
        665,666,1,0,0,0,666,668,5,78,0,0,667,661,1,0,0,0,667,662,1,0,0,0,
        668,690,1,0,0,0,669,670,5,57,0,0,670,672,5,65,0,0,671,669,1,0,0,
        0,672,673,1,0,0,0,673,671,1,0,0,0,673,674,1,0,0,0,674,690,1,0,0,
        0,675,676,5,57,0,0,676,683,5,65,0,0,677,679,5,77,0,0,678,680,3,106,
        53,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,684,5,78,
        0,0,682,684,5,21,0,0,683,677,1,0,0,0,683,682,1,0,0,0,684,690,1,0,
        0,0,685,686,5,74,0,0,686,687,3,86,43,0,687,688,5,75,0,0,688,690,
        1,0,0,0,689,667,1,0,0,0,689,671,1,0,0,0,689,675,1,0,0,0,689,685,
        1,0,0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,93,1,
        0,0,0,693,691,1,0,0,0,694,723,3,114,57,0,695,723,5,65,0,0,696,723,
        3,96,48,0,697,698,5,65,0,0,698,700,5,77,0,0,699,701,3,106,53,0,700,
        699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,723,5,78,0,0,703,
        704,5,77,0,0,704,705,3,86,43,0,705,706,5,78,0,0,706,723,1,0,0,0,
        707,708,5,65,0,0,708,709,5,5,0,0,709,714,3,100,50,0,710,711,5,76,
        0,0,711,713,3,100,50,0,712,710,1,0,0,0,713,716,1,0,0,0,714,712,1,
        0,0,0,714,715,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,717,719,5,
        76,0,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,721,5,
        6,0,0,721,723,1,0,0,0,722,694,1,0,0,0,722,695,1,0,0,0,722,696,1,
        0,0,0,722,697,1,0,0,0,722,703,1,0,0,0,722,707,1,0,0,0,723,95,1,0,
        0,0,724,725,5,70,0,0,725,726,3,54,27,0,726,727,5,70,0,0,727,729,
        5,65,0,0,728,730,3,98,49,0,729,728,1,0,0,0,729,730,1,0,0,0,730,731,
        1,0,0,0,731,733,5,77,0,0,732,734,3,106,53,0,733,732,1,0,0,0,733,
        734,1,0,0,0,734,735,1,0,0,0,735,736,5,78,0,0,736,97,1,0,0,0,737,
        738,5,22,0,0,738,743,3,52,26,0,739,740,5,76,0,0,740,742,3,52,26,
        0,741,739,1,0,0,0,742,745,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,
        0,744,746,1,0,0,0,745,743,1,0,0,0,746,747,5,72,0,0,747,99,1,0,0,
        0,748,749,5,65,0,0,749,750,5,80,0,0,750,751,3,86,43,0,751,101,1,
        0,0,0,752,757,3,104,52,0,753,754,5,58,0,0,754,756,3,104,52,0,755,
        753,1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,
        760,1,0,0,0,759,757,1,0,0,0,760,761,5,59,0,0,761,762,3,60,30,0,762,
        103,1,0,0,0,763,764,7,6,0,0,764,105,1,0,0,0,765,770,3,86,43,0,766,
        767,5,76,0,0,767,769,3,86,43,0,768,766,1,0,0,0,769,772,1,0,0,0,770,
        768,1,0,0,0,770,771,1,0,0,0,771,107,1,0,0,0,772,770,1,0,0,0,773,
        774,5,65,0,0,774,775,5,71,0,0,775,776,3,110,55,0,776,109,1,0,0,0,
        777,779,5,74,0,0,778,780,3,112,56,0,779,778,1,0,0,0,779,780,1,0,
        0,0,780,781,1,0,0,0,781,788,5,75,0,0,782,784,5,77,0,0,783,785,3,
        112,56,0,784,783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,788,
        5,78,0,0,787,777,1,0,0,0,787,782,1,0,0,0,788,111,1,0,0,0,789,792,
        3,86,43,0,790,791,5,3,0,0,791,793,3,86,43,0,792,790,1,0,0,0,792,
        793,1,0,0,0,793,113,1,0,0,0,794,803,3,118,59,0,795,803,5,68,0,0,
        796,803,5,66,0,0,797,803,5,67,0,0,798,803,5,63,0,0,799,803,3,120,
        60,0,800,803,3,116,58,0,801,803,5,69,0,0,802,794,1,0,0,0,802,795,
        1,0,0,0,802,796,1,0,0,0,802,797,1,0,0,0,802,798,1,0,0,0,802,799,
        1,0,0,0,802,800,1,0,0,0,802,801,1,0,0,0,803,115,1,0,0,0,804,805,
        7,7,0,0,805,117,1,0,0,0,806,807,5,74,0,0,807,812,3,86,43,0,808,809,
        5,76,0,0,809,811,3,86,43,0,810,808,1,0,0,0,811,814,1,0,0,0,812,810,
        1,0,0,0,812,813,1,0,0,0,813,815,1,0,0,0,814,812,1,0,0,0,815,816,
        5,75,0,0,816,824,1,0,0,0,817,818,5,74,0,0,818,819,3,86,43,0,819,
        820,5,3,0,0,820,821,3,86,43,0,821,822,5,75,0,0,822,824,1,0,0,0,823,
        806,1,0,0,0,823,817,1,0,0,0,824,119,1,0,0,0,825,829,5,60,0,0,826,
        828,9,0,0,0,827,826,1,0,0,0,828,831,1,0,0,0,829,830,1,0,0,0,829,
        827,1,0,0,0,830,832,1,0,0,0,831,829,1,0,0,0,832,833,5,60,0,0,833,
        121,1,0,0,0,97,125,137,140,154,160,166,170,178,184,189,192,199,204,
        207,210,215,222,226,241,248,254,259,267,273,279,282,285,288,294,
        298,301,309,316,320,323,330,341,355,359,362,368,371,386,389,396,
        414,419,428,433,438,452,458,462,491,495,502,506,512,520,530,535,
        541,546,548,566,573,577,602,613,639,642,644,651,664,667,673,679,
        683,689,691,700,714,718,722,729,733,743,757,770,779,784,787,792,
        802,812,823,829
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'extern'", "'{'", 
                     "'}'", "'static'", "'mut'", "'fn'", "'->'", "'pub'", 
                     "'struct'", "'unsafe'", "'const'", "'union'", "'&'", 
                     "'*'", "'i32'", "'String'", "'bool'", "'()'", "'<'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'break'", "'continue'", "'match'", "'while'", 
                     "'let'", "'ref'", "'for'", "'in'", "'if'", "'else'", 
                     "'return'", "'loop'", "'>()'", "'/'", "'%'", "'+'", 
                     "'-'", "'>>'", "'>='", "'<='", "'=='", "'!='", "'||'", 
                     "'&&'", "'..'", "'as'", "'.'", "'|'", "'=>'", "'\"'", 
                     "'true'", "'false'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'::'", "'!'", "'>'", "'#'", "'['", "']'", "','", "'('", 
                     "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "TRUE", "FALSE", "Binary", "STRING_LITERAL", 
                      "Identifier", "Number", "SignedNumber", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_typeAlias = 2
    RULE_externBlock = 3
    RULE_externItem = 4
    RULE_externParams = 5
    RULE_externParam = 6
    RULE_visibility = 7
    RULE_attributes = 8
    RULE_innerAttribute = 9
    RULE_attribute = 10
    RULE_attrArgs = 11
    RULE_attrArg = 12
    RULE_attrValue = 13
    RULE_structDef = 14
    RULE_structField = 15
    RULE_functionDef = 16
    RULE_unsafeModifier = 17
    RULE_externAbi = 18
    RULE_paramList = 19
    RULE_param = 20
    RULE_constDef = 21
    RULE_unionDef = 22
    RULE_unionField = 23
    RULE_unsafeDef = 24
    RULE_referenceType = 25
    RULE_type = 26
    RULE_typePath = 27
    RULE_pointerType = 28
    RULE_basicType = 29
    RULE_block = 30
    RULE_statement = 31
    RULE_whileStmt = 32
    RULE_staticVarDecl = 33
    RULE_initializer = 34
    RULE_letStmt = 35
    RULE_varDef = 36
    RULE_assignStmt = 37
    RULE_forStmt = 38
    RULE_ifStmt = 39
    RULE_exprStmt = 40
    RULE_returnStmt = 41
    RULE_loopStmt = 42
    RULE_expression = 43
    RULE_expressionBlock = 44
    RULE_borrowExpression = 45
    RULE_postfixExpression = 46
    RULE_primaryExpression = 47
    RULE_qualifiedFunctionCall = 48
    RULE_genericArgs = 49
    RULE_structLiteralField = 50
    RULE_matchArm = 51
    RULE_matchPattern = 52
    RULE_argumentList = 53
    RULE_macroCall = 54
    RULE_macroArgs = 55
    RULE_macroInner = 56
    RULE_literal = 57
    RULE_booleanLiteral = 58
    RULE_arrayLiteral = 59
    RULE_stringLiteral = 60

    ruleNames =  [ "program", "topLevelItem", "typeAlias", "externBlock", 
                   "externItem", "externParams", "externParam", "visibility", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "functionDef", 
                   "unsafeModifier", "externAbi", "paramList", "param", 
                   "constDef", "unionDef", "unionField", "unsafeDef", "referenceType", 
                   "type", "typePath", "pointerType", "basicType", "block", 
                   "statement", "whileStmt", "staticVarDecl", "initializer", 
                   "letStmt", "varDef", "assignStmt", "forStmt", "ifStmt", 
                   "exprStmt", "returnStmt", "loopStmt", "expression", "expressionBlock", 
                   "borrowExpression", "postfixExpression", "primaryExpression", 
                   "qualifiedFunctionCall", "genericArgs", "structLiteralField", 
                   "matchArm", "matchPattern", "argumentList", "macroCall", 
                   "macroArgs", "macroInner", "literal", "booleanLiteral", 
                   "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    TRUE=61
    FALSE=62
    Binary=63
    STRING_LITERAL=64
    Identifier=65
    Number=66
    SignedNumber=67
    HexNumber=68
    CHAR_LITERAL=69
    DOUBLE_COLON=70
    EXCL=71
    GT=72
    POUND=73
    LBRACK=74
    RBRACK=75
    COMMA=76
    LPAREN=77
    RPAREN=78
    UNDERSCORE=79
    COLON=80
    ELLIPSIS=81
    WS=82
    COMMENT=83

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 64146) != 0) or _la==73:
                self.state = 122
                self.topLevelItem()
                self.state = 127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 128
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 129
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 130
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 131
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 132
                self.typeAlias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 133
                self.constDef()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 134
                self.unionDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 135
                self.unsafeDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 136
                self.staticVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 139
                self.visibility()


            self.state = 142
            self.match(RustParser.T__0)
            self.state = 143
            self.match(RustParser.Identifier)
            self.state = 144
            self.match(RustParser.T__1)
            self.state = 145
            self.type_()
            self.state = 146
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 148
            self.match(RustParser.T__3)
            self.state = 149
            self.match(RustParser.STRING_LITERAL)
            self.state = 150
            self.match(RustParser.T__4)
            self.state = 154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2690) != 0):
                self.state = 151
                self.externItem()
                self.state = 156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 157
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 159
                    self.visibility()


                self.state = 162
                self.match(RustParser.T__0)
                self.state = 163
                self.match(RustParser.Identifier)
                self.state = 164
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 165
                    self.visibility()


                self.state = 168
                self.match(RustParser.T__6)
                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 169
                    self.match(RustParser.T__7)


                self.state = 172
                self.match(RustParser.Identifier)
                self.state = 173
                self.match(RustParser.COLON)
                self.state = 174
                self.type_()
                self.state = 175
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 177
                    self.visibility()


                self.state = 180
                self.match(RustParser.T__8)
                self.state = 181
                self.match(RustParser.Identifier)
                self.state = 182
                self.match(RustParser.LPAREN)
                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 114689) != 0):
                    self.state = 183
                    self.externParams()


                self.state = 186
                self.match(RustParser.RPAREN)
                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 187
                    self.match(RustParser.T__9)
                    self.state = 188
                    self.type_()


                self.state = 191
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65, 79, 80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 194
                self.externParam()
                self.state = 199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 195
                        self.match(RustParser.COMMA)
                        self.state = 196
                        self.externParam() 
                    self.state = 201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 202
                    self.match(RustParser.COMMA)
                    self.state = 203
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 206
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or _la==79:
                self.state = 209
                _la = self._input.LA(1)
                if not(_la==65 or _la==79):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 212
            self.match(RustParser.COLON)
            self.state = 215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 17, 18, 19, 20, 21, 65, 70, 74]:
                self.state = 213
                self.type_()
                pass
            elif token in [81]:
                self.state = 214
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(RustParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 219
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 222 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(RustParser.POUND)

            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 225
                self.match(RustParser.EXCL)


            self.state = 228
            self.match(RustParser.LBRACK)
            self.state = 229
            self.attribute()
            self.state = 230
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_attribute)
        try:
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 232
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 233
                self.match(RustParser.Identifier)
                self.state = 234
                self.match(RustParser.T__1)
                self.state = 235
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 236
                self.match(RustParser.Identifier)
                self.state = 237
                self.match(RustParser.LPAREN)
                self.state = 238
                self.attrArgs()
                self.state = 239
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.attrArg()
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76:
                self.state = 244
                self.match(RustParser.COMMA)
                self.state = 245
                self.attrArg()
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(RustParser.Identifier)
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 252
                self.match(RustParser.T__1)
                self.state = 253
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            _la = self._input.LA(1)
            if not(((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 258
                self.visibility()


            self.state = 261
            self.match(RustParser.T__11)
            self.state = 262
            self.match(RustParser.Identifier)
            self.state = 263
            self.match(RustParser.T__4)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==65:
                self.state = 264
                self.structField()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 270
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 272
                self.visibility()


            self.state = 275
            self.match(RustParser.Identifier)
            self.state = 276
            self.match(RustParser.COLON)
            self.state = 277
            self.type_()
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 278
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 281
                self.visibility()


            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 284
                self.unsafeModifier()


            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 287
                self.externAbi()


            self.state = 290
            self.match(RustParser.T__8)
            self.state = 291
            self.match(RustParser.Identifier)
            self.state = 292
            self.match(RustParser.LPAREN)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==65:
                self.state = 293
                self.paramList()


            self.state = 296
            self.match(RustParser.RPAREN)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 297
                self.match(RustParser.T__9)


            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 306807724614615103) != 0):
                self.state = 300
                self.type_()


            self.state = 303
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(RustParser.T__3)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 308
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.param()
            self.state = 316
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 312
                    self.match(RustParser.COMMA)
                    self.state = 313
                    self.param() 
                self.state = 318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 319
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 322
                self.match(RustParser.T__7)


            self.state = 325
            self.match(RustParser.Identifier)
            self.state = 326
            self.match(RustParser.COLON)
            self.state = 327
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 329
                self.visibility()


            self.state = 332
            self.match(RustParser.T__13)
            self.state = 333
            self.match(RustParser.Identifier)
            self.state = 334
            self.match(RustParser.COLON)
            self.state = 335
            self.type_()
            self.state = 336
            self.match(RustParser.T__1)
            self.state = 337
            self.expression(0)
            self.state = 338
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 340
                self.visibility()


            self.state = 343
            self.match(RustParser.T__14)
            self.state = 344
            self.match(RustParser.Identifier)
            self.state = 359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.state = 345
                self.match(RustParser.COLON)
                self.state = 346
                self.type_()
                self.state = 347
                self.match(RustParser.T__1)
                self.state = 348
                self.expression(0)
                self.state = 349
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 351
                self.match(RustParser.T__4)
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11 or _la==65:
                    self.state = 352
                    self.unionField()
                    self.state = 357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 358
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 361
                self.visibility()


            self.state = 364
            self.match(RustParser.Identifier)
            self.state = 365
            self.match(RustParser.COLON)
            self.state = 366
            self.type_()
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 367
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 370
                self.visibility()


            self.state = 373
            self.match(RustParser.T__12)
            self.state = 374
            self.match(RustParser.Identifier)
            self.state = 375
            self.match(RustParser.COLON)
            self.state = 376
            self.type_()
            self.state = 377
            self.match(RustParser.T__1)
            self.state = 378
            self.expression(0)
            self.state = 379
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceType" ):
                return visitor.visitReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def referenceType(self):

        localctx = RustParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_referenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(RustParser.T__15)
            self.state = 382
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_type)
        try:
            self.state = 386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 18, 19, 20, 21, 65, 70, 74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 384
                self.basicType()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 385
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 388
                self.match(RustParser.DOUBLE_COLON)


            self.state = 391
            self.match(RustParser.Identifier)
            self.state = 396
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 392
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 393
                    self.match(RustParser.Identifier) 
                self.state = 398
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(RustParser.T__16)
            self.state = 400
            _la = self._input.LA(1)
            if not(_la==8 or _la==14):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 401
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 403
                self.match(RustParser.T__17)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 404
                self.match(RustParser.T__18)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 405
                self.match(RustParser.T__19)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 406
                self.match(RustParser.T__20)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 407
                self.typePath()
                self.state = 419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 408
                    self.match(RustParser.T__21)
                    self.state = 409
                    self.type_()
                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==76:
                        self.state = 410
                        self.match(RustParser.COMMA)
                        self.state = 411
                        self.type_()
                        self.state = 416
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 417
                    self.match(RustParser.GT)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 421
                self.match(RustParser.Identifier)
                self.state = 433
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 422
                    self.match(RustParser.T__21)
                    self.state = 423
                    self.type_()
                    self.state = 428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==76:
                        self.state = 424
                        self.match(RustParser.COMMA)
                        self.state = 425
                        self.type_()
                        self.state = 430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 431
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 435
                self.match(RustParser.T__15)
                self.state = 436
                self.type_()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65 or _la==70:
                    self.state = 437
                    self.typePath()


                self.state = 440
                self.match(RustParser.LBRACK)
                self.state = 441
                self.type_()
                self.state = 442
                self.match(RustParser.T__2)
                self.state = 443
                self.match(RustParser.Number)
                self.state = 444
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 446
                self.typePath()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 447
                self.match(RustParser.LBRACK)
                self.state = 448
                self.type_()
                self.state = 449
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 451
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(RustParser.T__4)
            self.state = 458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 455
                    self.statement() 
                self.state = 460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152919305583394784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4735) != 0):
                self.state = 461
                self.returnStmt()


            self.state = 464
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 466
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 468
                self.assignStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 469
                self.match(RustParser.Identifier)
                self.state = 470
                self.match(RustParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 471
                self.expression(0)
                self.state = 472
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2139095040) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 473
                self.expression(0)
                self.state = 474
                self.match(RustParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 476
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 477
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 478
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 479
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 480
                self.loopStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 481
                self.match(RustParser.T__30)
                self.state = 482
                self.match(RustParser.T__2)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 483
                self.match(RustParser.T__31)
                self.state = 484
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 485
                self.match(RustParser.T__32)
                self.state = 486
                self.expression(0)
                self.state = 487
                self.match(RustParser.T__4)
                self.state = 489 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 488
                    self.matchArm()
                    self.state = 491 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 16387) != 0)):
                        break

                self.state = 493
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(RustParser.T__33)
            self.state = 498
            self.expression(0)
            self.state = 499
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 501
                self.visibility()


            self.state = 504
            self.match(RustParser.T__6)
            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 505
                self.match(RustParser.T__7)


            self.state = 508
            self.match(RustParser.Identifier)
            self.state = 509
            self.match(RustParser.COLON)
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 510
                self.type_()
                pass

            elif la_ == 2:
                self.state = 511
                self.match(RustParser.Identifier)
                pass


            self.state = 514
            self.match(RustParser.T__1)
            self.state = 515
            self.initializer()
            self.state = 516
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_initializer)
        try:
            self.state = 520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_letStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(RustParser.T__34)
            self.state = 523
            self.varDef()
            self.state = 524
            self.match(RustParser.T__1)
            self.state = 525
            self.expression(0)
            self.state = 526
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.match(RustParser.T__35)
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 529
                    self.match(RustParser.T__7)


                self.state = 532
                self.match(RustParser.Identifier)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 533
                    self.match(RustParser.COLON)
                    self.state = 534
                    self.type_()


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.match(RustParser.T__7)
                self.state = 538
                self.match(RustParser.Identifier)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 539
                    self.match(RustParser.COLON)
                    self.state = 540
                    self.type_()


                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 543
                self.match(RustParser.Identifier)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 544
                    self.match(RustParser.COLON)
                    self.state = 545
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.expression(0)
            self.state = 551
            self.match(RustParser.T__1)
            self.state = 552
            self.expression(0)
            self.state = 553
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(RustParser.T__36)
            self.state = 556
            self.match(RustParser.Identifier)
            self.state = 557
            self.match(RustParser.T__37)
            self.state = 558
            self.expression(0)
            self.state = 559
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(RustParser.T__38)
            self.state = 562
            self.expression(0)
            self.state = 563
            self.block()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 564
                self.match(RustParser.T__39)
                self.state = 565
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.expression(0)
            self.state = 569
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.match(RustParser.T__40)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4735) != 0):
                    self.state = 572
                    self.expression(0)


                self.state = 575
                self.match(RustParser.T__2)
                pass
            elif token in [5, 16, 17, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 74, 77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(RustParser.T__41)
            self.state = 580
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def macroCall(self):
            return self.getTypedRuleContext(RustParser.MacroCallContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def DOUBLE_COLON(self):
            return self.getToken(RustParser.DOUBLE_COLON, 0)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 583
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.state = 584
                self.literal()
                pass

            elif la_ == 3:
                self.state = 585
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 586
                self.match(RustParser.T__16)
                self.state = 587
                self.expression(15)
                pass

            elif la_ == 5:
                self.state = 588
                self.macroCall()
                pass

            elif la_ == 6:
                self.state = 589
                self.borrowExpression()
                pass

            elif la_ == 7:
                self.state = 590
                self.typePath()
                self.state = 591
                self.match(RustParser.DOUBLE_COLON)
                self.state = 592
                self.match(RustParser.T__21)
                self.state = 593
                self.type_()
                self.state = 594
                self.match(RustParser.T__42)
                pass

            elif la_ == 8:
                self.state = 596
                self.match(RustParser.EXCL)
                self.state = 597
                self.expression(10)
                pass

            elif la_ == 9:
                self.state = 598
                self.match(RustParser.Identifier)
                self.state = 599
                self.match(RustParser.EXCL)
                self.state = 600
                self.match(RustParser.LPAREN)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4735) != 0):
                    self.state = 601
                    self.argumentList()


                self.state = 604
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 10:
                self.state = 605
                self.expressionBlock()
                pass

            elif la_ == 11:
                self.state = 606
                self.match(RustParser.T__15)
                self.state = 607
                self.match(RustParser.T__7)
                self.state = 608
                self.expression(2)
                pass

            elif la_ == 12:
                self.state = 609
                self.match(RustParser.LPAREN)
                self.state = 610
                self.expression(0)
                self.state = 611
                self.match(RustParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 644
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 642
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 615
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 616
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2234207627837440) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 617
                        self.expression(10)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 618
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 619
                        _la = self._input.LA(1)
                        if not(((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & 1125907959906305) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 620
                        self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 621
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 622
                        self.match(RustParser.T__54)
                        self.state = 623
                        self.expression(8)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 624
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 625
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2139095040) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 626
                        self.expression(7)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 627
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 628
                        self.match(RustParser.LBRACK)
                        self.state = 629
                        self.expression(0)
                        self.state = 630
                        self.match(RustParser.RBRACK)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 632
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 633
                        self.match(RustParser.T__55)
                        self.state = 634
                        self.type_()
                        self.state = 639
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 635
                                self.match(RustParser.T__55)
                                self.state = 636
                                self.type_() 
                            self.state = 641
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                        pass

             
                self.state = 646
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(RustParser.T__4)
            self.state = 651
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 648
                    self.statement() 
                self.state = 653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

            self.state = 654
            self.expression(0)
            self.state = 655
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(RustParser.T__15)
            self.state = 658
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LBRACK)
            else:
                return self.getToken(RustParser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RBRACK)
            else:
                return self.getToken(RustParser.RBRACK, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.primaryExpression()
            self.state = 691
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 689
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        self.state = 667
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [21]:
                            self.state = 661
                            self.match(RustParser.T__20)
                            pass
                        elif token in [77]:
                            self.state = 662
                            self.match(RustParser.LPAREN)
                            self.state = 664
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4735) != 0):
                                self.state = 663
                                self.argumentList()


                            self.state = 666
                            self.match(RustParser.RPAREN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 671 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 669
                                self.match(RustParser.T__56)
                                self.state = 670
                                self.match(RustParser.Identifier)

                            else:
                                raise NoViableAltException(self)
                            self.state = 673 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 675
                        self.match(RustParser.T__56)
                        self.state = 676
                        self.match(RustParser.Identifier)
                        self.state = 683
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [77]:
                            self.state = 677
                            self.match(RustParser.LPAREN)
                            self.state = 679
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4735) != 0):
                                self.state = 678
                                self.argumentList()


                            self.state = 681
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [21]:
                            self.state = 682
                            self.match(RustParser.T__20)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        self.state = 685
                        self.match(RustParser.LBRACK)
                        self.state = 686
                        self.expression(0)
                        self.state = 687
                        self.match(RustParser.RBRACK)
                        pass

             
                self.state = 693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def qualifiedFunctionCall(self):
            return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.match(RustParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 696
                self.qualifiedFunctionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 697
                self.match(RustParser.Identifier)
                self.state = 698
                self.match(RustParser.LPAREN)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4735) != 0):
                    self.state = 699
                    self.argumentList()


                self.state = 702
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 703
                self.match(RustParser.LPAREN)
                self.state = 704
                self.expression(0)
                self.state = 705
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 707
                self.match(RustParser.Identifier)
                self.state = 708
                self.match(RustParser.T__4)
                self.state = 709
                self.structLiteralField()
                self.state = 714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 710
                        self.match(RustParser.COMMA)
                        self.state = 711
                        self.structLiteralField() 
                    self.state = 716
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 717
                    self.match(RustParser.COMMA)


                self.state = 720
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(RustParser.DOUBLE_COLON)
            self.state = 725
            self.typePath()
            self.state = 726
            self.match(RustParser.DOUBLE_COLON)
            self.state = 727
            self.match(RustParser.Identifier)
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 728
                self.genericArgs()


            self.state = 731
            self.match(RustParser.LPAREN)
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4735) != 0):
                self.state = 732
                self.argumentList()


            self.state = 735
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(RustParser.T__21)
            self.state = 738
            self.type_()
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76:
                self.state = 739
                self.match(RustParser.COMMA)
                self.state = 740
                self.type_()
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 746
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_structLiteralField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(RustParser.Identifier)
            self.state = 749
            self.match(RustParser.COLON)
            self.state = 750
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.matchPattern()
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 753
                self.match(RustParser.T__57)
                self.state = 754
                self.matchPattern()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 760
            self.match(RustParser.T__58)
            self.state = 761
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 16387) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.expression(0)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76:
                self.state = 766
                self.match(RustParser.COMMA)
                self.state = 767
                self.expression(0)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(RustParser.Identifier)
            self.state = 774
            self.match(RustParser.EXCL)
            self.state = 775
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.match(RustParser.LBRACK)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4735) != 0):
                    self.state = 778
                    self.macroInner()


                self.state = 781
                self.match(RustParser.RBRACK)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.match(RustParser.LPAREN)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606650336) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 4735) != 0):
                    self.state = 783
                    self.macroInner()


                self.state = 786
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.expression(0)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 790
                self.match(RustParser.T__2)
                self.state = 791
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(RustParser.StringLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_literal)
        try:
            self.state = 802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self.arrayLiteral()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 795
                self.match(RustParser.HexNumber)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 796
                self.match(RustParser.Number)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 4)
                self.state = 797
                self.match(RustParser.SignedNumber)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 5)
                self.state = 798
                self.match(RustParser.Binary)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 6)
                self.state = 799
                self.stringLiteral()
                pass
            elif token in [61, 62]:
                self.enterOuterAlt(localctx, 7)
                self.state = 800
                self.booleanLiteral()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 8)
                self.state = 801
                self.match(RustParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            _la = self._input.LA(1)
            if not(_la==61 or _la==62):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.match(RustParser.LBRACK)
                self.state = 807
                self.expression(0)
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==76:
                    self.state = 808
                    self.match(RustParser.COMMA)
                    self.state = 809
                    self.expression(0)
                    self.state = 814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 815
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.match(RustParser.LBRACK)
                self.state = 818
                self.expression(0)
                self.state = 819
                self.match(RustParser.T__2)
                self.state = 820
                self.expression(0)
                self.state = 821
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(RustParser.T__59)
            self.state = 829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 826
                    self.matchWildcard() 
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

            self.state = 832
            self.match(RustParser.T__59)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[43] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         




