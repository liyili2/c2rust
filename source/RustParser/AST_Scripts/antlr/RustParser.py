# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,87,1121,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,1,0,5,0,180,8,0,10,0,12,0,
        183,9,0,1,1,1,1,1,1,1,1,1,1,3,1,190,8,1,1,2,1,2,1,2,1,2,1,2,1,2,
        3,2,198,8,2,1,3,3,3,201,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,4,4,213,8,4,11,4,12,4,214,1,4,1,4,1,5,1,5,1,5,1,5,5,5,223,8,
        5,10,5,12,5,226,9,5,1,5,1,5,1,6,3,6,231,8,6,1,6,1,6,1,6,1,6,3,6,
        237,8,6,1,6,1,6,3,6,241,8,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,249,8,6,
        1,6,1,6,1,6,1,6,3,6,255,8,6,1,6,1,6,1,6,3,6,260,8,6,1,6,3,6,263,
        8,6,1,7,1,7,1,7,5,7,268,8,7,10,7,12,7,271,9,7,1,7,1,7,3,7,275,8,
        7,1,7,3,7,278,8,7,1,8,3,8,281,8,8,1,8,1,8,1,8,3,8,286,8,8,1,9,1,
        9,1,10,1,10,1,11,1,11,3,11,294,8,11,1,12,4,12,297,8,12,11,12,12,
        12,298,1,13,1,13,3,13,303,8,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,3,14,318,8,14,1,15,1,15,1,15,5,15,
        323,8,15,10,15,12,15,326,9,15,1,16,1,16,1,16,3,16,331,8,16,1,17,
        1,17,1,18,3,18,336,8,18,1,18,1,18,1,18,1,18,5,18,342,8,18,10,18,
        12,18,345,9,18,1,18,1,18,1,19,3,19,350,8,19,1,19,1,19,1,19,1,19,
        3,19,356,8,19,1,20,1,20,1,20,5,20,361,8,20,10,20,12,20,364,9,20,
        1,20,1,20,1,21,3,21,369,8,21,1,21,3,21,372,8,21,1,21,3,21,375,8,
        21,1,21,1,21,1,21,1,21,1,21,3,21,382,8,21,1,21,3,21,385,8,21,1,21,
        3,21,388,8,21,1,21,3,21,391,8,21,1,21,1,21,1,22,1,22,1,22,5,22,398,
        8,22,10,22,12,22,401,9,22,1,22,3,22,404,8,22,1,23,3,23,407,8,23,
        1,23,3,23,410,8,23,1,23,1,23,1,23,3,23,415,8,23,1,24,3,24,418,8,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,3,25,429,8,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,5,25,441,8,25,10,
        25,12,25,444,9,25,1,25,3,25,447,8,25,1,26,3,26,450,8,26,1,26,1,26,
        1,26,1,26,3,26,456,8,26,1,27,3,27,459,8,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,28,1,28,3,28,471,8,28,1,29,1,29,1,29,3,29,476,
        8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,487,8,30,
        10,30,12,30,490,9,30,1,30,1,30,3,30,494,8,30,1,30,1,30,1,30,1,30,
        1,30,5,30,501,8,30,10,30,12,30,504,9,30,1,30,1,30,3,30,508,8,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        3,30,523,8,30,1,31,1,31,1,31,3,31,528,8,31,1,31,1,31,1,31,5,31,533,
        8,31,10,31,12,31,536,9,31,3,31,538,8,31,1,32,1,32,1,32,1,32,1,32,
        1,32,1,33,1,33,5,33,548,8,33,10,33,12,33,551,9,33,1,33,3,33,554,
        8,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        5,35,581,8,35,10,35,12,35,584,9,35,1,35,1,35,3,35,588,8,35,1,36,
        1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        3,37,604,8,37,1,38,3,38,607,8,38,1,38,3,38,610,8,38,1,38,1,38,1,
        38,3,38,615,8,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,
        41,1,41,4,41,628,8,41,11,41,12,41,629,1,41,1,41,1,42,1,42,1,42,1,
        42,1,43,1,43,1,43,3,43,641,8,43,1,44,3,44,644,8,44,1,44,1,44,3,44,
        648,8,44,1,44,1,44,1,44,1,44,3,44,654,8,44,1,44,1,44,1,44,1,44,1,
        45,1,45,1,45,1,45,1,45,1,45,5,45,666,8,45,10,45,12,45,669,9,45,1,
        45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,
        47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,693,8,48,10,48,12,
        48,696,9,48,1,48,1,48,3,48,700,8,48,1,49,1,49,1,49,1,50,1,50,3,50,
        707,8,50,1,50,1,50,3,50,711,8,50,1,51,1,51,1,51,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,3,52,738,8,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,766,8,52,10,52,12,
        52,769,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,3,54,780,
        8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,55,1,55,4,55,790,8,55,11,55,
        12,55,791,1,56,3,56,795,8,56,1,56,1,56,1,56,1,57,3,57,801,8,57,1,
        57,3,57,804,8,57,1,57,1,57,1,57,1,57,3,57,810,8,57,1,57,3,57,813,
        8,57,1,57,1,57,3,57,817,8,57,1,58,1,58,1,58,1,58,5,58,823,8,58,10,
        58,12,58,826,9,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,
        63,1,64,1,64,1,64,1,64,1,64,5,64,843,8,64,10,64,12,64,846,9,64,1,
        64,3,64,849,8,64,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,
        67,1,68,1,68,1,68,1,69,1,69,5,69,866,8,69,10,69,12,69,869,9,69,1,
        69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,3,71,879,8,71,1,72,1,72,1,
        72,1,72,1,72,1,72,4,72,887,8,72,11,72,12,72,888,3,72,891,8,72,1,
        73,3,73,894,8,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,5,74,903,8,74,
        10,74,12,74,906,9,74,1,74,1,74,3,74,910,8,74,1,75,1,75,1,75,1,75,
        3,75,916,8,75,1,75,3,75,919,8,75,1,75,1,75,4,75,923,8,75,11,75,12,
        75,924,1,75,1,75,1,75,1,75,3,75,931,8,75,1,75,1,75,3,75,935,8,75,
        4,75,937,8,75,11,75,12,75,938,1,76,1,76,1,76,1,76,1,76,3,76,946,
        8,76,1,76,1,76,1,76,3,76,951,8,76,1,76,3,76,954,8,76,1,76,1,76,1,
        76,5,76,959,8,76,10,76,12,76,962,9,76,1,76,1,76,5,76,966,8,76,10,
        76,12,76,969,9,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,978,8,
        76,10,76,12,76,981,9,76,1,76,3,76,984,8,76,3,76,986,8,76,1,77,1,
        77,1,77,1,77,1,78,1,78,3,78,994,8,78,1,78,1,78,1,78,3,78,999,8,78,
        1,78,3,78,1002,8,78,1,79,1,79,1,79,3,79,1007,8,79,1,80,1,80,1,80,
        1,80,5,80,1013,8,80,10,80,12,80,1016,9,80,1,80,1,80,1,81,1,81,1,
        81,3,81,1023,8,81,1,81,3,81,1026,8,81,1,82,1,82,1,82,5,82,1031,8,
        82,10,82,12,82,1034,9,82,1,82,1,82,1,82,1,83,1,83,1,84,1,84,3,84,
        1043,8,84,1,84,1,84,1,84,3,84,1048,8,84,5,84,1050,8,84,10,84,12,
        84,1053,9,84,1,84,3,84,1056,8,84,1,84,1,84,4,84,1060,8,84,11,84,
        12,84,1061,1,84,1,84,1,84,1,84,1,84,3,84,1069,8,84,3,84,1071,8,84,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1083,8,85,
        1,86,1,86,1,87,3,87,1088,8,87,1,87,1,87,1,87,1,87,5,87,1094,8,87,
        10,87,12,87,1097,9,87,1,87,1,87,1,87,3,87,1102,8,87,1,87,1,87,1,
        87,1,87,1,87,1,87,3,87,1110,8,87,1,88,1,88,5,88,1114,8,88,10,88,
        12,88,1117,9,88,1,88,1,88,1,88,1,1115,1,104,89,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,0,10,2,0,68,68,83,83,1,0,67,69,2,0,9,9,17,
        17,1,0,30,37,3,0,24,24,49,52,76,76,2,0,16,16,53,55,2,0,19,19,56,
        59,2,0,58,59,75,75,2,0,68,69,83,83,1,0,63,64,1224,0,181,1,0,0,0,
        2,189,1,0,0,0,4,197,1,0,0,0,6,200,1,0,0,0,8,208,1,0,0,0,10,218,1,
        0,0,0,12,262,1,0,0,0,14,277,1,0,0,0,16,280,1,0,0,0,18,287,1,0,0,
        0,20,289,1,0,0,0,22,291,1,0,0,0,24,296,1,0,0,0,26,300,1,0,0,0,28,
        317,1,0,0,0,30,319,1,0,0,0,32,327,1,0,0,0,34,332,1,0,0,0,36,335,
        1,0,0,0,38,349,1,0,0,0,40,357,1,0,0,0,42,368,1,0,0,0,44,394,1,0,
        0,0,46,406,1,0,0,0,48,417,1,0,0,0,50,428,1,0,0,0,52,449,1,0,0,0,
        54,458,1,0,0,0,56,470,1,0,0,0,58,472,1,0,0,0,60,522,1,0,0,0,62,537,
        1,0,0,0,64,539,1,0,0,0,66,545,1,0,0,0,68,557,1,0,0,0,70,587,1,0,
        0,0,72,589,1,0,0,0,74,603,1,0,0,0,76,606,1,0,0,0,78,616,1,0,0,0,
        80,618,1,0,0,0,82,623,1,0,0,0,84,633,1,0,0,0,86,640,1,0,0,0,88,643,
        1,0,0,0,90,659,1,0,0,0,92,674,1,0,0,0,94,679,1,0,0,0,96,685,1,0,
        0,0,98,701,1,0,0,0,100,710,1,0,0,0,102,712,1,0,0,0,104,737,1,0,0,
        0,106,770,1,0,0,0,108,777,1,0,0,0,110,789,1,0,0,0,112,794,1,0,0,
        0,114,816,1,0,0,0,116,818,1,0,0,0,118,827,1,0,0,0,120,829,1,0,0,
        0,122,831,1,0,0,0,124,833,1,0,0,0,126,835,1,0,0,0,128,837,1,0,0,
        0,130,852,1,0,0,0,132,854,1,0,0,0,134,856,1,0,0,0,136,860,1,0,0,
        0,138,863,1,0,0,0,140,873,1,0,0,0,142,878,1,0,0,0,144,890,1,0,0,
        0,146,893,1,0,0,0,148,909,1,0,0,0,150,911,1,0,0,0,152,985,1,0,0,
        0,154,987,1,0,0,0,156,1001,1,0,0,0,158,1003,1,0,0,0,160,1008,1,0,
        0,0,162,1019,1,0,0,0,164,1027,1,0,0,0,166,1038,1,0,0,0,168,1070,
        1,0,0,0,170,1082,1,0,0,0,172,1084,1,0,0,0,174,1109,1,0,0,0,176,1111,
        1,0,0,0,178,180,3,2,1,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,
        1,0,0,0,181,182,1,0,0,0,182,1,1,0,0,0,183,181,1,0,0,0,184,190,3,
        4,2,0,185,190,3,88,44,0,186,190,3,24,12,0,187,190,3,10,5,0,188,190,
        3,6,3,0,189,184,1,0,0,0,189,185,1,0,0,0,189,186,1,0,0,0,189,187,
        1,0,0,0,189,188,1,0,0,0,190,3,1,0,0,0,191,198,3,42,21,0,192,198,
        3,36,18,0,193,198,3,8,4,0,194,198,3,48,24,0,195,198,3,50,25,0,196,
        198,3,54,27,0,197,191,1,0,0,0,197,192,1,0,0,0,197,193,1,0,0,0,197,
        194,1,0,0,0,197,195,1,0,0,0,197,196,1,0,0,0,198,5,1,0,0,0,199,201,
        3,18,9,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,203,
        5,1,0,0,203,204,5,68,0,0,204,205,5,2,0,0,205,206,3,56,28,0,206,207,
        5,3,0,0,207,7,1,0,0,0,208,209,5,4,0,0,209,210,5,68,0,0,210,212,5,
        5,0,0,211,213,3,42,21,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,
        1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,5,6,0,0,217,9,1,
        0,0,0,218,219,5,7,0,0,219,220,5,67,0,0,220,224,5,5,0,0,221,223,3,
        12,6,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,
        0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,5,6,0,0,228,11,1,0,
        0,0,229,231,3,18,9,0,230,229,1,0,0,0,230,231,1,0,0,0,231,232,1,0,
        0,0,232,233,5,1,0,0,233,234,5,68,0,0,234,263,5,3,0,0,235,237,3,18,
        9,0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,240,5,8,
        0,0,239,241,5,9,0,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,1,0,
        0,0,242,243,5,68,0,0,243,244,5,84,0,0,244,245,3,56,28,0,245,246,
        5,3,0,0,246,263,1,0,0,0,247,249,3,18,9,0,248,247,1,0,0,0,248,249,
        1,0,0,0,249,250,1,0,0,0,250,251,5,10,0,0,251,252,5,68,0,0,252,254,
        5,81,0,0,253,255,3,14,7,0,254,253,1,0,0,0,254,255,1,0,0,0,255,256,
        1,0,0,0,256,259,5,82,0,0,257,258,5,11,0,0,258,260,3,56,28,0,259,
        257,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,263,5,3,0,0,262,
        230,1,0,0,0,262,236,1,0,0,0,262,248,1,0,0,0,263,13,1,0,0,0,264,269,
        3,16,8,0,265,266,5,80,0,0,266,268,3,16,8,0,267,265,1,0,0,0,268,271,
        1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,274,1,0,0,0,271,269,
        1,0,0,0,272,273,5,80,0,0,273,275,5,85,0,0,274,272,1,0,0,0,274,275,
        1,0,0,0,275,278,1,0,0,0,276,278,5,85,0,0,277,264,1,0,0,0,277,276,
        1,0,0,0,278,15,1,0,0,0,279,281,7,0,0,0,280,279,1,0,0,0,280,281,1,
        0,0,0,281,282,1,0,0,0,282,285,5,84,0,0,283,286,3,56,28,0,284,286,
        5,85,0,0,285,283,1,0,0,0,285,284,1,0,0,0,286,17,1,0,0,0,287,288,
        5,12,0,0,288,19,1,0,0,0,289,290,5,13,0,0,290,21,1,0,0,0,291,293,
        5,7,0,0,292,294,5,67,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,23,
        1,0,0,0,295,297,3,26,13,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,
        1,0,0,0,298,299,1,0,0,0,299,25,1,0,0,0,300,302,5,77,0,0,301,303,
        5,75,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,
        5,78,0,0,305,306,3,28,14,0,306,307,5,79,0,0,307,27,1,0,0,0,308,318,
        5,68,0,0,309,310,5,68,0,0,310,311,5,2,0,0,311,318,3,34,17,0,312,
        313,5,68,0,0,313,314,5,81,0,0,314,315,3,30,15,0,315,316,5,82,0,0,
        316,318,1,0,0,0,317,308,1,0,0,0,317,309,1,0,0,0,317,312,1,0,0,0,
        318,29,1,0,0,0,319,324,3,32,16,0,320,321,5,80,0,0,321,323,3,32,16,
        0,322,320,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,
        0,325,31,1,0,0,0,326,324,1,0,0,0,327,330,5,68,0,0,328,329,5,2,0,
        0,329,331,3,34,17,0,330,328,1,0,0,0,330,331,1,0,0,0,331,33,1,0,0,
        0,332,333,7,1,0,0,333,35,1,0,0,0,334,336,3,18,9,0,335,334,1,0,0,
        0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,5,14,0,0,338,339,5,68,
        0,0,339,343,5,5,0,0,340,342,3,38,19,0,341,340,1,0,0,0,342,345,1,
        0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,343,1,
        0,0,0,346,347,5,6,0,0,347,37,1,0,0,0,348,350,3,18,9,0,349,348,1,
        0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,5,68,0,0,352,353,5,
        84,0,0,353,355,3,56,28,0,354,356,5,80,0,0,355,354,1,0,0,0,355,356,
        1,0,0,0,356,39,1,0,0,0,357,358,5,68,0,0,358,362,5,5,0,0,359,361,
        3,162,81,0,360,359,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,
        1,0,0,0,363,365,1,0,0,0,364,362,1,0,0,0,365,366,5,6,0,0,366,41,1,
        0,0,0,367,369,3,18,9,0,368,367,1,0,0,0,368,369,1,0,0,0,369,371,1,
        0,0,0,370,372,3,20,10,0,371,370,1,0,0,0,371,372,1,0,0,0,372,374,
        1,0,0,0,373,375,3,22,11,0,374,373,1,0,0,0,374,375,1,0,0,0,375,376,
        1,0,0,0,376,377,5,10,0,0,377,384,5,68,0,0,378,385,5,15,0,0,379,381,
        5,81,0,0,380,382,3,44,22,0,381,380,1,0,0,0,381,382,1,0,0,0,382,383,
        1,0,0,0,383,385,5,82,0,0,384,378,1,0,0,0,384,379,1,0,0,0,385,387,
        1,0,0,0,386,388,5,11,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,390,
        1,0,0,0,389,391,3,56,28,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,
        1,0,0,0,392,393,3,66,33,0,393,43,1,0,0,0,394,399,3,46,23,0,395,396,
        5,80,0,0,396,398,3,46,23,0,397,395,1,0,0,0,398,401,1,0,0,0,399,397,
        1,0,0,0,399,400,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,402,404,
        5,80,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,45,1,0,0,0,405,407,
        5,16,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,410,
        5,9,0,0,409,408,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,414,
        5,68,0,0,412,413,5,84,0,0,413,415,3,56,28,0,414,412,1,0,0,0,414,
        415,1,0,0,0,415,47,1,0,0,0,416,418,3,18,9,0,417,416,1,0,0,0,417,
        418,1,0,0,0,418,419,1,0,0,0,419,420,5,17,0,0,420,421,5,68,0,0,421,
        422,5,84,0,0,422,423,3,56,28,0,423,424,5,2,0,0,424,425,3,104,52,
        0,425,426,5,3,0,0,426,49,1,0,0,0,427,429,3,18,9,0,428,427,1,0,0,
        0,428,429,1,0,0,0,429,430,1,0,0,0,430,431,5,18,0,0,431,446,5,68,
        0,0,432,433,5,84,0,0,433,434,3,56,28,0,434,435,5,2,0,0,435,436,3,
        104,52,0,436,437,5,3,0,0,437,447,1,0,0,0,438,442,5,5,0,0,439,441,
        3,52,26,0,440,439,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,
        1,0,0,0,443,445,1,0,0,0,444,442,1,0,0,0,445,447,5,6,0,0,446,432,
        1,0,0,0,446,438,1,0,0,0,447,51,1,0,0,0,448,450,3,18,9,0,449,448,
        1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,452,5,68,0,0,452,453,
        5,84,0,0,453,455,3,56,28,0,454,456,5,80,0,0,455,454,1,0,0,0,455,
        456,1,0,0,0,456,53,1,0,0,0,457,459,3,18,9,0,458,457,1,0,0,0,458,
        459,1,0,0,0,459,460,1,0,0,0,460,461,5,13,0,0,461,462,5,68,0,0,462,
        463,5,84,0,0,463,464,3,56,28,0,464,465,5,2,0,0,465,466,3,104,52,
        0,466,467,5,3,0,0,467,55,1,0,0,0,468,471,3,60,30,0,469,471,3,58,
        29,0,470,468,1,0,0,0,470,469,1,0,0,0,471,57,1,0,0,0,472,473,5,19,
        0,0,473,475,7,2,0,0,474,476,3,56,28,0,475,474,1,0,0,0,475,476,1,
        0,0,0,476,59,1,0,0,0,477,523,5,20,0,0,478,523,5,21,0,0,479,523,5,
        22,0,0,480,523,5,23,0,0,481,493,3,62,31,0,482,483,5,24,0,0,483,488,
        3,56,28,0,484,485,5,80,0,0,485,487,3,56,28,0,486,484,1,0,0,0,487,
        490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,491,1,0,0,0,490,
        488,1,0,0,0,491,492,5,76,0,0,492,494,1,0,0,0,493,482,1,0,0,0,493,
        494,1,0,0,0,494,523,1,0,0,0,495,507,5,68,0,0,496,497,5,24,0,0,497,
        502,3,56,28,0,498,499,5,80,0,0,499,501,3,56,28,0,500,498,1,0,0,0,
        501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,
        504,502,1,0,0,0,505,506,5,76,0,0,506,508,1,0,0,0,507,496,1,0,0,0,
        507,508,1,0,0,0,508,523,1,0,0,0,509,510,5,68,0,0,510,511,5,24,0,
        0,511,512,3,56,28,0,512,513,5,76,0,0,513,523,1,0,0,0,514,515,5,16,
        0,0,515,523,3,56,28,0,516,523,3,64,32,0,517,518,5,78,0,0,518,519,
        3,56,28,0,519,520,5,79,0,0,520,523,1,0,0,0,521,523,5,68,0,0,522,
        477,1,0,0,0,522,478,1,0,0,0,522,479,1,0,0,0,522,480,1,0,0,0,522,
        481,1,0,0,0,522,495,1,0,0,0,522,509,1,0,0,0,522,514,1,0,0,0,522,
        516,1,0,0,0,522,517,1,0,0,0,522,521,1,0,0,0,523,61,1,0,0,0,524,525,
        5,68,0,0,525,538,5,74,0,0,526,528,5,74,0,0,527,526,1,0,0,0,527,528,
        1,0,0,0,528,529,1,0,0,0,529,534,5,68,0,0,530,531,5,74,0,0,531,533,
        5,68,0,0,532,530,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,
        1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,537,524,1,0,0,0,537,527,
        1,0,0,0,538,63,1,0,0,0,539,540,5,78,0,0,540,541,3,60,30,0,541,542,
        5,3,0,0,542,543,5,69,0,0,543,544,5,79,0,0,544,65,1,0,0,0,545,549,
        5,5,0,0,546,548,3,70,35,0,547,546,1,0,0,0,548,551,1,0,0,0,549,547,
        1,0,0,0,549,550,1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,552,554,
        3,100,50,0,553,552,1,0,0,0,553,554,1,0,0,0,554,555,1,0,0,0,555,556,
        5,6,0,0,556,67,1,0,0,0,557,558,5,13,0,0,558,559,3,66,33,0,559,69,
        1,0,0,0,560,588,3,74,37,0,561,588,3,72,36,0,562,588,3,40,20,0,563,
        588,3,88,44,0,564,588,3,92,46,0,565,588,3,80,40,0,566,588,3,94,47,
        0,567,588,3,96,48,0,568,588,3,98,49,0,569,588,3,84,42,0,570,588,
        3,100,50,0,571,588,3,102,51,0,572,573,5,25,0,0,573,588,5,3,0,0,574,
        575,5,26,0,0,575,588,5,3,0,0,576,588,3,82,41,0,577,582,3,152,76,
        0,578,579,5,27,0,0,579,581,3,152,76,0,580,578,1,0,0,0,581,584,1,
        0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,0,584,582,1,
        0,0,0,585,586,5,3,0,0,586,588,1,0,0,0,587,560,1,0,0,0,587,561,1,
        0,0,0,587,562,1,0,0,0,587,563,1,0,0,0,587,564,1,0,0,0,587,565,1,
        0,0,0,587,566,1,0,0,0,587,567,1,0,0,0,587,568,1,0,0,0,587,569,1,
        0,0,0,587,570,1,0,0,0,587,571,1,0,0,0,587,572,1,0,0,0,587,574,1,
        0,0,0,587,576,1,0,0,0,587,577,1,0,0,0,588,71,1,0,0,0,589,590,3,104,
        52,0,590,591,3,146,73,0,591,592,5,3,0,0,592,73,1,0,0,0,593,594,5,
        28,0,0,594,595,3,76,38,0,595,596,5,2,0,0,596,597,3,104,52,0,597,
        598,5,3,0,0,598,604,1,0,0,0,599,600,5,28,0,0,600,601,3,76,38,0,601,
        602,3,90,45,0,602,604,1,0,0,0,603,593,1,0,0,0,603,599,1,0,0,0,604,
        75,1,0,0,0,605,607,5,29,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,
        609,1,0,0,0,608,610,5,9,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,
        611,1,0,0,0,611,614,5,68,0,0,612,613,5,84,0,0,613,615,3,56,28,0,
        614,612,1,0,0,0,614,615,1,0,0,0,615,77,1,0,0,0,616,617,7,3,0,0,617,
        79,1,0,0,0,618,619,3,104,52,0,619,620,3,78,39,0,620,621,3,104,52,
        0,621,622,5,3,0,0,622,81,1,0,0,0,623,624,5,38,0,0,624,625,3,104,
        52,0,625,627,5,5,0,0,626,628,3,164,82,0,627,626,1,0,0,0,628,629,
        1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,632,
        5,6,0,0,632,83,1,0,0,0,633,634,5,39,0,0,634,635,3,104,52,0,635,636,
        3,66,33,0,636,85,1,0,0,0,637,641,3,90,45,0,638,641,3,66,33,0,639,
        641,3,104,52,0,640,637,1,0,0,0,640,638,1,0,0,0,640,639,1,0,0,0,641,
        87,1,0,0,0,642,644,3,18,9,0,643,642,1,0,0,0,643,644,1,0,0,0,644,
        645,1,0,0,0,645,647,5,8,0,0,646,648,5,9,0,0,647,646,1,0,0,0,647,
        648,1,0,0,0,648,649,1,0,0,0,649,650,5,68,0,0,650,653,5,84,0,0,651,
        654,3,56,28,0,652,654,5,68,0,0,653,651,1,0,0,0,653,652,1,0,0,0,654,
        655,1,0,0,0,655,656,5,2,0,0,656,657,3,86,43,0,657,658,5,3,0,0,658,
        89,1,0,0,0,659,667,5,5,0,0,660,661,5,68,0,0,661,662,5,84,0,0,662,
        663,3,104,52,0,663,664,5,80,0,0,664,666,1,0,0,0,665,660,1,0,0,0,
        666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,670,1,0,0,0,
        669,667,1,0,0,0,670,671,5,6,0,0,671,672,5,3,0,0,672,673,3,104,52,
        0,673,91,1,0,0,0,674,675,3,104,52,0,675,676,5,2,0,0,676,677,3,104,
        52,0,677,678,5,3,0,0,678,93,1,0,0,0,679,680,5,40,0,0,680,681,5,68,
        0,0,681,682,5,41,0,0,682,683,3,104,52,0,683,684,3,66,33,0,684,95,
        1,0,0,0,685,686,5,42,0,0,686,687,3,104,52,0,687,694,3,66,33,0,688,
        689,5,43,0,0,689,690,3,104,52,0,690,691,3,66,33,0,691,693,1,0,0,
        0,692,688,1,0,0,0,693,696,1,0,0,0,694,692,1,0,0,0,694,695,1,0,0,
        0,695,699,1,0,0,0,696,694,1,0,0,0,697,698,5,44,0,0,698,700,3,66,
        33,0,699,697,1,0,0,0,699,700,1,0,0,0,700,97,1,0,0,0,701,702,3,104,
        52,0,702,703,5,3,0,0,703,99,1,0,0,0,704,706,5,45,0,0,705,707,3,104,
        52,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,711,5,3,
        0,0,709,711,5,68,0,0,710,704,1,0,0,0,710,709,1,0,0,0,711,101,1,0,
        0,0,712,713,5,46,0,0,713,714,3,66,33,0,714,103,1,0,0,0,715,716,6,
        52,-1,0,716,717,3,130,65,0,717,718,3,104,52,21,718,738,1,0,0,0,719,
        738,3,142,71,0,720,721,3,110,55,0,721,722,3,104,52,18,722,738,1,
        0,0,0,723,738,3,134,67,0,724,738,3,40,20,0,725,738,3,128,64,0,726,
        738,3,106,53,0,727,728,3,132,66,0,728,729,3,104,52,13,729,738,1,
        0,0,0,730,738,3,140,70,0,731,738,3,138,69,0,732,733,3,112,56,0,733,
        734,3,104,52,3,734,738,1,0,0,0,735,738,3,108,54,0,736,738,3,136,
        68,0,737,715,1,0,0,0,737,719,1,0,0,0,737,720,1,0,0,0,737,723,1,0,
        0,0,737,724,1,0,0,0,737,725,1,0,0,0,737,726,1,0,0,0,737,727,1,0,
        0,0,737,730,1,0,0,0,737,731,1,0,0,0,737,732,1,0,0,0,737,735,1,0,
        0,0,737,736,1,0,0,0,738,767,1,0,0,0,739,740,10,10,0,0,740,741,3,
        120,60,0,741,742,3,104,52,11,742,766,1,0,0,0,743,744,10,9,0,0,744,
        745,3,124,62,0,745,746,3,104,52,10,746,766,1,0,0,0,747,748,10,8,
        0,0,748,749,3,126,63,0,749,750,3,104,52,9,750,766,1,0,0,0,751,752,
        10,7,0,0,752,753,3,122,61,0,753,754,3,104,52,8,754,766,1,0,0,0,755,
        756,10,6,0,0,756,757,3,118,59,0,757,758,3,104,52,7,758,766,1,0,0,
        0,759,760,10,19,0,0,760,766,3,116,58,0,761,762,10,11,0,0,762,766,
        3,144,72,0,763,764,10,4,0,0,764,766,3,146,73,0,765,739,1,0,0,0,765,
        743,1,0,0,0,765,747,1,0,0,0,765,751,1,0,0,0,765,755,1,0,0,0,765,
        759,1,0,0,0,765,761,1,0,0,0,765,763,1,0,0,0,766,769,1,0,0,0,767,
        765,1,0,0,0,767,768,1,0,0,0,768,105,1,0,0,0,769,767,1,0,0,0,770,
        771,5,68,0,0,771,772,5,2,0,0,772,773,5,5,0,0,773,774,3,104,52,0,
        774,775,5,6,0,0,775,776,5,3,0,0,776,107,1,0,0,0,777,779,5,68,0,0,
        778,780,5,75,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,
        781,782,5,78,0,0,782,783,5,69,0,0,783,784,5,3,0,0,784,785,3,104,
        52,0,785,786,5,79,0,0,786,109,1,0,0,0,787,788,5,68,0,0,788,790,5,
        74,0,0,789,787,1,0,0,0,790,791,1,0,0,0,791,789,1,0,0,0,791,792,1,
        0,0,0,792,111,1,0,0,0,793,795,5,28,0,0,794,793,1,0,0,0,794,795,1,
        0,0,0,795,796,1,0,0,0,796,797,3,114,57,0,797,798,5,2,0,0,798,113,
        1,0,0,0,799,801,5,29,0,0,800,799,1,0,0,0,800,801,1,0,0,0,801,803,
        1,0,0,0,802,804,5,9,0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,805,
        1,0,0,0,805,817,5,68,0,0,806,807,5,68,0,0,807,809,5,81,0,0,808,810,
        5,29,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,813,
        5,9,0,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,815,
        5,68,0,0,815,817,5,82,0,0,816,800,1,0,0,0,816,806,1,0,0,0,817,115,
        1,0,0,0,818,819,5,47,0,0,819,824,3,56,28,0,820,821,5,47,0,0,821,
        823,3,56,28,0,822,820,1,0,0,0,823,826,1,0,0,0,824,822,1,0,0,0,824,
        825,1,0,0,0,825,117,1,0,0,0,826,824,1,0,0,0,827,828,7,3,0,0,828,
        119,1,0,0,0,829,830,5,48,0,0,830,121,1,0,0,0,831,832,7,4,0,0,832,
        123,1,0,0,0,833,834,7,5,0,0,834,125,1,0,0,0,835,836,7,6,0,0,836,
        127,1,0,0,0,837,838,5,68,0,0,838,839,5,5,0,0,839,844,3,162,81,0,
        840,841,5,80,0,0,841,843,3,162,81,0,842,840,1,0,0,0,843,846,1,0,
        0,0,844,842,1,0,0,0,844,845,1,0,0,0,845,848,1,0,0,0,846,844,1,0,
        0,0,847,849,5,80,0,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,0,
        0,0,850,851,5,6,0,0,851,129,1,0,0,0,852,853,5,9,0,0,853,131,1,0,
        0,0,854,855,7,7,0,0,855,133,1,0,0,0,856,857,5,81,0,0,857,858,3,104,
        52,0,858,859,5,82,0,0,859,135,1,0,0,0,860,861,5,19,0,0,861,862,3,
        104,52,0,862,137,1,0,0,0,863,867,5,5,0,0,864,866,3,70,35,0,865,864,
        1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,870,
        1,0,0,0,869,867,1,0,0,0,870,871,3,104,52,0,871,872,5,6,0,0,872,139,
        1,0,0,0,873,874,5,16,0,0,874,875,3,104,52,0,875,141,1,0,0,0,876,
        879,3,170,85,0,877,879,5,68,0,0,878,876,1,0,0,0,878,877,1,0,0,0,
        879,143,1,0,0,0,880,881,5,78,0,0,881,882,3,142,71,0,882,883,5,79,
        0,0,883,891,1,0,0,0,884,885,5,27,0,0,885,887,3,142,71,0,886,884,
        1,0,0,0,887,888,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,891,
        1,0,0,0,890,880,1,0,0,0,890,886,1,0,0,0,891,145,1,0,0,0,892,894,
        5,75,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,895,1,0,0,0,895,896,
        3,148,74,0,896,147,1,0,0,0,897,910,5,15,0,0,898,899,5,81,0,0,899,
        904,3,104,52,0,900,901,5,80,0,0,901,903,3,104,52,0,902,900,1,0,0,
        0,903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,
        0,906,904,1,0,0,0,907,908,5,82,0,0,908,910,1,0,0,0,909,897,1,0,0,
        0,909,898,1,0,0,0,910,149,1,0,0,0,911,936,3,142,71,0,912,919,5,15,
        0,0,913,915,5,81,0,0,914,916,3,168,84,0,915,914,1,0,0,0,915,916,
        1,0,0,0,916,917,1,0,0,0,917,919,5,82,0,0,918,912,1,0,0,0,918,913,
        1,0,0,0,919,937,1,0,0,0,920,921,5,27,0,0,921,923,5,68,0,0,922,920,
        1,0,0,0,923,924,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,937,
        1,0,0,0,926,927,5,27,0,0,927,934,5,68,0,0,928,930,5,81,0,0,929,931,
        3,168,84,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,935,
        5,82,0,0,933,935,5,15,0,0,934,928,1,0,0,0,934,933,1,0,0,0,935,937,
        1,0,0,0,936,918,1,0,0,0,936,922,1,0,0,0,936,926,1,0,0,0,937,938,
        1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,151,1,0,0,0,940,941,
        5,74,0,0,941,942,3,62,31,0,942,943,5,68,0,0,943,945,5,74,0,0,944,
        946,3,160,80,0,945,944,1,0,0,0,945,946,1,0,0,0,946,953,1,0,0,0,947,
        954,5,15,0,0,948,950,5,81,0,0,949,951,3,168,84,0,950,949,1,0,0,0,
        950,951,1,0,0,0,951,952,1,0,0,0,952,954,5,82,0,0,953,947,1,0,0,0,
        953,948,1,0,0,0,954,986,1,0,0,0,955,960,5,68,0,0,956,957,5,27,0,
        0,957,959,5,68,0,0,958,956,1,0,0,0,959,962,1,0,0,0,960,958,1,0,0,
        0,960,961,1,0,0,0,961,967,1,0,0,0,962,960,1,0,0,0,963,964,5,74,0,
        0,964,966,5,68,0,0,965,963,1,0,0,0,966,969,1,0,0,0,967,965,1,0,0,
        0,967,968,1,0,0,0,968,983,1,0,0,0,969,967,1,0,0,0,970,984,5,15,0,
        0,971,979,5,81,0,0,972,973,5,68,0,0,973,974,5,81,0,0,974,975,5,67,
        0,0,975,978,5,82,0,0,976,978,3,168,84,0,977,972,1,0,0,0,977,976,
        1,0,0,0,978,981,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,982,
        1,0,0,0,981,979,1,0,0,0,982,984,5,82,0,0,983,970,1,0,0,0,983,971,
        1,0,0,0,984,986,1,0,0,0,985,940,1,0,0,0,985,955,1,0,0,0,986,153,
        1,0,0,0,987,988,5,68,0,0,988,989,5,75,0,0,989,990,3,156,78,0,990,
        155,1,0,0,0,991,993,5,78,0,0,992,994,3,158,79,0,993,992,1,0,0,0,
        993,994,1,0,0,0,994,995,1,0,0,0,995,1002,5,79,0,0,996,998,5,81,0,
        0,997,999,3,158,79,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1000,1,
        0,0,0,1000,1002,5,82,0,0,1001,991,1,0,0,0,1001,996,1,0,0,0,1002,
        157,1,0,0,0,1003,1006,3,104,52,0,1004,1005,5,3,0,0,1005,1007,3,104,
        52,0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,159,1,0,0,0,1008,1009,
        5,24,0,0,1009,1014,3,56,28,0,1010,1011,5,80,0,0,1011,1013,3,56,28,
        0,1012,1010,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,
        1,0,0,0,1015,1017,1,0,0,0,1016,1014,1,0,0,0,1017,1018,5,76,0,0,1018,
        161,1,0,0,0,1019,1022,5,68,0,0,1020,1021,5,84,0,0,1021,1023,3,104,
        52,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,1025,1,0,0,0,1024,
        1026,5,80,0,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,163,1,0,0,
        0,1027,1032,3,166,83,0,1028,1029,5,60,0,0,1029,1031,3,166,83,0,1030,
        1028,1,0,0,0,1031,1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,
        0,1033,1035,1,0,0,0,1034,1032,1,0,0,0,1035,1036,5,61,0,0,1036,1037,
        3,66,33,0,1037,165,1,0,0,0,1038,1039,7,8,0,0,1039,167,1,0,0,0,1040,
        1043,3,152,76,0,1041,1043,3,104,52,0,1042,1040,1,0,0,0,1042,1041,
        1,0,0,0,1043,1051,1,0,0,0,1044,1047,5,80,0,0,1045,1048,3,152,76,
        0,1046,1048,3,104,52,0,1047,1045,1,0,0,0,1047,1046,1,0,0,0,1048,
        1050,1,0,0,0,1049,1044,1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,
        0,1051,1052,1,0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1054,1056,
        5,80,0,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1071,1,0,0,0,1057,
        1058,5,74,0,0,1058,1060,5,68,0,0,1059,1057,1,0,0,0,1060,1061,1,0,
        0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,1068,1,0,0,0,1063,1069,
        5,15,0,0,1064,1065,5,81,0,0,1065,1066,3,168,84,0,1066,1067,5,82,
        0,0,1067,1069,1,0,0,0,1068,1063,1,0,0,0,1068,1064,1,0,0,0,1069,1071,
        1,0,0,0,1070,1042,1,0,0,0,1070,1059,1,0,0,0,1071,169,1,0,0,0,1072,
        1083,3,174,87,0,1073,1083,5,72,0,0,1074,1083,5,69,0,0,1075,1083,
        5,70,0,0,1076,1083,5,71,0,0,1077,1083,5,66,0,0,1078,1083,5,67,0,
        0,1079,1083,3,172,86,0,1080,1083,5,73,0,0,1081,1083,5,65,0,0,1082,
        1072,1,0,0,0,1082,1073,1,0,0,0,1082,1074,1,0,0,0,1082,1075,1,0,0,
        0,1082,1076,1,0,0,0,1082,1077,1,0,0,0,1082,1078,1,0,0,0,1082,1079,
        1,0,0,0,1082,1080,1,0,0,0,1082,1081,1,0,0,0,1083,171,1,0,0,0,1084,
        1085,7,9,0,0,1085,173,1,0,0,0,1086,1088,5,68,0,0,1087,1086,1,0,0,
        0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,1089,1090,5,78,0,0,1090,1095,
        3,104,52,0,1091,1092,5,80,0,0,1092,1094,3,104,52,0,1093,1091,1,0,
        0,0,1094,1097,1,0,0,0,1095,1093,1,0,0,0,1095,1096,1,0,0,0,1096,1098,
        1,0,0,0,1097,1095,1,0,0,0,1098,1099,5,79,0,0,1099,1110,1,0,0,0,1100,
        1102,5,68,0,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1103,1,0,
        0,0,1103,1104,5,78,0,0,1104,1105,3,104,52,0,1105,1106,5,3,0,0,1106,
        1107,3,104,52,0,1107,1108,5,79,0,0,1108,1110,1,0,0,0,1109,1087,1,
        0,0,0,1109,1101,1,0,0,0,1110,175,1,0,0,0,1111,1115,5,62,0,0,1112,
        1114,9,0,0,0,1113,1112,1,0,0,0,1114,1117,1,0,0,0,1115,1116,1,0,0,
        0,1115,1113,1,0,0,0,1116,1118,1,0,0,0,1117,1115,1,0,0,0,1118,1119,
        5,62,0,0,1119,177,1,0,0,0,134,181,189,197,200,214,224,230,236,240,
        248,254,259,262,269,274,277,280,285,293,298,302,317,324,330,335,
        343,349,355,362,368,371,374,381,384,387,390,399,403,406,409,414,
        417,428,442,446,449,455,458,470,475,488,493,502,507,522,527,534,
        537,549,553,582,587,603,606,609,614,629,640,643,647,653,667,694,
        699,706,710,737,765,767,779,791,794,800,803,809,812,816,824,844,
        848,867,878,888,890,893,904,909,915,918,924,930,934,936,938,945,
        950,953,960,967,977,979,983,985,993,998,1001,1006,1014,1022,1025,
        1032,1042,1047,1051,1055,1061,1068,1070,1082,1087,1095,1101,1109,
        1115
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'impl'", "'{'", 
                     "'}'", "'extern'", "'static'", "'mut'", "'fn'", "'->'", 
                     "'pub'", "'unsafe'", "'struct'", "'()'", "'&'", "'const'", 
                     "'union'", "'*'", "'i32'", "'String'", "'bool'", "'u8'", 
                     "'<'", "'break'", "'continue'", "'.'", "'let'", "'ref'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'match'", "'while'", "'for'", "'in'", "'if'", 
                     "'else if'", "'else'", "'return'", "'loop'", "'as'", 
                     "'..'", "'=='", "'!='", "'||'", "'&&'", "'>>'", "'>='", 
                     "'<='", "'/'", "'%'", "'+'", "'-'", "'|'", "'=>'", 
                     "'\"'", "'true'", "'false'", "'None'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'::'", "'!'", 
                     "'>'", "'#'", "'['", "']'", "','", "'('", "')'", "'_'", 
                     "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "TRUE", "FALSE", 
                      "NONE", "Binary", "STRING_LITERAL", "Identifier", 
                      "Number", "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                      "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                      "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                      "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_topLevelDef = 2
    RULE_typeAlias = 3
    RULE_interfaceDef = 4
    RULE_externBlock = 5
    RULE_externItem = 6
    RULE_externParams = 7
    RULE_externParam = 8
    RULE_visibility = 9
    RULE_unsafeModifier = 10
    RULE_externAbi = 11
    RULE_attributes = 12
    RULE_innerAttribute = 13
    RULE_attribute = 14
    RULE_attrArgs = 15
    RULE_attrArg = 16
    RULE_attrValue = 17
    RULE_structDef = 18
    RULE_structField = 19
    RULE_structLiteral = 20
    RULE_functionDef = 21
    RULE_paramList = 22
    RULE_param = 23
    RULE_constDef = 24
    RULE_unionDef = 25
    RULE_unionField = 26
    RULE_unsafeDef = 27
    RULE_type = 28
    RULE_pointerType = 29
    RULE_basicType = 30
    RULE_typePath = 31
    RULE_arrayType = 32
    RULE_block = 33
    RULE_unsafeBlock = 34
    RULE_statement = 35
    RULE_callStmt = 36
    RULE_letStmt = 37
    RULE_varDef = 38
    RULE_compoundOp = 39
    RULE_compoundAssignment = 40
    RULE_matchStmt = 41
    RULE_whileStmt = 42
    RULE_initializer = 43
    RULE_staticVarDecl = 44
    RULE_initBlock = 45
    RULE_assignStmt = 46
    RULE_forStmt = 47
    RULE_ifStmt = 48
    RULE_exprStmt = 49
    RULE_returnStmt = 50
    RULE_loopStmt = 51
    RULE_expression = 52
    RULE_structDefInit = 53
    RULE_arrayDeclaration = 54
    RULE_typePathExpression = 55
    RULE_patternPrefix = 56
    RULE_pattern = 57
    RULE_castExpressionPostFix = 58
    RULE_compoundOps = 59
    RULE_rangeSymbol = 60
    RULE_conditionalOps = 61
    RULE_booleanOps = 62
    RULE_binaryOps = 63
    RULE_structFieldDec = 64
    RULE_mutableExpression = 65
    RULE_unaryOpes = 66
    RULE_parenExpression = 67
    RULE_dereferenceExpression = 68
    RULE_expressionBlock = 69
    RULE_borrowExpression = 70
    RULE_primaryExpression = 71
    RULE_fieldAccessPostFix = 72
    RULE_callExpressionPostFix = 73
    RULE_functionCallArgs = 74
    RULE_postfixExpression = 75
    RULE_qualifiedFunctionCall = 76
    RULE_macroCall = 77
    RULE_macroArgs = 78
    RULE_macroInner = 79
    RULE_genericArgs = 80
    RULE_structLiteralField = 81
    RULE_matchArm = 82
    RULE_matchPattern = 83
    RULE_argumentList = 84
    RULE_literal = 85
    RULE_booleanLiteral = 86
    RULE_arrayLiteral = 87
    RULE_stringLiteral = 88

    ruleNames =  [ "program", "topLevelItem", "topLevelDef", "typeAlias", 
                   "interfaceDef", "externBlock", "externItem", "externParams", 
                   "externParam", "visibility", "unsafeModifier", "externAbi", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "structLiteral", 
                   "functionDef", "paramList", "param", "constDef", "unionDef", 
                   "unionField", "unsafeDef", "type", "pointerType", "basicType", 
                   "typePath", "arrayType", "block", "unsafeBlock", "statement", 
                   "callStmt", "letStmt", "varDef", "compoundOp", "compoundAssignment", 
                   "matchStmt", "whileStmt", "initializer", "staticVarDecl", 
                   "initBlock", "assignStmt", "forStmt", "ifStmt", "exprStmt", 
                   "returnStmt", "loopStmt", "expression", "structDefInit", 
                   "arrayDeclaration", "typePathExpression", "patternPrefix", 
                   "pattern", "castExpressionPostFix", "compoundOps", "rangeSymbol", 
                   "conditionalOps", "booleanOps", "binaryOps", "structFieldDec", 
                   "mutableExpression", "unaryOpes", "parenExpression", 
                   "dereferenceExpression", "expressionBlock", "borrowExpression", 
                   "primaryExpression", "fieldAccessPostFix", "callExpressionPostFix", 
                   "functionCallArgs", "postfixExpression", "qualifiedFunctionCall", 
                   "macroCall", "macroArgs", "macroInner", "genericArgs", 
                   "structLiteralField", "matchArm", "matchPattern", "argumentList", 
                   "literal", "booleanLiteral", "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    TRUE=63
    FALSE=64
    NONE=65
    Binary=66
    STRING_LITERAL=67
    Identifier=68
    Number=69
    SignedNumber=70
    BYTE_STRING_LITERAL=71
    HexNumber=72
    CHAR_LITERAL=73
    DOUBLE_COLON=74
    EXCL=75
    GT=76
    POUND=77
    LBRACK=78
    RBRACK=79
    COMMA=80
    LPAREN=81
    RPAREN=82
    UNDERSCORE=83
    COLON=84
    ELLIPSIS=85
    WS=86
    COMMENT=87

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 423314) != 0) or _la==77:
                self.state = 178
                self.topLevelItem()
                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelDef(self):
            return self.getTypedRuleContext(RustParser.TopLevelDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 184
                self.topLevelDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 185
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 186
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 187
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 188
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def interfaceDef(self):
            return self.getTypedRuleContext(RustParser.InterfaceDefContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelDef" ):
                listener.enterTopLevelDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelDef" ):
                listener.exitTopLevelDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelDef" ):
                return visitor.visitTopLevelDef(self)
            else:
                return visitor.visitChildren(self)




    def topLevelDef(self):

        localctx = RustParser.TopLevelDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_topLevelDef)
        try:
            self.state = 197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 191
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 192
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 193
                self.interfaceDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 194
                self.constDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 195
                self.unionDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 196
                self.unsafeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 199
                self.visibility()


            self.state = 202
            self.match(RustParser.T__0)
            self.state = 203
            self.match(RustParser.Identifier)
            self.state = 204
            self.match(RustParser.T__1)
            self.state = 205
            self.type_()
            self.state = 206
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def functionDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.FunctionDefContext)
            else:
                return self.getTypedRuleContext(RustParser.FunctionDefContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_interfaceDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDef" ):
                listener.enterInterfaceDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDef" ):
                listener.exitInterfaceDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDef" ):
                return visitor.visitInterfaceDef(self)
            else:
                return visitor.visitChildren(self)




    def interfaceDef(self):

        localctx = RustParser.InterfaceDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_interfaceDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(RustParser.T__3)
            self.state = 209
            self.match(RustParser.Identifier)
            self.state = 210
            self.match(RustParser.T__4)
            self.state = 212 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 211
                self.functionDef()
                self.state = 214 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 13440) != 0)):
                    break

            self.state = 216
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(RustParser.T__6)
            self.state = 219
            self.match(RustParser.STRING_LITERAL)
            self.state = 220
            self.match(RustParser.T__4)
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5378) != 0):
                self.state = 221
                self.externItem()
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 227
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 229
                    self.visibility()


                self.state = 232
                self.match(RustParser.T__0)
                self.state = 233
                self.match(RustParser.Identifier)
                self.state = 234
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 235
                    self.visibility()


                self.state = 238
                self.match(RustParser.T__7)
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 239
                    self.match(RustParser.T__8)


                self.state = 242
                self.match(RustParser.Identifier)
                self.state = 243
                self.match(RustParser.COLON)
                self.state = 244
                self.type_()
                self.state = 245
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 247
                    self.visibility()


                self.state = 250
                self.match(RustParser.T__9)
                self.state = 251
                self.match(RustParser.Identifier)
                self.state = 252
                self.match(RustParser.LPAREN)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 229377) != 0):
                    self.state = 253
                    self.externParams()


                self.state = 256
                self.match(RustParser.RPAREN)
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 257
                    self.match(RustParser.T__10)
                    self.state = 258
                    self.type_()


                self.state = 261
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 83, 84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                self.externParam()
                self.state = 269
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 265
                        self.match(RustParser.COMMA)
                        self.state = 266
                        self.externParam() 
                    self.state = 271
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 272
                    self.match(RustParser.COMMA)
                    self.state = 273
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [85]:
                self.enterOuterAlt(localctx, 2)
                self.state = 276
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68 or _la==83:
                self.state = 279
                _la = self._input.LA(1)
                if not(_la==68 or _la==83):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 282
            self.match(RustParser.COLON)
            self.state = 285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 19, 20, 21, 22, 23, 68, 74, 78]:
                self.state = 283
                self.type_()
                pass
            elif token in [85]:
                self.state = 284
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(RustParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(RustParser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(RustParser.T__6)
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 292
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 295
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 298 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(RustParser.POUND)

            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 301
                self.match(RustParser.EXCL)


            self.state = 304
            self.match(RustParser.LBRACK)
            self.state = 305
            self.attribute()
            self.state = 306
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_attribute)
        try:
            self.state = 317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 308
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 309
                self.match(RustParser.Identifier)
                self.state = 310
                self.match(RustParser.T__1)
                self.state = 311
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 312
                self.match(RustParser.Identifier)
                self.state = 313
                self.match(RustParser.LPAREN)
                self.state = 314
                self.attrArgs()
                self.state = 315
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.attrArg()
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80:
                self.state = 320
                self.match(RustParser.COMMA)
                self.state = 321
                self.attrArg()
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(RustParser.Identifier)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 328
                self.match(RustParser.T__1)
                self.state = 329
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 334
                self.visibility()


            self.state = 337
            self.match(RustParser.T__13)
            self.state = 338
            self.match(RustParser.Identifier)
            self.state = 339
            self.match(RustParser.T__4)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12 or _la==68:
                self.state = 340
                self.structField()
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 346
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 348
                self.visibility()


            self.state = 351
            self.match(RustParser.Identifier)
            self.state = 352
            self.match(RustParser.COLON)
            self.state = 353
            self.type_()
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 354
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteral" ):
                listener.enterStructLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteral" ):
                listener.exitStructLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteral" ):
                return visitor.visitStructLiteral(self)
            else:
                return visitor.visitChildren(self)




    def structLiteral(self):

        localctx = RustParser.StructLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_structLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(RustParser.Identifier)
            self.state = 358
            self.match(RustParser.T__4)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 359
                self.structLiteralField()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 365
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 367
                self.visibility()


            self.state = 371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 370
                self.unsafeModifier()


            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 373
                self.externAbi()


            self.state = 376
            self.match(RustParser.T__9)
            self.state = 377
            self.match(RustParser.Identifier)
            self.state = 384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.state = 378
                self.match(RustParser.T__14)
                pass
            elif token in [81]:
                self.state = 379
                self.match(RustParser.LPAREN)
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & 576460752303423617) != 0):
                    self.state = 380
                    self.paramList()


                self.state = 383
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 386
                self.match(RustParser.T__10)


            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & 4904419994206470393) != 0):
                self.state = 389
                self.type_()


            self.state = 392
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.param()
            self.state = 399
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 395
                    self.match(RustParser.COMMA)
                    self.state = 396
                    self.param() 
                self.state = 401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 402
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 405
                self.match(RustParser.T__15)


            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 408
                self.match(RustParser.T__8)


            self.state = 411
            self.match(RustParser.Identifier)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 412
                self.match(RustParser.COLON)
                self.state = 413
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 416
                self.visibility()


            self.state = 419
            self.match(RustParser.T__16)
            self.state = 420
            self.match(RustParser.Identifier)
            self.state = 421
            self.match(RustParser.COLON)
            self.state = 422
            self.type_()
            self.state = 423
            self.match(RustParser.T__1)
            self.state = 424
            self.expression(0)
            self.state = 425
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 427
                self.visibility()


            self.state = 430
            self.match(RustParser.T__17)
            self.state = 431
            self.match(RustParser.Identifier)
            self.state = 446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.state = 432
                self.match(RustParser.COLON)
                self.state = 433
                self.type_()
                self.state = 434
                self.match(RustParser.T__1)
                self.state = 435
                self.expression(0)
                self.state = 436
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 438
                self.match(RustParser.T__4)
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==12 or _la==68:
                    self.state = 439
                    self.unionField()
                    self.state = 444
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 445
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 448
                self.visibility()


            self.state = 451
            self.match(RustParser.Identifier)
            self.state = 452
            self.match(RustParser.COLON)
            self.state = 453
            self.type_()
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 454
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 457
                self.visibility()


            self.state = 460
            self.match(RustParser.T__12)
            self.state = 461
            self.match(RustParser.Identifier)
            self.state = 462
            self.match(RustParser.COLON)
            self.state = 463
            self.type_()
            self.state = 464
            self.match(RustParser.T__1)
            self.state = 465
            self.expression(0)
            self.state = 466
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_type)
        try:
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16, 20, 21, 22, 23, 68, 74, 78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.basicType()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(RustParser.T__18)
            self.state = 473
            _la = self._input.LA(1)
            if not(_la==9 or _la==17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 474
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def arrayType(self):
            return self.getTypedRuleContext(RustParser.ArrayTypeContext,0)


        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.match(RustParser.T__19)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self.match(RustParser.T__20)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 479
                self.match(RustParser.T__21)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 480
                self.match(RustParser.T__22)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 481
                self.typePath()
                self.state = 493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 482
                    self.match(RustParser.T__23)
                    self.state = 483
                    self.type_()
                    self.state = 488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==80:
                        self.state = 484
                        self.match(RustParser.COMMA)
                        self.state = 485
                        self.type_()
                        self.state = 490
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 491
                    self.match(RustParser.GT)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 495
                self.match(RustParser.Identifier)
                self.state = 507
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 496
                    self.match(RustParser.T__23)
                    self.state = 497
                    self.type_()
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==80:
                        self.state = 498
                        self.match(RustParser.COMMA)
                        self.state = 499
                        self.type_()
                        self.state = 504
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 505
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 509
                self.match(RustParser.Identifier)
                self.state = 510
                self.match(RustParser.T__23)
                self.state = 511
                self.type_()
                self.state = 512
                self.match(RustParser.GT)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 514
                self.match(RustParser.T__15)
                self.state = 515
                self.type_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 516
                self.arrayType()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 517
                self.match(RustParser.LBRACK)
                self.state = 518
                self.type_()
                self.state = 519
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 521
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.match(RustParser.Identifier)
                self.state = 525
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 526
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 529
                self.match(RustParser.Identifier)
                self.state = 534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 530
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 531
                        self.match(RustParser.Identifier) 
                    self.state = 536
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = RustParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(RustParser.LBRACK)
            self.state = 540
            self.basicType()
            self.state = 541
            self.match(RustParser.T__2)
            self.state = 542
            self.match(RustParser.Number)
            self.state = 543
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(RustParser.T__4)
            self.state = 549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 546
                    self.statement() 
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==68:
                self.state = 552
                self.returnStmt()


            self.state = 555
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(RustParser.T__12)
            self.state = 558
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def callStmt(self):
            return self.getTypedRuleContext(RustParser.CallStmtContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def compoundAssignment(self):
            return self.getTypedRuleContext(RustParser.CompoundAssignmentContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.callStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 562
                self.structLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 563
                self.staticVarDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 564
                self.assignStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 565
                self.compoundAssignment()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 566
                self.forStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 567
                self.ifStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 568
                self.exprStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 569
                self.whileStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 570
                self.returnStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 571
                self.loopStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 572
                self.match(RustParser.T__24)
                self.state = 573
                self.match(RustParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 574
                self.match(RustParser.T__25)
                self.state = 575
                self.match(RustParser.T__2)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 576
                self.matchStmt()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 577
                self.qualifiedFunctionCall()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 578
                    self.match(RustParser.T__26)
                    self.state = 579
                    self.qualifiedFunctionCall()
                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 585
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_callStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStmt" ):
                listener.enterCallStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStmt" ):
                listener.exitCallStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStmt" ):
                return visitor.visitCallStmt(self)
            else:
                return visitor.visitChildren(self)




    def callStmt(self):

        localctx = RustParser.CallStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_callStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.expression(0)
            self.state = 590
            self.callExpressionPostFix()
            self.state = 591
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_letStmt)
        try:
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 593
                self.match(RustParser.T__27)
                self.state = 594
                self.varDef()
                self.state = 595
                self.match(RustParser.T__1)
                self.state = 596
                self.expression(0)
                self.state = 597
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 599
                self.match(RustParser.T__27)
                self.state = 600
                self.varDef()
                self.state = 601
                self.initBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 605
                self.match(RustParser.T__28)


            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 608
                self.match(RustParser.T__8)


            self.state = 611
            self.match(RustParser.Identifier)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 612
                self.match(RustParser.COLON)
                self.state = 613
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOp" ):
                listener.enterCompoundOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOp" ):
                listener.exitCompoundOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOp" ):
                return visitor.visitCompoundOp(self)
            else:
                return visitor.visitChildren(self)




    def compoundOp(self):

        localctx = RustParser.CompoundOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_compoundOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 273804165120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def compoundOp(self):
            return self.getTypedRuleContext(RustParser.CompoundOpContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_compoundAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundAssignment" ):
                listener.enterCompoundAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundAssignment" ):
                listener.exitCompoundAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundAssignment" ):
                return visitor.visitCompoundAssignment(self)
            else:
                return visitor.visitChildren(self)




    def compoundAssignment(self):

        localctx = RustParser.CompoundAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_compoundAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.expression(0)
            self.state = 619
            self.compoundOp()
            self.state = 620
            self.expression(0)
            self.state = 621
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(RustParser.T__37)
            self.state = 624
            self.expression(0)
            self.state = 625
            self.match(RustParser.T__4)
            self.state = 627 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 626
                self.matchArm()
                self.state = 629 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 32771) != 0)):
                    break

            self.state = 631
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(RustParser.T__38)
            self.state = 634
            self.expression(0)
            self.state = 635
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initBlock(self):
            return self.getTypedRuleContext(RustParser.InitBlockContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_initializer)
        try:
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self.initBlock()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 639
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 642
                self.visibility()


            self.state = 645
            self.match(RustParser.T__7)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 646
                self.match(RustParser.T__8)


            self.state = 649
            self.match(RustParser.Identifier)
            self.state = 650
            self.match(RustParser.COLON)
            self.state = 653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 651
                self.type_()
                pass

            elif la_ == 2:
                self.state = 652
                self.match(RustParser.Identifier)
                pass


            self.state = 655
            self.match(RustParser.T__1)
            self.state = 656
            self.initializer()
            self.state = 657
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COLON)
            else:
                return self.getToken(RustParser.COLON, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_initBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitBlock" ):
                listener.enterInitBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitBlock" ):
                listener.exitInitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitBlock" ):
                return visitor.visitInitBlock(self)
            else:
                return visitor.visitChildren(self)




    def initBlock(self):

        localctx = RustParser.InitBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_initBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(RustParser.T__4)
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 660
                self.match(RustParser.Identifier)
                self.state = 661
                self.match(RustParser.COLON)
                self.state = 662
                self.expression(0)
                self.state = 663
                self.match(RustParser.COMMA)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 670
            self.match(RustParser.T__5)
            self.state = 671
            self.match(RustParser.T__2)
            self.state = 672
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.expression(0)
            self.state = 675
            self.match(RustParser.T__1)
            self.state = 676
            self.expression(0)
            self.state = 677
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(RustParser.T__39)
            self.state = 680
            self.match(RustParser.Identifier)
            self.state = 681
            self.match(RustParser.T__40)
            self.state = 682
            self.expression(0)
            self.state = 683
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(RustParser.T__41)
            self.state = 686
            self.expression(0)
            self.state = 687
            self.block()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 688
                self.match(RustParser.T__42)
                self.state = 689
                self.expression(0)
                self.state = 690
                self.block()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 697
                self.match(RustParser.T__43)
                self.state = 698
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.expression(0)
            self.state = 702
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 710
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.match(RustParser.T__44)
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 150527) != 0):
                    self.state = 705
                    self.expression(0)


                self.state = 708
                self.match(RustParser.T__2)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 709
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(RustParser.T__45)
            self.state = 713
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mutableExpression(self):
            return self.getTypedRuleContext(RustParser.MutableExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def typePathExpression(self):
            return self.getTypedRuleContext(RustParser.TypePathExpressionContext,0)


        def parenExpression(self):
            return self.getTypedRuleContext(RustParser.ParenExpressionContext,0)


        def structLiteral(self):
            return self.getTypedRuleContext(RustParser.StructLiteralContext,0)


        def structFieldDec(self):
            return self.getTypedRuleContext(RustParser.StructFieldDecContext,0)


        def structDefInit(self):
            return self.getTypedRuleContext(RustParser.StructDefInitContext,0)


        def unaryOpes(self):
            return self.getTypedRuleContext(RustParser.UnaryOpesContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def patternPrefix(self):
            return self.getTypedRuleContext(RustParser.PatternPrefixContext,0)


        def arrayDeclaration(self):
            return self.getTypedRuleContext(RustParser.ArrayDeclarationContext,0)


        def dereferenceExpression(self):
            return self.getTypedRuleContext(RustParser.DereferenceExpressionContext,0)


        def rangeSymbol(self):
            return self.getTypedRuleContext(RustParser.RangeSymbolContext,0)


        def booleanOps(self):
            return self.getTypedRuleContext(RustParser.BooleanOpsContext,0)


        def binaryOps(self):
            return self.getTypedRuleContext(RustParser.BinaryOpsContext,0)


        def conditionalOps(self):
            return self.getTypedRuleContext(RustParser.ConditionalOpsContext,0)


        def compoundOps(self):
            return self.getTypedRuleContext(RustParser.CompoundOpsContext,0)


        def castExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CastExpressionPostFixContext,0)


        def fieldAccessPostFix(self):
            return self.getTypedRuleContext(RustParser.FieldAccessPostFixContext,0)


        def callExpressionPostFix(self):
            return self.getTypedRuleContext(RustParser.CallExpressionPostFixContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 716
                self.mutableExpression()
                self.state = 717
                self.expression(21)
                pass

            elif la_ == 2:
                self.state = 719
                self.primaryExpression()
                pass

            elif la_ == 3:
                self.state = 720
                self.typePathExpression()
                self.state = 721
                self.expression(18)
                pass

            elif la_ == 4:
                self.state = 723
                self.parenExpression()
                pass

            elif la_ == 5:
                self.state = 724
                self.structLiteral()
                pass

            elif la_ == 6:
                self.state = 725
                self.structFieldDec()
                pass

            elif la_ == 7:
                self.state = 726
                self.structDefInit()
                pass

            elif la_ == 8:
                self.state = 727
                self.unaryOpes()
                self.state = 728
                self.expression(13)
                pass

            elif la_ == 9:
                self.state = 730
                self.borrowExpression()
                pass

            elif la_ == 10:
                self.state = 731
                self.expressionBlock()
                pass

            elif la_ == 11:
                self.state = 732
                self.patternPrefix()
                self.state = 733
                self.expression(3)
                pass

            elif la_ == 12:
                self.state = 735
                self.arrayDeclaration()
                pass

            elif la_ == 13:
                self.state = 736
                self.dereferenceExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 767
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 765
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 739
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 740
                        self.rangeSymbol()
                        self.state = 741
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 743
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 744
                        self.booleanOps()
                        self.state = 745
                        self.expression(10)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 747
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 748
                        self.binaryOps()
                        self.state = 749
                        self.expression(9)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 751
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 752
                        self.conditionalOps()
                        self.state = 753
                        self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 755
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 756
                        self.compoundOps()
                        self.state = 757
                        self.expression(7)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 759
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 760
                        self.castExpressionPostFix()
                        pass

                    elif la_ == 7:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 761
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 762
                        self.fieldAccessPostFix()
                        pass

                    elif la_ == 8:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 763
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 764
                        self.callExpressionPostFix()
                        pass

             
                self.state = 769
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructDefInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structDefInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDefInit" ):
                listener.enterStructDefInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDefInit" ):
                listener.exitStructDefInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDefInit" ):
                return visitor.visitStructDefInit(self)
            else:
                return visitor.visitChildren(self)




    def structDefInit(self):

        localctx = RustParser.StructDefInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_structDefInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(RustParser.Identifier)
            self.state = 771
            self.match(RustParser.T__1)
            self.state = 772
            self.match(RustParser.T__4)
            self.state = 773
            self.expression(0)
            self.state = 774
            self.match(RustParser.T__5)
            self.state = 775
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_arrayDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclaration" ):
                listener.enterArrayDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclaration" ):
                listener.exitArrayDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclaration" ):
                return visitor.visitArrayDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclaration(self):

        localctx = RustParser.ArrayDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_arrayDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(RustParser.Identifier)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 778
                self.match(RustParser.EXCL)


            self.state = 781
            self.match(RustParser.LBRACK)
            self.state = 782
            self.match(RustParser.Number)
            self.state = 783
            self.match(RustParser.T__2)
            self.state = 784
            self.expression(0)
            self.state = 785
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePathExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePathExpression" ):
                listener.enterTypePathExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePathExpression" ):
                listener.exitTypePathExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePathExpression" ):
                return visitor.visitTypePathExpression(self)
            else:
                return visitor.visitChildren(self)




    def typePathExpression(self):

        localctx = RustParser.TypePathExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typePathExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 787
                    self.match(RustParser.Identifier)
                    self.state = 788
                    self.match(RustParser.DOUBLE_COLON)

                else:
                    raise NoViableAltException(self)
                self.state = 791 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternPrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self):
            return self.getTypedRuleContext(RustParser.PatternContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_patternPrefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatternPrefix" ):
                listener.enterPatternPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatternPrefix" ):
                listener.exitPatternPrefix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatternPrefix" ):
                return visitor.visitPatternPrefix(self)
            else:
                return visitor.visitChildren(self)




    def patternPrefix(self):

        localctx = RustParser.PatternPrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_patternPrefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 793
                self.match(RustParser.T__27)


            self.state = 796
            self.pattern()
            self.state = 797
            self.match(RustParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = RustParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_pattern)
        self._la = 0 # Token type
        try:
            self.state = 816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 799
                    self.match(RustParser.T__28)


                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 802
                    self.match(RustParser.T__8)


                self.state = 805
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.match(RustParser.Identifier)
                self.state = 807
                self.match(RustParser.LPAREN)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 808
                    self.match(RustParser.T__28)


                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==9:
                    self.state = 811
                    self.match(RustParser.T__8)


                self.state = 814
                self.match(RustParser.Identifier)
                self.state = 815
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_castExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpressionPostFix" ):
                listener.enterCastExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpressionPostFix" ):
                listener.exitCastExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpressionPostFix" ):
                return visitor.visitCastExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def castExpressionPostFix(self):

        localctx = RustParser.CastExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_castExpressionPostFix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(RustParser.T__46)
            self.state = 819
            self.type_()
            self.state = 824
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 820
                    self.match(RustParser.T__46)
                    self.state = 821
                    self.type_() 
                self.state = 826
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_compoundOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundOps" ):
                listener.enterCompoundOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundOps" ):
                listener.exitCompoundOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundOps" ):
                return visitor.visitCompoundOps(self)
            else:
                return visitor.visitChildren(self)




    def compoundOps(self):

        localctx = RustParser.CompoundOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_compoundOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 273804165120) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_rangeSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeSymbol" ):
                listener.enterRangeSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeSymbol" ):
                listener.exitRangeSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeSymbol" ):
                return visitor.visitRangeSymbol(self)
            else:
                return visitor.visitChildren(self)




    def rangeSymbol(self):

        localctx = RustParser.RangeSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_rangeSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(RustParser.T__47)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def getRuleIndex(self):
            return RustParser.RULE_conditionalOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOps" ):
                listener.enterConditionalOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOps" ):
                listener.exitConditionalOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalOps" ):
                return visitor.visitConditionalOps(self)
            else:
                return visitor.visitChildren(self)




    def conditionalOps(self):

        localctx = RustParser.ConditionalOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_conditionalOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            _la = self._input.LA(1)
            if not(((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & 4503600130686977) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_booleanOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOps" ):
                listener.enterBooleanOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOps" ):
                listener.exitBooleanOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanOps" ):
                return visitor.visitBooleanOps(self)
            else:
                return visitor.visitChildren(self)




    def booleanOps(self):

        localctx = RustParser.BooleanOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_booleanOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 63050394783252480) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryOpsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_binaryOps

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOps" ):
                listener.enterBinaryOps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOps" ):
                listener.exitBinaryOps(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryOps" ):
                return visitor.visitBinaryOps(self)
            else:
                return visitor.visitChildren(self)




    def binaryOps(self):

        localctx = RustParser.BinaryOpsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_binaryOps)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1080863910569443328) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldDecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_structFieldDec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructFieldDec" ):
                listener.enterStructFieldDec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructFieldDec" ):
                listener.exitStructFieldDec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructFieldDec" ):
                return visitor.visitStructFieldDec(self)
            else:
                return visitor.visitChildren(self)




    def structFieldDec(self):

        localctx = RustParser.StructFieldDecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_structFieldDec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(RustParser.Identifier)
            self.state = 838
            self.match(RustParser.T__4)
            self.state = 839
            self.structLiteralField()
            self.state = 844
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 840
                    self.match(RustParser.COMMA)
                    self.state = 841
                    self.structLiteralField() 
                self.state = 846
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 847
                self.match(RustParser.COMMA)


            self.state = 850
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return RustParser.RULE_mutableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutableExpression" ):
                listener.enterMutableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutableExpression" ):
                listener.exitMutableExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutableExpression" ):
                return visitor.visitMutableExpression(self)
            else:
                return visitor.visitChildren(self)




    def mutableExpression(self):

        localctx = RustParser.MutableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_mutableExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(RustParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOpesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unaryOpes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOpes" ):
                listener.enterUnaryOpes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOpes" ):
                listener.exitUnaryOpes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOpes" ):
                return visitor.visitUnaryOpes(self)
            else:
                return visitor.visitChildren(self)




    def unaryOpes(self):

        localctx = RustParser.UnaryOpesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_unaryOpes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 131075) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_parenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpression" ):
                listener.enterParenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpression" ):
                listener.exitParenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenExpression" ):
                return visitor.visitParenExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenExpression(self):

        localctx = RustParser.ParenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_parenExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(RustParser.LPAREN)
            self.state = 857
            self.expression(0)
            self.state = 858
            self.match(RustParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_dereferenceExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceExpression" ):
                listener.enterDereferenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceExpression" ):
                listener.exitDereferenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereferenceExpression" ):
                return visitor.visitDereferenceExpression(self)
            else:
                return visitor.visitChildren(self)




    def dereferenceExpression(self):

        localctx = RustParser.DereferenceExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dereferenceExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(RustParser.T__18)
            self.state = 861
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(RustParser.T__4)
            self.state = 867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 864
                    self.statement() 
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

            self.state = 870
            self.expression(0)
            self.state = 871
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(RustParser.T__15)
            self.state = 874
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_primaryExpression)
        try:
            self.state = 878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 877
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_fieldAccessPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessPostFix" ):
                listener.enterFieldAccessPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessPostFix" ):
                listener.exitFieldAccessPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldAccessPostFix" ):
                return visitor.visitFieldAccessPostFix(self)
            else:
                return visitor.visitChildren(self)




    def fieldAccessPostFix(self):

        localctx = RustParser.FieldAccessPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fieldAccessPostFix)
        try:
            self.state = 890
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 880
                self.match(RustParser.LBRACK)
                self.state = 881
                self.primaryExpression()
                self.state = 882
                self.match(RustParser.RBRACK)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 886 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 884
                        self.match(RustParser.T__26)
                        self.state = 885
                        self.primaryExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 888 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallExpressionPostFixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallArgs(self):
            return self.getTypedRuleContext(RustParser.FunctionCallArgsContext,0)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_callExpressionPostFix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallExpressionPostFix" ):
                listener.enterCallExpressionPostFix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallExpressionPostFix" ):
                listener.exitCallExpressionPostFix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallExpressionPostFix" ):
                return visitor.visitCallExpressionPostFix(self)
            else:
                return visitor.visitChildren(self)




    def callExpressionPostFix(self):

        localctx = RustParser.CallExpressionPostFixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_callExpressionPostFix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 892
                self.match(RustParser.EXCL)


            self.state = 895
            self.functionCallArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_functionCallArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArgs" ):
                listener.enterFunctionCallArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArgs" ):
                listener.exitFunctionCallArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArgs" ):
                return visitor.visitFunctionCallArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArgs(self):

        localctx = RustParser.FunctionCallArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functionCallArgs)
        self._la = 0 # Token type
        try:
            self.state = 909
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.match(RustParser.T__14)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.match(RustParser.LPAREN)
                self.state = 899
                self.expression(0)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 900
                    self.match(RustParser.COMMA)
                    self.state = 901
                    self.expression(0)
                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 907
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.primaryExpression()
            self.state = 936 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 936
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 918
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [15]:
                        self.state = 912
                        self.match(RustParser.T__14)
                        pass
                    elif token in [81]:
                        self.state = 913
                        self.match(RustParser.LPAREN)
                        self.state = 915
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 151551) != 0):
                            self.state = 914
                            self.argumentList()


                        self.state = 917
                        self.match(RustParser.RPAREN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 922 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 920
                            self.match(RustParser.T__26)
                            self.state = 921
                            self.match(RustParser.Identifier)

                        else:
                            raise NoViableAltException(self)
                        self.state = 924 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                    pass

                elif la_ == 3:
                    self.state = 926
                    self.match(RustParser.T__26)
                    self.state = 927
                    self.match(RustParser.Identifier)
                    self.state = 934
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [81]:
                        self.state = 928
                        self.match(RustParser.LPAREN)
                        self.state = 930
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 151551) != 0):
                            self.state = 929
                            self.argumentList()


                        self.state = 932
                        self.match(RustParser.RPAREN)
                        pass
                    elif token in [15]:
                        self.state = 933
                        self.match(RustParser.T__14)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 938 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==15 or _la==27 or _la==81):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.STRING_LITERAL)
            else:
                return self.getToken(RustParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 985
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self.match(RustParser.DOUBLE_COLON)
                self.state = 941
                self.typePath()
                self.state = 942
                self.match(RustParser.Identifier)
                self.state = 943
                self.match(RustParser.DOUBLE_COLON)
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 944
                    self.genericArgs()


                self.state = 953
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 947
                    self.match(RustParser.T__14)
                    pass
                elif token in [81]:
                    self.state = 948
                    self.match(RustParser.LPAREN)
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 151551) != 0):
                        self.state = 949
                        self.argumentList()


                    self.state = 952
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 955
                self.match(RustParser.Identifier)
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 956
                    self.match(RustParser.T__26)
                    self.state = 957
                    self.match(RustParser.Identifier)
                    self.state = 962
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==74:
                    self.state = 963
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 964
                    self.match(RustParser.Identifier)
                    self.state = 969
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 983
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 970
                    self.match(RustParser.T__14)
                    pass
                elif token in [81]:
                    self.state = 971
                    self.match(RustParser.LPAREN)
                    self.state = 979
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 151551) != 0):
                        self.state = 977
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                        if la_ == 1:
                            self.state = 972
                            self.match(RustParser.Identifier)
                            self.state = 973
                            self.match(RustParser.LPAREN)
                            self.state = 974
                            self.match(RustParser.STRING_LITERAL)
                            self.state = 975
                            self.match(RustParser.RPAREN)
                            pass

                        elif la_ == 2:
                            self.state = 976
                            self.argumentList()
                            pass


                        self.state = 981
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 982
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(RustParser.Identifier)
            self.state = 988
            self.match(RustParser.EXCL)
            self.state = 989
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 1001
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 991
                self.match(RustParser.LBRACK)
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 150527) != 0):
                    self.state = 992
                    self.macroInner()


                self.state = 995
                self.match(RustParser.RBRACK)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 2)
                self.state = 996
                self.match(RustParser.LPAREN)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8358680907593743840) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 150527) != 0):
                    self.state = 997
                    self.macroInner()


                self.state = 1000
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.expression(0)
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 1004
                self.match(RustParser.T__2)
                self.state = 1005
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(RustParser.T__23)
            self.state = 1009
            self.type_()
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80:
                self.state = 1010
                self.match(RustParser.COMMA)
                self.state = 1011
                self.type_()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1017
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_structLiteralField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(RustParser.Identifier)
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 1020
                self.match(RustParser.COLON)
                self.state = 1021
                self.expression(0)


            self.state = 1025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1024
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.matchPattern()
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==60:
                self.state = 1028
                self.match(RustParser.T__59)
                self.state = 1029
                self.matchPattern()
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1035
            self.match(RustParser.T__60)
            self.state = 1036
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 1070
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 1040
                    self.qualifiedFunctionCall()
                    pass

                elif la_ == 2:
                    self.state = 1041
                    self.expression(0)
                    pass


                self.state = 1051
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1044
                        self.match(RustParser.COMMA)
                        self.state = 1047
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 1045
                            self.qualifiedFunctionCall()
                            pass

                        elif la_ == 2:
                            self.state = 1046
                            self.expression(0)
                            pass

                 
                    self.state = 1053
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80:
                    self.state = 1054
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1059 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1057
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 1058
                    self.match(RustParser.Identifier)
                    self.state = 1061 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==74):
                        break

                self.state = 1068
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [15]:
                    self.state = 1063
                    self.match(RustParser.T__14)
                    pass
                elif token in [81]:
                    self.state = 1064
                    self.match(RustParser.LPAREN)
                    self.state = 1065
                    self.argumentList()
                    self.state = 1066
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def NONE(self):
            return self.getToken(RustParser.NONE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_literal)
        try:
            self.state = 1082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68, 78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1072
                self.arrayLiteral()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.match(RustParser.HexNumber)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1074
                self.match(RustParser.Number)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1075
                self.match(RustParser.SignedNumber)
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1076
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1077
                self.match(RustParser.Binary)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1078
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [63, 64]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1079
                self.booleanLiteral()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1080
                self.match(RustParser.CHAR_LITERAL)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1081
                self.match(RustParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            _la = self._input.LA(1)
            if not(_la==63 or _la==64):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1086
                    self.match(RustParser.Identifier)


                self.state = 1089
                self.match(RustParser.LBRACK)
                self.state = 1090
                self.expression(0)
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80:
                    self.state = 1091
                    self.match(RustParser.COMMA)
                    self.state = 1092
                    self.expression(0)
                    self.state = 1097
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1098
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1100
                    self.match(RustParser.Identifier)


                self.state = 1103
                self.match(RustParser.LBRACK)
                self.state = 1104
                self.expression(0)
                self.state = 1105
                self.match(RustParser.T__2)
                self.state = 1106
                self.expression(0)
                self.state = 1107
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(RustParser.T__61)
            self.state = 1115
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 1112
                    self.matchWildcard() 
                self.state = 1117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

            self.state = 1118
            self.match(RustParser.T__61)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[52] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         




