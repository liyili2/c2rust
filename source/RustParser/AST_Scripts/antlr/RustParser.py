# Generated from Rust.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,85,934,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,5,0,128,8,0,10,0,12,0,131,
        9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,142,8,1,1,2,3,2,145,
        8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,157,8,3,10,3,12,
        3,160,9,3,1,3,1,3,1,4,3,4,165,8,4,1,4,1,4,1,4,1,4,3,4,171,8,4,1,
        4,1,4,3,4,175,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,183,8,4,1,4,1,4,1,
        4,1,4,3,4,189,8,4,1,4,1,4,1,4,3,4,194,8,4,1,4,3,4,197,8,4,1,5,1,
        5,1,5,5,5,202,8,5,10,5,12,5,205,9,5,1,5,1,5,3,5,209,8,5,1,5,3,5,
        212,8,5,1,6,3,6,215,8,6,1,6,1,6,1,6,3,6,220,8,6,1,7,1,7,1,8,4,8,
        225,8,8,11,8,12,8,226,1,9,1,9,3,9,231,8,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,246,8,10,1,11,1,11,1,
        11,5,11,251,8,11,10,11,12,11,254,9,11,1,12,1,12,1,12,3,12,259,8,
        12,1,13,1,13,1,14,3,14,264,8,14,1,14,1,14,1,14,1,14,5,14,270,8,14,
        10,14,12,14,273,9,14,1,14,1,14,1,15,3,15,278,8,15,1,15,1,15,1,15,
        1,15,3,15,284,8,15,1,16,3,16,287,8,16,1,16,3,16,290,8,16,1,16,3,
        16,293,8,16,1,16,1,16,1,16,1,16,1,16,3,16,300,8,16,1,16,3,16,303,
        8,16,1,16,3,16,306,8,16,1,16,3,16,309,8,16,1,16,1,16,1,17,1,17,1,
        18,1,18,3,18,317,8,18,1,19,1,19,1,19,5,19,322,8,19,10,19,12,19,325,
        9,19,1,19,3,19,328,8,19,1,20,3,20,331,8,20,1,20,1,20,1,20,1,20,1,
        21,3,21,338,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,3,
        22,349,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,5,
        22,361,8,22,10,22,12,22,364,9,22,1,22,3,22,367,8,22,1,23,3,23,370,
        8,23,1,23,1,23,1,23,1,23,3,23,376,8,23,1,24,3,24,379,8,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,3,26,394,
        8,26,1,27,1,27,1,27,3,27,399,8,27,1,27,1,27,1,27,5,27,404,8,27,10,
        27,12,27,407,9,27,3,27,409,8,27,1,28,1,28,1,28,3,28,414,8,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,426,8,29,10,29,
        12,29,429,9,29,1,29,1,29,3,29,433,8,29,1,29,1,29,1,29,1,29,1,29,
        5,29,440,8,29,10,29,12,29,443,9,29,1,29,1,29,3,29,447,8,29,1,29,
        1,29,1,29,3,29,452,8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,3,29,466,8,29,1,30,1,30,5,30,470,8,30,10,30,
        12,30,473,9,30,1,30,3,30,476,8,30,1,30,1,30,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,504,8,31,10,31,12,31,507,
        9,31,1,31,1,31,1,31,3,31,512,8,31,1,32,1,32,1,32,1,32,4,32,518,8,
        32,11,32,12,32,519,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
        1,35,3,35,532,8,35,1,35,1,35,3,35,536,8,35,1,35,1,35,1,35,1,35,3,
        35,542,8,35,1,35,1,35,1,35,1,35,1,36,1,36,3,36,550,8,36,1,37,1,37,
        1,37,1,37,1,37,1,37,1,38,1,38,3,38,560,8,38,1,38,1,38,1,38,3,38,
        565,8,38,1,38,1,38,1,38,1,38,3,38,571,8,38,1,38,1,38,1,38,3,38,576,
        8,38,3,38,578,8,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
        1,40,1,40,1,41,1,41,1,41,1,41,1,41,3,41,596,8,41,1,42,1,42,1,42,
        1,43,1,43,3,43,603,8,43,1,43,1,43,3,43,607,8,43,1,44,1,44,1,44,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,632,8,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,4,45,645,8,45,11,45,12,45,
        646,1,45,1,45,1,45,1,45,1,45,3,45,654,8,45,3,45,656,8,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,5,45,680,8,45,10,45,12,45,
        683,9,45,5,45,685,8,45,10,45,12,45,688,9,45,1,46,1,46,5,46,692,8,
        46,10,46,12,46,695,9,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,
        1,48,1,48,3,48,707,8,48,1,48,3,48,710,8,48,1,48,1,48,4,48,714,8,
        48,11,48,12,48,715,1,48,1,48,1,48,1,48,3,48,722,8,48,1,48,1,48,3,
        48,726,8,48,1,48,1,48,1,48,1,48,4,48,732,8,48,11,48,12,48,733,1,
        49,1,49,1,49,1,49,1,49,1,49,3,49,742,8,49,1,49,1,49,1,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,5,49,754,8,49,10,49,12,49,757,9,49,1,
        49,3,49,760,8,49,1,49,1,49,3,49,764,8,49,1,50,1,50,1,50,1,50,3,50,
        770,8,50,1,50,1,50,1,50,3,50,775,8,50,1,50,3,50,778,8,50,1,50,1,
        50,1,50,5,50,783,8,50,10,50,12,50,786,9,50,1,50,1,50,5,50,790,8,
        50,10,50,12,50,793,9,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,
        802,8,50,10,50,12,50,805,9,50,1,50,3,50,808,8,50,3,50,810,8,50,1,
        51,1,51,1,51,1,51,5,51,816,8,51,10,51,12,51,819,9,51,1,51,1,51,1,
        52,1,52,1,52,1,52,1,53,1,53,1,53,5,53,830,8,53,10,53,12,53,833,9,
        53,1,53,1,53,1,53,1,54,1,54,1,55,1,55,3,55,842,8,55,1,55,1,55,1,
        55,3,55,847,8,55,5,55,849,8,55,10,55,12,55,852,9,55,1,55,3,55,855,
        8,55,1,55,1,55,4,55,859,8,55,11,55,12,55,860,1,55,1,55,1,55,1,55,
        1,55,3,55,868,8,55,3,55,870,8,55,1,56,1,56,1,56,1,56,1,57,1,57,3,
        57,878,8,57,1,57,1,57,1,57,3,57,883,8,57,1,57,3,57,886,8,57,1,58,
        1,58,1,58,3,58,891,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,3,59,902,8,59,1,60,1,60,1,61,1,61,1,61,1,61,5,61,910,8,61,10,
        61,12,61,913,9,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,923,
        8,61,1,62,1,62,5,62,927,8,62,10,62,12,62,930,9,62,1,62,1,62,1,62,
        1,928,1,90,63,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,0,8,2,0,66,66,81,81,1,0,65,67,2,0,8,8,15,15,1,0,24,31,
        2,0,17,18,46,52,3,0,23,23,53,56,74,74,2,0,66,67,81,81,1,0,62,63,
        1048,0,129,1,0,0,0,2,141,1,0,0,0,4,144,1,0,0,0,6,152,1,0,0,0,8,196,
        1,0,0,0,10,211,1,0,0,0,12,214,1,0,0,0,14,221,1,0,0,0,16,224,1,0,
        0,0,18,228,1,0,0,0,20,245,1,0,0,0,22,247,1,0,0,0,24,255,1,0,0,0,
        26,260,1,0,0,0,28,263,1,0,0,0,30,277,1,0,0,0,32,286,1,0,0,0,34,312,
        1,0,0,0,36,314,1,0,0,0,38,318,1,0,0,0,40,330,1,0,0,0,42,337,1,0,
        0,0,44,348,1,0,0,0,46,369,1,0,0,0,48,378,1,0,0,0,50,388,1,0,0,0,
        52,393,1,0,0,0,54,408,1,0,0,0,56,410,1,0,0,0,58,465,1,0,0,0,60,467,
        1,0,0,0,62,511,1,0,0,0,64,513,1,0,0,0,66,523,1,0,0,0,68,526,1,0,
        0,0,70,531,1,0,0,0,72,549,1,0,0,0,74,551,1,0,0,0,76,577,1,0,0,0,
        78,579,1,0,0,0,80,584,1,0,0,0,82,590,1,0,0,0,84,597,1,0,0,0,86,606,
        1,0,0,0,88,608,1,0,0,0,90,655,1,0,0,0,92,689,1,0,0,0,94,699,1,0,
        0,0,96,702,1,0,0,0,98,763,1,0,0,0,100,809,1,0,0,0,102,811,1,0,0,
        0,104,822,1,0,0,0,106,826,1,0,0,0,108,837,1,0,0,0,110,869,1,0,0,
        0,112,871,1,0,0,0,114,885,1,0,0,0,116,887,1,0,0,0,118,901,1,0,0,
        0,120,903,1,0,0,0,122,922,1,0,0,0,124,924,1,0,0,0,126,128,3,2,1,
        0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,
        0,130,1,1,0,0,0,131,129,1,0,0,0,132,142,3,32,16,0,133,142,3,28,14,
        0,134,142,3,16,8,0,135,142,3,6,3,0,136,142,3,4,2,0,137,142,3,42,
        21,0,138,142,3,44,22,0,139,142,3,48,24,0,140,142,3,70,35,0,141,132,
        1,0,0,0,141,133,1,0,0,0,141,134,1,0,0,0,141,135,1,0,0,0,141,136,
        1,0,0,0,141,137,1,0,0,0,141,138,1,0,0,0,141,139,1,0,0,0,141,140,
        1,0,0,0,142,3,1,0,0,0,143,145,3,14,7,0,144,143,1,0,0,0,144,145,1,
        0,0,0,145,146,1,0,0,0,146,147,5,1,0,0,147,148,5,66,0,0,148,149,5,
        2,0,0,149,150,3,52,26,0,150,151,5,3,0,0,151,5,1,0,0,0,152,153,5,
        4,0,0,153,154,5,65,0,0,154,158,5,5,0,0,155,157,3,8,4,0,156,155,1,
        0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,
        0,0,0,160,158,1,0,0,0,161,162,5,6,0,0,162,7,1,0,0,0,163,165,3,14,
        7,0,164,163,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,167,5,1,
        0,0,167,168,5,66,0,0,168,197,5,3,0,0,169,171,3,14,7,0,170,169,1,
        0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,174,5,7,0,0,173,175,5,
        8,0,0,174,173,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,177,5,
        66,0,0,177,178,5,82,0,0,178,179,3,52,26,0,179,180,5,3,0,0,180,197,
        1,0,0,0,181,183,3,14,7,0,182,181,1,0,0,0,182,183,1,0,0,0,183,184,
        1,0,0,0,184,185,5,9,0,0,185,186,5,66,0,0,186,188,5,79,0,0,187,189,
        3,10,5,0,188,187,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,193,
        5,80,0,0,191,192,5,10,0,0,192,194,3,52,26,0,193,191,1,0,0,0,193,
        194,1,0,0,0,194,195,1,0,0,0,195,197,5,3,0,0,196,164,1,0,0,0,196,
        170,1,0,0,0,196,182,1,0,0,0,197,9,1,0,0,0,198,203,3,12,6,0,199,200,
        5,78,0,0,200,202,3,12,6,0,201,199,1,0,0,0,202,205,1,0,0,0,203,201,
        1,0,0,0,203,204,1,0,0,0,204,208,1,0,0,0,205,203,1,0,0,0,206,207,
        5,78,0,0,207,209,5,83,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,212,
        1,0,0,0,210,212,5,83,0,0,211,198,1,0,0,0,211,210,1,0,0,0,212,11,
        1,0,0,0,213,215,7,0,0,0,214,213,1,0,0,0,214,215,1,0,0,0,215,216,
        1,0,0,0,216,219,5,82,0,0,217,220,3,52,26,0,218,220,5,83,0,0,219,
        217,1,0,0,0,219,218,1,0,0,0,220,13,1,0,0,0,221,222,5,11,0,0,222,
        15,1,0,0,0,223,225,3,18,9,0,224,223,1,0,0,0,225,226,1,0,0,0,226,
        224,1,0,0,0,226,227,1,0,0,0,227,17,1,0,0,0,228,230,5,75,0,0,229,
        231,5,73,0,0,230,229,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,
        233,5,76,0,0,233,234,3,20,10,0,234,235,5,77,0,0,235,19,1,0,0,0,236,
        246,5,66,0,0,237,238,5,66,0,0,238,239,5,2,0,0,239,246,3,26,13,0,
        240,241,5,66,0,0,241,242,5,79,0,0,242,243,3,22,11,0,243,244,5,80,
        0,0,244,246,1,0,0,0,245,236,1,0,0,0,245,237,1,0,0,0,245,240,1,0,
        0,0,246,21,1,0,0,0,247,252,3,24,12,0,248,249,5,78,0,0,249,251,3,
        24,12,0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,
        1,0,0,0,253,23,1,0,0,0,254,252,1,0,0,0,255,258,5,66,0,0,256,257,
        5,2,0,0,257,259,3,26,13,0,258,256,1,0,0,0,258,259,1,0,0,0,259,25,
        1,0,0,0,260,261,7,1,0,0,261,27,1,0,0,0,262,264,3,14,7,0,263,262,
        1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,5,12,0,0,266,267,
        5,66,0,0,267,271,5,5,0,0,268,270,3,30,15,0,269,268,1,0,0,0,270,273,
        1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,271,
        1,0,0,0,274,275,5,6,0,0,275,29,1,0,0,0,276,278,3,14,7,0,277,276,
        1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,280,5,66,0,0,280,281,
        5,82,0,0,281,283,3,52,26,0,282,284,5,78,0,0,283,282,1,0,0,0,283,
        284,1,0,0,0,284,31,1,0,0,0,285,287,3,14,7,0,286,285,1,0,0,0,286,
        287,1,0,0,0,287,289,1,0,0,0,288,290,3,34,17,0,289,288,1,0,0,0,289,
        290,1,0,0,0,290,292,1,0,0,0,291,293,3,36,18,0,292,291,1,0,0,0,292,
        293,1,0,0,0,293,294,1,0,0,0,294,295,5,9,0,0,295,302,5,66,0,0,296,
        303,5,13,0,0,297,299,5,79,0,0,298,300,3,38,19,0,299,298,1,0,0,0,
        299,300,1,0,0,0,300,301,1,0,0,0,301,303,5,80,0,0,302,296,1,0,0,0,
        302,297,1,0,0,0,303,305,1,0,0,0,304,306,5,10,0,0,305,304,1,0,0,0,
        305,306,1,0,0,0,306,308,1,0,0,0,307,309,3,52,26,0,308,307,1,0,0,
        0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,3,60,30,0,311,33,1,0,0,
        0,312,313,5,14,0,0,313,35,1,0,0,0,314,316,5,4,0,0,315,317,5,65,0,
        0,316,315,1,0,0,0,316,317,1,0,0,0,317,37,1,0,0,0,318,323,3,40,20,
        0,319,320,5,78,0,0,320,322,3,40,20,0,321,319,1,0,0,0,322,325,1,0,
        0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,327,1,0,0,0,325,323,1,0,
        0,0,326,328,5,78,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,39,1,0,
        0,0,329,331,5,8,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,
        0,0,332,333,5,66,0,0,333,334,5,82,0,0,334,335,3,52,26,0,335,41,1,
        0,0,0,336,338,3,14,7,0,337,336,1,0,0,0,337,338,1,0,0,0,338,339,1,
        0,0,0,339,340,5,15,0,0,340,341,5,66,0,0,341,342,5,82,0,0,342,343,
        3,52,26,0,343,344,5,2,0,0,344,345,3,90,45,0,345,346,5,3,0,0,346,
        43,1,0,0,0,347,349,3,14,7,0,348,347,1,0,0,0,348,349,1,0,0,0,349,
        350,1,0,0,0,350,351,5,16,0,0,351,366,5,66,0,0,352,353,5,82,0,0,353,
        354,3,52,26,0,354,355,5,2,0,0,355,356,3,90,45,0,356,357,5,3,0,0,
        357,367,1,0,0,0,358,362,5,5,0,0,359,361,3,46,23,0,360,359,1,0,0,
        0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,365,1,0,0,
        0,364,362,1,0,0,0,365,367,5,6,0,0,366,352,1,0,0,0,366,358,1,0,0,
        0,367,45,1,0,0,0,368,370,3,14,7,0,369,368,1,0,0,0,369,370,1,0,0,
        0,370,371,1,0,0,0,371,372,5,66,0,0,372,373,5,82,0,0,373,375,3,52,
        26,0,374,376,5,78,0,0,375,374,1,0,0,0,375,376,1,0,0,0,376,47,1,0,
        0,0,377,379,3,14,7,0,378,377,1,0,0,0,378,379,1,0,0,0,379,380,1,0,
        0,0,380,381,5,14,0,0,381,382,5,66,0,0,382,383,5,82,0,0,383,384,3,
        52,26,0,384,385,5,2,0,0,385,386,3,90,45,0,386,387,5,3,0,0,387,49,
        1,0,0,0,388,389,5,17,0,0,389,390,3,52,26,0,390,51,1,0,0,0,391,394,
        3,58,29,0,392,394,3,56,28,0,393,391,1,0,0,0,393,392,1,0,0,0,394,
        53,1,0,0,0,395,396,5,66,0,0,396,409,5,72,0,0,397,399,5,72,0,0,398,
        397,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,405,5,66,0,0,401,
        402,5,72,0,0,402,404,5,66,0,0,403,401,1,0,0,0,404,407,1,0,0,0,405,
        403,1,0,0,0,405,406,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,408,
        395,1,0,0,0,408,398,1,0,0,0,409,55,1,0,0,0,410,411,5,18,0,0,411,
        413,7,2,0,0,412,414,3,52,26,0,413,412,1,0,0,0,413,414,1,0,0,0,414,
        57,1,0,0,0,415,466,5,19,0,0,416,466,5,20,0,0,417,466,5,21,0,0,418,
        466,5,22,0,0,419,466,5,13,0,0,420,432,3,54,27,0,421,422,5,23,0,0,
        422,427,3,52,26,0,423,424,5,78,0,0,424,426,3,52,26,0,425,423,1,0,
        0,0,426,429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,
        0,0,429,427,1,0,0,0,430,431,5,74,0,0,431,433,1,0,0,0,432,421,1,0,
        0,0,432,433,1,0,0,0,433,466,1,0,0,0,434,446,5,66,0,0,435,436,5,23,
        0,0,436,441,3,52,26,0,437,438,5,78,0,0,438,440,3,52,26,0,439,437,
        1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,444,
        1,0,0,0,443,441,1,0,0,0,444,445,5,74,0,0,445,447,1,0,0,0,446,435,
        1,0,0,0,446,447,1,0,0,0,447,466,1,0,0,0,448,449,5,17,0,0,449,466,
        3,52,26,0,450,452,3,54,27,0,451,450,1,0,0,0,451,452,1,0,0,0,452,
        453,1,0,0,0,453,454,5,76,0,0,454,455,3,52,26,0,455,456,5,3,0,0,456,
        457,5,67,0,0,457,458,5,77,0,0,458,466,1,0,0,0,459,466,3,54,27,0,
        460,461,5,76,0,0,461,462,3,52,26,0,462,463,5,77,0,0,463,466,1,0,
        0,0,464,466,5,66,0,0,465,415,1,0,0,0,465,416,1,0,0,0,465,417,1,0,
        0,0,465,418,1,0,0,0,465,419,1,0,0,0,465,420,1,0,0,0,465,434,1,0,
        0,0,465,448,1,0,0,0,465,451,1,0,0,0,465,459,1,0,0,0,465,460,1,0,
        0,0,465,464,1,0,0,0,466,59,1,0,0,0,467,471,5,5,0,0,468,470,3,62,
        31,0,469,468,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,
        0,0,472,475,1,0,0,0,473,471,1,0,0,0,474,476,3,86,43,0,475,474,1,
        0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,478,5,6,0,0,478,61,1,0,
        0,0,479,512,3,74,37,0,480,512,3,70,35,0,481,512,3,78,39,0,482,483,
        5,66,0,0,483,512,5,3,0,0,484,485,3,90,45,0,485,486,7,3,0,0,486,487,
        3,90,45,0,487,488,5,3,0,0,488,512,1,0,0,0,489,512,3,80,40,0,490,
        512,3,82,41,0,491,512,3,84,42,0,492,512,3,68,34,0,493,512,3,86,43,
        0,494,512,3,88,44,0,495,496,5,32,0,0,496,512,5,3,0,0,497,498,5,33,
        0,0,498,512,5,3,0,0,499,512,3,64,32,0,500,505,3,100,50,0,501,502,
        5,34,0,0,502,504,3,100,50,0,503,501,1,0,0,0,504,507,1,0,0,0,505,
        503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,
        509,5,3,0,0,509,512,1,0,0,0,510,512,3,66,33,0,511,479,1,0,0,0,511,
        480,1,0,0,0,511,481,1,0,0,0,511,482,1,0,0,0,511,484,1,0,0,0,511,
        489,1,0,0,0,511,490,1,0,0,0,511,491,1,0,0,0,511,492,1,0,0,0,511,
        493,1,0,0,0,511,494,1,0,0,0,511,495,1,0,0,0,511,497,1,0,0,0,511,
        499,1,0,0,0,511,500,1,0,0,0,511,510,1,0,0,0,512,63,1,0,0,0,513,514,
        5,35,0,0,514,515,3,90,45,0,515,517,5,5,0,0,516,518,3,106,53,0,517,
        516,1,0,0,0,518,519,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,
        521,1,0,0,0,521,522,5,6,0,0,522,65,1,0,0,0,523,524,5,14,0,0,524,
        525,3,60,30,0,525,67,1,0,0,0,526,527,5,36,0,0,527,528,3,90,45,0,
        528,529,3,60,30,0,529,69,1,0,0,0,530,532,3,14,7,0,531,530,1,0,0,
        0,531,532,1,0,0,0,532,533,1,0,0,0,533,535,5,7,0,0,534,536,5,8,0,
        0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,538,5,66,0,
        0,538,541,5,82,0,0,539,542,3,52,26,0,540,542,5,66,0,0,541,539,1,
        0,0,0,541,540,1,0,0,0,542,543,1,0,0,0,543,544,5,2,0,0,544,545,3,
        72,36,0,545,546,5,3,0,0,546,71,1,0,0,0,547,550,3,90,45,0,548,550,
        3,60,30,0,549,547,1,0,0,0,549,548,1,0,0,0,550,73,1,0,0,0,551,552,
        5,37,0,0,552,553,3,76,38,0,553,554,5,2,0,0,554,555,3,90,45,0,555,
        556,5,3,0,0,556,75,1,0,0,0,557,559,5,38,0,0,558,560,5,8,0,0,559,
        558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,564,5,66,0,0,562,
        563,5,82,0,0,563,565,3,52,26,0,564,562,1,0,0,0,564,565,1,0,0,0,565,
        578,1,0,0,0,566,567,5,8,0,0,567,570,5,66,0,0,568,569,5,82,0,0,569,
        571,3,52,26,0,570,568,1,0,0,0,570,571,1,0,0,0,571,578,1,0,0,0,572,
        575,5,66,0,0,573,574,5,82,0,0,574,576,3,52,26,0,575,573,1,0,0,0,
        575,576,1,0,0,0,576,578,1,0,0,0,577,557,1,0,0,0,577,566,1,0,0,0,
        577,572,1,0,0,0,578,77,1,0,0,0,579,580,3,90,45,0,580,581,5,2,0,0,
        581,582,3,90,45,0,582,583,5,3,0,0,583,79,1,0,0,0,584,585,5,39,0,
        0,585,586,5,66,0,0,586,587,5,40,0,0,587,588,3,90,45,0,588,589,3,
        60,30,0,589,81,1,0,0,0,590,591,5,41,0,0,591,592,3,90,45,0,592,595,
        3,60,30,0,593,594,5,42,0,0,594,596,3,60,30,0,595,593,1,0,0,0,595,
        596,1,0,0,0,596,83,1,0,0,0,597,598,3,90,45,0,598,599,5,3,0,0,599,
        85,1,0,0,0,600,602,5,43,0,0,601,603,3,90,45,0,602,601,1,0,0,0,602,
        603,1,0,0,0,603,604,1,0,0,0,604,607,5,3,0,0,605,607,5,66,0,0,606,
        600,1,0,0,0,606,605,1,0,0,0,607,87,1,0,0,0,608,609,5,44,0,0,609,
        610,3,60,30,0,610,89,1,0,0,0,611,612,6,45,-1,0,612,656,3,96,48,0,
        613,656,3,118,59,0,614,656,3,98,49,0,615,616,5,18,0,0,616,656,3,
        90,45,16,617,656,3,112,56,0,618,656,3,94,47,0,619,620,3,54,27,0,
        620,621,5,72,0,0,621,622,5,23,0,0,622,623,3,52,26,0,623,624,5,45,
        0,0,624,656,1,0,0,0,625,626,5,73,0,0,626,656,3,90,45,11,627,628,
        5,66,0,0,628,629,5,73,0,0,629,631,5,79,0,0,630,632,3,110,55,0,631,
        630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,656,5,80,0,0,634,
        656,3,92,46,0,635,636,5,17,0,0,636,637,5,8,0,0,637,656,3,90,45,3,
        638,639,5,79,0,0,639,640,3,90,45,0,640,641,5,80,0,0,641,656,1,0,
        0,0,642,643,5,72,0,0,643,645,5,66,0,0,644,642,1,0,0,0,645,646,1,
        0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,653,1,0,0,0,648,654,5,
        13,0,0,649,650,5,79,0,0,650,651,3,110,55,0,651,652,5,80,0,0,652,
        654,1,0,0,0,653,648,1,0,0,0,653,649,1,0,0,0,654,656,1,0,0,0,655,
        611,1,0,0,0,655,613,1,0,0,0,655,614,1,0,0,0,655,615,1,0,0,0,655,
        617,1,0,0,0,655,618,1,0,0,0,655,619,1,0,0,0,655,625,1,0,0,0,655,
        627,1,0,0,0,655,634,1,0,0,0,655,635,1,0,0,0,655,638,1,0,0,0,655,
        644,1,0,0,0,656,686,1,0,0,0,657,658,10,10,0,0,658,659,7,4,0,0,659,
        685,3,90,45,11,660,661,10,9,0,0,661,662,7,5,0,0,662,685,3,90,45,
        10,663,664,10,8,0,0,664,665,5,57,0,0,665,685,3,90,45,9,666,667,10,
        7,0,0,667,668,7,3,0,0,668,685,3,90,45,8,669,670,10,12,0,0,670,671,
        5,76,0,0,671,672,3,90,45,0,672,673,5,77,0,0,673,685,1,0,0,0,674,
        675,10,5,0,0,675,676,5,58,0,0,676,681,3,52,26,0,677,678,5,58,0,0,
        678,680,3,52,26,0,679,677,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,
        0,681,682,1,0,0,0,682,685,1,0,0,0,683,681,1,0,0,0,684,657,1,0,0,
        0,684,660,1,0,0,0,684,663,1,0,0,0,684,666,1,0,0,0,684,669,1,0,0,
        0,684,674,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,
        0,687,91,1,0,0,0,688,686,1,0,0,0,689,693,5,5,0,0,690,692,3,62,31,
        0,691,690,1,0,0,0,692,695,1,0,0,0,693,691,1,0,0,0,693,694,1,0,0,
        0,694,696,1,0,0,0,695,693,1,0,0,0,696,697,3,90,45,0,697,698,5,6,
        0,0,698,93,1,0,0,0,699,700,5,17,0,0,700,701,3,90,45,0,701,95,1,0,
        0,0,702,731,3,98,49,0,703,710,5,13,0,0,704,706,5,79,0,0,705,707,
        3,110,55,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,710,
        5,80,0,0,709,703,1,0,0,0,709,704,1,0,0,0,710,732,1,0,0,0,711,712,
        5,34,0,0,712,714,5,66,0,0,713,711,1,0,0,0,714,715,1,0,0,0,715,713,
        1,0,0,0,715,716,1,0,0,0,716,732,1,0,0,0,717,718,5,34,0,0,718,725,
        5,66,0,0,719,721,5,79,0,0,720,722,3,110,55,0,721,720,1,0,0,0,721,
        722,1,0,0,0,722,723,1,0,0,0,723,726,5,80,0,0,724,726,5,13,0,0,725,
        719,1,0,0,0,725,724,1,0,0,0,726,732,1,0,0,0,727,728,5,76,0,0,728,
        729,3,90,45,0,729,730,5,77,0,0,730,732,1,0,0,0,731,709,1,0,0,0,731,
        713,1,0,0,0,731,717,1,0,0,0,731,727,1,0,0,0,732,733,1,0,0,0,733,
        731,1,0,0,0,733,734,1,0,0,0,734,97,1,0,0,0,735,764,3,118,59,0,736,
        764,5,66,0,0,737,764,3,100,50,0,738,739,5,66,0,0,739,741,5,79,0,
        0,740,742,3,110,55,0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,
        0,0,743,764,5,80,0,0,744,745,5,79,0,0,745,746,3,90,45,0,746,747,
        5,80,0,0,747,764,1,0,0,0,748,749,5,66,0,0,749,750,5,5,0,0,750,755,
        3,104,52,0,751,752,5,78,0,0,752,754,3,104,52,0,753,751,1,0,0,0,754,
        757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,759,1,0,0,0,757,
        755,1,0,0,0,758,760,5,78,0,0,759,758,1,0,0,0,759,760,1,0,0,0,760,
        761,1,0,0,0,761,762,5,6,0,0,762,764,1,0,0,0,763,735,1,0,0,0,763,
        736,1,0,0,0,763,737,1,0,0,0,763,738,1,0,0,0,763,744,1,0,0,0,763,
        748,1,0,0,0,764,99,1,0,0,0,765,766,5,72,0,0,766,767,3,54,27,0,767,
        769,5,66,0,0,768,770,3,102,51,0,769,768,1,0,0,0,769,770,1,0,0,0,
        770,777,1,0,0,0,771,778,5,13,0,0,772,774,5,79,0,0,773,775,3,110,
        55,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,778,5,80,
        0,0,777,771,1,0,0,0,777,772,1,0,0,0,778,810,1,0,0,0,779,784,5,66,
        0,0,780,781,5,34,0,0,781,783,5,66,0,0,782,780,1,0,0,0,783,786,1,
        0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,791,1,0,0,0,786,784,1,
        0,0,0,787,788,5,72,0,0,788,790,5,66,0,0,789,787,1,0,0,0,790,793,
        1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,807,1,0,0,0,793,791,
        1,0,0,0,794,808,5,13,0,0,795,803,5,79,0,0,796,797,5,66,0,0,797,798,
        5,79,0,0,798,799,5,65,0,0,799,802,5,80,0,0,800,802,3,110,55,0,801,
        796,1,0,0,0,801,800,1,0,0,0,802,805,1,0,0,0,803,801,1,0,0,0,803,
        804,1,0,0,0,804,806,1,0,0,0,805,803,1,0,0,0,806,808,5,80,0,0,807,
        794,1,0,0,0,807,795,1,0,0,0,808,810,1,0,0,0,809,765,1,0,0,0,809,
        779,1,0,0,0,810,101,1,0,0,0,811,812,5,23,0,0,812,817,3,52,26,0,813,
        814,5,78,0,0,814,816,3,52,26,0,815,813,1,0,0,0,816,819,1,0,0,0,817,
        815,1,0,0,0,817,818,1,0,0,0,818,820,1,0,0,0,819,817,1,0,0,0,820,
        821,5,74,0,0,821,103,1,0,0,0,822,823,5,66,0,0,823,824,5,82,0,0,824,
        825,3,90,45,0,825,105,1,0,0,0,826,831,3,108,54,0,827,828,5,59,0,
        0,828,830,3,108,54,0,829,827,1,0,0,0,830,833,1,0,0,0,831,829,1,0,
        0,0,831,832,1,0,0,0,832,834,1,0,0,0,833,831,1,0,0,0,834,835,5,60,
        0,0,835,836,3,60,30,0,836,107,1,0,0,0,837,838,7,6,0,0,838,109,1,
        0,0,0,839,842,3,100,50,0,840,842,3,90,45,0,841,839,1,0,0,0,841,840,
        1,0,0,0,842,850,1,0,0,0,843,846,5,78,0,0,844,847,3,100,50,0,845,
        847,3,90,45,0,846,844,1,0,0,0,846,845,1,0,0,0,847,849,1,0,0,0,848,
        843,1,0,0,0,849,852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,
        854,1,0,0,0,852,850,1,0,0,0,853,855,5,78,0,0,854,853,1,0,0,0,854,
        855,1,0,0,0,855,870,1,0,0,0,856,857,5,72,0,0,857,859,5,66,0,0,858,
        856,1,0,0,0,859,860,1,0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,
        867,1,0,0,0,862,868,5,13,0,0,863,864,5,79,0,0,864,865,3,110,55,0,
        865,866,5,80,0,0,866,868,1,0,0,0,867,862,1,0,0,0,867,863,1,0,0,0,
        868,870,1,0,0,0,869,841,1,0,0,0,869,858,1,0,0,0,870,111,1,0,0,0,
        871,872,5,66,0,0,872,873,5,73,0,0,873,874,3,114,57,0,874,113,1,0,
        0,0,875,877,5,76,0,0,876,878,3,116,58,0,877,876,1,0,0,0,877,878,
        1,0,0,0,878,879,1,0,0,0,879,886,5,77,0,0,880,882,5,79,0,0,881,883,
        3,116,58,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,886,
        5,80,0,0,885,875,1,0,0,0,885,880,1,0,0,0,886,115,1,0,0,0,887,890,
        3,90,45,0,888,889,5,3,0,0,889,891,3,90,45,0,890,888,1,0,0,0,890,
        891,1,0,0,0,891,117,1,0,0,0,892,902,3,122,61,0,893,902,5,70,0,0,
        894,902,5,67,0,0,895,902,5,68,0,0,896,902,5,69,0,0,897,902,5,64,
        0,0,898,902,5,65,0,0,899,902,3,120,60,0,900,902,5,71,0,0,901,892,
        1,0,0,0,901,893,1,0,0,0,901,894,1,0,0,0,901,895,1,0,0,0,901,896,
        1,0,0,0,901,897,1,0,0,0,901,898,1,0,0,0,901,899,1,0,0,0,901,900,
        1,0,0,0,902,119,1,0,0,0,903,904,7,7,0,0,904,121,1,0,0,0,905,906,
        5,76,0,0,906,911,3,90,45,0,907,908,5,78,0,0,908,910,3,90,45,0,909,
        907,1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,
        914,1,0,0,0,913,911,1,0,0,0,914,915,5,77,0,0,915,923,1,0,0,0,916,
        917,5,76,0,0,917,918,3,90,45,0,918,919,5,3,0,0,919,920,3,90,45,0,
        920,921,5,77,0,0,921,923,1,0,0,0,922,905,1,0,0,0,922,916,1,0,0,0,
        923,123,1,0,0,0,924,928,5,61,0,0,925,927,9,0,0,0,926,925,1,0,0,0,
        927,930,1,0,0,0,928,929,1,0,0,0,928,926,1,0,0,0,929,931,1,0,0,0,
        930,928,1,0,0,0,931,932,5,61,0,0,932,125,1,0,0,0,116,129,141,144,
        158,164,170,174,182,188,193,196,203,208,211,214,219,226,230,245,
        252,258,263,271,277,283,286,289,292,299,302,305,308,316,323,327,
        330,337,348,362,366,369,375,378,393,398,405,408,413,427,432,441,
        446,451,465,471,475,505,511,519,531,535,541,549,559,564,570,575,
        577,595,602,606,631,646,653,655,681,684,686,693,706,709,715,721,
        725,731,733,741,755,759,763,769,774,777,784,791,801,803,807,809,
        817,831,841,846,850,854,860,867,869,877,882,885,890,901,911,922,
        928
    ]

class RustParser ( Parser ):

    grammarFileName = "Rust.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'type'", "'='", "';'", "'extern'", "'{'", 
                     "'}'", "'static'", "'mut'", "'fn'", "'->'", "'pub'", 
                     "'struct'", "'()'", "'unsafe'", "'const'", "'union'", 
                     "'&'", "'*'", "'i32'", "'String'", "'bool'", "'u8'", 
                     "'<'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
                     "'|='", "'^='", "'break'", "'continue'", "'.'", "'match'", 
                     "'while'", "'let'", "'ref'", "'for'", "'in'", "'if'", 
                     "'else'", "'return'", "'loop'", "'>()'", "'/'", "'%'", 
                     "'+'", "'-'", "'>>'", "'>='", "'<='", "'=='", "'!='", 
                     "'||'", "'&&'", "'..'", "'as'", "'|'", "'=>'", "'\"'", 
                     "'true'", "'false'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'::'", "'!'", "'>'", "'#'", "'['", "']'", 
                     "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "TRUE", "FALSE", "Binary", 
                      "STRING_LITERAL", "Identifier", "Number", "SignedNumber", 
                      "BYTE_STRING_LITERAL", "HexNumber", "CHAR_LITERAL", 
                      "DOUBLE_COLON", "EXCL", "GT", "POUND", "LBRACK", "RBRACK", 
                      "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", "COLON", 
                      "ELLIPSIS", "WS", "COMMENT" ]

    RULE_program = 0
    RULE_topLevelItem = 1
    RULE_typeAlias = 2
    RULE_externBlock = 3
    RULE_externItem = 4
    RULE_externParams = 5
    RULE_externParam = 6
    RULE_visibility = 7
    RULE_attributes = 8
    RULE_innerAttribute = 9
    RULE_attribute = 10
    RULE_attrArgs = 11
    RULE_attrArg = 12
    RULE_attrValue = 13
    RULE_structDef = 14
    RULE_structField = 15
    RULE_functionDef = 16
    RULE_unsafeModifier = 17
    RULE_externAbi = 18
    RULE_paramList = 19
    RULE_param = 20
    RULE_constDef = 21
    RULE_unionDef = 22
    RULE_unionField = 23
    RULE_unsafeDef = 24
    RULE_referenceType = 25
    RULE_type = 26
    RULE_typePath = 27
    RULE_pointerType = 28
    RULE_basicType = 29
    RULE_block = 30
    RULE_statement = 31
    RULE_matchStmt = 32
    RULE_unsafeBlock = 33
    RULE_whileStmt = 34
    RULE_staticVarDecl = 35
    RULE_initializer = 36
    RULE_letStmt = 37
    RULE_varDef = 38
    RULE_assignStmt = 39
    RULE_forStmt = 40
    RULE_ifStmt = 41
    RULE_exprStmt = 42
    RULE_returnStmt = 43
    RULE_loopStmt = 44
    RULE_expression = 45
    RULE_expressionBlock = 46
    RULE_borrowExpression = 47
    RULE_postfixExpression = 48
    RULE_primaryExpression = 49
    RULE_qualifiedFunctionCall = 50
    RULE_genericArgs = 51
    RULE_structLiteralField = 52
    RULE_matchArm = 53
    RULE_matchPattern = 54
    RULE_argumentList = 55
    RULE_macroCall = 56
    RULE_macroArgs = 57
    RULE_macroInner = 58
    RULE_literal = 59
    RULE_booleanLiteral = 60
    RULE_arrayLiteral = 61
    RULE_stringLiteral = 62

    ruleNames =  [ "program", "topLevelItem", "typeAlias", "externBlock", 
                   "externItem", "externParams", "externParam", "visibility", 
                   "attributes", "innerAttribute", "attribute", "attrArgs", 
                   "attrArg", "attrValue", "structDef", "structField", "functionDef", 
                   "unsafeModifier", "externAbi", "paramList", "param", 
                   "constDef", "unionDef", "unionField", "unsafeDef", "referenceType", 
                   "type", "typePath", "pointerType", "basicType", "block", 
                   "statement", "matchStmt", "unsafeBlock", "whileStmt", 
                   "staticVarDecl", "initializer", "letStmt", "varDef", 
                   "assignStmt", "forStmt", "ifStmt", "exprStmt", "returnStmt", 
                   "loopStmt", "expression", "expressionBlock", "borrowExpression", 
                   "postfixExpression", "primaryExpression", "qualifiedFunctionCall", 
                   "genericArgs", "structLiteralField", "matchArm", "matchPattern", 
                   "argumentList", "macroCall", "macroArgs", "macroInner", 
                   "literal", "booleanLiteral", "arrayLiteral", "stringLiteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    TRUE=62
    FALSE=63
    Binary=64
    STRING_LITERAL=65
    Identifier=66
    Number=67
    SignedNumber=68
    BYTE_STRING_LITERAL=69
    HexNumber=70
    CHAR_LITERAL=71
    DOUBLE_COLON=72
    EXCL=73
    GT=74
    POUND=75
    LBRACK=76
    RBRACK=77
    COMMA=78
    LPAREN=79
    RPAREN=80
    UNDERSCORE=81
    COLON=82
    ELLIPSIS=83
    WS=84
    COMMENT=85

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topLevelItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TopLevelItemContext)
            else:
                return self.getTypedRuleContext(RustParser.TopLevelItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = RustParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 121490) != 0) or _la==75:
                self.state = 126
                self.topLevelItem()
                self.state = 131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDef(self):
            return self.getTypedRuleContext(RustParser.FunctionDefContext,0)


        def structDef(self):
            return self.getTypedRuleContext(RustParser.StructDefContext,0)


        def attributes(self):
            return self.getTypedRuleContext(RustParser.AttributesContext,0)


        def externBlock(self):
            return self.getTypedRuleContext(RustParser.ExternBlockContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(RustParser.TypeAliasContext,0)


        def constDef(self):
            return self.getTypedRuleContext(RustParser.ConstDefContext,0)


        def unionDef(self):
            return self.getTypedRuleContext(RustParser.UnionDefContext,0)


        def unsafeDef(self):
            return self.getTypedRuleContext(RustParser.UnsafeDefContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_topLevelItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelItem" ):
                listener.enterTopLevelItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelItem" ):
                listener.exitTopLevelItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelItem" ):
                return visitor.visitTopLevelItem(self)
            else:
                return visitor.visitChildren(self)




    def topLevelItem(self):

        localctx = RustParser.TopLevelItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_topLevelItem)
        try:
            self.state = 141
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 132
                self.functionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 133
                self.structDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 134
                self.attributes()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 135
                self.externBlock()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 136
                self.typeAlias()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 137
                self.constDef()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 138
                self.unionDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 139
                self.unsafeDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 140
                self.staticVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = RustParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 143
                self.visibility()


            self.state = 146
            self.match(RustParser.T__0)
            self.state = 147
            self.match(RustParser.Identifier)
            self.state = 148
            self.match(RustParser.T__1)
            self.state = 149
            self.type_()
            self.state = 150
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def externItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternItemContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternItemContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_externBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternBlock" ):
                listener.enterExternBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternBlock" ):
                listener.exitExternBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternBlock" ):
                return visitor.visitExternBlock(self)
            else:
                return visitor.visitChildren(self)




    def externBlock(self):

        localctx = RustParser.ExternBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_externBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.match(RustParser.T__3)
            self.state = 153
            self.match(RustParser.STRING_LITERAL)
            self.state = 154
            self.match(RustParser.T__4)
            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2690) != 0):
                self.state = 155
                self.externItem()
                self.state = 160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 161
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def externParams(self):
            return self.getTypedRuleContext(RustParser.ExternParamsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_externItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternItem" ):
                listener.enterExternItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternItem" ):
                listener.exitExternItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternItem" ):
                return visitor.visitExternItem(self)
            else:
                return visitor.visitChildren(self)




    def externItem(self):

        localctx = RustParser.ExternItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_externItem)
        self._la = 0 # Token type
        try:
            self.state = 196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 163
                    self.visibility()


                self.state = 166
                self.match(RustParser.T__0)
                self.state = 167
                self.match(RustParser.Identifier)
                self.state = 168
                self.match(RustParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 169
                    self.visibility()


                self.state = 172
                self.match(RustParser.T__6)
                self.state = 174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 173
                    self.match(RustParser.T__7)


                self.state = 176
                self.match(RustParser.Identifier)
                self.state = 177
                self.match(RustParser.COLON)
                self.state = 178
                self.type_()
                self.state = 179
                self.match(RustParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 181
                    self.visibility()


                self.state = 184
                self.match(RustParser.T__8)
                self.state = 185
                self.match(RustParser.Identifier)
                self.state = 186
                self.match(RustParser.LPAREN)
                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 229377) != 0):
                    self.state = 187
                    self.externParams()


                self.state = 190
                self.match(RustParser.RPAREN)
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 191
                    self.match(RustParser.T__9)
                    self.state = 192
                    self.type_()


                self.state = 195
                self.match(RustParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExternParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ExternParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParams" ):
                listener.enterExternParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParams" ):
                listener.exitExternParams(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParams" ):
                return visitor.visitExternParams(self)
            else:
                return visitor.visitChildren(self)




    def externParams(self):

        localctx = RustParser.ExternParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_externParams)
        self._la = 0 # Token type
        try:
            self.state = 211
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 81, 82]:
                self.enterOuterAlt(localctx, 1)
                self.state = 198
                self.externParam()
                self.state = 203
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 199
                        self.match(RustParser.COMMA)
                        self.state = 200
                        self.externParam() 
                    self.state = 205
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 206
                    self.match(RustParser.COMMA)
                    self.state = 207
                    self.match(RustParser.ELLIPSIS)


                pass
            elif token in [83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 210
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(RustParser.ELLIPSIS, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternParam" ):
                listener.enterExternParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternParam" ):
                listener.exitExternParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternParam" ):
                return visitor.visitExternParam(self)
            else:
                return visitor.visitChildren(self)




    def externParam(self):

        localctx = RustParser.ExternParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_externParam)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66 or _la==81:
                self.state = 213
                _la = self._input.LA(1)
                if not(_la==66 or _la==81):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 216
            self.match(RustParser.COLON)
            self.state = 219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 18, 19, 20, 21, 22, 66, 72, 76]:
                self.state = 217
                self.type_()
                pass
            elif token in [83]:
                self.state = 218
                self.match(RustParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibility" ):
                return visitor.visitVisibility(self)
            else:
                return visitor.visitChildren(self)




    def visibility(self):

        localctx = RustParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_visibility)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.match(RustParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.InnerAttributeContext)
            else:
                return self.getTypedRuleContext(RustParser.InnerAttributeContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributes" ):
                return visitor.visitAttributes(self)
            else:
                return visitor.visitChildren(self)




    def attributes(self):

        localctx = RustParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attributes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 223
                    self.innerAttribute()

                else:
                    raise NoViableAltException(self)
                self.state = 226 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POUND(self):
            return self.getToken(RustParser.POUND, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def attribute(self):
            return self.getTypedRuleContext(RustParser.AttributeContext,0)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_innerAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerAttribute" ):
                listener.enterInnerAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerAttribute" ):
                listener.exitInnerAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerAttribute" ):
                return visitor.visitInnerAttribute(self)
            else:
                return visitor.visitChildren(self)




    def innerAttribute(self):

        localctx = RustParser.InnerAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_innerAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(RustParser.POUND)

            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 229
                self.match(RustParser.EXCL)


            self.state = 232
            self.match(RustParser.LBRACK)
            self.state = 233
            self.attribute()
            self.state = 234
            self.match(RustParser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def attrArgs(self):
            return self.getTypedRuleContext(RustParser.AttrArgsContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = RustParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_attribute)
        try:
            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 236
                self.match(RustParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 237
                self.match(RustParser.Identifier)
                self.state = 238
                self.match(RustParser.T__1)
                self.state = 239
                self.attrValue()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 240
                self.match(RustParser.Identifier)
                self.state = 241
                self.match(RustParser.LPAREN)
                self.state = 242
                self.attrArgs()
                self.state = 243
                self.match(RustParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.AttrArgContext)
            else:
                return self.getTypedRuleContext(RustParser.AttrArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_attrArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArgs" ):
                listener.enterAttrArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArgs" ):
                listener.exitAttrArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArgs" ):
                return visitor.visitAttrArgs(self)
            else:
                return visitor.visitChildren(self)




    def attrArgs(self):

        localctx = RustParser.AttrArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_attrArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.attrArg()
            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 248
                self.match(RustParser.COMMA)
                self.state = 249
                self.attrArg()
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def attrValue(self):
            return self.getTypedRuleContext(RustParser.AttrValueContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_attrArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrArg" ):
                listener.enterAttrArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrArg" ):
                listener.exitAttrArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrArg" ):
                return visitor.visitAttrArg(self)
            else:
                return visitor.visitChildren(self)




    def attrArg(self):

        localctx = RustParser.AttrArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_attrArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(RustParser.Identifier)
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 256
                self.match(RustParser.T__1)
                self.state = 257
                self.attrValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_attrValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrValue" ):
                listener.enterAttrValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrValue" ):
                listener.exitAttrValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrValue" ):
                return visitor.visitAttrValue(self)
            else:
                return visitor.visitChildren(self)




    def attrValue(self):

        localctx = RustParser.AttrValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_attrValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def structField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_structDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDef" ):
                listener.enterStructDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDef" ):
                listener.exitStructDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDef" ):
                return visitor.visitStructDef(self)
            else:
                return visitor.visitChildren(self)




    def structDef(self):

        localctx = RustParser.StructDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_structDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 262
                self.visibility()


            self.state = 265
            self.match(RustParser.T__11)
            self.state = 266
            self.match(RustParser.Identifier)
            self.state = 267
            self.match(RustParser.T__4)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11 or _la==66:
                self.state = 268
                self.structField()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 274
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_structField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructField" ):
                listener.enterStructField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructField" ):
                listener.exitStructField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructField" ):
                return visitor.visitStructField(self)
            else:
                return visitor.visitChildren(self)




    def structField(self):

        localctx = RustParser.StructFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_structField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 276
                self.visibility()


            self.state = 279
            self.match(RustParser.Identifier)
            self.state = 280
            self.match(RustParser.COLON)
            self.state = 281
            self.type_()
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 282
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def unsafeModifier(self):
            return self.getTypedRuleContext(RustParser.UnsafeModifierContext,0)


        def externAbi(self):
            return self.getTypedRuleContext(RustParser.ExternAbiContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def paramList(self):
            return self.getTypedRuleContext(RustParser.ParamListContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_functionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDef" ):
                listener.enterFunctionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDef" ):
                listener.exitFunctionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDef" ):
                return visitor.visitFunctionDef(self)
            else:
                return visitor.visitChildren(self)




    def functionDef(self):

        localctx = RustParser.FunctionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 285
                self.visibility()


            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 288
                self.unsafeModifier()


            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 291
                self.externAbi()


            self.state = 294
            self.match(RustParser.T__8)
            self.state = 295
            self.match(RustParser.Identifier)
            self.state = 302
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 296
                self.match(RustParser.T__12)
                pass
            elif token in [79]:
                self.state = 297
                self.match(RustParser.LPAREN)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==66:
                    self.state = 298
                    self.paramList()


                self.state = 301
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 304
                self.match(RustParser.T__9)


            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 13)) & ~0x3f) == 0 and ((1 << (_la - 13)) & -8637904085296610319) != 0):
                self.state = 307
                self.type_()


            self.state = 310
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_unsafeModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeModifier" ):
                listener.enterUnsafeModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeModifier" ):
                listener.exitUnsafeModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeModifier" ):
                return visitor.visitUnsafeModifier(self)
            else:
                return visitor.visitChildren(self)




    def unsafeModifier(self):

        localctx = RustParser.UnsafeModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_unsafeModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(RustParser.T__13)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternAbiContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_externAbi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternAbi" ):
                listener.enterExternAbi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternAbi" ):
                listener.exitExternAbi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternAbi" ):
                return visitor.visitExternAbi(self)
            else:
                return visitor.visitChildren(self)




    def externAbi(self):

        localctx = RustParser.ExternAbiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_externAbi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(RustParser.T__3)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 315
                self.match(RustParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ParamContext)
            else:
                return self.getTypedRuleContext(RustParser.ParamContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = RustParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.param()
            self.state = 323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 319
                    self.match(RustParser.COMMA)
                    self.state = 320
                    self.param() 
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 326
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = RustParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 329
                self.match(RustParser.T__7)


            self.state = 332
            self.match(RustParser.Identifier)
            self.state = 333
            self.match(RustParser.COLON)
            self.state = 334
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_constDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDef" ):
                listener.enterConstDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDef" ):
                listener.exitConstDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstDef" ):
                return visitor.visitConstDef(self)
            else:
                return visitor.visitChildren(self)




    def constDef(self):

        localctx = RustParser.ConstDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 336
                self.visibility()


            self.state = 339
            self.match(RustParser.T__14)
            self.state = 340
            self.match(RustParser.Identifier)
            self.state = 341
            self.match(RustParser.COLON)
            self.state = 342
            self.type_()
            self.state = 343
            self.match(RustParser.T__1)
            self.state = 344
            self.expression(0)
            self.state = 345
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def unionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.UnionFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.UnionFieldContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_unionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionDef" ):
                listener.enterUnionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionDef" ):
                listener.exitUnionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionDef" ):
                return visitor.visitUnionDef(self)
            else:
                return visitor.visitChildren(self)




    def unionDef(self):

        localctx = RustParser.UnionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_unionDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 347
                self.visibility()


            self.state = 350
            self.match(RustParser.T__15)
            self.state = 351
            self.match(RustParser.Identifier)
            self.state = 366
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [82]:
                self.state = 352
                self.match(RustParser.COLON)
                self.state = 353
                self.type_()
                self.state = 354
                self.match(RustParser.T__1)
                self.state = 355
                self.expression(0)
                self.state = 356
                self.match(RustParser.T__2)
                pass
            elif token in [5]:
                self.state = 358
                self.match(RustParser.T__4)
                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==11 or _la==66:
                    self.state = 359
                    self.unionField()
                    self.state = 364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 365
                self.match(RustParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def COMMA(self):
            return self.getToken(RustParser.COMMA, 0)

        def getRuleIndex(self):
            return RustParser.RULE_unionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionField" ):
                listener.enterUnionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionField" ):
                listener.exitUnionField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionField" ):
                return visitor.visitUnionField(self)
            else:
                return visitor.visitChildren(self)




    def unionField(self):

        localctx = RustParser.UnionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 368
                self.visibility()


            self.state = 371
            self.match(RustParser.Identifier)
            self.state = 372
            self.match(RustParser.COLON)
            self.state = 373
            self.type_()
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 374
                self.match(RustParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeDef" ):
                listener.enterUnsafeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeDef" ):
                listener.exitUnsafeDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeDef" ):
                return visitor.visitUnsafeDef(self)
            else:
                return visitor.visitChildren(self)




    def unsafeDef(self):

        localctx = RustParser.UnsafeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_unsafeDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 377
                self.visibility()


            self.state = 380
            self.match(RustParser.T__13)
            self.state = 381
            self.match(RustParser.Identifier)
            self.state = 382
            self.match(RustParser.COLON)
            self.state = 383
            self.type_()
            self.state = 384
            self.match(RustParser.T__1)
            self.state = 385
            self.expression(0)
            self.state = 386
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceType" ):
                return visitor.visitReferenceType(self)
            else:
                return visitor.visitChildren(self)




    def referenceType(self):

        localctx = RustParser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_referenceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(RustParser.T__16)
            self.state = 389
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicType(self):
            return self.getTypedRuleContext(RustParser.BasicTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(RustParser.PointerTypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = RustParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_type)
        try:
            self.state = 393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 17, 19, 20, 21, 22, 66, 72, 76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.basicType()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 392
                self.pointerType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def getRuleIndex(self):
            return RustParser.RULE_typePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypePath" ):
                listener.enterTypePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypePath" ):
                listener.exitTypePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypePath" ):
                return visitor.visitTypePath(self)
            else:
                return visitor.visitChildren(self)




    def typePath(self):

        localctx = RustParser.TypePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_typePath)
        self._la = 0 # Token type
        try:
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 395
                self.match(RustParser.Identifier)
                self.state = 396
                self.match(RustParser.DOUBLE_COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 397
                    self.match(RustParser.DOUBLE_COLON)


                self.state = 400
                self.match(RustParser.Identifier)
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 401
                        self.match(RustParser.DOUBLE_COLON)
                        self.state = 402
                        self.match(RustParser.Identifier) 
                    self.state = 407
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerType" ):
                return visitor.visitPointerType(self)
            else:
                return visitor.visitChildren(self)




    def pointerType(self):

        localctx = RustParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(RustParser.T__17)
            self.state = 411
            _la = self._input.LA(1)
            if not(_la==8 or _la==15):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 412
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_basicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicType" ):
                listener.enterBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicType" ):
                listener.exitBasicType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicType" ):
                return visitor.visitBasicType(self)
            else:
                return visitor.visitChildren(self)




    def basicType(self):

        localctx = RustParser.BasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_basicType)
        self._la = 0 # Token type
        try:
            self.state = 465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self.match(RustParser.T__18)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 416
                self.match(RustParser.T__19)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 417
                self.match(RustParser.T__20)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 418
                self.match(RustParser.T__21)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 419
                self.match(RustParser.T__12)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 420
                self.typePath()
                self.state = 432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 421
                    self.match(RustParser.T__22)
                    self.state = 422
                    self.type_()
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==78:
                        self.state = 423
                        self.match(RustParser.COMMA)
                        self.state = 424
                        self.type_()
                        self.state = 429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 430
                    self.match(RustParser.GT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 434
                self.match(RustParser.Identifier)
                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 435
                    self.match(RustParser.T__22)
                    self.state = 436
                    self.type_()
                    self.state = 441
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==78:
                        self.state = 437
                        self.match(RustParser.COMMA)
                        self.state = 438
                        self.type_()
                        self.state = 443
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 444
                    self.match(RustParser.GT)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 448
                self.match(RustParser.T__16)
                self.state = 449
                self.type_()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66 or _la==72:
                    self.state = 450
                    self.typePath()


                self.state = 453
                self.match(RustParser.LBRACK)
                self.state = 454
                self.type_()
                self.state = 455
                self.match(RustParser.T__2)
                self.state = 456
                self.match(RustParser.Number)
                self.state = 457
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 459
                self.typePath()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 460
                self.match(RustParser.LBRACK)
                self.state = 461
                self.type_()
                self.state = 462
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 464
                self.match(RustParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = RustParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(RustParser.T__4)
            self.state = 471
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 468
                    self.statement() 
                self.state = 473
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43 or _la==66:
                self.state = 474
                self.returnStmt()


            self.state = 477
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letStmt(self):
            return self.getTypedRuleContext(RustParser.LetStmtContext,0)


        def staticVarDecl(self):
            return self.getTypedRuleContext(RustParser.StaticVarDeclContext,0)


        def assignStmt(self):
            return self.getTypedRuleContext(RustParser.AssignStmtContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def forStmt(self):
            return self.getTypedRuleContext(RustParser.ForStmtContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(RustParser.IfStmtContext,0)


        def exprStmt(self):
            return self.getTypedRuleContext(RustParser.ExprStmtContext,0)


        def whileStmt(self):
            return self.getTypedRuleContext(RustParser.WhileStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(RustParser.ReturnStmtContext,0)


        def loopStmt(self):
            return self.getTypedRuleContext(RustParser.LoopStmtContext,0)


        def matchStmt(self):
            return self.getTypedRuleContext(RustParser.MatchStmtContext,0)


        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def unsafeBlock(self):
            return self.getTypedRuleContext(RustParser.UnsafeBlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = RustParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 479
                self.letStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 480
                self.staticVarDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 481
                self.assignStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 482
                self.match(RustParser.Identifier)
                self.state = 483
                self.match(RustParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 484
                self.expression(0)
                self.state = 485
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4278190080) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 486
                self.expression(0)
                self.state = 487
                self.match(RustParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 489
                self.forStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 490
                self.ifStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 491
                self.exprStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 492
                self.whileStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 493
                self.returnStmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 494
                self.loopStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 495
                self.match(RustParser.T__31)
                self.state = 496
                self.match(RustParser.T__2)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 497
                self.match(RustParser.T__32)
                self.state = 498
                self.match(RustParser.T__2)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 499
                self.matchStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 500
                self.qualifiedFunctionCall()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 501
                    self.match(RustParser.T__33)
                    self.state = 502
                    self.qualifiedFunctionCall()
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 508
                self.match(RustParser.T__2)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 510
                self.unsafeBlock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def matchArm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchArmContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchArmContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_matchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchStmt" ):
                listener.enterMatchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchStmt" ):
                listener.exitMatchStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchStmt" ):
                return visitor.visitMatchStmt(self)
            else:
                return visitor.visitChildren(self)




    def matchStmt(self):

        localctx = RustParser.MatchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_matchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(RustParser.T__34)
            self.state = 514
            self.expression(0)
            self.state = 515
            self.match(RustParser.T__4)
            self.state = 517 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 516
                self.matchArm()
                self.state = 519 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32771) != 0)):
                    break

            self.state = 521
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsafeBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_unsafeBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsafeBlock" ):
                listener.enterUnsafeBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsafeBlock" ):
                listener.exitUnsafeBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsafeBlock" ):
                return visitor.visitUnsafeBlock(self)
            else:
                return visitor.visitChildren(self)




    def unsafeBlock(self):

        localctx = RustParser.UnsafeBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_unsafeBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(RustParser.T__13)
            self.state = 524
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_whileStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)




    def whileStmt(self):

        localctx = RustParser.WhileStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_whileStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(RustParser.T__35)
            self.state = 527
            self.expression(0)
            self.state = 528
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def initializer(self):
            return self.getTypedRuleContext(RustParser.InitializerContext,0)


        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def visibility(self):
            return self.getTypedRuleContext(RustParser.VisibilityContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_staticVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVarDecl" ):
                listener.enterStaticVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVarDecl" ):
                listener.exitStaticVarDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticVarDecl" ):
                return visitor.visitStaticVarDecl(self)
            else:
                return visitor.visitChildren(self)




    def staticVarDecl(self):

        localctx = RustParser.StaticVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_staticVarDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 530
                self.visibility()


            self.state = 533
            self.match(RustParser.T__6)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 534
                self.match(RustParser.T__7)


            self.state = 537
            self.match(RustParser.Identifier)
            self.state = 538
            self.match(RustParser.COLON)
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 539
                self.type_()
                pass

            elif la_ == 2:
                self.state = 540
                self.match(RustParser.Identifier)
                pass


            self.state = 543
            self.match(RustParser.T__1)
            self.state = 544
            self.initializer()
            self.state = 545
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = RustParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_initializer)
        try:
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 547
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 548
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varDef(self):
            return self.getTypedRuleContext(RustParser.VarDefContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_letStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetStmt" ):
                listener.enterLetStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetStmt" ):
                listener.exitLetStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetStmt" ):
                return visitor.visitLetStmt(self)
            else:
                return visitor.visitChildren(self)




    def letStmt(self):

        localctx = RustParser.LetStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_letStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(RustParser.T__36)
            self.state = 552
            self.varDef()
            self.state = 553
            self.match(RustParser.T__1)
            self.state = 554
            self.expression(0)
            self.state = 555
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(RustParser.TypeContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_varDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDef" ):
                listener.enterVarDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDef" ):
                listener.exitVarDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarDef" ):
                return visitor.visitVarDef(self)
            else:
                return visitor.visitChildren(self)




    def varDef(self):

        localctx = RustParser.VarDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_varDef)
        self._la = 0 # Token type
        try:
            self.state = 577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.match(RustParser.T__37)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 558
                    self.match(RustParser.T__7)


                self.state = 561
                self.match(RustParser.Identifier)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 562
                    self.match(RustParser.COLON)
                    self.state = 563
                    self.type_()


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 566
                self.match(RustParser.T__7)
                self.state = 567
                self.match(RustParser.Identifier)
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 568
                    self.match(RustParser.COLON)
                    self.state = 569
                    self.type_()


                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 572
                self.match(RustParser.Identifier)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 573
                    self.match(RustParser.COLON)
                    self.state = 574
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_assignStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignStmt" ):
                listener.enterAssignStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignStmt" ):
                listener.exitAssignStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignStmt" ):
                return visitor.visitAssignStmt(self)
            else:
                return visitor.visitChildren(self)




    def assignStmt(self):

        localctx = RustParser.AssignStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_assignStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.expression(0)
            self.state = 580
            self.match(RustParser.T__1)
            self.state = 581
            self.expression(0)
            self.state = 582
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)




    def forStmt(self):

        localctx = RustParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_forStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(RustParser.T__38)
            self.state = 585
            self.match(RustParser.Identifier)
            self.state = 586
            self.match(RustParser.T__39)
            self.state = 587
            self.expression(0)
            self.state = 588
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.BlockContext)
            else:
                return self.getTypedRuleContext(RustParser.BlockContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)




    def ifStmt(self):

        localctx = RustParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_ifStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(RustParser.T__40)
            self.state = 591
            self.expression(0)
            self.state = 592
            self.block()
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 593
                self.match(RustParser.T__41)
                self.state = 594
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_exprStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprStmt" ):
                listener.enterExprStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprStmt" ):
                listener.exitExprStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprStmt" ):
                return visitor.visitExprStmt(self)
            else:
                return visitor.visitChildren(self)




    def exprStmt(self):

        localctx = RustParser.ExprStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_exprStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.expression(0)
            self.state = 598
            self.match(RustParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)




    def returnStmt(self):

        localctx = RustParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_returnStmt)
        self._la = 0 # Token type
        try:
            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self.match(RustParser.T__42)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 601
                    self.expression(0)


                self.state = 604
                self.match(RustParser.T__2)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.match(RustParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_loopStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStmt" ):
                listener.enterLoopStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStmt" ):
                listener.exitLoopStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStmt" ):
                return visitor.visitLoopStmt(self)
            else:
                return visitor.visitChildren(self)




    def loopStmt(self):

        localctx = RustParser.LoopStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_loopStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(RustParser.T__43)
            self.state = 609
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(RustParser.PostfixExpressionContext,0)


        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def macroCall(self):
            return self.getTypedRuleContext(RustParser.MacroCallContext,0)


        def borrowExpression(self):
            return self.getTypedRuleContext(RustParser.BorrowExpressionContext,0)


        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expressionBlock(self):
            return self.getTypedRuleContext(RustParser.ExpressionBlockContext,0)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def getRuleIndex(self):
            return RustParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = RustParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 612
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.state = 613
                self.literal()
                pass

            elif la_ == 3:
                self.state = 614
                self.primaryExpression()
                pass

            elif la_ == 4:
                self.state = 615
                self.match(RustParser.T__17)
                self.state = 616
                self.expression(16)
                pass

            elif la_ == 5:
                self.state = 617
                self.macroCall()
                pass

            elif la_ == 6:
                self.state = 618
                self.borrowExpression()
                pass

            elif la_ == 7:
                self.state = 619
                self.typePath()
                self.state = 620
                self.match(RustParser.DOUBLE_COLON)
                self.state = 621
                self.match(RustParser.T__22)
                self.state = 622
                self.type_()
                self.state = 623
                self.match(RustParser.T__44)
                pass

            elif la_ == 8:
                self.state = 625
                self.match(RustParser.EXCL)
                self.state = 626
                self.expression(11)
                pass

            elif la_ == 9:
                self.state = 627
                self.match(RustParser.Identifier)
                self.state = 628
                self.match(RustParser.EXCL)
                self.state = 629
                self.match(RustParser.LPAREN)
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 630
                    self.argumentList()


                self.state = 633
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 10:
                self.state = 634
                self.expressionBlock()
                pass

            elif la_ == 11:
                self.state = 635
                self.match(RustParser.T__16)
                self.state = 636
                self.match(RustParser.T__7)
                self.state = 637
                self.expression(3)
                pass

            elif la_ == 12:
                self.state = 638
                self.match(RustParser.LPAREN)
                self.state = 639
                self.expression(0)
                self.state = 640
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 13:
                self.state = 644 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 642
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 643
                    self.match(RustParser.Identifier)
                    self.state = 646 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==72):
                        break

                self.state = 653
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 648
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 649
                    self.match(RustParser.LPAREN)
                    self.state = 650
                    self.argumentList()
                    self.state = 651
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 686
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 684
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                    if la_ == 1:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 657
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 658
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 8936830510956544) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 659
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 660
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 661
                        _la = self._input.LA(1)
                        if not(((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 2251815919812609) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 662
                        self.expression(10)
                        pass

                    elif la_ == 3:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 663
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 664
                        self.match(RustParser.T__56)
                        self.state = 665
                        self.expression(9)
                        pass

                    elif la_ == 4:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 666
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 667
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4278190080) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 668
                        self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 669
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 670
                        self.match(RustParser.LBRACK)
                        self.state = 671
                        self.expression(0)
                        self.state = 672
                        self.match(RustParser.RBRACK)
                        pass

                    elif la_ == 6:
                        localctx = RustParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 674
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 675
                        self.match(RustParser.T__57)
                        self.state = 676
                        self.type_()
                        self.state = 681
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 677
                                self.match(RustParser.T__57)
                                self.state = 678
                                self.type_() 
                            self.state = 683
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                        pass

             
                self.state = 688
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StatementContext)
            else:
                return self.getTypedRuleContext(RustParser.StatementContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_expressionBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionBlock" ):
                listener.enterExpressionBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionBlock" ):
                listener.exitExpressionBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionBlock" ):
                return visitor.visitExpressionBlock(self)
            else:
                return visitor.visitChildren(self)




    def expressionBlock(self):

        localctx = RustParser.ExpressionBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_expressionBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(RustParser.T__4)
            self.state = 693
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 690
                    self.statement() 
                self.state = 695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

            self.state = 696
            self.expression(0)
            self.state = 697
            self.match(RustParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BorrowExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_borrowExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBorrowExpression" ):
                listener.enterBorrowExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBorrowExpression" ):
                listener.exitBorrowExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBorrowExpression" ):
                return visitor.visitBorrowExpression(self)
            else:
                return visitor.visitChildren(self)




    def borrowExpression(self):

        localctx = RustParser.BorrowExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_borrowExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(RustParser.T__16)
            self.state = 700
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(RustParser.PrimaryExpressionContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LBRACK)
            else:
                return self.getToken(RustParser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RBRACK)
            else:
                return self.getToken(RustParser.RBRACK, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixExpression(self):

        localctx = RustParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.primaryExpression()
            self.state = 731 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 731
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                    if la_ == 1:
                        self.state = 709
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [13]:
                            self.state = 703
                            self.match(RustParser.T__12)
                            pass
                        elif token in [79]:
                            self.state = 704
                            self.match(RustParser.LPAREN)
                            self.state = 706
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                                self.state = 705
                                self.argumentList()


                            self.state = 708
                            self.match(RustParser.RPAREN)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 2:
                        self.state = 713 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 711
                                self.match(RustParser.T__33)
                                self.state = 712
                                self.match(RustParser.Identifier)

                            else:
                                raise NoViableAltException(self)
                            self.state = 715 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                        pass

                    elif la_ == 3:
                        self.state = 717
                        self.match(RustParser.T__33)
                        self.state = 718
                        self.match(RustParser.Identifier)
                        self.state = 725
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [79]:
                            self.state = 719
                            self.match(RustParser.LPAREN)
                            self.state = 721
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                                self.state = 720
                                self.argumentList()


                            self.state = 723
                            self.match(RustParser.RPAREN)
                            pass
                        elif token in [13]:
                            self.state = 724
                            self.match(RustParser.T__12)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 4:
                        self.state = 727
                        self.match(RustParser.LBRACK)
                        self.state = 728
                        self.expression(0)
                        self.state = 729
                        self.match(RustParser.RBRACK)
                        pass



                else:
                    raise NoViableAltException(self)
                self.state = 733 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(RustParser.LiteralContext,0)


        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def qualifiedFunctionCall(self):
            return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def structLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.StructLiteralFieldContext)
            else:
                return self.getTypedRuleContext(RustParser.StructLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = RustParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.match(RustParser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 737
                self.qualifiedFunctionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 738
                self.match(RustParser.Identifier)
                self.state = 739
                self.match(RustParser.LPAREN)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 740
                    self.argumentList()


                self.state = 743
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 744
                self.match(RustParser.LPAREN)
                self.state = 745
                self.expression(0)
                self.state = 746
                self.match(RustParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 748
                self.match(RustParser.Identifier)
                self.state = 749
                self.match(RustParser.T__4)
                self.state = 750
                self.structLiteralField()
                self.state = 755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 751
                        self.match(RustParser.COMMA)
                        self.state = 752
                        self.structLiteralField() 
                    self.state = 757
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 758
                    self.match(RustParser.COMMA)


                self.state = 761
                self.match(RustParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def typePath(self):
            return self.getTypedRuleContext(RustParser.TypePathContext,0)


        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.LPAREN)
            else:
                return self.getToken(RustParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.RPAREN)
            else:
                return self.getToken(RustParser.RPAREN, i)

        def genericArgs(self):
            return self.getTypedRuleContext(RustParser.GenericArgsContext,0)


        def argumentList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ArgumentListContext)
            else:
                return self.getTypedRuleContext(RustParser.ArgumentListContext,i)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.STRING_LITERAL)
            else:
                return self.getToken(RustParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return RustParser.RULE_qualifiedFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionCall" ):
                listener.enterQualifiedFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionCall" ):
                listener.exitQualifiedFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionCall" ):
                return visitor.visitQualifiedFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunctionCall(self):

        localctx = RustParser.QualifiedFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_qualifiedFunctionCall)
        self._la = 0 # Token type
        try:
            self.state = 809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.match(RustParser.DOUBLE_COLON)
                self.state = 766
                self.typePath()
                self.state = 767
                self.match(RustParser.Identifier)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 768
                    self.genericArgs()


                self.state = 777
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 771
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 772
                    self.match(RustParser.LPAREN)
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                        self.state = 773
                        self.argumentList()


                    self.state = 776
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.match(RustParser.Identifier)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 780
                    self.match(RustParser.T__33)
                    self.state = 781
                    self.match(RustParser.Identifier)
                    self.state = 786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==72:
                    self.state = 787
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 788
                    self.match(RustParser.Identifier)
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 807
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 794
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 795
                    self.match(RustParser.LPAREN)
                    self.state = 803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                        self.state = 801
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 796
                            self.match(RustParser.Identifier)
                            self.state = 797
                            self.match(RustParser.LPAREN)
                            self.state = 798
                            self.match(RustParser.STRING_LITERAL)
                            self.state = 799
                            self.match(RustParser.RPAREN)
                            pass

                        elif la_ == 2:
                            self.state = 800
                            self.argumentList()
                            pass


                        self.state = 805
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 806
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.TypeContext)
            else:
                return self.getTypedRuleContext(RustParser.TypeContext,i)


        def GT(self):
            return self.getToken(RustParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_genericArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericArgs" ):
                listener.enterGenericArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericArgs" ):
                listener.exitGenericArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericArgs" ):
                return visitor.visitGenericArgs(self)
            else:
                return visitor.visitChildren(self)




    def genericArgs(self):

        localctx = RustParser.GenericArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_genericArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(RustParser.T__22)
            self.state = 812
            self.type_()
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 813
                self.match(RustParser.COMMA)
                self.state = 814
                self.type_()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 820
            self.match(RustParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def COLON(self):
            return self.getToken(RustParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(RustParser.ExpressionContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_structLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructLiteralField" ):
                listener.enterStructLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructLiteralField" ):
                listener.exitStructLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructLiteralField" ):
                return visitor.visitStructLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def structLiteralField(self):

        localctx = RustParser.StructLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_structLiteralField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(RustParser.Identifier)
            self.state = 823
            self.match(RustParser.COLON)
            self.state = 824
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchArmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def matchPattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.MatchPatternContext)
            else:
                return self.getTypedRuleContext(RustParser.MatchPatternContext,i)


        def block(self):
            return self.getTypedRuleContext(RustParser.BlockContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_matchArm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchArm" ):
                listener.enterMatchArm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchArm" ):
                listener.exitMatchArm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchArm" ):
                return visitor.visitMatchArm(self)
            else:
                return visitor.visitChildren(self)




    def matchArm(self):

        localctx = RustParser.MatchArmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_matchArm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.matchPattern()
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59:
                self.state = 827
                self.match(RustParser.T__58)
                self.state = 828
                self.matchPattern()
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 834
            self.match(RustParser.T__59)
            self.state = 835
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def UNDERSCORE(self):
            return self.getToken(RustParser.UNDERSCORE, 0)

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def getRuleIndex(self):
            return RustParser.RULE_matchPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPattern" ):
                listener.enterMatchPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPattern" ):
                listener.exitMatchPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchPattern" ):
                return visitor.visitMatchPattern(self)
            else:
                return visitor.visitChildren(self)




    def matchPattern(self):

        localctx = RustParser.MatchPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_matchPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 32771) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.QualifiedFunctionCallContext)
            else:
                return self.getTypedRuleContext(RustParser.QualifiedFunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(RustParser.ArgumentListContext,0)


        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def DOUBLE_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.DOUBLE_COLON)
            else:
                return self.getToken(RustParser.DOUBLE_COLON, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.Identifier)
            else:
                return self.getToken(RustParser.Identifier, i)

        def getRuleIndex(self):
            return RustParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = RustParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.state = 869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 841
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 839
                    self.qualifiedFunctionCall()
                    pass

                elif la_ == 2:
                    self.state = 840
                    self.expression(0)
                    pass


                self.state = 850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 843
                        self.match(RustParser.COMMA)
                        self.state = 846
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                        if la_ == 1:
                            self.state = 844
                            self.qualifiedFunctionCall()
                            pass

                        elif la_ == 2:
                            self.state = 845
                            self.expression(0)
                            pass

                 
                    self.state = 852
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 853
                    self.match(RustParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 858 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 856
                    self.match(RustParser.DOUBLE_COLON)
                    self.state = 857
                    self.match(RustParser.Identifier)
                    self.state = 860 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==72):
                        break

                self.state = 867
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13]:
                    self.state = 862
                    self.match(RustParser.T__12)
                    pass
                elif token in [79]:
                    self.state = 863
                    self.match(RustParser.LPAREN)
                    self.state = 864
                    self.argumentList()
                    self.state = 865
                    self.match(RustParser.RPAREN)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(RustParser.Identifier, 0)

        def EXCL(self):
            return self.getToken(RustParser.EXCL, 0)

        def macroArgs(self):
            return self.getTypedRuleContext(RustParser.MacroArgsContext,0)


        def getRuleIndex(self):
            return RustParser.RULE_macroCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroCall" ):
                listener.enterMacroCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroCall" ):
                listener.exitMacroCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroCall" ):
                return visitor.visitMacroCall(self)
            else:
                return visitor.visitChildren(self)




    def macroCall(self):

        localctx = RustParser.MacroCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_macroCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(RustParser.Identifier)
            self.state = 872
            self.match(RustParser.EXCL)
            self.state = 873
            self.macroArgs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def macroInner(self):
            return self.getTypedRuleContext(RustParser.MacroInnerContext,0)


        def LPAREN(self):
            return self.getToken(RustParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(RustParser.RPAREN, 0)

        def getRuleIndex(self):
            return RustParser.RULE_macroArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroArgs" ):
                listener.enterMacroArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroArgs" ):
                listener.exitMacroArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroArgs" ):
                return visitor.visitMacroArgs(self)
            else:
                return visitor.visitChildren(self)




    def macroArgs(self):

        localctx = RustParser.MacroArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_macroArgs)
        self._la = 0 # Token type
        try:
            self.state = 885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 875
                self.match(RustParser.LBRACK)
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 876
                    self.macroInner()


                self.state = 879
                self.match(RustParser.RBRACK)
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 880
                self.match(RustParser.LPAREN)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018426994656) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 37887) != 0):
                    self.state = 881
                    self.macroInner()


                self.state = 884
                self.match(RustParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroInnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def getRuleIndex(self):
            return RustParser.RULE_macroInner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroInner" ):
                listener.enterMacroInner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroInner" ):
                listener.exitMacroInner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMacroInner" ):
                return visitor.visitMacroInner(self)
            else:
                return visitor.visitChildren(self)




    def macroInner(self):

        localctx = RustParser.MacroInnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_macroInner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.expression(0)
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 888
                self.match(RustParser.T__2)
                self.state = 889
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayLiteral(self):
            return self.getTypedRuleContext(RustParser.ArrayLiteralContext,0)


        def HexNumber(self):
            return self.getToken(RustParser.HexNumber, 0)

        def Number(self):
            return self.getToken(RustParser.Number, 0)

        def SignedNumber(self):
            return self.getToken(RustParser.SignedNumber, 0)

        def BYTE_STRING_LITERAL(self):
            return self.getToken(RustParser.BYTE_STRING_LITERAL, 0)

        def Binary(self):
            return self.getToken(RustParser.Binary, 0)

        def STRING_LITERAL(self):
            return self.getToken(RustParser.STRING_LITERAL, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(RustParser.BooleanLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(RustParser.CHAR_LITERAL, 0)

        def getRuleIndex(self):
            return RustParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = RustParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_literal)
        try:
            self.state = 901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 892
                self.arrayLiteral()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.match(RustParser.HexNumber)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 894
                self.match(RustParser.Number)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 4)
                self.state = 895
                self.match(RustParser.SignedNumber)
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 5)
                self.state = 896
                self.match(RustParser.BYTE_STRING_LITERAL)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 6)
                self.state = 897
                self.match(RustParser.Binary)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 7)
                self.state = 898
                self.match(RustParser.STRING_LITERAL)
                pass
            elif token in [62, 63]:
                self.enterOuterAlt(localctx, 8)
                self.state = 899
                self.booleanLiteral()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 9)
                self.state = 900
                self.match(RustParser.CHAR_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(RustParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(RustParser.FALSE, 0)

        def getRuleIndex(self):
            return RustParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = RustParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            _la = self._input.LA(1)
            if not(_la==62 or _la==63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(RustParser.LBRACK, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(RustParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(RustParser.ExpressionContext,i)


        def RBRACK(self):
            return self.getToken(RustParser.RBRACK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(RustParser.COMMA)
            else:
                return self.getToken(RustParser.COMMA, i)

        def getRuleIndex(self):
            return RustParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = RustParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self.match(RustParser.LBRACK)
                self.state = 906
                self.expression(0)
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==78:
                    self.state = 907
                    self.match(RustParser.COMMA)
                    self.state = 908
                    self.expression(0)
                    self.state = 913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 914
                self.match(RustParser.RBRACK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.match(RustParser.LBRACK)
                self.state = 917
                self.expression(0)
                self.state = 918
                self.match(RustParser.T__2)
                self.state = 919
                self.expression(0)
                self.state = 920
                self.match(RustParser.RBRACK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return RustParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = RustParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(RustParser.T__60)
            self.state = 928
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 925
                    self.matchWildcard() 
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

            self.state = 931
            self.match(RustParser.T__60)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[45] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         




