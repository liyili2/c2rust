# Generated from Rust.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,87,534,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
        84,2,85,7,85,2,86,7,86,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
        1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
        1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
        1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,
        1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
        1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,
        1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,
        1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,
        1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,
        1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
        1,64,1,65,1,65,1,65,1,65,4,65,431,8,65,11,65,12,65,432,1,66,1,66,
        1,66,1,66,5,66,439,8,66,10,66,12,66,442,9,66,1,66,1,66,1,67,1,67,
        5,67,448,8,67,10,67,12,67,451,9,67,1,68,4,68,454,8,68,11,68,12,68,
        455,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,5,70,467,8,70,10,
        70,12,70,470,9,70,1,70,1,70,1,71,1,71,1,71,1,71,4,71,478,8,71,11,
        71,12,71,479,1,72,1,72,1,72,1,72,3,72,486,8,72,1,72,1,72,1,73,1,
        73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,
        79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,83,1,84,1,84,1,84,1,84,1,
        85,4,85,518,8,85,11,85,12,85,519,1,85,1,85,1,86,1,86,1,86,1,86,5,
        86,528,8,86,10,86,12,86,531,9,86,1,86,1,86,0,0,87,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,
        117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,
        68,137,69,139,70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,
        155,78,157,79,159,80,161,81,163,82,165,83,167,84,169,85,171,86,173,
        87,1,0,11,1,0,48,49,2,0,34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,2,0,43,43,45,45,4,0,10,10,13,13,
        34,34,92,92,3,0,48,57,65,70,97,102,4,0,10,10,13,13,39,39,92,92,3,
        0,9,10,13,13,32,32,2,0,10,10,13,13,544,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
        1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
        1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
        1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
        1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
        0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
        1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,
        0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,
        0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,
        151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,
        0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,
        1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,1,175,1,0,0,0,3,180,1,0,0,0,
        5,182,1,0,0,0,7,184,1,0,0,0,9,189,1,0,0,0,11,191,1,0,0,0,13,193,
        1,0,0,0,15,200,1,0,0,0,17,207,1,0,0,0,19,211,1,0,0,0,21,214,1,0,
        0,0,23,217,1,0,0,0,25,221,1,0,0,0,27,228,1,0,0,0,29,235,1,0,0,0,
        31,238,1,0,0,0,33,244,1,0,0,0,35,250,1,0,0,0,37,252,1,0,0,0,39,256,
        1,0,0,0,41,263,1,0,0,0,43,268,1,0,0,0,45,271,1,0,0,0,47,273,1,0,
        0,0,49,275,1,0,0,0,51,281,1,0,0,0,53,290,1,0,0,0,55,292,1,0,0,0,
        57,296,1,0,0,0,59,300,1,0,0,0,61,303,1,0,0,0,63,306,1,0,0,0,65,309,
        1,0,0,0,67,312,1,0,0,0,69,315,1,0,0,0,71,318,1,0,0,0,73,321,1,0,
        0,0,75,324,1,0,0,0,77,330,1,0,0,0,79,336,1,0,0,0,81,340,1,0,0,0,
        83,343,1,0,0,0,85,346,1,0,0,0,87,351,1,0,0,0,89,358,1,0,0,0,91,363,
        1,0,0,0,93,368,1,0,0,0,95,371,1,0,0,0,97,374,1,0,0,0,99,377,1,0,
        0,0,101,380,1,0,0,0,103,383,1,0,0,0,105,386,1,0,0,0,107,389,1,0,
        0,0,109,392,1,0,0,0,111,395,1,0,0,0,113,397,1,0,0,0,115,399,1,0,
        0,0,117,401,1,0,0,0,119,403,1,0,0,0,121,405,1,0,0,0,123,408,1,0,
        0,0,125,410,1,0,0,0,127,415,1,0,0,0,129,421,1,0,0,0,131,426,1,0,
        0,0,133,434,1,0,0,0,135,445,1,0,0,0,137,453,1,0,0,0,139,457,1,0,
        0,0,141,460,1,0,0,0,143,473,1,0,0,0,145,481,1,0,0,0,147,489,1,0,
        0,0,149,492,1,0,0,0,151,494,1,0,0,0,153,496,1,0,0,0,155,498,1,0,
        0,0,157,500,1,0,0,0,159,502,1,0,0,0,161,504,1,0,0,0,163,506,1,0,
        0,0,165,508,1,0,0,0,167,510,1,0,0,0,169,512,1,0,0,0,171,517,1,0,
        0,0,173,523,1,0,0,0,175,176,5,116,0,0,176,177,5,121,0,0,177,178,
        5,112,0,0,178,179,5,101,0,0,179,2,1,0,0,0,180,181,5,61,0,0,181,4,
        1,0,0,0,182,183,5,59,0,0,183,6,1,0,0,0,184,185,5,105,0,0,185,186,
        5,109,0,0,186,187,5,112,0,0,187,188,5,108,0,0,188,8,1,0,0,0,189,
        190,5,123,0,0,190,10,1,0,0,0,191,192,5,125,0,0,192,12,1,0,0,0,193,
        194,5,101,0,0,194,195,5,120,0,0,195,196,5,116,0,0,196,197,5,101,
        0,0,197,198,5,114,0,0,198,199,5,110,0,0,199,14,1,0,0,0,200,201,5,
        115,0,0,201,202,5,116,0,0,202,203,5,97,0,0,203,204,5,116,0,0,204,
        205,5,105,0,0,205,206,5,99,0,0,206,16,1,0,0,0,207,208,5,109,0,0,
        208,209,5,117,0,0,209,210,5,116,0,0,210,18,1,0,0,0,211,212,5,102,
        0,0,212,213,5,110,0,0,213,20,1,0,0,0,214,215,5,45,0,0,215,216,5,
        62,0,0,216,22,1,0,0,0,217,218,5,112,0,0,218,219,5,117,0,0,219,220,
        5,98,0,0,220,24,1,0,0,0,221,222,5,117,0,0,222,223,5,110,0,0,223,
        224,5,115,0,0,224,225,5,97,0,0,225,226,5,102,0,0,226,227,5,101,0,
        0,227,26,1,0,0,0,228,229,5,115,0,0,229,230,5,116,0,0,230,231,5,114,
        0,0,231,232,5,117,0,0,232,233,5,99,0,0,233,234,5,116,0,0,234,28,
        1,0,0,0,235,236,5,40,0,0,236,237,5,41,0,0,237,30,1,0,0,0,238,239,
        5,99,0,0,239,240,5,111,0,0,240,241,5,110,0,0,241,242,5,115,0,0,242,
        243,5,116,0,0,243,32,1,0,0,0,244,245,5,117,0,0,245,246,5,110,0,0,
        246,247,5,105,0,0,247,248,5,111,0,0,248,249,5,110,0,0,249,34,1,0,
        0,0,250,251,5,42,0,0,251,36,1,0,0,0,252,253,5,105,0,0,253,254,5,
        51,0,0,254,255,5,50,0,0,255,38,1,0,0,0,256,257,5,83,0,0,257,258,
        5,116,0,0,258,259,5,114,0,0,259,260,5,105,0,0,260,261,5,110,0,0,
        261,262,5,103,0,0,262,40,1,0,0,0,263,264,5,98,0,0,264,265,5,111,
        0,0,265,266,5,111,0,0,266,267,5,108,0,0,267,42,1,0,0,0,268,269,5,
        117,0,0,269,270,5,56,0,0,270,44,1,0,0,0,271,272,5,60,0,0,272,46,
        1,0,0,0,273,274,5,38,0,0,274,48,1,0,0,0,275,276,5,98,0,0,276,277,
        5,114,0,0,277,278,5,101,0,0,278,279,5,97,0,0,279,280,5,107,0,0,280,
        50,1,0,0,0,281,282,5,99,0,0,282,283,5,111,0,0,283,284,5,110,0,0,
        284,285,5,116,0,0,285,286,5,105,0,0,286,287,5,110,0,0,287,288,5,
        117,0,0,288,289,5,101,0,0,289,52,1,0,0,0,290,291,5,46,0,0,291,54,
        1,0,0,0,292,293,5,108,0,0,293,294,5,101,0,0,294,295,5,116,0,0,295,
        56,1,0,0,0,296,297,5,114,0,0,297,298,5,101,0,0,298,299,5,102,0,0,
        299,58,1,0,0,0,300,301,5,43,0,0,301,302,5,61,0,0,302,60,1,0,0,0,
        303,304,5,45,0,0,304,305,5,61,0,0,305,62,1,0,0,0,306,307,5,42,0,
        0,307,308,5,61,0,0,308,64,1,0,0,0,309,310,5,47,0,0,310,311,5,61,
        0,0,311,66,1,0,0,0,312,313,5,37,0,0,313,314,5,61,0,0,314,68,1,0,
        0,0,315,316,5,38,0,0,316,317,5,61,0,0,317,70,1,0,0,0,318,319,5,124,
        0,0,319,320,5,61,0,0,320,72,1,0,0,0,321,322,5,94,0,0,322,323,5,61,
        0,0,323,74,1,0,0,0,324,325,5,109,0,0,325,326,5,97,0,0,326,327,5,
        116,0,0,327,328,5,99,0,0,328,329,5,104,0,0,329,76,1,0,0,0,330,331,
        5,119,0,0,331,332,5,104,0,0,332,333,5,105,0,0,333,334,5,108,0,0,
        334,335,5,101,0,0,335,78,1,0,0,0,336,337,5,102,0,0,337,338,5,111,
        0,0,338,339,5,114,0,0,339,80,1,0,0,0,340,341,5,105,0,0,341,342,5,
        110,0,0,342,82,1,0,0,0,343,344,5,105,0,0,344,345,5,102,0,0,345,84,
        1,0,0,0,346,347,5,101,0,0,347,348,5,108,0,0,348,349,5,115,0,0,349,
        350,5,101,0,0,350,86,1,0,0,0,351,352,5,114,0,0,352,353,5,101,0,0,
        353,354,5,116,0,0,354,355,5,117,0,0,355,356,5,114,0,0,356,357,5,
        110,0,0,357,88,1,0,0,0,358,359,5,108,0,0,359,360,5,111,0,0,360,361,
        5,111,0,0,361,362,5,112,0,0,362,90,1,0,0,0,363,364,5,83,0,0,364,
        365,5,111,0,0,365,366,5,109,0,0,366,367,5,101,0,0,367,92,1,0,0,0,
        368,369,5,97,0,0,369,370,5,115,0,0,370,94,1,0,0,0,371,372,5,46,0,
        0,372,373,5,46,0,0,373,96,1,0,0,0,374,375,5,61,0,0,375,376,5,61,
        0,0,376,98,1,0,0,0,377,378,5,33,0,0,378,379,5,61,0,0,379,100,1,0,
        0,0,380,381,5,124,0,0,381,382,5,124,0,0,382,102,1,0,0,0,383,384,
        5,38,0,0,384,385,5,38,0,0,385,104,1,0,0,0,386,387,5,62,0,0,387,388,
        5,62,0,0,388,106,1,0,0,0,389,390,5,62,0,0,390,391,5,61,0,0,391,108,
        1,0,0,0,392,393,5,60,0,0,393,394,5,61,0,0,394,110,1,0,0,0,395,396,
        5,47,0,0,396,112,1,0,0,0,397,398,5,37,0,0,398,114,1,0,0,0,399,400,
        5,43,0,0,400,116,1,0,0,0,401,402,5,45,0,0,402,118,1,0,0,0,403,404,
        5,124,0,0,404,120,1,0,0,0,405,406,5,61,0,0,406,407,5,62,0,0,407,
        122,1,0,0,0,408,409,5,34,0,0,409,124,1,0,0,0,410,411,5,116,0,0,411,
        412,5,114,0,0,412,413,5,117,0,0,413,414,5,101,0,0,414,126,1,0,0,
        0,415,416,5,102,0,0,416,417,5,97,0,0,417,418,5,108,0,0,418,419,5,
        115,0,0,419,420,5,101,0,0,420,128,1,0,0,0,421,422,5,78,0,0,422,423,
        5,111,0,0,423,424,5,110,0,0,424,425,5,101,0,0,425,130,1,0,0,0,426,
        427,5,48,0,0,427,428,5,98,0,0,428,430,1,0,0,0,429,431,7,0,0,0,430,
        429,1,0,0,0,431,432,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,
        132,1,0,0,0,434,440,5,34,0,0,435,439,8,1,0,0,436,437,5,92,0,0,437,
        439,9,0,0,0,438,435,1,0,0,0,438,436,1,0,0,0,439,442,1,0,0,0,440,
        438,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,
        444,5,34,0,0,444,134,1,0,0,0,445,449,7,2,0,0,446,448,7,3,0,0,447,
        446,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,
        136,1,0,0,0,451,449,1,0,0,0,452,454,7,4,0,0,453,452,1,0,0,0,454,
        455,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,138,1,0,0,0,457,
        458,7,5,0,0,458,459,3,137,68,0,459,140,1,0,0,0,460,461,5,98,0,0,
        461,462,5,34,0,0,462,468,1,0,0,0,463,467,8,6,0,0,464,465,5,92,0,
        0,465,467,9,0,0,0,466,463,1,0,0,0,466,464,1,0,0,0,467,470,1,0,0,
        0,468,466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,468,1,0,0,
        0,471,472,5,34,0,0,472,142,1,0,0,0,473,474,5,48,0,0,474,475,5,120,
        0,0,475,477,1,0,0,0,476,478,7,7,0,0,477,476,1,0,0,0,478,479,1,0,
        0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,144,1,0,0,0,481,485,5,39,
        0,0,482,486,8,8,0,0,483,484,5,92,0,0,484,486,9,0,0,0,485,482,1,0,
        0,0,485,483,1,0,0,0,486,487,1,0,0,0,487,488,5,39,0,0,488,146,1,0,
        0,0,489,490,5,58,0,0,490,491,5,58,0,0,491,148,1,0,0,0,492,493,5,
        33,0,0,493,150,1,0,0,0,494,495,5,62,0,0,495,152,1,0,0,0,496,497,
        5,35,0,0,497,154,1,0,0,0,498,499,5,91,0,0,499,156,1,0,0,0,500,501,
        5,93,0,0,501,158,1,0,0,0,502,503,5,44,0,0,503,160,1,0,0,0,504,505,
        5,40,0,0,505,162,1,0,0,0,506,507,5,41,0,0,507,164,1,0,0,0,508,509,
        5,95,0,0,509,166,1,0,0,0,510,511,5,58,0,0,511,168,1,0,0,0,512,513,
        5,46,0,0,513,514,5,46,0,0,514,515,5,46,0,0,515,170,1,0,0,0,516,518,
        7,9,0,0,517,516,1,0,0,0,518,519,1,0,0,0,519,517,1,0,0,0,519,520,
        1,0,0,0,520,521,1,0,0,0,521,522,6,85,0,0,522,172,1,0,0,0,523,524,
        5,47,0,0,524,525,5,47,0,0,525,529,1,0,0,0,526,528,8,10,0,0,527,526,
        1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,0,530,532,
        1,0,0,0,531,529,1,0,0,0,532,533,6,86,0,0,533,174,1,0,0,0,12,0,432,
        438,440,449,455,466,468,479,485,519,529,1,6,0,0
    ]

class RustLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    T__58 = 59
    T__59 = 60
    T__60 = 61
    T__61 = 62
    TRUE = 63
    FALSE = 64
    NONE = 65
    Binary = 66
    STRING_LITERAL = 67
    Identifier = 68
    Number = 69
    SignedNumber = 70
    BYTE_STRING_LITERAL = 71
    HexNumber = 72
    CHAR_LITERAL = 73
    DOUBLE_COLON = 74
    EXCL = 75
    GT = 76
    POUND = 77
    LBRACK = 78
    RBRACK = 79
    COMMA = 80
    LPAREN = 81
    RPAREN = 82
    UNDERSCORE = 83
    COLON = 84
    ELLIPSIS = 85
    WS = 86
    COMMENT = 87

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'type'", "'='", "';'", "'impl'", "'{'", "'}'", "'extern'", 
            "'static'", "'mut'", "'fn'", "'->'", "'pub'", "'unsafe'", "'struct'", 
            "'()'", "'const'", "'union'", "'*'", "'i32'", "'String'", "'bool'", 
            "'u8'", "'<'", "'&'", "'break'", "'continue'", "'.'", "'let'", 
            "'ref'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
            "'^='", "'match'", "'while'", "'for'", "'in'", "'if'", "'else'", 
            "'return'", "'loop'", "'Some'", "'as'", "'..'", "'=='", "'!='", 
            "'||'", "'&&'", "'>>'", "'>='", "'<='", "'/'", "'%'", "'+'", 
            "'-'", "'|'", "'=>'", "'\"'", "'true'", "'false'", "'None'", 
            "'::'", "'!'", "'>'", "'#'", "'['", "']'", "','", "'('", "')'", 
            "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "NONE", "Binary", "STRING_LITERAL", "Identifier", 
            "Number", "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
            "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", "LBRACK", 
            "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", "COLON", 
            "ELLIPSIS", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", 
                  "T__56", "T__57", "T__58", "T__59", "T__60", "T__61", 
                  "TRUE", "FALSE", "NONE", "Binary", "STRING_LITERAL", "Identifier", 
                  "Number", "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", 
                  "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", "POUND", 
                  "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", "UNDERSCORE", 
                  "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    grammarFileName = "Rust.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


