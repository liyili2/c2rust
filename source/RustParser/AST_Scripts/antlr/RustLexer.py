# Generated from Rust.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,73,429,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,
        22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
        26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
        33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,
        37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,
        42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,
        46,1,46,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,51,1,
        51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,
        54,1,54,1,54,4,54,350,8,54,11,54,12,54,351,1,55,1,55,5,55,356,8,
        55,10,55,12,55,359,9,55,1,56,4,56,362,8,56,11,56,12,56,363,1,57,
        1,57,1,57,1,57,3,57,370,8,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,
        1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,
        1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,69,5,69,401,8,69,10,69,
        12,69,404,9,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,4,71,413,8,71,
        11,71,12,71,414,1,71,1,71,1,72,1,72,1,72,1,72,5,72,423,8,72,10,72,
        12,72,426,9,72,1,72,1,72,0,0,73,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
        61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,
        141,71,143,72,145,73,1,0,8,1,0,48,49,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,1,0,48,57,4,0,10,10,13,13,39,39,92,92,2,
        0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,13,13,436,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
        0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,
        0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,
        121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,
        0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,
        1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,1,147,1,0,0,0,
        3,152,1,0,0,0,5,154,1,0,0,0,7,156,1,0,0,0,9,163,1,0,0,0,11,165,1,
        0,0,0,13,167,1,0,0,0,15,174,1,0,0,0,17,178,1,0,0,0,19,181,1,0,0,
        0,21,184,1,0,0,0,23,188,1,0,0,0,25,195,1,0,0,0,27,202,1,0,0,0,29,
        208,1,0,0,0,31,214,1,0,0,0,33,216,1,0,0,0,35,218,1,0,0,0,37,222,
        1,0,0,0,39,229,1,0,0,0,41,234,1,0,0,0,43,237,1,0,0,0,45,239,1,0,
        0,0,47,243,1,0,0,0,49,247,1,0,0,0,51,250,1,0,0,0,53,253,1,0,0,0,
        55,258,1,0,0,0,57,265,1,0,0,0,59,269,1,0,0,0,61,275,1,0,0,0,63,277,
        1,0,0,0,65,279,1,0,0,0,67,281,1,0,0,0,69,283,1,0,0,0,71,286,1,0,
        0,0,73,289,1,0,0,0,75,292,1,0,0,0,77,295,1,0,0,0,79,298,1,0,0,0,
        81,301,1,0,0,0,83,304,1,0,0,0,85,307,1,0,0,0,87,310,1,0,0,0,89,313,
        1,0,0,0,91,316,1,0,0,0,93,319,1,0,0,0,95,322,1,0,0,0,97,325,1,0,
        0,0,99,327,1,0,0,0,101,329,1,0,0,0,103,332,1,0,0,0,105,334,1,0,0,
        0,107,339,1,0,0,0,109,345,1,0,0,0,111,353,1,0,0,0,113,361,1,0,0,
        0,115,365,1,0,0,0,117,373,1,0,0,0,119,376,1,0,0,0,121,378,1,0,0,
        0,123,380,1,0,0,0,125,382,1,0,0,0,127,384,1,0,0,0,129,386,1,0,0,
        0,131,388,1,0,0,0,133,390,1,0,0,0,135,392,1,0,0,0,137,394,1,0,0,
        0,139,396,1,0,0,0,141,407,1,0,0,0,143,412,1,0,0,0,145,418,1,0,0,
        0,147,148,5,116,0,0,148,149,5,121,0,0,149,150,5,112,0,0,150,151,
        5,101,0,0,151,2,1,0,0,0,152,153,5,61,0,0,153,4,1,0,0,0,154,155,5,
        59,0,0,155,6,1,0,0,0,156,157,5,101,0,0,157,158,5,120,0,0,158,159,
        5,116,0,0,159,160,5,101,0,0,160,161,5,114,0,0,161,162,5,110,0,0,
        162,8,1,0,0,0,163,164,5,123,0,0,164,10,1,0,0,0,165,166,5,125,0,0,
        166,12,1,0,0,0,167,168,5,115,0,0,168,169,5,116,0,0,169,170,5,97,
        0,0,170,171,5,116,0,0,171,172,5,105,0,0,172,173,5,99,0,0,173,14,
        1,0,0,0,174,175,5,109,0,0,175,176,5,117,0,0,176,177,5,116,0,0,177,
        16,1,0,0,0,178,179,5,102,0,0,179,180,5,110,0,0,180,18,1,0,0,0,181,
        182,5,45,0,0,182,183,5,62,0,0,183,20,1,0,0,0,184,185,5,112,0,0,185,
        186,5,117,0,0,186,187,5,98,0,0,187,22,1,0,0,0,188,189,5,115,0,0,
        189,190,5,116,0,0,190,191,5,114,0,0,191,192,5,117,0,0,192,193,5,
        99,0,0,193,194,5,116,0,0,194,24,1,0,0,0,195,196,5,117,0,0,196,197,
        5,110,0,0,197,198,5,115,0,0,198,199,5,97,0,0,199,200,5,102,0,0,200,
        201,5,101,0,0,201,26,1,0,0,0,202,203,5,99,0,0,203,204,5,111,0,0,
        204,205,5,110,0,0,205,206,5,115,0,0,206,207,5,116,0,0,207,28,1,0,
        0,0,208,209,5,117,0,0,209,210,5,110,0,0,210,211,5,105,0,0,211,212,
        5,111,0,0,212,213,5,110,0,0,213,30,1,0,0,0,214,215,5,38,0,0,215,
        32,1,0,0,0,216,217,5,42,0,0,217,34,1,0,0,0,218,219,5,105,0,0,219,
        220,5,51,0,0,220,221,5,50,0,0,221,36,1,0,0,0,222,223,5,83,0,0,223,
        224,5,116,0,0,224,225,5,114,0,0,225,226,5,105,0,0,226,227,5,110,
        0,0,227,228,5,103,0,0,228,38,1,0,0,0,229,230,5,98,0,0,230,231,5,
        111,0,0,231,232,5,111,0,0,232,233,5,108,0,0,233,40,1,0,0,0,234,235,
        5,40,0,0,235,236,5,41,0,0,236,42,1,0,0,0,237,238,5,60,0,0,238,44,
        1,0,0,0,239,240,5,108,0,0,240,241,5,101,0,0,241,242,5,116,0,0,242,
        46,1,0,0,0,243,244,5,102,0,0,244,245,5,111,0,0,245,246,5,114,0,0,
        246,48,1,0,0,0,247,248,5,105,0,0,248,249,5,110,0,0,249,50,1,0,0,
        0,250,251,5,105,0,0,251,252,5,102,0,0,252,52,1,0,0,0,253,254,5,101,
        0,0,254,255,5,108,0,0,255,256,5,115,0,0,256,257,5,101,0,0,257,54,
        1,0,0,0,258,259,5,114,0,0,259,260,5,101,0,0,260,261,5,116,0,0,261,
        262,5,117,0,0,262,263,5,114,0,0,263,264,5,110,0,0,264,56,1,0,0,0,
        265,266,5,62,0,0,266,267,5,40,0,0,267,268,5,41,0,0,268,58,1,0,0,
        0,269,270,5,109,0,0,270,271,5,97,0,0,271,272,5,116,0,0,272,273,5,
        99,0,0,273,274,5,104,0,0,274,60,1,0,0,0,275,276,5,47,0,0,276,62,
        1,0,0,0,277,278,5,37,0,0,278,64,1,0,0,0,279,280,5,43,0,0,280,66,
        1,0,0,0,281,282,5,45,0,0,282,68,1,0,0,0,283,284,5,62,0,0,284,285,
        5,62,0,0,285,70,1,0,0,0,286,287,5,62,0,0,287,288,5,61,0,0,288,72,
        1,0,0,0,289,290,5,60,0,0,290,291,5,61,0,0,291,74,1,0,0,0,292,293,
        5,61,0,0,293,294,5,61,0,0,294,76,1,0,0,0,295,296,5,46,0,0,296,297,
        5,46,0,0,297,78,1,0,0,0,298,299,5,43,0,0,299,300,5,61,0,0,300,80,
        1,0,0,0,301,302,5,45,0,0,302,303,5,61,0,0,303,82,1,0,0,0,304,305,
        5,42,0,0,305,306,5,61,0,0,306,84,1,0,0,0,307,308,5,47,0,0,308,309,
        5,61,0,0,309,86,1,0,0,0,310,311,5,37,0,0,311,312,5,61,0,0,312,88,
        1,0,0,0,313,314,5,38,0,0,314,315,5,61,0,0,315,90,1,0,0,0,316,317,
        5,124,0,0,317,318,5,61,0,0,318,92,1,0,0,0,319,320,5,94,0,0,320,321,
        5,61,0,0,321,94,1,0,0,0,322,323,5,97,0,0,323,324,5,115,0,0,324,96,
        1,0,0,0,325,326,5,46,0,0,326,98,1,0,0,0,327,328,5,124,0,0,328,100,
        1,0,0,0,329,330,5,61,0,0,330,331,5,62,0,0,331,102,1,0,0,0,332,333,
        5,34,0,0,333,104,1,0,0,0,334,335,5,116,0,0,335,336,5,114,0,0,336,
        337,5,117,0,0,337,338,5,101,0,0,338,106,1,0,0,0,339,340,5,102,0,
        0,340,341,5,97,0,0,341,342,5,108,0,0,342,343,5,115,0,0,343,344,5,
        101,0,0,344,108,1,0,0,0,345,346,5,48,0,0,346,347,5,98,0,0,347,349,
        1,0,0,0,348,350,7,0,0,0,349,348,1,0,0,0,350,351,1,0,0,0,351,349,
        1,0,0,0,351,352,1,0,0,0,352,110,1,0,0,0,353,357,7,1,0,0,354,356,
        7,2,0,0,355,354,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,
        1,0,0,0,358,112,1,0,0,0,359,357,1,0,0,0,360,362,7,3,0,0,361,360,
        1,0,0,0,362,363,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,114,
        1,0,0,0,365,369,5,39,0,0,366,370,8,4,0,0,367,368,5,92,0,0,368,370,
        9,0,0,0,369,366,1,0,0,0,369,367,1,0,0,0,370,371,1,0,0,0,371,372,
        5,39,0,0,372,116,1,0,0,0,373,374,5,58,0,0,374,375,5,58,0,0,375,118,
        1,0,0,0,376,377,5,33,0,0,377,120,1,0,0,0,378,379,5,62,0,0,379,122,
        1,0,0,0,380,381,5,35,0,0,381,124,1,0,0,0,382,383,5,91,0,0,383,126,
        1,0,0,0,384,385,5,93,0,0,385,128,1,0,0,0,386,387,5,44,0,0,387,130,
        1,0,0,0,388,389,5,40,0,0,389,132,1,0,0,0,390,391,5,41,0,0,391,134,
        1,0,0,0,392,393,5,95,0,0,393,136,1,0,0,0,394,395,5,58,0,0,395,138,
        1,0,0,0,396,402,5,34,0,0,397,401,8,5,0,0,398,399,5,92,0,0,399,401,
        9,0,0,0,400,397,1,0,0,0,400,398,1,0,0,0,401,404,1,0,0,0,402,400,
        1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,402,1,0,0,0,405,406,
        5,34,0,0,406,140,1,0,0,0,407,408,5,46,0,0,408,409,5,46,0,0,409,410,
        5,46,0,0,410,142,1,0,0,0,411,413,7,6,0,0,412,411,1,0,0,0,413,414,
        1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,
        6,71,0,0,417,144,1,0,0,0,418,419,5,47,0,0,419,420,5,47,0,0,420,424,
        1,0,0,0,421,423,8,7,0,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,
        1,0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,424,1,0,0,0,427,428,
        6,72,0,0,428,146,1,0,0,0,9,0,351,357,363,369,400,402,414,424,1,6,
        0,0
    ]

class RustLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    TRUE = 53
    FALSE = 54
    Binary = 55
    Identifier = 56
    Number = 57
    CHAR_LITERAL = 58
    DOUBLE_COLON = 59
    EXCL = 60
    GT = 61
    POUND = 62
    LBRACK = 63
    RBRACK = 64
    COMMA = 65
    LPAREN = 66
    RPAREN = 67
    UNDERSCORE = 68
    COLON = 69
    STRING_LITERAL = 70
    ELLIPSIS = 71
    WS = 72
    COMMENT = 73

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'type'", "'='", "';'", "'extern'", "'{'", "'}'", "'static'", 
            "'mut'", "'fn'", "'->'", "'pub'", "'struct'", "'unsafe'", "'const'", 
            "'union'", "'&'", "'*'", "'i32'", "'String'", "'bool'", "'()'", 
            "'<'", "'let'", "'for'", "'in'", "'if'", "'else'", "'return'", 
            "'>()'", "'match'", "'/'", "'%'", "'+'", "'-'", "'>>'", "'>='", 
            "'<='", "'=='", "'..'", "'+='", "'-='", "'*='", "'/='", "'%='", 
            "'&='", "'|='", "'^='", "'as'", "'.'", "'|'", "'=>'", "'\"'", 
            "'true'", "'false'", "'::'", "'!'", "'>'", "'#'", "'['", "']'", 
            "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "Binary", "Identifier", "Number", "CHAR_LITERAL", 
            "DOUBLE_COLON", "EXCL", "GT", "POUND", "LBRACK", "RBRACK", "COMMA", 
            "LPAREN", "RPAREN", "UNDERSCORE", "COLON", "STRING_LITERAL", 
            "ELLIPSIS", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "TRUE", "FALSE", "Binary", "Identifier", 
                  "Number", "CHAR_LITERAL", "DOUBLE_COLON", "EXCL", "GT", 
                  "POUND", "LBRACK", "RBRACK", "COMMA", "LPAREN", "RPAREN", 
                  "UNDERSCORE", "COLON", "STRING_LITERAL", "ELLIPSIS", "WS", 
                  "COMMENT" ]

    grammarFileName = "Rust.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


