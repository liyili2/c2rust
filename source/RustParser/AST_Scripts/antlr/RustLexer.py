# Generated from Rust.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,270,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,
        1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,
        1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,
        1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,4,40,227,
        8,40,11,40,12,40,228,1,41,1,41,5,41,233,8,41,10,41,12,41,236,9,41,
        1,42,4,42,239,8,42,11,42,12,42,240,1,43,1,43,1,44,1,44,1,45,1,45,
        1,46,1,46,1,47,1,47,1,48,4,48,254,8,48,11,48,12,48,255,1,48,1,48,
        1,49,1,49,1,49,1,49,5,49,264,8,49,10,49,12,49,267,9,49,1,49,1,49,
        0,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
        69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
        91,46,93,47,95,48,97,49,99,50,1,0,6,1,0,48,49,3,0,65,90,95,95,97,
        122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,
        2,0,10,10,13,13,274,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
        0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,108,1,0,0,0,5,110,1,0,0,0,7,112,
        1,0,0,0,9,114,1,0,0,0,11,117,1,0,0,0,13,119,1,0,0,0,15,121,1,0,0,
        0,17,124,1,0,0,0,19,126,1,0,0,0,21,130,1,0,0,0,23,137,1,0,0,0,25,
        139,1,0,0,0,27,141,1,0,0,0,29,145,1,0,0,0,31,149,1,0,0,0,33,151,
        1,0,0,0,35,155,1,0,0,0,37,158,1,0,0,0,39,161,1,0,0,0,41,166,1,0,
        0,0,43,173,1,0,0,0,45,175,1,0,0,0,47,177,1,0,0,0,49,179,1,0,0,0,
        51,181,1,0,0,0,53,183,1,0,0,0,55,185,1,0,0,0,57,188,1,0,0,0,59,191,
        1,0,0,0,61,194,1,0,0,0,63,197,1,0,0,0,65,200,1,0,0,0,67,203,1,0,
        0,0,69,206,1,0,0,0,71,209,1,0,0,0,73,212,1,0,0,0,75,215,1,0,0,0,
        77,218,1,0,0,0,79,220,1,0,0,0,81,222,1,0,0,0,83,230,1,0,0,0,85,238,
        1,0,0,0,87,242,1,0,0,0,89,244,1,0,0,0,91,246,1,0,0,0,93,248,1,0,
        0,0,95,250,1,0,0,0,97,253,1,0,0,0,99,259,1,0,0,0,101,102,5,115,0,
        0,102,103,5,116,0,0,103,104,5,114,0,0,104,105,5,117,0,0,105,106,
        5,99,0,0,106,107,5,116,0,0,107,2,1,0,0,0,108,109,5,123,0,0,109,4,
        1,0,0,0,110,111,5,125,0,0,111,6,1,0,0,0,112,113,5,58,0,0,113,8,1,
        0,0,0,114,115,5,102,0,0,115,116,5,110,0,0,116,10,1,0,0,0,117,118,
        5,40,0,0,118,12,1,0,0,0,119,120,5,41,0,0,120,14,1,0,0,0,121,122,
        5,45,0,0,122,123,5,62,0,0,123,16,1,0,0,0,124,125,5,38,0,0,125,18,
        1,0,0,0,126,127,5,105,0,0,127,128,5,51,0,0,128,129,5,50,0,0,129,
        20,1,0,0,0,130,131,5,83,0,0,131,132,5,116,0,0,132,133,5,114,0,0,
        133,134,5,105,0,0,134,135,5,110,0,0,135,136,5,103,0,0,136,22,1,0,
        0,0,137,138,5,60,0,0,138,24,1,0,0,0,139,140,5,59,0,0,140,26,1,0,
        0,0,141,142,5,108,0,0,142,143,5,101,0,0,143,144,5,116,0,0,144,28,
        1,0,0,0,145,146,5,109,0,0,146,147,5,117,0,0,147,148,5,116,0,0,148,
        30,1,0,0,0,149,150,5,61,0,0,150,32,1,0,0,0,151,152,5,102,0,0,152,
        153,5,111,0,0,153,154,5,114,0,0,154,34,1,0,0,0,155,156,5,105,0,0,
        156,157,5,110,0,0,157,36,1,0,0,0,158,159,5,105,0,0,159,160,5,102,
        0,0,160,38,1,0,0,0,161,162,5,101,0,0,162,163,5,108,0,0,163,164,5,
        115,0,0,164,165,5,101,0,0,165,40,1,0,0,0,166,167,5,114,0,0,167,168,
        5,101,0,0,168,169,5,116,0,0,169,170,5,117,0,0,170,171,5,114,0,0,
        171,172,5,110,0,0,172,42,1,0,0,0,173,174,5,46,0,0,174,44,1,0,0,0,
        175,176,5,42,0,0,176,46,1,0,0,0,177,178,5,47,0,0,178,48,1,0,0,0,
        179,180,5,37,0,0,180,50,1,0,0,0,181,182,5,43,0,0,182,52,1,0,0,0,
        183,184,5,45,0,0,184,54,1,0,0,0,185,186,5,62,0,0,186,187,5,62,0,
        0,187,56,1,0,0,0,188,189,5,61,0,0,189,190,5,61,0,0,190,58,1,0,0,
        0,191,192,5,46,0,0,192,193,5,46,0,0,193,60,1,0,0,0,194,195,5,43,
        0,0,195,196,5,61,0,0,196,62,1,0,0,0,197,198,5,45,0,0,198,199,5,61,
        0,0,199,64,1,0,0,0,200,201,5,42,0,0,201,202,5,61,0,0,202,66,1,0,
        0,0,203,204,5,47,0,0,204,205,5,61,0,0,205,68,1,0,0,0,206,207,5,37,
        0,0,207,208,5,61,0,0,208,70,1,0,0,0,209,210,5,38,0,0,210,211,5,61,
        0,0,211,72,1,0,0,0,212,213,5,124,0,0,213,214,5,61,0,0,214,74,1,0,
        0,0,215,216,5,94,0,0,216,217,5,61,0,0,217,76,1,0,0,0,218,219,5,33,
        0,0,219,78,1,0,0,0,220,221,5,34,0,0,221,80,1,0,0,0,222,223,5,48,
        0,0,223,224,5,98,0,0,224,226,1,0,0,0,225,227,7,0,0,0,226,225,1,0,
        0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,82,1,0,0,
        0,230,234,7,1,0,0,231,233,7,2,0,0,232,231,1,0,0,0,233,236,1,0,0,
        0,234,232,1,0,0,0,234,235,1,0,0,0,235,84,1,0,0,0,236,234,1,0,0,0,
        237,239,7,3,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,
        240,241,1,0,0,0,241,86,1,0,0,0,242,243,5,62,0,0,243,88,1,0,0,0,244,
        245,5,35,0,0,245,90,1,0,0,0,246,247,5,91,0,0,247,92,1,0,0,0,248,
        249,5,93,0,0,249,94,1,0,0,0,250,251,5,44,0,0,251,96,1,0,0,0,252,
        254,7,4,0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,
        256,1,0,0,0,256,257,1,0,0,0,257,258,6,48,0,0,258,98,1,0,0,0,259,
        260,5,47,0,0,260,261,5,47,0,0,261,265,1,0,0,0,262,264,8,5,0,0,263,
        262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,
        268,1,0,0,0,267,265,1,0,0,0,268,269,6,49,0,0,269,100,1,0,0,0,6,0,
        228,234,240,255,265,1,6,0,0
    ]

class RustLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    Binary = 41
    Identifier = 42
    Number = 43
    GT = 44
    POUND = 45
    LBRACK = 46
    RBRACK = 47
    COMMA = 48
    WS = 49
    COMMENT = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'struct'", "'{'", "'}'", "':'", "'fn'", "'('", "')'", "'->'", 
            "'&'", "'i32'", "'String'", "'<'", "';'", "'let'", "'mut'", 
            "'='", "'for'", "'in'", "'if'", "'else'", "'return'", "'.'", 
            "'*'", "'/'", "'%'", "'+'", "'-'", "'>>'", "'=='", "'..'", "'+='", 
            "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'!'", 
            "'\"'", "'>'", "'#'", "'['", "']'", "','" ]

    symbolicNames = [ "<INVALID>",
            "Binary", "Identifier", "Number", "GT", "POUND", "LBRACK", "RBRACK", 
            "COMMA", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "Binary", "Identifier", "Number", "GT", 
                  "POUND", "LBRACK", "RBRACK", "COMMA", "WS", "COMMENT" ]

    grammarFileName = "Rust.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


