# Generated from Rust.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,85,519,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
        84,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
        16,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,
        23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,
        28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
        31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,
        33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,
        35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,
        39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,
        45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,
        50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,
        55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,
        60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,
        63,1,63,1,63,1,63,4,63,416,8,63,11,63,12,63,417,1,64,1,64,1,64,1,
        64,5,64,424,8,64,10,64,12,64,427,9,64,1,64,1,64,1,65,1,65,5,65,433,
        8,65,10,65,12,65,436,9,65,1,66,4,66,439,8,66,11,66,12,66,440,1,67,
        1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,5,68,452,8,68,10,68,12,68,
        455,9,68,1,68,1,68,1,69,1,69,1,69,1,69,4,69,463,8,69,11,69,12,69,
        464,1,70,1,70,1,70,1,70,3,70,471,8,70,1,70,1,70,1,71,1,71,1,71,1,
        72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,
        78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,82,1,82,1,83,4,83,503,
        8,83,11,83,12,83,504,1,83,1,83,1,84,1,84,1,84,1,84,5,84,513,8,84,
        10,84,12,84,516,9,84,1,84,1,84,0,0,85,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
        121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,
        70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,
        159,80,161,81,163,82,165,83,167,84,169,85,1,0,11,1,0,48,49,2,0,34,
        34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,3,0,48,57,65,70,
        97,102,4,0,10,10,13,13,39,39,92,92,3,0,9,10,13,13,32,32,2,0,10,10,
        13,13,529,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
        0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,
        109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,
        0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
        1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
        0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,
        0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,
        155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,
        0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,1,171,1,0,0,0,3,176,
        1,0,0,0,5,178,1,0,0,0,7,180,1,0,0,0,9,187,1,0,0,0,11,189,1,0,0,0,
        13,191,1,0,0,0,15,198,1,0,0,0,17,202,1,0,0,0,19,205,1,0,0,0,21,208,
        1,0,0,0,23,212,1,0,0,0,25,219,1,0,0,0,27,222,1,0,0,0,29,229,1,0,
        0,0,31,235,1,0,0,0,33,241,1,0,0,0,35,243,1,0,0,0,37,245,1,0,0,0,
        39,249,1,0,0,0,41,256,1,0,0,0,43,261,1,0,0,0,45,264,1,0,0,0,47,266,
        1,0,0,0,49,269,1,0,0,0,51,272,1,0,0,0,53,275,1,0,0,0,55,278,1,0,
        0,0,57,281,1,0,0,0,59,284,1,0,0,0,61,287,1,0,0,0,63,290,1,0,0,0,
        65,296,1,0,0,0,67,305,1,0,0,0,69,311,1,0,0,0,71,317,1,0,0,0,73,321,
        1,0,0,0,75,325,1,0,0,0,77,329,1,0,0,0,79,332,1,0,0,0,81,335,1,0,
        0,0,83,340,1,0,0,0,85,347,1,0,0,0,87,352,1,0,0,0,89,356,1,0,0,0,
        91,358,1,0,0,0,93,360,1,0,0,0,95,362,1,0,0,0,97,364,1,0,0,0,99,367,
        1,0,0,0,101,370,1,0,0,0,103,373,1,0,0,0,105,376,1,0,0,0,107,379,
        1,0,0,0,109,382,1,0,0,0,111,385,1,0,0,0,113,388,1,0,0,0,115,391,
        1,0,0,0,117,393,1,0,0,0,119,395,1,0,0,0,121,398,1,0,0,0,123,400,
        1,0,0,0,125,405,1,0,0,0,127,411,1,0,0,0,129,419,1,0,0,0,131,430,
        1,0,0,0,133,438,1,0,0,0,135,442,1,0,0,0,137,445,1,0,0,0,139,458,
        1,0,0,0,141,466,1,0,0,0,143,474,1,0,0,0,145,477,1,0,0,0,147,479,
        1,0,0,0,149,481,1,0,0,0,151,483,1,0,0,0,153,485,1,0,0,0,155,487,
        1,0,0,0,157,489,1,0,0,0,159,491,1,0,0,0,161,493,1,0,0,0,163,495,
        1,0,0,0,165,497,1,0,0,0,167,502,1,0,0,0,169,508,1,0,0,0,171,172,
        5,116,0,0,172,173,5,121,0,0,173,174,5,112,0,0,174,175,5,101,0,0,
        175,2,1,0,0,0,176,177,5,61,0,0,177,4,1,0,0,0,178,179,5,59,0,0,179,
        6,1,0,0,0,180,181,5,101,0,0,181,182,5,120,0,0,182,183,5,116,0,0,
        183,184,5,101,0,0,184,185,5,114,0,0,185,186,5,110,0,0,186,8,1,0,
        0,0,187,188,5,123,0,0,188,10,1,0,0,0,189,190,5,125,0,0,190,12,1,
        0,0,0,191,192,5,115,0,0,192,193,5,116,0,0,193,194,5,97,0,0,194,195,
        5,116,0,0,195,196,5,105,0,0,196,197,5,99,0,0,197,14,1,0,0,0,198,
        199,5,109,0,0,199,200,5,117,0,0,200,201,5,116,0,0,201,16,1,0,0,0,
        202,203,5,102,0,0,203,204,5,110,0,0,204,18,1,0,0,0,205,206,5,45,
        0,0,206,207,5,62,0,0,207,20,1,0,0,0,208,209,5,112,0,0,209,210,5,
        117,0,0,210,211,5,98,0,0,211,22,1,0,0,0,212,213,5,115,0,0,213,214,
        5,116,0,0,214,215,5,114,0,0,215,216,5,117,0,0,216,217,5,99,0,0,217,
        218,5,116,0,0,218,24,1,0,0,0,219,220,5,40,0,0,220,221,5,41,0,0,221,
        26,1,0,0,0,222,223,5,117,0,0,223,224,5,110,0,0,224,225,5,115,0,0,
        225,226,5,97,0,0,226,227,5,102,0,0,227,228,5,101,0,0,228,28,1,0,
        0,0,229,230,5,99,0,0,230,231,5,111,0,0,231,232,5,110,0,0,232,233,
        5,115,0,0,233,234,5,116,0,0,234,30,1,0,0,0,235,236,5,117,0,0,236,
        237,5,110,0,0,237,238,5,105,0,0,238,239,5,111,0,0,239,240,5,110,
        0,0,240,32,1,0,0,0,241,242,5,38,0,0,242,34,1,0,0,0,243,244,5,42,
        0,0,244,36,1,0,0,0,245,246,5,105,0,0,246,247,5,51,0,0,247,248,5,
        50,0,0,248,38,1,0,0,0,249,250,5,83,0,0,250,251,5,116,0,0,251,252,
        5,114,0,0,252,253,5,105,0,0,253,254,5,110,0,0,254,255,5,103,0,0,
        255,40,1,0,0,0,256,257,5,98,0,0,257,258,5,111,0,0,258,259,5,111,
        0,0,259,260,5,108,0,0,260,42,1,0,0,0,261,262,5,117,0,0,262,263,5,
        56,0,0,263,44,1,0,0,0,264,265,5,60,0,0,265,46,1,0,0,0,266,267,5,
        43,0,0,267,268,5,61,0,0,268,48,1,0,0,0,269,270,5,45,0,0,270,271,
        5,61,0,0,271,50,1,0,0,0,272,273,5,42,0,0,273,274,5,61,0,0,274,52,
        1,0,0,0,275,276,5,47,0,0,276,277,5,61,0,0,277,54,1,0,0,0,278,279,
        5,37,0,0,279,280,5,61,0,0,280,56,1,0,0,0,281,282,5,38,0,0,282,283,
        5,61,0,0,283,58,1,0,0,0,284,285,5,124,0,0,285,286,5,61,0,0,286,60,
        1,0,0,0,287,288,5,94,0,0,288,289,5,61,0,0,289,62,1,0,0,0,290,291,
        5,98,0,0,291,292,5,114,0,0,292,293,5,101,0,0,293,294,5,97,0,0,294,
        295,5,107,0,0,295,64,1,0,0,0,296,297,5,99,0,0,297,298,5,111,0,0,
        298,299,5,110,0,0,299,300,5,116,0,0,300,301,5,105,0,0,301,302,5,
        110,0,0,302,303,5,117,0,0,303,304,5,101,0,0,304,66,1,0,0,0,305,306,
        5,109,0,0,306,307,5,97,0,0,307,308,5,116,0,0,308,309,5,99,0,0,309,
        310,5,104,0,0,310,68,1,0,0,0,311,312,5,119,0,0,312,313,5,104,0,0,
        313,314,5,105,0,0,314,315,5,108,0,0,315,316,5,101,0,0,316,70,1,0,
        0,0,317,318,5,108,0,0,318,319,5,101,0,0,319,320,5,116,0,0,320,72,
        1,0,0,0,321,322,5,114,0,0,322,323,5,101,0,0,323,324,5,102,0,0,324,
        74,1,0,0,0,325,326,5,102,0,0,326,327,5,111,0,0,327,328,5,114,0,0,
        328,76,1,0,0,0,329,330,5,105,0,0,330,331,5,110,0,0,331,78,1,0,0,
        0,332,333,5,105,0,0,333,334,5,102,0,0,334,80,1,0,0,0,335,336,5,101,
        0,0,336,337,5,108,0,0,337,338,5,115,0,0,338,339,5,101,0,0,339,82,
        1,0,0,0,340,341,5,114,0,0,341,342,5,101,0,0,342,343,5,116,0,0,343,
        344,5,117,0,0,344,345,5,114,0,0,345,346,5,110,0,0,346,84,1,0,0,0,
        347,348,5,108,0,0,348,349,5,111,0,0,349,350,5,111,0,0,350,351,5,
        112,0,0,351,86,1,0,0,0,352,353,5,62,0,0,353,354,5,40,0,0,354,355,
        5,41,0,0,355,88,1,0,0,0,356,357,5,47,0,0,357,90,1,0,0,0,358,359,
        5,37,0,0,359,92,1,0,0,0,360,361,5,43,0,0,361,94,1,0,0,0,362,363,
        5,45,0,0,363,96,1,0,0,0,364,365,5,62,0,0,365,366,5,62,0,0,366,98,
        1,0,0,0,367,368,5,62,0,0,368,369,5,61,0,0,369,100,1,0,0,0,370,371,
        5,60,0,0,371,372,5,61,0,0,372,102,1,0,0,0,373,374,5,61,0,0,374,375,
        5,61,0,0,375,104,1,0,0,0,376,377,5,33,0,0,377,378,5,61,0,0,378,106,
        1,0,0,0,379,380,5,124,0,0,380,381,5,124,0,0,381,108,1,0,0,0,382,
        383,5,38,0,0,383,384,5,38,0,0,384,110,1,0,0,0,385,386,5,46,0,0,386,
        387,5,46,0,0,387,112,1,0,0,0,388,389,5,97,0,0,389,390,5,115,0,0,
        390,114,1,0,0,0,391,392,5,46,0,0,392,116,1,0,0,0,393,394,5,124,0,
        0,394,118,1,0,0,0,395,396,5,61,0,0,396,397,5,62,0,0,397,120,1,0,
        0,0,398,399,5,34,0,0,399,122,1,0,0,0,400,401,5,116,0,0,401,402,5,
        114,0,0,402,403,5,117,0,0,403,404,5,101,0,0,404,124,1,0,0,0,405,
        406,5,102,0,0,406,407,5,97,0,0,407,408,5,108,0,0,408,409,5,115,0,
        0,409,410,5,101,0,0,410,126,1,0,0,0,411,412,5,48,0,0,412,413,5,98,
        0,0,413,415,1,0,0,0,414,416,7,0,0,0,415,414,1,0,0,0,416,417,1,0,
        0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,128,1,0,0,0,419,425,5,34,
        0,0,420,424,8,1,0,0,421,422,5,92,0,0,422,424,9,0,0,0,423,420,1,0,
        0,0,423,421,1,0,0,0,424,427,1,0,0,0,425,423,1,0,0,0,425,426,1,0,
        0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,429,5,34,0,0,429,130,1,0,
        0,0,430,434,7,2,0,0,431,433,7,3,0,0,432,431,1,0,0,0,433,436,1,0,
        0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,132,1,0,0,0,436,434,1,0,
        0,0,437,439,7,4,0,0,438,437,1,0,0,0,439,440,1,0,0,0,440,438,1,0,
        0,0,440,441,1,0,0,0,441,134,1,0,0,0,442,443,7,5,0,0,443,444,3,133,
        66,0,444,136,1,0,0,0,445,446,5,98,0,0,446,447,5,34,0,0,447,453,1,
        0,0,0,448,452,8,6,0,0,449,450,5,92,0,0,450,452,9,0,0,0,451,448,1,
        0,0,0,451,449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,
        0,0,0,454,456,1,0,0,0,455,453,1,0,0,0,456,457,5,34,0,0,457,138,1,
        0,0,0,458,459,5,48,0,0,459,460,5,120,0,0,460,462,1,0,0,0,461,463,
        7,7,0,0,462,461,1,0,0,0,463,464,1,0,0,0,464,462,1,0,0,0,464,465,
        1,0,0,0,465,140,1,0,0,0,466,470,5,39,0,0,467,471,8,8,0,0,468,469,
        5,92,0,0,469,471,9,0,0,0,470,467,1,0,0,0,470,468,1,0,0,0,471,472,
        1,0,0,0,472,473,5,39,0,0,473,142,1,0,0,0,474,475,5,58,0,0,475,476,
        5,58,0,0,476,144,1,0,0,0,477,478,5,33,0,0,478,146,1,0,0,0,479,480,
        5,62,0,0,480,148,1,0,0,0,481,482,5,35,0,0,482,150,1,0,0,0,483,484,
        5,91,0,0,484,152,1,0,0,0,485,486,5,93,0,0,486,154,1,0,0,0,487,488,
        5,44,0,0,488,156,1,0,0,0,489,490,5,40,0,0,490,158,1,0,0,0,491,492,
        5,41,0,0,492,160,1,0,0,0,493,494,5,95,0,0,494,162,1,0,0,0,495,496,
        5,58,0,0,496,164,1,0,0,0,497,498,5,46,0,0,498,499,5,46,0,0,499,500,
        5,46,0,0,500,166,1,0,0,0,501,503,7,9,0,0,502,501,1,0,0,0,503,504,
        1,0,0,0,504,502,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,507,
        6,83,0,0,507,168,1,0,0,0,508,509,5,47,0,0,509,510,5,47,0,0,510,514,
        1,0,0,0,511,513,8,10,0,0,512,511,1,0,0,0,513,516,1,0,0,0,514,512,
        1,0,0,0,514,515,1,0,0,0,515,517,1,0,0,0,516,514,1,0,0,0,517,518,
        6,84,0,0,518,170,1,0,0,0,12,0,417,423,425,434,440,451,453,464,470,
        504,514,1,6,0,0
    ]

class RustLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    T__58 = 59
    T__59 = 60
    T__60 = 61
    TRUE = 62
    FALSE = 63
    Binary = 64
    STRING_LITERAL = 65
    Identifier = 66
    Number = 67
    SignedNumber = 68
    BYTE_STRING_LITERAL = 69
    HexNumber = 70
    CHAR_LITERAL = 71
    DOUBLE_COLON = 72
    EXCL = 73
    GT = 74
    POUND = 75
    LBRACK = 76
    RBRACK = 77
    COMMA = 78
    LPAREN = 79
    RPAREN = 80
    UNDERSCORE = 81
    COLON = 82
    ELLIPSIS = 83
    WS = 84
    COMMENT = 85

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'type'", "'='", "';'", "'extern'", "'{'", "'}'", "'static'", 
            "'mut'", "'fn'", "'->'", "'pub'", "'struct'", "'()'", "'unsafe'", 
            "'const'", "'union'", "'&'", "'*'", "'i32'", "'String'", "'bool'", 
            "'u8'", "'<'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
            "'|='", "'^='", "'break'", "'continue'", "'match'", "'while'", 
            "'let'", "'ref'", "'for'", "'in'", "'if'", "'else'", "'return'", 
            "'loop'", "'>()'", "'/'", "'%'", "'+'", "'-'", "'>>'", "'>='", 
            "'<='", "'=='", "'!='", "'||'", "'&&'", "'..'", "'as'", "'.'", 
            "'|'", "'=>'", "'\"'", "'true'", "'false'", "'::'", "'!'", "'>'", 
            "'#'", "'['", "']'", "','", "'('", "')'", "'_'", "':'", "'...'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "Binary", "STRING_LITERAL", "Identifier", "Number", 
            "SignedNumber", "BYTE_STRING_LITERAL", "HexNumber", "CHAR_LITERAL", 
            "DOUBLE_COLON", "EXCL", "GT", "POUND", "LBRACK", "RBRACK", "COMMA", 
            "LPAREN", "RPAREN", "UNDERSCORE", "COLON", "ELLIPSIS", "WS", 
            "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", 
                  "T__56", "T__57", "T__58", "T__59", "T__60", "TRUE", "FALSE", 
                  "Binary", "STRING_LITERAL", "Identifier", "Number", "SignedNumber", 
                  "BYTE_STRING_LITERAL", "HexNumber", "CHAR_LITERAL", "DOUBLE_COLON", 
                  "EXCL", "GT", "POUND", "LBRACK", "RBRACK", "COMMA", "LPAREN", 
                  "RPAREN", "UNDERSCORE", "COLON", "ELLIPSIS", "WS", "COMMENT" ]

    grammarFileName = "Rust.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


