<?xml version="1.0"?><root><functions><functionname>aggregate</functionname><parameters><name>list</name><type>&amp;[i32]</type></parameters><return_type>Vec&lt;i32&gt;</return_type><body><type>VariableAssignment</type><content>let len = list . len () ;</content></body><body><type>VariableAssignment</type><content>let mut ret = vec ! [0 ; (len &gt;&gt; 1) + (len &amp; 0b0001)] ;</content></body><body><type>Expression</type><content>for i in 0 .. len { if i % 2 == 1 { ret [i / 2] += list [i] ; } else { ret [i / 2] = list [i] ; } }</content></body><body><type>Expression</type><content>ret</content></body></functions><functions><functionname>printall</functionname><parameters><name>list</name><type>&amp;[i32]</type></parameters><return_type/><body><type>Expression</type><content>print ! (&quot;[&quot;)</content></body><body><type>Expression</type><content>for i in 0 .. list . len () { print ! (&quot;{}, &quot; , list [i]) ; }</content></body><body><type>Expression</type><content>println ! (&quot;]&quot;)</content></body></functions><functions><functionname>main</functionname><return_type/><body><type>VariableAssignment</type><content>let test1 : [i32 ; 6] = [1 , 2 , 3 , 4 , 5 , 6] ;</content></body><body><type>VariableAssignment</type><content>let ret1 = aggregate (&amp; test1) ;</content></body><body><type>Expression</type><content>printall (&amp; test1)</content></body><body><type>Expression</type><content>printall (&amp; ret1)</content></body><body><type>VariableAssignment</type><content>let test2 : [i32 ; 5] = [1 , 2 , 3 , 4 , 5] ;</content></body><body><type>VariableAssignment</type><content>let ret2 = aggregate (&amp; test2) ;</content></body><body><type>Expression</type><content>printall (&amp; test2)</content></body><body><type>Expression</type><content>printall (&amp; ret2)</content></body></functions></root>