<root>
	<functions>
		<visibility>pub</visibility>
		<functionname>aggregate</functionname>
		<parameters>
			<name>list</name>
			<type>&amp;[i32]</type>
		</parameters>
		<return_type>Vec&lt;i32&gt;</return_type>
		<body>
			<type>VariableAssignment</type>
			<content>let len = list . len () ;</content>
		</body>
		<body>
			<type>VariableAssignment</type>
			<content>let mut ret = vec ! [0 ; (len/2 )] ;</content>
		</body>
		<body>
			<type>VariableAssignment</type>
			<content>let mut j = 0 ;</content>
		</body>
		<body>
			<type>Expression</type>
			<content>for i in 0 .. len { if i % 2 == 1 { ret [i / 2] += list [i] ; } else { ret [i / 2] = list [i] ; } }</content>
		</body>
		<body>
			<type>Expression</type>
			<content>return ret</content>
		</body>
	</functions>
	<functions>
		<visibility>private</visibility>
		<functionname>printall</functionname>
		<parameters>
			<name>list</name>
			<type>&amp;[i32]</type>
		</parameters>
		<return_type />
		<body>
			<type>Expression</type>
			<content>print ! ("[")</content>
		</body>
		<body>
			<type>Expression</type>
			<content>for i in 0 .. list . len () { print ! ("{}, " , list [i]) ; }</content>
		</body>
		<body>
			<type>Expression</type>
			<content>println ! ("]")</content>
		</body>
	</functions>
	<functions>
		<visibility>private</visibility>
		<functionname>main</functionname>
		<return_type />
		<body>
			<type>VariableAssignment</type>
			<content>let test1 : [i32 ; 6] = [1 , 2 , 3 , 4 , 5 , 6] ;</content>
		</body>
		<body>
			<type>VariableAssignment</type>
			<content>let ret1 = aggregate (&amp; test1) ;</content>
		</body>
		<body>
			<type>Expression</type>
			<content>printall (&amp; test1)</content>
		</body>
		<content>let len = list . len () ;</content>
		<body>
			<functionname>aggregate</functionname>
			<content>let test2 : [i32 ; 5] = [1 , 2 , 3 , 4 , 5] ;</content>
		</body>
		<body>
			<type>VariableAssignment</type>
			<content>let ret2 = aggregate (&amp; test2) ;</content>
		</body>
		<body>
			<type>Expression</type>
			<content>printall (&amp; test2)</content>
		</body>
		<body>
			<type>Expression</type>
			<content>printall (&amp; ret2)</content>
		</body>
	</functions>
</root>